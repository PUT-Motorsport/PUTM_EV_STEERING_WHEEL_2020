
kiera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005540  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080056fc  080056fc  000156fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800575c  0800575c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800575c  0800575c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800575c  0800575c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000000c  08005770  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08005770  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018034  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bcc  00000000  00000000  00038070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  0003ac40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  0003c000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030684  00000000  00000000  0003d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a13  00000000  00000000  0006d92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129fae  00000000  00000000  0008233f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ac2ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054b0  00000000  00000000  001ac340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080056e4 	.word	0x080056e4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080056e4 	.word	0x080056e4

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b08a      	sub	sp, #40	; 0x28
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000202:	f000 ff7c 	bl	80010fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f86b 	bl	80002e0 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800020a:	f000 f8be 	bl	800038a <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020e:	f000 fa5d 	bl	80006cc <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 8000212:	f000 f9e1 	bl	80005d8 <_ZL12MX_CAN1_Initv>
  MX_DMA_Init();
 8000216:	f000 fa1b 	bl	8000650 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 800021a:	f000 f8e7 	bl	80003ec <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 800021e:	f000 f96b 	bl	80004f8 <_ZL12MX_ADC2_Initv>
  /* USER CODE BEGIN 2 */
  //  HAL_ADC_Start_IT(&hadc1);

  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000226:	2300      	movs	r3, #0
 8000228:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800022a:	2301      	movs	r3, #1
 800022c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800022e:	2300      	movs	r3, #0
 8000230:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000232:	2300      	movs	r3, #0
 8000234:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000236:	2300      	movs	r3, #0
 8000238:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800023e:	2300      	movs	r3, #0
 8000240:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000242:	2301      	movs	r3, #1
 8000244:	623b      	str	r3, [r7, #32]


	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000246:	463b      	mov	r3, r7
 8000248:	4619      	mov	r1, r3
 800024a:	4821      	ldr	r0, [pc, #132]	; (80002d0 <main+0xd4>)
 800024c:	f002 fa9b 	bl	8002786 <HAL_CAN_ConfigFilter>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	bf14      	ite	ne
 8000256:	2301      	movne	r3, #1
 8000258:	2300      	moveq	r3, #0
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <main+0x68>
		Error_Handler();
 8000260:	f000 fccc 	bl	8000bfc <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000264:	481a      	ldr	r0, [pc, #104]	; (80002d0 <main+0xd4>)
 8000266:	f002 fb58 	bl	800291a <HAL_CAN_Start>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	bf14      	ite	ne
 8000270:	2301      	movne	r3, #1
 8000272:	2300      	moveq	r3, #0
 8000274:	b2db      	uxtb	r3, r3
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <main+0x82>
		Error_Handler();
 800027a:	f000 fcbf 	bl	8000bfc <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 800027e:	2103      	movs	r1, #3
 8000280:	4813      	ldr	r0, [pc, #76]	; (80002d0 <main+0xd4>)
 8000282:	f002 fc5e 	bl	8002b42 <HAL_CAN_ActivateNotification>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	bf14      	ite	ne
 800028c:	2301      	movne	r3, #1
 800028e:	2300      	moveq	r3, #0
 8000290:	b2db      	uxtb	r3, r3
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <main+0x9e>
		Error_Handler();
 8000296:	f000 fcb1 	bl	8000bfc <Error_Handler>
	}


  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)left_adc_reading, 10);
 800029a:	220a      	movs	r2, #10
 800029c:	490d      	ldr	r1, [pc, #52]	; (80002d4 <main+0xd8>)
 800029e:	480e      	ldr	r0, [pc, #56]	; (80002d8 <main+0xdc>)
 80002a0:	f001 fac4 	bl	800182c <HAL_ADC_Start_DMA>


  HAL_CAN_Start(&hcan1);
 80002a4:	480a      	ldr	r0, [pc, #40]	; (80002d0 <main+0xd4>)
 80002a6:	f002 fb38 	bl	800291a <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80002aa:	2102      	movs	r1, #2
 80002ac:	4808      	ldr	r0, [pc, #32]	; (80002d0 <main+0xd4>)
 80002ae:	f002 fc48 	bl	8002b42 <HAL_CAN_ActivateNotification>
  //  HAL_ADC_Start_IT(&hadc2);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)right_adc_reading, 10);
 80002b2:	220a      	movs	r2, #10
 80002b4:	4909      	ldr	r1, [pc, #36]	; (80002dc <main+0xe0>)
 80002b6:	4808      	ldr	r0, [pc, #32]	; (80002d8 <main+0xdc>)
 80002b8:	f001 fab8 	bl	800182c <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  toggle diode
	  choose_left_scroll_state();
 80002bc:	f000 fba8 	bl	8000a10 <choose_left_scroll_state>
	  wait_for_second_button();
 80002c0:	f000 fb46 	bl	8000950 <wait_for_second_button>
	  reset_flags();
 80002c4:	f000 fc6c 	bl	8000ba0 <reset_flags>
	  send_example();
 80002c8:	f000 fb12 	bl	80008f0 <send_example>
	  choose_left_scroll_state();
 80002cc:	e7f6      	b.n	80002bc <main+0xc0>
 80002ce:	bf00      	nop
 80002d0:	200001b8 	.word	0x200001b8
 80002d4:	200001e0 	.word	0x200001e0
 80002d8:	20000028 	.word	0x20000028
 80002dc:	200001f4 	.word	0x200001f4

080002e0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b098      	sub	sp, #96	; 0x60
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0318 	add.w	r3, r7, #24
 80002ea:	2248      	movs	r2, #72	; 0x48
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f005 f9f0 	bl	80056d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000302:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000306:	f003 f993 	bl	8003630 <HAL_PWREx_ControlVoltageScaling>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	bf14      	ite	ne
 8000310:	2301      	movne	r3, #1
 8000312:	2300      	moveq	r3, #0
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800031a:	f000 fc6f 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800031e:	2310      	movs	r3, #16
 8000320:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000322:	2301      	movs	r3, #1
 8000324:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 800032a:	2380      	movs	r3, #128	; 0x80
 800032c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800032e:	2300      	movs	r3, #0
 8000330:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	4618      	mov	r0, r3
 8000338:	f003 fa1e 	bl	8003778 <HAL_RCC_OscConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	bf14      	ite	ne
 8000342:	2301      	movne	r3, #1
 8000344:	2300      	moveq	r3, #0
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 800034c:	f000 fc56 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	230f      	movs	r3, #15
 8000352:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000354:	2300      	movs	r3, #0
 8000356:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2100      	movs	r1, #0
 8000368:	4618      	mov	r0, r3
 800036a:	f003 fe81 	bl	8004070 <HAL_RCC_ClockConfig>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	bf14      	ite	ne
 8000374:	2301      	movne	r3, #1
 8000376:	2300      	moveq	r3, #0
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800037e:	f000 fc3d 	bl	8000bfc <Error_Handler>
  }
}
 8000382:	bf00      	nop
 8000384:	3760      	adds	r7, #96	; 0x60
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}

0800038a <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800038a:	b580      	push	{r7, lr}
 800038c:	b0a6      	sub	sp, #152	; 0x98
 800038e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000390:	463b      	mov	r3, r7
 8000392:	2298      	movs	r2, #152	; 0x98
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f005 f99c 	bl	80056d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800039c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80003a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80003a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80003aa:	2301      	movs	r3, #1
 80003ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80003ae:	2302      	movs	r3, #2
 80003b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80003b2:	2308      	movs	r3, #8
 80003b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80003b6:	2302      	movs	r3, #2
 80003b8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003ba:	2302      	movs	r3, #2
 80003bc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003be:	2302      	movs	r3, #2
 80003c0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80003c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80003c6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c8:	463b      	mov	r3, r7
 80003ca:	4618      	mov	r0, r3
 80003cc:	f004 f92a 	bl	8004624 <HAL_RCCEx_PeriphCLKConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	bf14      	ite	ne
 80003d6:	2301      	movne	r3, #1
 80003d8:	2300      	moveq	r3, #0
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <_Z24PeriphCommonClock_Configv+0x5a>
  {
    Error_Handler();
 80003e0:	f000 fc0c 	bl	8000bfc <Error_Handler>
  }
}
 80003e4:	bf00      	nop
 80003e6:	3798      	adds	r7, #152	; 0x98
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08a      	sub	sp, #40	; 0x28
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003f2:	f107 031c 	add.w	r3, r7, #28
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]
 800040c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800040e:	4b37      	ldr	r3, [pc, #220]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 8000410:	4a37      	ldr	r2, [pc, #220]	; (80004f0 <_ZL12MX_ADC1_Initv+0x104>)
 8000412:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000414:	4b35      	ldr	r3, [pc, #212]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 8000416:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 800041a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800041c:	4b33      	ldr	r3, [pc, #204]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000422:	4b32      	ldr	r3, [pc, #200]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 8000424:	2200      	movs	r2, #0
 8000426:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000428:	4b30      	ldr	r3, [pc, #192]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800042e:	4b2f      	ldr	r3, [pc, #188]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 8000430:	2204      	movs	r2, #4
 8000432:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000434:	4b2d      	ldr	r3, [pc, #180]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 8000436:	2200      	movs	r2, #0
 8000438:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800043a:	4b2c      	ldr	r3, [pc, #176]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 800043c:	2201      	movs	r2, #1
 800043e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000440:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 8000442:	2201      	movs	r2, #1
 8000444:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000446:	4b29      	ldr	r3, [pc, #164]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 8000448:	2200      	movs	r2, #0
 800044a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800044e:	4b27      	ldr	r3, [pc, #156]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 8000450:	2200      	movs	r2, #0
 8000452:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000454:	4b25      	ldr	r3, [pc, #148]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 8000456:	2200      	movs	r2, #0
 8000458:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800045a:	4b24      	ldr	r3, [pc, #144]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 800045c:	2201      	movs	r2, #1
 800045e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000462:	4b22      	ldr	r3, [pc, #136]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 8000464:	2200      	movs	r2, #0
 8000466:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000468:	4b20      	ldr	r3, [pc, #128]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 800046a:	2200      	movs	r2, #0
 800046c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000470:	481e      	ldr	r0, [pc, #120]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 8000472:	f001 f889 	bl	8001588 <HAL_ADC_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	bf14      	ite	ne
 800047c:	2301      	movne	r3, #1
 800047e:	2300      	moveq	r3, #0
 8000480:	b2db      	uxtb	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <_ZL12MX_ADC1_Initv+0x9e>
  {
    Error_Handler();
 8000486:	f000 fbb9 	bl	8000bfc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800048e:	f107 031c 	add.w	r3, r7, #28
 8000492:	4619      	mov	r1, r3
 8000494:	4815      	ldr	r0, [pc, #84]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 8000496:	f001 ffd7 	bl	8002448 <HAL_ADCEx_MultiModeConfigChannel>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	bf14      	ite	ne
 80004a0:	2301      	movne	r3, #1
 80004a2:	2300      	moveq	r3, #0
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 80004aa:	f000 fba7 	bl	8000bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004ae:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <_ZL12MX_ADC1_Initv+0x108>)
 80004b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004b2:	2306      	movs	r3, #6
 80004b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80004b6:	2307      	movs	r3, #7
 80004b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004ba:	237f      	movs	r3, #127	; 0x7f
 80004bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004be:	2304      	movs	r3, #4
 80004c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4619      	mov	r1, r3
 80004ca:	4808      	ldr	r0, [pc, #32]	; (80004ec <_ZL12MX_ADC1_Initv+0x100>)
 80004cc:	f001 fa80 	bl	80019d0 <HAL_ADC_ConfigChannel>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	bf14      	ite	ne
 80004d6:	2301      	movne	r3, #1
 80004d8:	2300      	moveq	r3, #0
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <_ZL12MX_ADC1_Initv+0xf8>
  {
    Error_Handler();
 80004e0:	f000 fb8c 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004e4:	bf00      	nop
 80004e6:	3728      	adds	r7, #40	; 0x28
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000028 	.word	0x20000028
 80004f0:	50040000 	.word	0x50040000
 80004f4:	19200040 	.word	0x19200040

080004f8 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fe:	463b      	mov	r3, r7
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
 800050c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800050e:	4b2e      	ldr	r3, [pc, #184]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 8000510:	4a2e      	ldr	r2, [pc, #184]	; (80005cc <_ZL12MX_ADC2_Initv+0xd4>)
 8000512:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000514:	4b2c      	ldr	r3, [pc, #176]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 8000516:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 800051a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800051c:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000522:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000528:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800052e:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 8000530:	2204      	movs	r2, #4
 8000532:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000534:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 8000536:	2200      	movs	r2, #0
 8000538:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800053a:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 800053c:	2201      	movs	r2, #1
 800053e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000540:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 8000542:	2201      	movs	r2, #1
 8000544:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800054e:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 8000550:	2200      	movs	r2, #0
 8000552:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000554:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 8000556:	2200      	movs	r2, #0
 8000558:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 800055c:	2201      	movs	r2, #1
 800055e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000562:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 8000564:	2200      	movs	r2, #0
 8000566:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 800056a:	2200      	movs	r2, #0
 800056c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000570:	4815      	ldr	r0, [pc, #84]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 8000572:	f001 f809 	bl	8001588 <HAL_ADC_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	bf14      	ite	ne
 800057c:	2301      	movne	r3, #1
 800057e:	2300      	moveq	r3, #0
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <_ZL12MX_ADC2_Initv+0x92>
  {
    Error_Handler();
 8000586:	f000 fb39 	bl	8000bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <_ZL12MX_ADC2_Initv+0xd8>)
 800058c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800058e:	2306      	movs	r3, #6
 8000590:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <_ZL12MX_ADC2_Initv+0xdc>)
 8000598:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800059a:	2304      	movs	r3, #4
 800059c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	4619      	mov	r1, r3
 80005a6:	4808      	ldr	r0, [pc, #32]	; (80005c8 <_ZL12MX_ADC2_Initv+0xd0>)
 80005a8:	f001 fa12 	bl	80019d0 <HAL_ADC_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	bf14      	ite	ne
 80005b2:	2301      	movne	r3, #1
 80005b4:	2300      	moveq	r3, #0
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <_ZL12MX_ADC2_Initv+0xc8>
  {
    Error_Handler();
 80005bc:	f000 fb1e 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000090 	.word	0x20000090
 80005cc:	50040100 	.word	0x50040100
 80005d0:	1d500080 	.word	0x1d500080
 80005d4:	407f0000 	.word	0x407f0000

080005d8 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <_ZL12MX_CAN1_Initv+0x70>)
 80005de:	4a1b      	ldr	r2, [pc, #108]	; (800064c <_ZL12MX_CAN1_Initv+0x74>)
 80005e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <_ZL12MX_CAN1_Initv+0x70>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <_ZL12MX_CAN1_Initv+0x70>)
 80005ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ee:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <_ZL12MX_CAN1_Initv+0x70>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <_ZL12MX_CAN1_Initv+0x70>)
 80005f8:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80005fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <_ZL12MX_CAN1_Initv+0x70>)
 8000600:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000604:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <_ZL12MX_CAN1_Initv+0x70>)
 8000608:	2200      	movs	r2, #0
 800060a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <_ZL12MX_CAN1_Initv+0x70>)
 800060e:	2200      	movs	r2, #0
 8000610:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <_ZL12MX_CAN1_Initv+0x70>)
 8000614:	2200      	movs	r2, #0
 8000616:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <_ZL12MX_CAN1_Initv+0x70>)
 800061a:	2201      	movs	r2, #1
 800061c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <_ZL12MX_CAN1_Initv+0x70>)
 8000620:	2200      	movs	r2, #0
 8000622:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <_ZL12MX_CAN1_Initv+0x70>)
 8000626:	2200      	movs	r2, #0
 8000628:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800062a:	4807      	ldr	r0, [pc, #28]	; (8000648 <_ZL12MX_CAN1_Initv+0x70>)
 800062c:	f001 ffb0 	bl	8002590 <HAL_CAN_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	bf14      	ite	ne
 8000636:	2301      	movne	r3, #1
 8000638:	2300      	moveq	r3, #0
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <_ZL12MX_CAN1_Initv+0x6c>
  {
    Error_Handler();
 8000640:	f000 fadc 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200001b8 	.word	0x200001b8
 800064c:	40006400 	.word	0x40006400

08000650 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <_ZL11MX_DMA_Initv+0x78>)
 8000658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800065a:	4a1b      	ldr	r2, [pc, #108]	; (80006c8 <_ZL11MX_DMA_Initv+0x78>)
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	6493      	str	r3, [r2, #72]	; 0x48
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <_ZL11MX_DMA_Initv+0x78>)
 8000664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000666:	f003 0304 	and.w	r3, r3, #4
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <_ZL11MX_DMA_Initv+0x78>)
 8000670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <_ZL11MX_DMA_Initv+0x78>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6493      	str	r3, [r2, #72]	; 0x48
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <_ZL11MX_DMA_Initv+0x78>)
 800067c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <_ZL11MX_DMA_Initv+0x78>)
 8000688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <_ZL11MX_DMA_Initv+0x78>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	6493      	str	r3, [r2, #72]	; 0x48
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <_ZL11MX_DMA_Initv+0x78>)
 8000694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	2010      	movs	r0, #16
 80006a4:	f002 fb2c 	bl	8002d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006a8:	2010      	movs	r0, #16
 80006aa:	f002 fb45 	bl	8002d38 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2045      	movs	r0, #69	; 0x45
 80006b4:	f002 fb24 	bl	8002d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80006b8:	2045      	movs	r0, #69	; 0x45
 80006ba:	f002 fb3d 	bl	8002d38 <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	4b56      	ldr	r3, [pc, #344]	; (800083c <_ZL12MX_GPIO_Initv+0x170>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a55      	ldr	r2, [pc, #340]	; (800083c <_ZL12MX_GPIO_Initv+0x170>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b53      	ldr	r3, [pc, #332]	; (800083c <_ZL12MX_GPIO_Initv+0x170>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b50      	ldr	r3, [pc, #320]	; (800083c <_ZL12MX_GPIO_Initv+0x170>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a4f      	ldr	r2, [pc, #316]	; (800083c <_ZL12MX_GPIO_Initv+0x170>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b4d      	ldr	r3, [pc, #308]	; (800083c <_ZL12MX_GPIO_Initv+0x170>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b4a      	ldr	r3, [pc, #296]	; (800083c <_ZL12MX_GPIO_Initv+0x170>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a49      	ldr	r2, [pc, #292]	; (800083c <_ZL12MX_GPIO_Initv+0x170>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b47      	ldr	r3, [pc, #284]	; (800083c <_ZL12MX_GPIO_Initv+0x170>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	4b44      	ldr	r3, [pc, #272]	; (800083c <_ZL12MX_GPIO_Initv+0x170>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a43      	ldr	r2, [pc, #268]	; (800083c <_ZL12MX_GPIO_Initv+0x170>)
 8000730:	f043 0308 	orr.w	r3, r3, #8
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b41      	ldr	r3, [pc, #260]	; (800083c <_ZL12MX_GPIO_Initv+0x170>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b3e      	ldr	r3, [pc, #248]	; (800083c <_ZL12MX_GPIO_Initv+0x170>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a3d      	ldr	r2, [pc, #244]	; (800083c <_ZL12MX_GPIO_Initv+0x170>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b3b      	ldr	r3, [pc, #236]	; (800083c <_ZL12MX_GPIO_Initv+0x170>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	21f0      	movs	r1, #240	; 0xf0
 800075e:	4838      	ldr	r0, [pc, #224]	; (8000840 <_ZL12MX_GPIO_Initv+0x174>)
 8000760:	f002 fefc 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000764:	23f0      	movs	r3, #240	; 0xf0
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000774:	2305      	movs	r3, #5
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000782:	f002 fd59 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 SW4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|SW4_Pin;
 8000786:	f44f 6303 	mov.w	r3, #2096	; 0x830
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4829      	ldr	r0, [pc, #164]	; (8000844 <_ZL12MX_GPIO_Initv+0x178>)
 800079e:	f002 fd4b 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW3_Pin SW5_Pin */
  GPIO_InitStruct.Pin = SW3_Pin|SW5_Pin;
 80007a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	4822      	ldr	r0, [pc, #136]	; (8000844 <_ZL12MX_GPIO_Initv+0x178>)
 80007ba:	f002 fd3d 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW6_Pin */
  GPIO_InitStruct.Pin = SW6_Pin;
 80007be:	2304      	movs	r3, #4
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW6_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	481d      	ldr	r0, [pc, #116]	; (8000848 <_ZL12MX_GPIO_Initv+0x17c>)
 80007d4:	f002 fd30 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pins : ControlLed4_Pin ControlLed3_Pin ControlLed2_Pin ControlLed1_Pin */
  GPIO_InitStruct.Pin = ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin;
 80007d8:	23f0      	movs	r3, #240	; 0xf0
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4814      	ldr	r0, [pc, #80]	; (8000840 <_ZL12MX_GPIO_Initv+0x174>)
 80007f0:	f002 fd22 	bl	8003238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2008      	movs	r0, #8
 80007fa:	f002 fa81 	bl	8002d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007fe:	2008      	movs	r0, #8
 8000800:	f002 fa9a 	bl	8002d38 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	200a      	movs	r0, #10
 800080a:	f002 fa79 	bl	8002d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800080e:	200a      	movs	r0, #10
 8000810:	f002 fa92 	bl	8002d38 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2017      	movs	r0, #23
 800081a:	f002 fa71 	bl	8002d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800081e:	2017      	movs	r0, #23
 8000820:	f002 fa8a 	bl	8002d38 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2028      	movs	r0, #40	; 0x28
 800082a:	f002 fa69 	bl	8002d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800082e:	2028      	movs	r0, #40	; 0x28
 8000830:	f002 fa82 	bl	8002d38 <HAL_NVIC_EnableIRQ>

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000
 8000840:	48000400 	.word	0x48000400
 8000844:	48000800 	.word	0x48000800
 8000848:	48000c00 	.word	0x48000c00

0800084c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]
	timer = HAL_GetTick();
 8000856:	f000 fc7f 	bl	8001158 <HAL_GetTick>
 800085a:	4603      	mov	r3, r0
 800085c:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <HAL_GPIO_EXTI_Callback+0x58>)
 800085e:	6013      	str	r3, [r2, #0]

	if (GPIO_Pin == SW3_Pin)
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000866:	d103      	bne.n	8000870 <HAL_GPIO_EXTI_Callback+0x24>
	{
		sw3_pressed = 1;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_GPIO_EXTI_Callback+0x5c>)
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
		sw5_pressed = 1;
	} else if (GPIO_Pin == SW6_Pin)
	{
		sw6_pressed = 1;
	}
}
 800086e:	e015      	b.n	800089c <HAL_GPIO_EXTI_Callback+0x50>
	} else if (GPIO_Pin == SW4_Pin)
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000876:	d103      	bne.n	8000880 <HAL_GPIO_EXTI_Callback+0x34>
		sw4_pressed = 1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_GPIO_EXTI_Callback+0x60>)
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
}
 800087e:	e00d      	b.n	800089c <HAL_GPIO_EXTI_Callback+0x50>
	} else if (GPIO_Pin == SW5_Pin)
 8000880:	88fb      	ldrh	r3, [r7, #6]
 8000882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000886:	d103      	bne.n	8000890 <HAL_GPIO_EXTI_Callback+0x44>
		sw5_pressed = 1;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x64>)
 800088a:	2201      	movs	r2, #1
 800088c:	701a      	strb	r2, [r3, #0]
}
 800088e:	e005      	b.n	800089c <HAL_GPIO_EXTI_Callback+0x50>
	} else if (GPIO_Pin == SW6_Pin)
 8000890:	88fb      	ldrh	r3, [r7, #6]
 8000892:	2b04      	cmp	r3, #4
 8000894:	d102      	bne.n	800089c <HAL_GPIO_EXTI_Callback+0x50>
		sw6_pressed = 1;
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000208 	.word	0x20000208
 80008a8:	20000210 	.word	0x20000210
 80008ac:	20000211 	.word	0x20000211
 80008b0:	20000212 	.word	0x20000212
 80008b4:	20000213 	.word	0x20000213

080008b8 <_ZN8PUTM_CAN14Can_tx_messageI9Apps_mainEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
template <typename T> class Can_tx_message {
public:
  CAN_TxHeaderTypeDef header;
  uint8_t buff[max_dlc_size];

  constexpr Can_tx_message(const T &data,
 80008b8:	b5b0      	push	{r4, r5, r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
                           const CAN_TxHeaderTypeDef &message_header)
      : header{message_header} {
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4614      	mov	r4, r2
 80008ca:	461d      	mov	r5, r3
 80008cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008d4:	e884 0003 	stmia.w	r4, {r0, r1}
    static_assert(std::is_standard_layout<T>(), "Object must by C like struct");
    static_assert(std::is_trivially_copyable<T>(),
                  "Object must by C like struct");
    static_assert(sizeof(T) <= max_dlc_size,
                  "Object size must be less than 8bytes");
    std::memcpy(this->buff, &data, sizeof(T));
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	3318      	adds	r3, #24
 80008dc:	2205      	movs	r2, #5
 80008de:	68b9      	ldr	r1, [r7, #8]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f004 fee9 	bl	80056b8 <memcpy>
  }
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	4618      	mov	r0, r3
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bdb0      	pop	{r4, r5, r7, pc}

080008f0 <send_example>:

void send_example()
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
  //  Always initialize an object
  // https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-always
  constexpr Apps_main apps_test{
 80008f6:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80008fa:	843b      	strh	r3, [r7, #32]
 80008fc:	2300      	movs	r3, #0
 80008fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000902:	2300      	movs	r3, #0
 8000904:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000908:	2300      	movs	r3, #0
 800090a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    .counter = 0,
    .position_diff = 0,
    .device_state = Apps_states::Normal_operation,
  };

  auto apps_main_frame = PUTM_CAN::Can_tx_message(apps_test, can_tx_header_APPS_MAIN);
 800090e:	f107 0120 	add.w	r1, r7, #32
 8000912:	463b      	mov	r3, r7
 8000914:	4a0c      	ldr	r2, [pc, #48]	; (8000948 <send_example+0x58>)
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ffce 	bl	80008b8 <_ZN8PUTM_CAN14Can_tx_messageI9Apps_mainEC1ERKS1_RK19CAN_TxHeaderTypeDef>

  auto status = apps_main_frame.send(hcan1);
 800091c:	463b      	mov	r3, r7
 800091e:	490b      	ldr	r1, [pc, #44]	; (800094c <send_example+0x5c>)
 8000920:	4618      	mov	r0, r3
 8000922:	f000 f971 	bl	8000c08 <_ZN8PUTM_CAN14Can_tx_messageI9Apps_mainE4sendER19__CAN_HandleTypeDef>
 8000926:	4603      	mov	r3, r0
 8000928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (HAL_StatusTypeDef::HAL_OK != status)
 800092c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <send_example+0x48>
  {
    Error_Handler();
 8000934:	f000 f962 	bl	8000bfc <Error_Handler>
  };

  HAL_Delay(100);
 8000938:	2064      	movs	r0, #100	; 0x64
 800093a:	f000 fc19 	bl	8001170 <HAL_Delay>

}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	; 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	080056fc 	.word	0x080056fc
 800094c:	200001b8 	.word	0x200001b8

08000950 <wait_for_second_button>:

void wait_for_second_button()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000954:	2032      	movs	r0, #50	; 0x32
 8000956:	f000 fc0b 	bl	8001170 <HAL_Delay>

	if (sw3_pressed && sw4_pressed)
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <wait_for_second_button+0xac>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <wait_for_second_button+0x1a>
 8000962:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <wait_for_second_button+0xb0>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d146      	bne.n	80009f8 <wait_for_second_button+0xa8>
	{
		//		can
	} else if (sw3_pressed && sw5_pressed)
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <wait_for_second_button+0xac>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d003      	beq.n	800097a <wait_for_second_button+0x2a>
 8000972:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <wait_for_second_button+0xb4>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d13e      	bne.n	80009f8 <wait_for_second_button+0xa8>
	{
		//		can
	} else if (sw3_pressed && sw6_pressed)
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <wait_for_second_button+0xac>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d003      	beq.n	800098a <wait_for_second_button+0x3a>
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <wait_for_second_button+0xb8>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d136      	bne.n	80009f8 <wait_for_second_button+0xa8>
	{
		//		can
	} else if (sw4_pressed && sw5_pressed)
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <wait_for_second_button+0xb0>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d003      	beq.n	800099a <wait_for_second_button+0x4a>
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <wait_for_second_button+0xb4>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d12e      	bne.n	80009f8 <wait_for_second_button+0xa8>
	{
		//		can
	} else if (sw4_pressed && sw6_pressed)
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <wait_for_second_button+0xb0>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d003      	beq.n	80009aa <wait_for_second_button+0x5a>
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <wait_for_second_button+0xb8>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d126      	bne.n	80009f8 <wait_for_second_button+0xa8>
	{
		//		can
	} else if (sw5_pressed && sw6_pressed)
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <wait_for_second_button+0xb4>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d008      	beq.n	80009c4 <wait_for_second_button+0x74>
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <wait_for_second_button+0xb8>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d004      	beq.n	80009c4 <wait_for_second_button+0x74>
	{
		HAL_GPIO_TogglePin(ControlLed3_GPIO_Port, ControlLed3_Pin);
 80009ba:	2120      	movs	r1, #32
 80009bc:	4813      	ldr	r0, [pc, #76]	; (8000a0c <wait_for_second_button+0xbc>)
 80009be:	f002 fde5 	bl	800358c <HAL_GPIO_TogglePin>
 80009c2:	e019      	b.n	80009f8 <wait_for_second_button+0xa8>
	} else if (sw3_pressed) {
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <wait_for_second_button+0xac>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d115      	bne.n	80009f8 <wait_for_second_button+0xa8>
		//		can
	} else if (sw4_pressed) {
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <wait_for_second_button+0xb0>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d111      	bne.n	80009f8 <wait_for_second_button+0xa8>
		//		can
	} else if (sw5_pressed) {
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <wait_for_second_button+0xb4>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d004      	beq.n	80009e6 <wait_for_second_button+0x96>
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	480b      	ldr	r0, [pc, #44]	; (8000a0c <wait_for_second_button+0xbc>)
 80009e0:	f002 fdd4 	bl	800358c <HAL_GPIO_TogglePin>
	} else if (sw6_pressed) {
		HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
	}


}
 80009e4:	e008      	b.n	80009f8 <wait_for_second_button+0xa8>
	} else if (sw6_pressed) {
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <wait_for_second_button+0xb8>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d004      	beq.n	80009f8 <wait_for_second_button+0xa8>
		HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
 80009ee:	2140      	movs	r1, #64	; 0x40
 80009f0:	4806      	ldr	r0, [pc, #24]	; (8000a0c <wait_for_second_button+0xbc>)
 80009f2:	f002 fdcb 	bl	800358c <HAL_GPIO_TogglePin>
}
 80009f6:	e7ff      	b.n	80009f8 <wait_for_second_button+0xa8>
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000210 	.word	0x20000210
 8000a00:	20000211 	.word	0x20000211
 8000a04:	20000212 	.word	0x20000212
 8000a08:	20000213 	.word	0x20000213
 8000a0c:	48000400 	.word	0x48000400

08000a10 <choose_left_scroll_state>:

void choose_left_scroll_state()
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
	float average_adc = 0;
 8000a16:	f04f 0300 	mov.w	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]

	//	  calculate average adc
	for (int i = 0; i < 10; i++) {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	2b09      	cmp	r3, #9
 8000a24:	dc11      	bgt.n	8000a4a <choose_left_scroll_state+0x3a>
		average_adc = average_adc + left_adc_reading[i];
 8000a26:	4a53      	ldr	r2, [pc, #332]	; (8000b74 <choose_left_scroll_state+0x164>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a2e:	ee07 3a90 	vmov	s15, r3
 8000a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a36:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a3e:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < 10; i++) {
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	3301      	adds	r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	e7ea      	b.n	8000a20 <choose_left_scroll_state+0x10>
	}

	average_adc = average_adc / 10;
 8000a4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a4e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000a52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a56:	edc7 7a03 	vstr	s15, [r7, #12]

	int lss = 0; // Left Scroll State
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]

	if (1110 < average_adc && average_adc < 1115)
 8000a5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a62:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8000b78 <choose_left_scroll_state+0x168>
 8000a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a6e:	dd0b      	ble.n	8000a88 <choose_left_scroll_state+0x78>
 8000a70:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a74:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000b7c <choose_left_scroll_state+0x16c>
 8000a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a80:	d502      	bpl.n	8000a88 <choose_left_scroll_state+0x78>
	{
		lss = 1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	e03d      	b.n	8000b04 <choose_left_scroll_state+0xf4>
	} else if (3129 < average_adc && average_adc < 3133)
 8000a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a8c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000b80 <choose_left_scroll_state+0x170>
 8000a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a98:	dd0b      	ble.n	8000ab2 <choose_left_scroll_state+0xa2>
 8000a9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a9e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8000b84 <choose_left_scroll_state+0x174>
 8000aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aaa:	d502      	bpl.n	8000ab2 <choose_left_scroll_state+0xa2>
	{
		lss = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	e028      	b.n	8000b04 <choose_left_scroll_state+0xf4>
	} else if (3715 < average_adc && average_adc < 3721)
 8000ab2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ab6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8000b88 <choose_left_scroll_state+0x178>
 8000aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac2:	dd0b      	ble.n	8000adc <choose_left_scroll_state+0xcc>
 8000ac4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ac8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000b8c <choose_left_scroll_state+0x17c>
 8000acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad4:	d502      	bpl.n	8000adc <choose_left_scroll_state+0xcc>
	{
		lss = 3;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	e013      	b.n	8000b04 <choose_left_scroll_state+0xf4>
	} else if (3970 < average_adc && average_adc < 3975)
 8000adc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ae0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000b90 <choose_left_scroll_state+0x180>
 8000ae4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aec:	dd0a      	ble.n	8000b04 <choose_left_scroll_state+0xf4>
 8000aee:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000b94 <choose_left_scroll_state+0x184>
 8000af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afe:	d501      	bpl.n	8000b04 <choose_left_scroll_state+0xf4>
	{
		lss = 4;
 8000b00:	2304      	movs	r3, #4
 8000b02:	607b      	str	r3, [r7, #4]
	}


	if (lss != left_last_state)
 8000b04:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <choose_left_scroll_state+0x188>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d02e      	beq.n	8000b6c <choose_left_scroll_state+0x15c>
	{
		switch (lss)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	d82a      	bhi.n	8000b6c <choose_left_scroll_state+0x15c>
 8000b16:	a201      	add	r2, pc, #4	; (adr r2, 8000b1c <choose_left_scroll_state+0x10c>)
 8000b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1c:	08000b2d 	.word	0x08000b2d
 8000b20:	08000b3d 	.word	0x08000b3d
 8000b24:	08000b4d 	.word	0x08000b4d
 8000b28:	08000b5d 	.word	0x08000b5d
		{
		case 1:
			HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	481b      	ldr	r0, [pc, #108]	; (8000b9c <choose_left_scroll_state+0x18c>)
 8000b30:	f002 fd2c 	bl	800358c <HAL_GPIO_TogglePin>
//			HAL_Delay(200);
			left_last_state = lss;
 8000b34:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <choose_left_scroll_state+0x188>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
			break;
 8000b3a:	e017      	b.n	8000b6c <choose_left_scroll_state+0x15c>
		case 2:
			HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
 8000b3c:	2140      	movs	r1, #64	; 0x40
 8000b3e:	4817      	ldr	r0, [pc, #92]	; (8000b9c <choose_left_scroll_state+0x18c>)
 8000b40:	f002 fd24 	bl	800358c <HAL_GPIO_TogglePin>
//			HAL_Delay(200);
			left_last_state = lss;
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <choose_left_scroll_state+0x188>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6013      	str	r3, [r2, #0]
			break;
 8000b4a:	e00f      	b.n	8000b6c <choose_left_scroll_state+0x15c>
		case 3:
			HAL_GPIO_TogglePin(ControlLed3_GPIO_Port, ControlLed3_Pin);
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	4813      	ldr	r0, [pc, #76]	; (8000b9c <choose_left_scroll_state+0x18c>)
 8000b50:	f002 fd1c 	bl	800358c <HAL_GPIO_TogglePin>
//			HAL_Delay(200);
			left_last_state = lss;
 8000b54:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <choose_left_scroll_state+0x188>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
			break;
 8000b5a:	e007      	b.n	8000b6c <choose_left_scroll_state+0x15c>
		case 4:
			HAL_GPIO_TogglePin(ControlLed4_GPIO_Port, ControlLed4_Pin);
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	480f      	ldr	r0, [pc, #60]	; (8000b9c <choose_left_scroll_state+0x18c>)
 8000b60:	f002 fd14 	bl	800358c <HAL_GPIO_TogglePin>
//			HAL_Delay(200);
			left_last_state = lss;
 8000b64:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <choose_left_scroll_state+0x188>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
			break;
 8000b6a:	bf00      	nop
		}
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200001e0 	.word	0x200001e0
 8000b78:	448ac000 	.word	0x448ac000
 8000b7c:	448b6000 	.word	0x448b6000
 8000b80:	45439000 	.word	0x45439000
 8000b84:	4543d000 	.word	0x4543d000
 8000b88:	45683000 	.word	0x45683000
 8000b8c:	45689000 	.word	0x45689000
 8000b90:	45782000 	.word	0x45782000
 8000b94:	45787000 	.word	0x45787000
 8000b98:	2000020c 	.word	0x2000020c
 8000b9c:	48000400 	.word	0x48000400

08000ba0 <reset_flags>:
		}
	}
}

void reset_flags()
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
	sw3_pressed = 0;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <reset_flags+0x28>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
	sw4_pressed = 0;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <reset_flags+0x2c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
	sw5_pressed = 0;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <reset_flags+0x30>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
	sw6_pressed = 0;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <reset_flags+0x34>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000210 	.word	0x20000210
 8000bcc:	20000211 	.word	0x20000211
 8000bd0:	20000212 	.word	0x20000212
 8000bd4:	20000213 	.word	0x20000213

08000bd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bea:	f000 faa1 	bl	8001130 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40012c00 	.word	0x40012c00

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <_ZN8PUTM_CAN14Can_tx_messageI9Apps_mainE4sendER19__CAN_HandleTypeDef>:

  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
    static uint32_t TxMailbox(0);
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f103 0218 	add.w	r2, r3, #24
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <_ZN8PUTM_CAN14Can_tx_messageI9Apps_mainE4sendER19__CAN_HandleTypeDef+0x24>)
 8000c1c:	6838      	ldr	r0, [r7, #0]
 8000c1e:	f001 fec0 	bl	80029a2 <HAL_CAN_AddTxMessage>
 8000c22:	4603      	mov	r3, r0
  }
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000214 	.word	0x20000214

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_MspInit+0x44>)
 8000c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <HAL_MspInit+0x44>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6613      	str	r3, [r2, #96]	; 0x60
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_MspInit+0x44>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_MspInit+0x44>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_MspInit+0x44>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c58:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_MspInit+0x44>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a5f      	ldr	r2, [pc, #380]	; (8000e14 <HAL_ADC_MspInit+0x19c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d159      	bne.n	8000d4e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000c9a:	4b5f      	ldr	r3, [pc, #380]	; (8000e18 <HAL_ADC_MspInit+0x1a0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	4a5d      	ldr	r2, [pc, #372]	; (8000e18 <HAL_ADC_MspInit+0x1a0>)
 8000ca2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000ca4:	4b5c      	ldr	r3, [pc, #368]	; (8000e18 <HAL_ADC_MspInit+0x1a0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d10b      	bne.n	8000cc4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000cac:	4b5b      	ldr	r3, [pc, #364]	; (8000e1c <HAL_ADC_MspInit+0x1a4>)
 8000cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb0:	4a5a      	ldr	r2, [pc, #360]	; (8000e1c <HAL_ADC_MspInit+0x1a4>)
 8000cb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb8:	4b58      	ldr	r3, [pc, #352]	; (8000e1c <HAL_ADC_MspInit+0x1a4>)
 8000cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b55      	ldr	r3, [pc, #340]	; (8000e1c <HAL_ADC_MspInit+0x1a4>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc8:	4a54      	ldr	r2, [pc, #336]	; (8000e1c <HAL_ADC_MspInit+0x1a4>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd0:	4b52      	ldr	r3, [pc, #328]	; (8000e1c <HAL_ADC_MspInit+0x1a4>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = SW1_Pin;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ce0:	230b      	movs	r3, #11
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf2:	f002 faa1 	bl	8003238 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel6;
 8000cf6:	4b4a      	ldr	r3, [pc, #296]	; (8000e20 <HAL_ADC_MspInit+0x1a8>)
 8000cf8:	4a4a      	ldr	r2, [pc, #296]	; (8000e24 <HAL_ADC_MspInit+0x1ac>)
 8000cfa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000cfc:	4b48      	ldr	r3, [pc, #288]	; (8000e20 <HAL_ADC_MspInit+0x1a8>)
 8000cfe:	2205      	movs	r2, #5
 8000d00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d02:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <HAL_ADC_MspInit+0x1a8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d08:	4b45      	ldr	r3, [pc, #276]	; (8000e20 <HAL_ADC_MspInit+0x1a8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d0e:	4b44      	ldr	r3, [pc, #272]	; (8000e20 <HAL_ADC_MspInit+0x1a8>)
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d14:	4b42      	ldr	r3, [pc, #264]	; (8000e20 <HAL_ADC_MspInit+0x1a8>)
 8000d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d1c:	4b40      	ldr	r3, [pc, #256]	; (8000e20 <HAL_ADC_MspInit+0x1a8>)
 8000d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d22:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d24:	4b3e      	ldr	r3, [pc, #248]	; (8000e20 <HAL_ADC_MspInit+0x1a8>)
 8000d26:	2220      	movs	r2, #32
 8000d28:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d2a:	4b3d      	ldr	r3, [pc, #244]	; (8000e20 <HAL_ADC_MspInit+0x1a8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d30:	483b      	ldr	r0, [pc, #236]	; (8000e20 <HAL_ADC_MspInit+0x1a8>)
 8000d32:	f002 f80f 	bl	8002d54 <HAL_DMA_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000d3c:	f7ff ff5e 	bl	8000bfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a37      	ldr	r2, [pc, #220]	; (8000e20 <HAL_ADC_MspInit+0x1a8>)
 8000d44:	651a      	str	r2, [r3, #80]	; 0x50
 8000d46:	4a36      	ldr	r2, [pc, #216]	; (8000e20 <HAL_ADC_MspInit+0x1a8>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d4c:	e05d      	b.n	8000e0a <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a35      	ldr	r2, [pc, #212]	; (8000e28 <HAL_ADC_MspInit+0x1b0>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d158      	bne.n	8000e0a <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000d58:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <HAL_ADC_MspInit+0x1a0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4a2e      	ldr	r2, [pc, #184]	; (8000e18 <HAL_ADC_MspInit+0x1a0>)
 8000d60:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_ADC_MspInit+0x1a0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d10b      	bne.n	8000d82 <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <HAL_ADC_MspInit+0x1a4>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	4a2b      	ldr	r2, [pc, #172]	; (8000e1c <HAL_ADC_MspInit+0x1a4>)
 8000d70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d76:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <HAL_ADC_MspInit+0x1a4>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <HAL_ADC_MspInit+0x1a4>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	4a25      	ldr	r2, [pc, #148]	; (8000e1c <HAL_ADC_MspInit+0x1a4>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8e:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <HAL_ADC_MspInit+0x1a4>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SW2_Pin|GPIO_PIN_3;
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d9e:	230b      	movs	r3, #11
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db0:	f002 fa42 	bl	8003238 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel7;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_ADC_MspInit+0x1b4>)
 8000db6:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <HAL_ADC_MspInit+0x1b8>)
 8000db8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_ADC_MspInit+0x1b4>)
 8000dbc:	2206      	movs	r2, #6
 8000dbe:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_ADC_MspInit+0x1b4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_ADC_MspInit+0x1b4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_ADC_MspInit+0x1b4>)
 8000dce:	2280      	movs	r2, #128	; 0x80
 8000dd0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_ADC_MspInit+0x1b4>)
 8000dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_ADC_MspInit+0x1b4>)
 8000ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_ADC_MspInit+0x1b4>)
 8000de4:	2220      	movs	r2, #32
 8000de6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_ADC_MspInit+0x1b4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000dee:	480f      	ldr	r0, [pc, #60]	; (8000e2c <HAL_ADC_MspInit+0x1b4>)
 8000df0:	f001 ffb0 	bl	8002d54 <HAL_DMA_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_ADC_MspInit+0x186>
      Error_Handler();
 8000dfa:	f7ff feff 	bl	8000bfc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_ADC_MspInit+0x1b4>)
 8000e02:	651a      	str	r2, [r3, #80]	; 0x50
 8000e04:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <HAL_ADC_MspInit+0x1b4>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000e0a:	bf00      	nop
 8000e0c:	3730      	adds	r7, #48	; 0x30
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	50040000 	.word	0x50040000
 8000e18:	20000218 	.word	0x20000218
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	200000f8 	.word	0x200000f8
 8000e24:	4002006c 	.word	0x4002006c
 8000e28:	50040100 	.word	0x50040100
 8000e2c:	20000158 	.word	0x20000158
 8000e30:	40020480 	.word	0x40020480

08000e34 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a18      	ldr	r2, [pc, #96]	; (8000eb4 <HAL_CAN_MspInit+0x80>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d129      	bne.n	8000eaa <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_CAN_MspInit+0x84>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_CAN_MspInit+0x84>)
 8000e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e60:	6593      	str	r3, [r2, #88]	; 0x58
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_CAN_MspInit+0x84>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_CAN_MspInit+0x84>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <HAL_CAN_MspInit+0x84>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <HAL_CAN_MspInit+0x84>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e98:	2309      	movs	r3, #9
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea6:	f002 f9c7 	bl	8003238 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40006400 	.word	0x40006400
 8000eb8:	40021000 	.word	0x40021000

08000ebc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08c      	sub	sp, #48	; 0x30
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	2019      	movs	r0, #25
 8000ed2:	f001 ff15 	bl	8002d00 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ed6:	2019      	movs	r0, #25
 8000ed8:	f001 ff2e 	bl	8002d38 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <HAL_InitTick+0x9c>)
 8000ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <HAL_InitTick+0x9c>)
 8000ee2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ee6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_InitTick+0x9c>)
 8000eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef4:	f107 0210 	add.w	r2, r7, #16
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 fa9e 	bl	8004440 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f04:	f003 fa86 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 8000f08:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0c:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <HAL_InitTick+0xa0>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	0c9b      	lsrs	r3, r3, #18
 8000f14:	3b01      	subs	r3, #1
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_InitTick+0xa4>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <HAL_InitTick+0xa8>)
 8000f1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_InitTick+0xa4>)
 8000f20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f24:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_InitTick+0xa4>)
 8000f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_InitTick+0xa4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_InitTick+0xa4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f38:	4809      	ldr	r0, [pc, #36]	; (8000f60 <HAL_InitTick+0xa4>)
 8000f3a:	f004 f8c7 	bl	80050cc <HAL_TIM_Base_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d104      	bne.n	8000f4e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f44:	4806      	ldr	r0, [pc, #24]	; (8000f60 <HAL_InitTick+0xa4>)
 8000f46:	f004 f923 	bl	8005190 <HAL_TIM_Base_Start_IT>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3730      	adds	r7, #48	; 0x30
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	431bde83 	.word	0x431bde83
 8000f60:	2000021c 	.word	0x2000021c
 8000f64:	40012c00 	.word	0x40012c00

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW6_Pin);
 8000fc2:	2004      	movs	r0, #4
 8000fc4:	f002 fafc 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000fd0:	2010      	movs	r0, #16
 8000fd2:	f002 faf5 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <DMA1_Channel6_IRQHandler+0x10>)
 8000fe2:	f001 ffda 	bl	8002f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200000f8 	.word	0x200000f8

08000ff0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000ff4:	2020      	movs	r0, #32
 8000ff6:	f002 fae3 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001006:	f004 f933 	bl	8005270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000021c 	.word	0x2000021c

08001014 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 8001018:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800101c:	f002 fad0 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW4_Pin);
 8001020:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001024:	f002 facc 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW5_Pin);
 8001028:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800102c:	f002 fac8 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <DMA2_Channel7_IRQHandler+0x10>)
 800103a:	f001 ffae 	bl	8002f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000158 	.word	0x20000158

08001048 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <SystemInit+0x5c>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <SystemInit+0x5c>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <SystemInit+0x60>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <SystemInit+0x60>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <SystemInit+0x60>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <SystemInit+0x60>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <SystemInit+0x60>)
 8001074:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001078:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800107c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <SystemInit+0x60>)
 8001080:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001084:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <SystemInit+0x60>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <SystemInit+0x60>)
 800108c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001090:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SystemInit+0x60>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00
 80010a8:	40021000 	.word	0x40021000

080010ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b0:	f7ff ffca 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010b6:	e003      	b.n	80010c0 <LoopCopyDataInit>

080010b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010be:	3104      	adds	r1, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010c0:	480a      	ldr	r0, [pc, #40]	; (80010ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010c8:	d3f6      	bcc.n	80010b8 <CopyDataInit>
	ldr	r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010cc:	e002      	b.n	80010d4 <LoopFillZerobss>

080010ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010d0:	f842 3b04 	str.w	r3, [r2], #4

080010d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <LoopForever+0x16>)
	cmp	r2, r3
 80010d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010d8:	d3f9      	bcc.n	80010ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010da:	f004 fac9 	bl	8005670 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010de:	f7ff f88d 	bl	80001fc <main>

080010e2 <LoopForever>:

LoopForever:
    b LoopForever
 80010e2:	e7fe      	b.n	80010e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010e4:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 80010e8:	08005764 	.word	0x08005764
	ldr	r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010f0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80010f4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80010f8:	2000026c 	.word	0x2000026c

080010fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC1_2_IRQHandler>

080010fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001108:	2003      	movs	r0, #3
 800110a:	f001 fdee 	bl	8002cea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800110e:	200f      	movs	r0, #15
 8001110:	f7ff fed4 	bl	8000ebc <HAL_InitTick>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	e001      	b.n	8001124 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001120:	f7ff fd86 	bl	8000c30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001124:	79fb      	ldrb	r3, [r7, #7]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008
 8001154:	20000268 	.word	0x20000268

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000268 	.word	0x20000268

08001170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff ffee 	bl	8001158 <HAL_GetTick>
 800117c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001188:	d005      	beq.n	8001196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_Delay+0x44>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001196:	bf00      	nop
 8001198:	f7ff ffde 	bl	8001158 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8f7      	bhi.n	8001198 <HAL_Delay+0x28>
  {
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008

080011b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	609a      	str	r2, [r3, #8]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	609a      	str	r2, [r3, #8]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3360      	adds	r3, #96	; 0x60
 8001232:	461a      	mov	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <LL_ADC_SetOffset+0x44>)
 8001242:	4013      	ands	r3, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	4313      	orrs	r3, r2
 8001250:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001258:	bf00      	nop
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	03fff000 	.word	0x03fff000

08001268 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3360      	adds	r3, #96	; 0x60
 8001276:	461a      	mov	r2, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3360      	adds	r3, #96	; 0x60
 80012a4:	461a      	mov	r2, r3
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	431a      	orrs	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012be:	bf00      	nop
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	615a      	str	r2, [r3, #20]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001316:	b480      	push	{r7}
 8001318:	b087      	sub	sp, #28
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	3330      	adds	r3, #48	; 0x30
 8001326:	461a      	mov	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	4413      	add	r3, r2
 8001334:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f003 031f 	and.w	r3, r3, #31
 8001340:	211f      	movs	r1, #31
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	401a      	ands	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	0e9b      	lsrs	r3, r3, #26
 800134e:	f003 011f 	and.w	r1, r3, #31
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	f003 031f 	and.w	r3, r3, #31
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	431a      	orrs	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001362:	bf00      	nop
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800136e:	b480      	push	{r7}
 8001370:	b087      	sub	sp, #28
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3314      	adds	r3, #20
 800137e:	461a      	mov	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	0e5b      	lsrs	r3, r3, #25
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	4413      	add	r3, r2
 800138c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	0d1b      	lsrs	r3, r3, #20
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	2107      	movs	r1, #7
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	401a      	ands	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	0d1b      	lsrs	r3, r3, #20
 80013a8:	f003 031f 	and.w	r3, r3, #31
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	431a      	orrs	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013b8:	bf00      	nop
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013dc:	43db      	mvns	r3, r3
 80013de:	401a      	ands	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0318 	and.w	r3, r3, #24
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013e8:	40d9      	lsrs	r1, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	400b      	ands	r3, r1
 80013ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f2:	431a      	orrs	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	0007ffff 	.word	0x0007ffff

0800140c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 031f 	and.w	r3, r3, #31
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001438:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6093      	str	r3, [r2, #8]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800145c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001460:	d101      	bne.n	8001466 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001484:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001488:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014b0:	d101      	bne.n	80014b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014d8:	f043 0201 	orr.w	r2, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <LL_ADC_IsEnabled+0x18>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <LL_ADC_IsEnabled+0x1a>
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001522:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001526:	f043 0204 	orr.w	r2, r3, #4
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b04      	cmp	r3, #4
 800154c:	d101      	bne.n	8001552 <LL_ADC_REG_IsConversionOngoing+0x18>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b08      	cmp	r3, #8
 8001572:	d101      	bne.n	8001578 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e134      	b.n	800180c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d109      	bne.n	80015c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff fb61 	bl	8000c78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff3f 	bl	800144c <LL_ADC_IsDeepPowerDownEnabled>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d004      	beq.n	80015de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff25 	bl	8001428 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff5a 	bl	800149c <LL_ADC_IsInternalRegulatorEnabled>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d115      	bne.n	800161a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff3e 	bl	8001474 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015f8:	4b86      	ldr	r3, [pc, #536]	; (8001814 <HAL_ADC_Init+0x28c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	099b      	lsrs	r3, r3, #6
 80015fe:	4a86      	ldr	r2, [pc, #536]	; (8001818 <HAL_ADC_Init+0x290>)
 8001600:	fba2 2303 	umull	r2, r3, r2, r3
 8001604:	099b      	lsrs	r3, r3, #6
 8001606:	3301      	adds	r3, #1
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800160c:	e002      	b.n	8001614 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	3b01      	subs	r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f9      	bne.n	800160e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff3c 	bl	800149c <LL_ADC_IsInternalRegulatorEnabled>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10d      	bne.n	8001646 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	f043 0210 	orr.w	r2, r3, #16
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163a:	f043 0201 	orr.w	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff75 	bl	800153a <LL_ADC_REG_IsConversionOngoing>
 8001650:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	2b00      	cmp	r3, #0
 800165c:	f040 80cd 	bne.w	80017fa <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f040 80c9 	bne.w	80017fa <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001670:	f043 0202 	orr.w	r2, r3, #2
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff35 	bl	80014ec <LL_ADC_IsEnabled>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d110      	bne.n	80016aa <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001688:	4864      	ldr	r0, [pc, #400]	; (800181c <HAL_ADC_Init+0x294>)
 800168a:	f7ff ff2f 	bl	80014ec <LL_ADC_IsEnabled>
 800168e:	4604      	mov	r4, r0
 8001690:	4863      	ldr	r0, [pc, #396]	; (8001820 <HAL_ADC_Init+0x298>)
 8001692:	f7ff ff2b 	bl	80014ec <LL_ADC_IsEnabled>
 8001696:	4603      	mov	r3, r0
 8001698:	4323      	orrs	r3, r4
 800169a:	2b00      	cmp	r3, #0
 800169c:	d105      	bne.n	80016aa <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4619      	mov	r1, r3
 80016a4:	485f      	ldr	r0, [pc, #380]	; (8001824 <HAL_ADC_Init+0x29c>)
 80016a6:	f7ff fd87 	bl	80011b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7e5b      	ldrb	r3, [r3, #25]
 80016ae:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016b4:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016ba:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016c0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c8:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d106      	bne.n	80016e6 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	3b01      	subs	r3, #1
 80016de:	045b      	lsls	r3, r3, #17
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	4b47      	ldr	r3, [pc, #284]	; (8001828 <HAL_ADC_Init+0x2a0>)
 800170a:	4013      	ands	r3, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	69b9      	ldr	r1, [r7, #24]
 8001712:	430b      	orrs	r3, r1
 8001714:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ff0d 	bl	800153a <LL_ADC_REG_IsConversionOngoing>
 8001720:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff1a 	bl	8001560 <LL_ADC_INJ_IsConversionOngoing>
 800172c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d140      	bne.n	80017b6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d13d      	bne.n	80017b6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7e1b      	ldrb	r3, [r3, #24]
 8001742:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001744:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800174c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800175c:	f023 0306 	bic.w	r3, r3, #6
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	69b9      	ldr	r1, [r7, #24]
 8001766:	430b      	orrs	r3, r1
 8001768:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001770:	2b01      	cmp	r3, #1
 8001772:	d118      	bne.n	80017a6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800177e:	f023 0304 	bic.w	r3, r3, #4
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800178a:	4311      	orrs	r1, r2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001790:	4311      	orrs	r1, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001796:	430a      	orrs	r2, r1
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	e007      	b.n	80017b6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0201 	bic.w	r2, r2, #1
 80017b4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d10c      	bne.n	80017d8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	f023 010f 	bic.w	r1, r3, #15
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	1e5a      	subs	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
 80017d6:	e007      	b.n	80017e8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 020f 	bic.w	r2, r2, #15
 80017e6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	f023 0303 	bic.w	r3, r3, #3
 80017f0:	f043 0201 	orr.w	r2, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	659a      	str	r2, [r3, #88]	; 0x58
 80017f8:	e007      	b.n	800180a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	f043 0210 	orr.w	r2, r3, #16
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800180a:	7ffb      	ldrb	r3, [r7, #31]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3724      	adds	r7, #36	; 0x24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	20000000 	.word	0x20000000
 8001818:	053e2d63 	.word	0x053e2d63
 800181c:	50040000 	.word	0x50040000
 8001820:	50040100 	.word	0x50040100
 8001824:	50040300 	.word	0x50040300
 8001828:	fff0c007 	.word	0xfff0c007

0800182c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001838:	4850      	ldr	r0, [pc, #320]	; (800197c <HAL_ADC_Start_DMA+0x150>)
 800183a:	f7ff fde7 	bl	800140c <LL_ADC_GetMultimode>
 800183e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fe78 	bl	800153a <LL_ADC_REG_IsConversionOngoing>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	f040 808e 	bne.w	800196e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_ADC_Start_DMA+0x34>
 800185c:	2302      	movs	r3, #2
 800185e:	e089      	b.n	8001974 <HAL_ADC_Start_DMA+0x148>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	2b05      	cmp	r3, #5
 8001872:	d002      	beq.n	800187a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	2b09      	cmp	r3, #9
 8001878:	d172      	bne.n	8001960 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 fca4 	bl	80021c8 <ADC_Enable>
 8001880:	4603      	mov	r3, r0
 8001882:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d165      	bne.n	8001956 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a37      	ldr	r2, [pc, #220]	; (8001980 <HAL_ADC_Start_DMA+0x154>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d002      	beq.n	80018ae <HAL_ADC_Start_DMA+0x82>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	e000      	b.n	80018b0 <HAL_ADC_Start_DMA+0x84>
 80018ae:	4b35      	ldr	r3, [pc, #212]	; (8001984 <HAL_ADC_Start_DMA+0x158>)
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d002      	beq.n	80018be <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d105      	bne.n	80018ca <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018da:	f023 0206 	bic.w	r2, r3, #6
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80018e2:	e002      	b.n	80018ea <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ee:	4a26      	ldr	r2, [pc, #152]	; (8001988 <HAL_ADC_Start_DMA+0x15c>)
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f6:	4a25      	ldr	r2, [pc, #148]	; (800198c <HAL_ADC_Start_DMA+0x160>)
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018fe:	4a24      	ldr	r2, [pc, #144]	; (8001990 <HAL_ADC_Start_DMA+0x164>)
 8001900:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	221c      	movs	r2, #28
 8001908:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0210 	orr.w	r2, r2, #16
 8001920:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0201 	orr.w	r2, r2, #1
 8001930:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3340      	adds	r3, #64	; 0x40
 800193c:	4619      	mov	r1, r3
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f001 faaf 	bl	8002ea4 <HAL_DMA_Start_IT>
 8001946:	4603      	mov	r3, r0
 8001948:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fddf 	bl	8001512 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001954:	e00d      	b.n	8001972 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 800195e:	e008      	b.n	8001972 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800196c:	e001      	b.n	8001972 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800196e:	2302      	movs	r3, #2
 8001970:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001972:	7dfb      	ldrb	r3, [r7, #23]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	50040300 	.word	0x50040300
 8001980:	50040100 	.word	0x50040100
 8001984:	50040000 	.word	0x50040000
 8001988:	080022d5 	.word	0x080022d5
 800198c:	080023ad 	.word	0x080023ad
 8001990:	080023c9 	.word	0x080023c9

08001994 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b0b6      	sub	sp, #216	; 0xd8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x22>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e3d5      	b.n	800219e <HAL_ADC_ConfigChannel+0x7ce>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fd9b 	bl	800153a <LL_ADC_REG_IsConversionOngoing>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 83ba 	bne.w	8002180 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d824      	bhi.n	8001a5e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	3b02      	subs	r3, #2
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d81b      	bhi.n	8001a56 <HAL_ADC_ConfigChannel+0x86>
 8001a1e:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <HAL_ADC_ConfigChannel+0x54>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001a35 	.word	0x08001a35
 8001a28:	08001a3d 	.word	0x08001a3d
 8001a2c:	08001a45 	.word	0x08001a45
 8001a30:	08001a4d 	.word	0x08001a4d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	220c      	movs	r2, #12
 8001a38:	605a      	str	r2, [r3, #4]
          break;
 8001a3a:	e011      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2212      	movs	r2, #18
 8001a40:	605a      	str	r2, [r3, #4]
          break;
 8001a42:	e00d      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2218      	movs	r2, #24
 8001a48:	605a      	str	r2, [r3, #4]
          break;
 8001a4a:	e009      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a52:	605a      	str	r2, [r3, #4]
          break;
 8001a54:	e004      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2206      	movs	r2, #6
 8001a5a:	605a      	str	r2, [r3, #4]
          break;
 8001a5c:	e000      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a5e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f7ff fc52 	bl	8001316 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fd5f 	bl	800153a <LL_ADC_REG_IsConversionOngoing>
 8001a7c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fd6b 	bl	8001560 <LL_ADC_INJ_IsConversionOngoing>
 8001a8a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 81c1 	bne.w	8001e1a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f040 81bc 	bne.w	8001e1a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001aaa:	d10f      	bne.n	8001acc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff fc59 	bl	800136e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fc00 	bl	80012ca <LL_ADC_SetSamplingTimeCommonConfig>
 8001aca:	e00e      	b.n	8001aea <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	6819      	ldr	r1, [r3, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	f7ff fc48 	bl	800136e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fbf0 	bl	80012ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	08db      	lsrs	r3, r3, #3
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d00a      	beq.n	8001b22 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	6919      	ldr	r1, [r3, #16]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b1c:	f7ff fb80 	bl	8001220 <LL_ADC_SetOffset>
 8001b20:	e17b      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fb9d 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10a      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x17e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fb92 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	0e9b      	lsrs	r3, r3, #26
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	e01e      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x1bc>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fb87 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001b7c:	2320      	movs	r3, #32
 8001b7e:	e004      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001b80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d105      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1d4>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0e9b      	lsrs	r3, r3, #26
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	e018      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x206>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bb0:	fa93 f3a3 	rbit	r3, r3
 8001bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001bc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001bc8:	2320      	movs	r3, #32
 8001bca:	e004      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001bcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d106      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fb56 	bl	8001294 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2101      	movs	r1, #1
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fb3a 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10a      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x244>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2101      	movs	r1, #1
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fb2f 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	0e9b      	lsrs	r3, r3, #26
 8001c0e:	f003 021f 	and.w	r2, r3, #31
 8001c12:	e01e      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x282>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fb24 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001c42:	2320      	movs	r3, #32
 8001c44:	e004      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001c46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d105      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x29a>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0e9b      	lsrs	r3, r3, #26
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	e018      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x2cc>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	e004      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001c92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d106      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff faf3 	bl	8001294 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fad7 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10a      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x30a>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2102      	movs	r1, #2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff facc 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	0e9b      	lsrs	r3, r3, #26
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	e01e      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x348>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2102      	movs	r1, #2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fac1 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cf0:	fa93 f3a3 	rbit	r3, r3
 8001cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001cf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001d08:	2320      	movs	r3, #32
 8001d0a:	e004      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001d0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d105      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x360>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0e9b      	lsrs	r3, r3, #26
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	e016      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x38e>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d3c:	fa93 f3a3 	rbit	r3, r3
 8001d40:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001d50:	2320      	movs	r3, #32
 8001d52:	e004      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d106      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2200      	movs	r2, #0
 8001d68:	2102      	movs	r1, #2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fa92 	bl	8001294 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2103      	movs	r1, #3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fa76 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10a      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x3cc>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2103      	movs	r1, #3
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fa6b 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001d92:	4603      	mov	r3, r0
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	f003 021f 	and.w	r2, r3, #31
 8001d9a:	e017      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x3fc>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2103      	movs	r1, #3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fa60 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001da8:	4603      	mov	r3, r0
 8001daa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001db4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001db6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	e003      	b.n	8001dca <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x414>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	e011      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x438>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001df4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001dfc:	2320      	movs	r3, #32
 8001dfe:	e003      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d106      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2200      	movs	r2, #0
 8001e12:	2103      	movs	r1, #3
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fa3d 	bl	8001294 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fb64 	bl	80014ec <LL_ADC_IsEnabled>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f040 8140 	bne.w	80020ac <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6819      	ldr	r1, [r3, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f7ff fac3 	bl	80013c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	4a8f      	ldr	r2, [pc, #572]	; (8002080 <HAL_ADC_ConfigChannel+0x6b0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	f040 8131 	bne.w	80020ac <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10b      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x4a2>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	0e9b      	lsrs	r3, r3, #26
 8001e60:	3301      	adds	r3, #1
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	2b09      	cmp	r3, #9
 8001e68:	bf94      	ite	ls
 8001e6a:	2301      	movls	r3, #1
 8001e6c:	2300      	movhi	r3, #0
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	e019      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x4d6>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e82:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	e003      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	2b09      	cmp	r3, #9
 8001e9e:	bf94      	ite	ls
 8001ea0:	2301      	movls	r3, #1
 8001ea2:	2300      	movhi	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d079      	beq.n	8001f9e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d107      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x4f6>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0e9b      	lsrs	r3, r3, #26
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	069b      	lsls	r3, r3, #26
 8001ec0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ec4:	e015      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x522>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ed6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001ede:	2320      	movs	r3, #32
 8001ee0:	e003      	b.n	8001eea <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee4:	fab3 f383 	clz	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	069b      	lsls	r3, r3, #26
 8001eee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x542>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	0e9b      	lsrs	r3, r3, #26
 8001f04:	3301      	adds	r3, #1
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	e017      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x572>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f22:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001f2a:	2320      	movs	r3, #32
 8001f2c:	e003      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f30:	fab3 f383 	clz	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	ea42 0103 	orr.w	r1, r2, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10a      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x598>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	0e9b      	lsrs	r3, r3, #26
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f003 021f 	and.w	r2, r3, #31
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	051b      	lsls	r3, r3, #20
 8001f66:	e018      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x5ca>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001f80:	2320      	movs	r3, #32
 8001f82:	e003      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f003 021f 	and.w	r2, r3, #31
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f9a:	430b      	orrs	r3, r1
 8001f9c:	e081      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d107      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x5ea>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	069b      	lsls	r3, r3, #26
 8001fb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fb8:	e015      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x616>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	e003      	b.n	8001fde <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	069b      	lsls	r3, r3, #26
 8001fe2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x636>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0e9b      	lsrs	r3, r3, #26
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	2101      	movs	r1, #1
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	e017      	b.n	8002036 <HAL_ADC_ConfigChannel+0x666>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	61fb      	str	r3, [r7, #28]
  return result;
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800201e:	2320      	movs	r3, #32
 8002020:	e003      	b.n	800202a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	3301      	adds	r3, #1
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	2101      	movs	r1, #1
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	ea42 0103 	orr.w	r1, r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10d      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x692>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	0e9b      	lsrs	r3, r3, #26
 800204c:	3301      	adds	r3, #1
 800204e:	f003 021f 	and.w	r2, r3, #31
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	3b1e      	subs	r3, #30
 800205a:	051b      	lsls	r3, r3, #20
 800205c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002060:	e01e      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x6d0>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	613b      	str	r3, [r7, #16]
  return result;
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d104      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800207a:	2320      	movs	r3, #32
 800207c:	e006      	b.n	800208c <HAL_ADC_ConfigChannel+0x6bc>
 800207e:	bf00      	nop
 8002080:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	3301      	adds	r3, #1
 800208e:	f003 021f 	and.w	r2, r3, #31
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	3b1e      	subs	r3, #30
 800209a:	051b      	lsls	r3, r3, #20
 800209c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020a0:	430b      	orrs	r3, r1
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	6892      	ldr	r2, [r2, #8]
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7ff f961 	bl	800136e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <HAL_ADC_ConfigChannel+0x7d8>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d06c      	beq.n	8002192 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020b8:	483c      	ldr	r0, [pc, #240]	; (80021ac <HAL_ADC_ConfigChannel+0x7dc>)
 80020ba:	f7ff f8a3 	bl	8001204 <LL_ADC_GetCommonPathInternalCh>
 80020be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a3a      	ldr	r2, [pc, #232]	; (80021b0 <HAL_ADC_ConfigChannel+0x7e0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d127      	bne.n	800211c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d121      	bne.n	800211c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a35      	ldr	r2, [pc, #212]	; (80021b4 <HAL_ADC_ConfigChannel+0x7e4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d157      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020ea:	4619      	mov	r1, r3
 80020ec:	482f      	ldr	r0, [pc, #188]	; (80021ac <HAL_ADC_ConfigChannel+0x7dc>)
 80020ee:	f7ff f876 	bl	80011de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <HAL_ADC_ConfigChannel+0x7e8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	099b      	lsrs	r3, r3, #6
 80020f8:	4a30      	ldr	r2, [pc, #192]	; (80021bc <HAL_ADC_ConfigChannel+0x7ec>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	099b      	lsrs	r3, r3, #6
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800210c:	e002      	b.n	8002114 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3b01      	subs	r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f9      	bne.n	800210e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800211a:	e03a      	b.n	8002192 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a27      	ldr	r2, [pc, #156]	; (80021c0 <HAL_ADC_ConfigChannel+0x7f0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d113      	bne.n	800214e <HAL_ADC_ConfigChannel+0x77e>
 8002126:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800212a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10d      	bne.n	800214e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d12a      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800213c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002140:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002144:	4619      	mov	r1, r3
 8002146:	4819      	ldr	r0, [pc, #100]	; (80021ac <HAL_ADC_ConfigChannel+0x7dc>)
 8002148:	f7ff f849 	bl	80011de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800214c:	e021      	b.n	8002192 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <HAL_ADC_ConfigChannel+0x7f4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d11c      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002158:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800215c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d116      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <HAL_ADC_ConfigChannel+0x7e4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d111      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800216e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002172:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002176:	4619      	mov	r1, r3
 8002178:	480c      	ldr	r0, [pc, #48]	; (80021ac <HAL_ADC_ConfigChannel+0x7dc>)
 800217a:	f7ff f830 	bl	80011de <LL_ADC_SetCommonPathInternalCh>
 800217e:	e008      	b.n	8002192 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	f043 0220 	orr.w	r2, r3, #32
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800219a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800219e:	4618      	mov	r0, r3
 80021a0:	37d8      	adds	r7, #216	; 0xd8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	80080000 	.word	0x80080000
 80021ac:	50040300 	.word	0x50040300
 80021b0:	c7520000 	.word	0xc7520000
 80021b4:	50040000 	.word	0x50040000
 80021b8:	20000000 	.word	0x20000000
 80021bc:	053e2d63 	.word	0x053e2d63
 80021c0:	cb840000 	.word	0xcb840000
 80021c4:	80000001 	.word	0x80000001

080021c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f987 	bl	80014ec <LL_ADC_IsEnabled>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d169      	bne.n	80022b8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	4b36      	ldr	r3, [pc, #216]	; (80022c4 <ADC_Enable+0xfc>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00d      	beq.n	800220e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	f043 0210 	orr.w	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e055      	b.n	80022ba <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff f956 	bl	80014c4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002218:	482b      	ldr	r0, [pc, #172]	; (80022c8 <ADC_Enable+0x100>)
 800221a:	f7fe fff3 	bl	8001204 <LL_ADC_GetCommonPathInternalCh>
 800221e:	4603      	mov	r3, r0
 8002220:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d013      	beq.n	8002250 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002228:	4b28      	ldr	r3, [pc, #160]	; (80022cc <ADC_Enable+0x104>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	099b      	lsrs	r3, r3, #6
 800222e:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <ADC_Enable+0x108>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	099b      	lsrs	r3, r3, #6
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	4613      	mov	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002242:	e002      	b.n	800224a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	3b01      	subs	r3, #1
 8002248:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f9      	bne.n	8002244 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002250:	f7fe ff82 	bl	8001158 <HAL_GetTick>
 8002254:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002256:	e028      	b.n	80022aa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff f945 	bl	80014ec <LL_ADC_IsEnabled>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d104      	bne.n	8002272 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff f929 	bl	80014c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002272:	f7fe ff71 	bl	8001158 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d914      	bls.n	80022aa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d00d      	beq.n	80022aa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	f043 0210 	orr.w	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e007      	b.n	80022ba <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d1cf      	bne.n	8002258 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	8000003f 	.word	0x8000003f
 80022c8:	50040300 	.word	0x50040300
 80022cc:	20000000 	.word	0x20000000
 80022d0:	053e2d63 	.word	0x053e2d63

080022d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d14b      	bne.n	8002386 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d021      	beq.n	800234c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe ffef 	bl	80012f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d032      	beq.n	800237e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d12b      	bne.n	800237e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11f      	bne.n	800237e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	659a      	str	r2, [r3, #88]	; 0x58
 800234a:	e018      	b.n	800237e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d111      	bne.n	800237e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d105      	bne.n	800237e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7ff fb08 	bl	8001994 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002384:	e00e      	b.n	80023a4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f7ff fb12 	bl	80019bc <HAL_ADC_ErrorCallback>
}
 8002398:	e004      	b.n	80023a4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4798      	blx	r3
}
 80023a4:	bf00      	nop
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f7ff faf4 	bl	80019a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	f043 0204 	orr.w	r2, r3, #4
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f7ff fae4 	bl	80019bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <LL_ADC_IsEnabled>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <LL_ADC_IsEnabled+0x18>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <LL_ADC_IsEnabled+0x1a>
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_ADC_REG_IsConversionOngoing>:
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b04      	cmp	r3, #4
 8002434:	d101      	bne.n	800243a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b0a1      	sub	sp, #132	; 0x84
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002462:	2302      	movs	r3, #2
 8002464:	e089      	b.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800246e:	2300      	movs	r3, #0
 8002470:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002472:	2300      	movs	r3, #0
 8002474:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a42      	ldr	r2, [pc, #264]	; (8002584 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d102      	bne.n	8002486 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002480:	4b41      	ldr	r3, [pc, #260]	; (8002588 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	e001      	b.n	800248a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	f043 0220 	orr.w	r2, r3, #32
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e068      	b.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ffb9 	bl	8002422 <LL_ADC_REG_IsConversionOngoing>
 80024b0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ffb3 	bl	8002422 <LL_ADC_REG_IsConversionOngoing>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d14a      	bne.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80024c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d147      	bne.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80024c8:	4b30      	ldr	r3, [pc, #192]	; (800258c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80024ca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d027      	beq.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80024d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024e6:	035b      	lsls	r3, r3, #13
 80024e8:	430b      	orrs	r3, r1
 80024ea:	431a      	orrs	r2, r3
 80024ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024f0:	4824      	ldr	r0, [pc, #144]	; (8002584 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80024f2:	f7ff ff83 	bl	80023fc <LL_ADC_IsEnabled>
 80024f6:	4604      	mov	r4, r0
 80024f8:	4823      	ldr	r0, [pc, #140]	; (8002588 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024fa:	f7ff ff7f 	bl	80023fc <LL_ADC_IsEnabled>
 80024fe:	4603      	mov	r3, r0
 8002500:	4323      	orrs	r3, r4
 8002502:	2b00      	cmp	r3, #0
 8002504:	d132      	bne.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800250e:	f023 030f 	bic.w	r3, r3, #15
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	6811      	ldr	r1, [r2, #0]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	6892      	ldr	r2, [r2, #8]
 800251a:	430a      	orrs	r2, r1
 800251c:	431a      	orrs	r2, r3
 800251e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002520:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002522:	e023      	b.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800252c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800252e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002530:	4814      	ldr	r0, [pc, #80]	; (8002584 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002532:	f7ff ff63 	bl	80023fc <LL_ADC_IsEnabled>
 8002536:	4604      	mov	r4, r0
 8002538:	4813      	ldr	r0, [pc, #76]	; (8002588 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800253a:	f7ff ff5f 	bl	80023fc <LL_ADC_IsEnabled>
 800253e:	4603      	mov	r3, r0
 8002540:	4323      	orrs	r3, r4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d112      	bne.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800254e:	f023 030f 	bic.w	r3, r3, #15
 8002552:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002554:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002556:	e009      	b.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	f043 0220 	orr.w	r2, r3, #32
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800256a:	e000      	b.n	800256e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800256c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002576:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800257a:	4618      	mov	r0, r3
 800257c:	3784      	adds	r7, #132	; 0x84
 800257e:	46bd      	mov	sp, r7
 8002580:	bd90      	pop	{r4, r7, pc}
 8002582:	bf00      	nop
 8002584:	50040000 	.word	0x50040000
 8002588:	50040100 	.word	0x50040100
 800258c:	50040300 	.word	0x50040300

08002590 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0ed      	b.n	800277e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe fc40 	bl	8000e34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c4:	f7fe fdc8 	bl	8001158 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025ca:	e012      	b.n	80025f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025cc:	f7fe fdc4 	bl	8001158 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b0a      	cmp	r3, #10
 80025d8:	d90b      	bls.n	80025f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2205      	movs	r2, #5
 80025ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0c5      	b.n	800277e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0e5      	beq.n	80025cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0202 	bic.w	r2, r2, #2
 800260e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002610:	f7fe fda2 	bl	8001158 <HAL_GetTick>
 8002614:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002616:	e012      	b.n	800263e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002618:	f7fe fd9e 	bl	8001158 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b0a      	cmp	r3, #10
 8002624:	d90b      	bls.n	800263e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2205      	movs	r2, #5
 8002636:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e09f      	b.n	800277e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1e5      	bne.n	8002618 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	7e1b      	ldrb	r3, [r3, #24]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d108      	bne.n	8002666 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e007      	b.n	8002676 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	7e5b      	ldrb	r3, [r3, #25]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d108      	bne.n	8002690 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e007      	b.n	80026a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800269e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7e9b      	ldrb	r3, [r3, #26]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d108      	bne.n	80026ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0220 	orr.w	r2, r2, #32
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e007      	b.n	80026ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0220 	bic.w	r2, r2, #32
 80026c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	7edb      	ldrb	r3, [r3, #27]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d108      	bne.n	80026e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0210 	bic.w	r2, r2, #16
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e007      	b.n	80026f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0210 	orr.w	r2, r2, #16
 80026f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7f1b      	ldrb	r3, [r3, #28]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d108      	bne.n	800270e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0208 	orr.w	r2, r2, #8
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e007      	b.n	800271e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0208 	bic.w	r2, r2, #8
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7f5b      	ldrb	r3, [r3, #29]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d108      	bne.n	8002738 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0204 	orr.w	r2, r2, #4
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e007      	b.n	8002748 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0204 	bic.w	r2, r2, #4
 8002746:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	ea42 0103 	orr.w	r1, r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	1e5a      	subs	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002786:	b480      	push	{r7}
 8002788:	b087      	sub	sp, #28
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800279c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d003      	beq.n	80027ac <HAL_CAN_ConfigFilter+0x26>
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	f040 80aa 	bne.w	8002900 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027b2:	f043 0201 	orr.w	r2, r3, #1
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	2201      	movs	r2, #1
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	401a      	ands	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d123      	bne.n	800282e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	401a      	ands	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002808:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	3248      	adds	r2, #72	; 0x48
 800280e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002822:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002824:	6979      	ldr	r1, [r7, #20]
 8002826:	3348      	adds	r3, #72	; 0x48
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d122      	bne.n	800287c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	431a      	orrs	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002856:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3248      	adds	r2, #72	; 0x48
 800285c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002870:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002872:	6979      	ldr	r1, [r7, #20]
 8002874:	3348      	adds	r3, #72	; 0x48
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	440b      	add	r3, r1
 800287a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	43db      	mvns	r3, r3
 800288e:	401a      	ands	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002896:	e007      	b.n	80028a8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	401a      	ands	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80028c2:	e007      	b.n	80028d4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d107      	bne.n	80028ec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028f2:	f023 0201 	bic.w	r2, r3, #1
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e006      	b.n	800290e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
  }
}
 800290e:	4618      	mov	r0, r3
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d12e      	bne.n	800298c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2202      	movs	r2, #2
 8002932:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0201 	bic.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002946:	f7fe fc07 	bl	8001158 <HAL_GetTick>
 800294a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800294c:	e012      	b.n	8002974 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800294e:	f7fe fc03 	bl	8001158 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b0a      	cmp	r3, #10
 800295a:	d90b      	bls.n	8002974 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2205      	movs	r2, #5
 800296c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e012      	b.n	800299a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1e5      	bne.n	800294e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	e006      	b.n	800299a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b089      	sub	sp, #36	; 0x24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029c0:	7ffb      	ldrb	r3, [r7, #31]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d003      	beq.n	80029ce <HAL_CAN_AddTxMessage+0x2c>
 80029c6:	7ffb      	ldrb	r3, [r7, #31]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	f040 80ad 	bne.w	8002b28 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d105      	bne.n	80029ee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8095 	beq.w	8002b18 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	0e1b      	lsrs	r3, r3, #24
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029f8:	2201      	movs	r2, #1
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	409a      	lsls	r2, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10d      	bne.n	8002a26 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a14:	68f9      	ldr	r1, [r7, #12]
 8002a16:	6809      	ldr	r1, [r1, #0]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3318      	adds	r3, #24
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	440b      	add	r3, r1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e00f      	b.n	8002a46 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a30:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a36:	68f9      	ldr	r1, [r7, #12]
 8002a38:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a3a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3318      	adds	r3, #24
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	440b      	add	r3, r1
 8002a44:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6819      	ldr	r1, [r3, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3318      	adds	r3, #24
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	440b      	add	r3, r1
 8002a56:	3304      	adds	r3, #4
 8002a58:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	7d1b      	ldrb	r3, [r3, #20]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d111      	bne.n	8002a86 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3318      	adds	r3, #24
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3304      	adds	r3, #4
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	6811      	ldr	r1, [r2, #0]
 8002a76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	3318      	adds	r3, #24
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	440b      	add	r3, r1
 8002a82:	3304      	adds	r3, #4
 8002a84:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3307      	adds	r3, #7
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	061a      	lsls	r2, r3, #24
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3306      	adds	r3, #6
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	041b      	lsls	r3, r3, #16
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3305      	adds	r3, #5
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	3204      	adds	r2, #4
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	6811      	ldr	r1, [r2, #0]
 8002aae:	ea43 0200 	orr.w	r2, r3, r0
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002abc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3303      	adds	r3, #3
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	061a      	lsls	r2, r3, #24
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3302      	adds	r3, #2
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	041b      	lsls	r3, r3, #16
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	7812      	ldrb	r2, [r2, #0]
 8002ade:	4610      	mov	r0, r2
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	6811      	ldr	r1, [r2, #0]
 8002ae4:	ea43 0200 	orr.w	r2, r3, r0
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	440b      	add	r3, r1
 8002aee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002af2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3318      	adds	r3, #24
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	4413      	add	r3, r2
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	6811      	ldr	r1, [r2, #0]
 8002b06:	f043 0201 	orr.w	r2, r3, #1
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	440b      	add	r3, r1
 8002b12:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e00e      	b.n	8002b36 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e006      	b.n	8002b36 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
  }
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3724      	adds	r7, #36	; 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b085      	sub	sp, #20
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b52:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d002      	beq.n	8002b60 <HAL_CAN_ActivateNotification+0x1e>
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d109      	bne.n	8002b74 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6959      	ldr	r1, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e006      	b.n	8002b82 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
  }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bac:	4013      	ands	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc2:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	60d3      	str	r3, [r2, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	f003 0307 	and.w	r3, r3, #7
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	db0b      	blt.n	8002c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	f003 021f 	and.w	r2, r3, #31
 8002c0c:	4907      	ldr	r1, [pc, #28]	; (8002c2c <__NVIC_EnableIRQ+0x38>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	2001      	movs	r0, #1
 8002c16:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000e100 	.word	0xe000e100

08002c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	db0a      	blt.n	8002c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	490c      	ldr	r1, [pc, #48]	; (8002c7c <__NVIC_SetPriority+0x4c>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	0112      	lsls	r2, r2, #4
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	440b      	add	r3, r1
 8002c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c58:	e00a      	b.n	8002c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4908      	ldr	r1, [pc, #32]	; (8002c80 <__NVIC_SetPriority+0x50>)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	3b04      	subs	r3, #4
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	761a      	strb	r2, [r3, #24]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000e100 	.word	0xe000e100
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	; 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f1c3 0307 	rsb	r3, r3, #7
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	bf28      	it	cs
 8002ca2:	2304      	movcs	r3, #4
 8002ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d902      	bls.n	8002cb4 <NVIC_EncodePriority+0x30>
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3b03      	subs	r3, #3
 8002cb2:	e000      	b.n	8002cb6 <NVIC_EncodePriority+0x32>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	43d9      	mvns	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	4313      	orrs	r3, r2
         );
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3724      	adds	r7, #36	; 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff ff4c 	bl	8002b90 <__NVIC_SetPriorityGrouping>
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d12:	f7ff ff61 	bl	8002bd8 <__NVIC_GetPriorityGrouping>
 8002d16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	6978      	ldr	r0, [r7, #20]
 8002d1e:	f7ff ffb1 	bl	8002c84 <NVIC_EncodePriority>
 8002d22:	4602      	mov	r2, r0
 8002d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff80 	bl	8002c30 <__NVIC_SetPriority>
}
 8002d30:	bf00      	nop
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff ff54 	bl	8002bf4 <__NVIC_EnableIRQ>
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e08d      	b.n	8002e82 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4b47      	ldr	r3, [pc, #284]	; (8002e8c <HAL_DMA_Init+0x138>)
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d80f      	bhi.n	8002d92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	4b45      	ldr	r3, [pc, #276]	; (8002e90 <HAL_DMA_Init+0x13c>)
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a45      	ldr	r2, [pc, #276]	; (8002e94 <HAL_DMA_Init+0x140>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	009a      	lsls	r2, r3, #2
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a42      	ldr	r2, [pc, #264]	; (8002e98 <HAL_DMA_Init+0x144>)
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d90:	e00e      	b.n	8002db0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b40      	ldr	r3, [pc, #256]	; (8002e9c <HAL_DMA_Init+0x148>)
 8002d9a:	4413      	add	r3, r2
 8002d9c:	4a3d      	ldr	r2, [pc, #244]	; (8002e94 <HAL_DMA_Init+0x140>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	009a      	lsls	r2, r3, #2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a3c      	ldr	r2, [pc, #240]	; (8002ea0 <HAL_DMA_Init+0x14c>)
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f9b6 	bl	8003174 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e10:	d102      	bne.n	8002e18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e2c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d010      	beq.n	8002e58 <HAL_DMA_Init+0x104>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d80c      	bhi.n	8002e58 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9d6 	bl	80031f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	e008      	b.n	8002e6a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40020407 	.word	0x40020407
 8002e90:	bffdfff8 	.word	0xbffdfff8
 8002e94:	cccccccd 	.word	0xcccccccd
 8002e98:	40020000 	.word	0x40020000
 8002e9c:	bffdfbf8 	.word	0xbffdfbf8
 8002ea0:	40020400 	.word	0x40020400

08002ea4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_DMA_Start_IT+0x20>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e066      	b.n	8002f92 <HAL_DMA_Start_IT+0xee>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d155      	bne.n	8002f84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0201 	bic.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f8fb 	bl	80030f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 020e 	orr.w	r2, r2, #14
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	e00f      	b.n	8002f3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0204 	bic.w	r2, r2, #4
 8002f2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 020a 	orr.w	r2, r2, #10
 8002f3a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f58:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f70:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0201 	orr.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e005      	b.n	8002f90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f003 031c 	and.w	r3, r3, #28
 8002fba:	2204      	movs	r2, #4
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d026      	beq.n	8003014 <HAL_DMA_IRQHandler+0x7a>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d021      	beq.n	8003014 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d107      	bne.n	8002fee <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0204 	bic.w	r2, r2, #4
 8002fec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	f003 021c 	and.w	r2, r3, #28
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	2104      	movs	r1, #4
 8002ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8003000:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	2b00      	cmp	r3, #0
 8003008:	d071      	beq.n	80030ee <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003012:	e06c      	b.n	80030ee <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003018:	f003 031c 	and.w	r3, r3, #28
 800301c:	2202      	movs	r2, #2
 800301e:	409a      	lsls	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d02e      	beq.n	8003086 <HAL_DMA_IRQHandler+0xec>
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d029      	beq.n	8003086 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10b      	bne.n	8003058 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 020a 	bic.w	r2, r2, #10
 800304e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	f003 021c 	and.w	r2, r3, #28
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	2102      	movs	r1, #2
 8003066:	fa01 f202 	lsl.w	r2, r1, r2
 800306a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	2b00      	cmp	r3, #0
 800307a:	d038      	beq.n	80030ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003084:	e033      	b.n	80030ee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f003 031c 	and.w	r3, r3, #28
 800308e:	2208      	movs	r2, #8
 8003090:	409a      	lsls	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d02a      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x156>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d025      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 020e 	bic.w	r2, r2, #14
 80030b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	f003 021c 	and.w	r2, r3, #28
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	2101      	movs	r1, #1
 80030c2:	fa01 f202 	lsl.w	r2, r1, r2
 80030c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d004      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030ee:	bf00      	nop
 80030f0:	bf00      	nop
}
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800310e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003114:	2b00      	cmp	r3, #0
 8003116:	d004      	beq.n	8003122 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003120:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	f003 021c 	and.w	r2, r3, #28
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2101      	movs	r1, #1
 8003130:	fa01 f202 	lsl.w	r2, r1, r2
 8003134:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b10      	cmp	r3, #16
 8003144:	d108      	bne.n	8003158 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003156:	e007      	b.n	8003168 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	60da      	str	r2, [r3, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003184:	429a      	cmp	r2, r3
 8003186:	d80a      	bhi.n	800319e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003194:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6493      	str	r3, [r2, #72]	; 0x48
 800319c:	e007      	b.n	80031ae <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	009a      	lsls	r2, r3, #2
 80031a6:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80031a8:	4413      	add	r3, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	3b08      	subs	r3, #8
 80031b6:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80031c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	2201      	movs	r2, #1
 80031ce:	409a      	lsls	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	40020407 	.word	0x40020407
 80031e4:	4002081c 	.word	0x4002081c
 80031e8:	cccccccd 	.word	0xcccccccd
 80031ec:	40020880 	.word	0x40020880

080031f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	461a      	mov	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a08      	ldr	r2, [pc, #32]	; (8003234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003212:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3b01      	subs	r3, #1
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2201      	movs	r2, #1
 800321e:	409a      	lsls	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	1000823f 	.word	0x1000823f
 8003234:	40020940 	.word	0x40020940

08003238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003246:	e166      	b.n	8003516 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2101      	movs	r1, #1
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	4013      	ands	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8158 	beq.w	8003510 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d005      	beq.n	8003278 <HAL_GPIO_Init+0x40>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d130      	bne.n	80032da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	2203      	movs	r2, #3
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ae:	2201      	movs	r2, #1
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	f003 0201 	and.w	r2, r3, #1
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d017      	beq.n	8003316 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	2203      	movs	r2, #3
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d123      	bne.n	800336a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	08da      	lsrs	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3208      	adds	r2, #8
 800332a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800332e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	220f      	movs	r2, #15
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4013      	ands	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	08da      	lsrs	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3208      	adds	r2, #8
 8003364:	6939      	ldr	r1, [r7, #16]
 8003366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	2203      	movs	r2, #3
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 0203 	and.w	r2, r3, #3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80b2 	beq.w	8003510 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ac:	4b61      	ldr	r3, [pc, #388]	; (8003534 <HAL_GPIO_Init+0x2fc>)
 80033ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b0:	4a60      	ldr	r2, [pc, #384]	; (8003534 <HAL_GPIO_Init+0x2fc>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6613      	str	r3, [r2, #96]	; 0x60
 80033b8:	4b5e      	ldr	r3, [pc, #376]	; (8003534 <HAL_GPIO_Init+0x2fc>)
 80033ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033c4:	4a5c      	ldr	r2, [pc, #368]	; (8003538 <HAL_GPIO_Init+0x300>)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	089b      	lsrs	r3, r3, #2
 80033ca:	3302      	adds	r3, #2
 80033cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	220f      	movs	r2, #15
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4013      	ands	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033ee:	d02b      	beq.n	8003448 <HAL_GPIO_Init+0x210>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a52      	ldr	r2, [pc, #328]	; (800353c <HAL_GPIO_Init+0x304>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d025      	beq.n	8003444 <HAL_GPIO_Init+0x20c>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a51      	ldr	r2, [pc, #324]	; (8003540 <HAL_GPIO_Init+0x308>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d01f      	beq.n	8003440 <HAL_GPIO_Init+0x208>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a50      	ldr	r2, [pc, #320]	; (8003544 <HAL_GPIO_Init+0x30c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d019      	beq.n	800343c <HAL_GPIO_Init+0x204>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a4f      	ldr	r2, [pc, #316]	; (8003548 <HAL_GPIO_Init+0x310>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <HAL_GPIO_Init+0x200>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a4e      	ldr	r2, [pc, #312]	; (800354c <HAL_GPIO_Init+0x314>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00d      	beq.n	8003434 <HAL_GPIO_Init+0x1fc>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a4d      	ldr	r2, [pc, #308]	; (8003550 <HAL_GPIO_Init+0x318>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d007      	beq.n	8003430 <HAL_GPIO_Init+0x1f8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a4c      	ldr	r2, [pc, #304]	; (8003554 <HAL_GPIO_Init+0x31c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d101      	bne.n	800342c <HAL_GPIO_Init+0x1f4>
 8003428:	2307      	movs	r3, #7
 800342a:	e00e      	b.n	800344a <HAL_GPIO_Init+0x212>
 800342c:	2308      	movs	r3, #8
 800342e:	e00c      	b.n	800344a <HAL_GPIO_Init+0x212>
 8003430:	2306      	movs	r3, #6
 8003432:	e00a      	b.n	800344a <HAL_GPIO_Init+0x212>
 8003434:	2305      	movs	r3, #5
 8003436:	e008      	b.n	800344a <HAL_GPIO_Init+0x212>
 8003438:	2304      	movs	r3, #4
 800343a:	e006      	b.n	800344a <HAL_GPIO_Init+0x212>
 800343c:	2303      	movs	r3, #3
 800343e:	e004      	b.n	800344a <HAL_GPIO_Init+0x212>
 8003440:	2302      	movs	r3, #2
 8003442:	e002      	b.n	800344a <HAL_GPIO_Init+0x212>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_GPIO_Init+0x212>
 8003448:	2300      	movs	r3, #0
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	f002 0203 	and.w	r2, r2, #3
 8003450:	0092      	lsls	r2, r2, #2
 8003452:	4093      	lsls	r3, r2
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800345a:	4937      	ldr	r1, [pc, #220]	; (8003538 <HAL_GPIO_Init+0x300>)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	089b      	lsrs	r3, r3, #2
 8003460:	3302      	adds	r3, #2
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003468:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <HAL_GPIO_Init+0x320>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	43db      	mvns	r3, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4013      	ands	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800348c:	4a32      	ldr	r2, [pc, #200]	; (8003558 <HAL_GPIO_Init+0x320>)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003492:	4b31      	ldr	r3, [pc, #196]	; (8003558 <HAL_GPIO_Init+0x320>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	43db      	mvns	r3, r3
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4013      	ands	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034b6:	4a28      	ldr	r2, [pc, #160]	; (8003558 <HAL_GPIO_Init+0x320>)
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034bc:	4b26      	ldr	r3, [pc, #152]	; (8003558 <HAL_GPIO_Init+0x320>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034e0:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <HAL_GPIO_Init+0x320>)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034e6:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <HAL_GPIO_Init+0x320>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4013      	ands	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800350a:	4a13      	ldr	r2, [pc, #76]	; (8003558 <HAL_GPIO_Init+0x320>)
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	3301      	adds	r3, #1
 8003514:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	f47f ae91 	bne.w	8003248 <HAL_GPIO_Init+0x10>
  }
}
 8003526:	bf00      	nop
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40021000 	.word	0x40021000
 8003538:	40010000 	.word	0x40010000
 800353c:	48000400 	.word	0x48000400
 8003540:	48000800 	.word	0x48000800
 8003544:	48000c00 	.word	0x48000c00
 8003548:	48001000 	.word	0x48001000
 800354c:	48001400 	.word	0x48001400
 8003550:	48001800 	.word	0x48001800
 8003554:	48001c00 	.word	0x48001c00
 8003558:	40010400 	.word	0x40010400

0800355c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
 8003568:	4613      	mov	r3, r2
 800356a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800356c:	787b      	ldrb	r3, [r7, #1]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003578:	e002      	b.n	8003580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800357a:	887a      	ldrh	r2, [r7, #2]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800359e:	887a      	ldrh	r2, [r7, #2]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4013      	ands	r3, r2
 80035a4:	041a      	lsls	r2, r3, #16
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	43d9      	mvns	r1, r3
 80035aa:	887b      	ldrh	r3, [r7, #2]
 80035ac:	400b      	ands	r3, r1
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	619a      	str	r2, [r3, #24]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d006      	beq.n	80035e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035d6:	4a05      	ldr	r2, [pc, #20]	; (80035ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fd f934 	bl	800084c <HAL_GPIO_EXTI_Callback>
  }
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40010400 	.word	0x40010400

080035f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035f4:	4b0d      	ldr	r3, [pc, #52]	; (800362c <HAL_PWREx_GetVoltageRange+0x3c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003600:	d102      	bne.n	8003608 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003606:	e00b      	b.n	8003620 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_PWREx_GetVoltageRange+0x3c>)
 800360a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003616:	d102      	bne.n	800361e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800361c:	e000      	b.n	8003620 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800361e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40007000 	.word	0x40007000

08003630 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d141      	bne.n	80036c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800363e:	4b4b      	ldr	r3, [pc, #300]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364a:	d131      	bne.n	80036b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800364c:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003652:	4a46      	ldr	r2, [pc, #280]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003658:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800365c:	4b43      	ldr	r3, [pc, #268]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003664:	4a41      	ldr	r2, [pc, #260]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800366a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800366c:	4b40      	ldr	r3, [pc, #256]	; (8003770 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2232      	movs	r2, #50	; 0x32
 8003672:	fb02 f303 	mul.w	r3, r2, r3
 8003676:	4a3f      	ldr	r2, [pc, #252]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	0c9b      	lsrs	r3, r3, #18
 800367e:	3301      	adds	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003682:	e002      	b.n	800368a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	3b01      	subs	r3, #1
 8003688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800368a:	4b38      	ldr	r3, [pc, #224]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003696:	d102      	bne.n	800369e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f2      	bne.n	8003684 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800369e:	4b33      	ldr	r3, [pc, #204]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036aa:	d158      	bne.n	800375e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e057      	b.n	8003760 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036b0:	4b2e      	ldr	r3, [pc, #184]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b6:	4a2d      	ldr	r2, [pc, #180]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036c0:	e04d      	b.n	800375e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c8:	d141      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ca:	4b28      	ldr	r3, [pc, #160]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d6:	d131      	bne.n	800373c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036d8:	4b24      	ldr	r3, [pc, #144]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036de:	4a23      	ldr	r2, [pc, #140]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036e8:	4b20      	ldr	r3, [pc, #128]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f0:	4a1e      	ldr	r2, [pc, #120]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80036f8:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2232      	movs	r2, #50	; 0x32
 80036fe:	fb02 f303 	mul.w	r3, r2, r3
 8003702:	4a1c      	ldr	r2, [pc, #112]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	0c9b      	lsrs	r3, r3, #18
 800370a:	3301      	adds	r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800370e:	e002      	b.n	8003716 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3b01      	subs	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003722:	d102      	bne.n	800372a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f2      	bne.n	8003710 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d112      	bne.n	800375e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e011      	b.n	8003760 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003748:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800374c:	e007      	b.n	800375e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003756:	4a05      	ldr	r2, [pc, #20]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003758:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800375c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	40007000 	.word	0x40007000
 8003770:	20000000 	.word	0x20000000
 8003774:	431bde83 	.word	0x431bde83

08003778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	; 0x28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f000 bc68 	b.w	800405c <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378c:	4b97      	ldr	r3, [pc, #604]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 030c 	and.w	r3, r3, #12
 8003794:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003796:	4b95      	ldr	r3, [pc, #596]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80e6 	beq.w	800397a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <HAL_RCC_OscConfig+0x4c>
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	f040 808d 	bne.w	80038d6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	f040 8089 	bne.w	80038d6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037c4:	4b89      	ldr	r3, [pc, #548]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d006      	beq.n	80037de <HAL_RCC_OscConfig+0x66>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f000 bc3f 	b.w	800405c <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037e2:	4b82      	ldr	r3, [pc, #520]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d004      	beq.n	80037f8 <HAL_RCC_OscConfig+0x80>
 80037ee:	4b7f      	ldr	r3, [pc, #508]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f6:	e005      	b.n	8003804 <HAL_RCC_OscConfig+0x8c>
 80037f8:	4b7c      	ldr	r3, [pc, #496]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 80037fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003804:	4293      	cmp	r3, r2
 8003806:	d224      	bcs.n	8003852 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fe49 	bl	80044a4 <RCC_SetFlashLatencyFromMSIRange>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	f000 bc1f 	b.w	800405c <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800381e:	4b73      	ldr	r3, [pc, #460]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a72      	ldr	r2, [pc, #456]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 8003824:	f043 0308 	orr.w	r3, r3, #8
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b70      	ldr	r3, [pc, #448]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	496d      	ldr	r1, [pc, #436]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 8003838:	4313      	orrs	r3, r2
 800383a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800383c:	4b6b      	ldr	r3, [pc, #428]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	4968      	ldr	r1, [pc, #416]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
 8003850:	e025      	b.n	800389e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003852:	4b66      	ldr	r3, [pc, #408]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a65      	ldr	r2, [pc, #404]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 8003858:	f043 0308 	orr.w	r3, r3, #8
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4b63      	ldr	r3, [pc, #396]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	4960      	ldr	r1, [pc, #384]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003870:	4b5e      	ldr	r3, [pc, #376]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	495b      	ldr	r1, [pc, #364]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fe08 	bl	80044a4 <RCC_SetFlashLatencyFromMSIRange>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e3de      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800389e:	f000 fd21 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 80038a2:	4602      	mov	r2, r0
 80038a4:	4b51      	ldr	r3, [pc, #324]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	4950      	ldr	r1, [pc, #320]	; (80039f0 <HAL_RCC_OscConfig+0x278>)
 80038b0:	5ccb      	ldrb	r3, [r1, r3]
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	4a4e      	ldr	r2, [pc, #312]	; (80039f4 <HAL_RCC_OscConfig+0x27c>)
 80038bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038be:	4b4e      	ldr	r3, [pc, #312]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd fafa 	bl	8000ebc <HAL_InitTick>
 80038c8:	4603      	mov	r3, r0
 80038ca:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d052      	beq.n	8003978 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	e3c2      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d032      	beq.n	8003944 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038de:	4b43      	ldr	r3, [pc, #268]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a42      	ldr	r2, [pc, #264]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038ea:	f7fd fc35 	bl	8001158 <HAL_GetTick>
 80038ee:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038f2:	f7fd fc31 	bl	8001158 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e3ab      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003904:	4b39      	ldr	r3, [pc, #228]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003910:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a35      	ldr	r2, [pc, #212]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 8003916:	f043 0308 	orr.w	r3, r3, #8
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b33      	ldr	r3, [pc, #204]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	4930      	ldr	r1, [pc, #192]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800392e:	4b2f      	ldr	r3, [pc, #188]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	492b      	ldr	r1, [pc, #172]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]
 8003942:	e01a      	b.n	800397a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003944:	4b29      	ldr	r3, [pc, #164]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a28      	ldr	r2, [pc, #160]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003950:	f7fd fc02 	bl	8001158 <HAL_GetTick>
 8003954:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003958:	f7fd fbfe 	bl	8001158 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e378      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x1e0>
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003978:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d073      	beq.n	8003a6e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d005      	beq.n	8003998 <HAL_RCC_OscConfig+0x220>
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d10e      	bne.n	80039b0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2b03      	cmp	r3, #3
 8003996:	d10b      	bne.n	80039b0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	4b14      	ldr	r3, [pc, #80]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d063      	beq.n	8003a6c <HAL_RCC_OscConfig+0x2f4>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d15f      	bne.n	8003a6c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e355      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d106      	bne.n	80039c8 <HAL_RCC_OscConfig+0x250>
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e025      	b.n	8003a14 <HAL_RCC_OscConfig+0x29c>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d0:	d114      	bne.n	80039fc <HAL_RCC_OscConfig+0x284>
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a05      	ldr	r2, [pc, #20]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b03      	ldr	r3, [pc, #12]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a02      	ldr	r2, [pc, #8]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e013      	b.n	8003a14 <HAL_RCC_OscConfig+0x29c>
 80039ec:	40021000 	.word	0x40021000
 80039f0:	08005714 	.word	0x08005714
 80039f4:	20000000 	.word	0x20000000
 80039f8:	20000004 	.word	0x20000004
 80039fc:	4b8f      	ldr	r3, [pc, #572]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a8e      	ldr	r2, [pc, #568]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	4b8c      	ldr	r3, [pc, #560]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a8b      	ldr	r2, [pc, #556]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d013      	beq.n	8003a44 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fd fb9c 	bl	8001158 <HAL_GetTick>
 8003a20:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fd fb98 	bl	8001158 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	; 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e312      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a36:	4b81      	ldr	r3, [pc, #516]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0x2ac>
 8003a42:	e014      	b.n	8003a6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fd fb88 	bl	8001158 <HAL_GetTick>
 8003a48:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a4c:	f7fd fb84 	bl	8001158 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	; 0x64
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e2fe      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a5e:	4b77      	ldr	r3, [pc, #476]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x2d4>
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d060      	beq.n	8003b3c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_OscConfig+0x314>
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	d119      	bne.n	8003aba <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d116      	bne.n	8003aba <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a8c:	4b6b      	ldr	r3, [pc, #428]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x32c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e2db      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa4:	4b65      	ldr	r3, [pc, #404]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	061b      	lsls	r3, r3, #24
 8003ab2:	4962      	ldr	r1, [pc, #392]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab8:	e040      	b.n	8003b3c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d023      	beq.n	8003b0a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac2:	4b5e      	ldr	r3, [pc, #376]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a5d      	ldr	r2, [pc, #372]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fd fb43 	bl	8001158 <HAL_GetTick>
 8003ad2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad6:	f7fd fb3f 	bl	8001158 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e2b9      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae8:	4b54      	ldr	r3, [pc, #336]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af4:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	061b      	lsls	r3, r3, #24
 8003b02:	494e      	ldr	r1, [pc, #312]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
 8003b08:	e018      	b.n	8003b3c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b0a:	4b4c      	ldr	r3, [pc, #304]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a4b      	ldr	r2, [pc, #300]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b16:	f7fd fb1f 	bl	8001158 <HAL_GetTick>
 8003b1a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1e:	f7fd fb1b 	bl	8001158 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e295      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b30:	4b42      	ldr	r3, [pc, #264]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f0      	bne.n	8003b1e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8082 	beq.w	8003c4e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d05f      	beq.n	8003c12 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003b52:	4b3a      	ldr	r3, [pc, #232]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b58:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d037      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d006      	beq.n	8003b80 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e26d      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d01b      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003b8a:	4b2c      	ldr	r3, [pc, #176]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b90:	4a2a      	ldr	r2, [pc, #168]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b9a:	f7fd fadd 	bl	8001158 <HAL_GetTick>
 8003b9e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba2:	f7fd fad9 	bl	8001158 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b11      	cmp	r3, #17
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e253      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bb4:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1ef      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003bc2:	4b1e      	ldr	r3, [pc, #120]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc8:	f023 0210 	bic.w	r2, r3, #16
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	491a      	ldr	r1, [pc, #104]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd8:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bde:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be8:	f7fd fab6 	bl	8001158 <HAL_GetTick>
 8003bec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf0:	f7fd fab2 	bl	8001158 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b11      	cmp	r3, #17
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e22c      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c02:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0ef      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x478>
 8003c10:	e01d      	b.n	8003c4e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c18:	4a08      	ldr	r2, [pc, #32]	; (8003c3c <HAL_RCC_OscConfig+0x4c4>)
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c22:	f7fd fa99 	bl	8001158 <HAL_GetTick>
 8003c26:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c28:	e00a      	b.n	8003c40 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c2a:	f7fd fa95 	bl	8001158 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b11      	cmp	r3, #17
 8003c36:	d903      	bls.n	8003c40 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e20f      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
 8003c3c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c40:	4b83      	ldr	r3, [pc, #524]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1ed      	bne.n	8003c2a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 80bd 	beq.w	8003dd6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c62:	4b7b      	ldr	r3, [pc, #492]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10e      	bne.n	8003c8c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6e:	4b78      	ldr	r3, [pc, #480]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	4a77      	ldr	r2, [pc, #476]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c78:	6593      	str	r3, [r2, #88]	; 0x58
 8003c7a:	4b75      	ldr	r3, [pc, #468]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c8c:	4b71      	ldr	r3, [pc, #452]	; (8003e54 <HAL_RCC_OscConfig+0x6dc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d118      	bne.n	8003cca <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c98:	4b6e      	ldr	r3, [pc, #440]	; (8003e54 <HAL_RCC_OscConfig+0x6dc>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6d      	ldr	r2, [pc, #436]	; (8003e54 <HAL_RCC_OscConfig+0x6dc>)
 8003c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca4:	f7fd fa58 	bl	8001158 <HAL_GetTick>
 8003ca8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cac:	f7fd fa54 	bl	8001158 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e1ce      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cbe:	4b65      	ldr	r3, [pc, #404]	; (8003e54 <HAL_RCC_OscConfig+0x6dc>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d02c      	beq.n	8003d30 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003cd6:	4b5e      	ldr	r3, [pc, #376]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce8:	4959      	ldr	r1, [pc, #356]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d010      	beq.n	8003d1e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003cfc:	4b54      	ldr	r3, [pc, #336]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	4a53      	ldr	r2, [pc, #332]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003d04:	f043 0304 	orr.w	r3, r3, #4
 8003d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d0c:	4b50      	ldr	r3, [pc, #320]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	4a4f      	ldr	r2, [pc, #316]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d1c:	e018      	b.n	8003d50 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d1e:	4b4c      	ldr	r3, [pc, #304]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d24:	4a4a      	ldr	r2, [pc, #296]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d2e:	e00f      	b.n	8003d50 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d30:	4b47      	ldr	r3, [pc, #284]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d36:	4a46      	ldr	r2, [pc, #280]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d40:	4b43      	ldr	r3, [pc, #268]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d46:	4a42      	ldr	r2, [pc, #264]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003d48:	f023 0304 	bic.w	r3, r3, #4
 8003d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d016      	beq.n	8003d86 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fd f9fe 	bl	8001158 <HAL_GetTick>
 8003d5c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d60:	f7fd f9fa 	bl	8001158 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e172      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d76:	4b36      	ldr	r3, [pc, #216]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ed      	beq.n	8003d60 <HAL_RCC_OscConfig+0x5e8>
 8003d84:	e01d      	b.n	8003dc2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7fd f9e7 	bl	8001158 <HAL_GetTick>
 8003d8a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8e:	f7fd f9e3 	bl	8001158 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e15b      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da4:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1ed      	bne.n	8003d8e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003db2:	4b27      	ldr	r3, [pc, #156]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db8:	4a25      	ldr	r2, [pc, #148]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d105      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dca:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	4a20      	ldr	r2, [pc, #128]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d041      	beq.n	8003e66 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d01c      	beq.n	8003e24 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dea:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003df0:	4a17      	ldr	r2, [pc, #92]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfa:	f7fd f9ad 	bl	8001158 <HAL_GetTick>
 8003dfe:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e02:	f7fd f9a9 	bl	8001158 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e123      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e14:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0ef      	beq.n	8003e02 <HAL_RCC_OscConfig+0x68a>
 8003e22:	e020      	b.n	8003e66 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e24:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e2a:	4a09      	ldr	r2, [pc, #36]	; (8003e50 <HAL_RCC_OscConfig+0x6d8>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e34:	f7fd f990 	bl	8001158 <HAL_GetTick>
 8003e38:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e3a:	e00d      	b.n	8003e58 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e3c:	f7fd f98c 	bl	8001158 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d906      	bls.n	8003e58 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e106      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e58:	4b82      	ldr	r3, [pc, #520]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ea      	bne.n	8003e3c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 80f5 	beq.w	800405a <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	f040 80cb 	bne.w	8004010 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e7a:	4b7a      	ldr	r3, [pc, #488]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f003 0203 	and.w	r2, r3, #3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d12c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d123      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d11b      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d113      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d109      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	085b      	lsrs	r3, r3, #1
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d06d      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	2b0c      	cmp	r3, #12
 8003eec:	d068      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003eee:	4b5d      	ldr	r3, [pc, #372]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003efa:	4b5a      	ldr	r3, [pc, #360]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e0a8      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f0a:	4b56      	ldr	r3, [pc, #344]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a55      	ldr	r2, [pc, #340]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003f10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f16:	f7fd f91f 	bl	8001158 <HAL_GetTick>
 8003f1a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1e:	f7fd f91b 	bl	8001158 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e095      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f30:	4b4c      	ldr	r3, [pc, #304]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f0      	bne.n	8003f1e <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f3c:	4b49      	ldr	r3, [pc, #292]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	4b49      	ldr	r3, [pc, #292]	; (8004068 <HAL_RCC_OscConfig+0x8f0>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f4c:	3a01      	subs	r2, #1
 8003f4e:	0112      	lsls	r2, r2, #4
 8003f50:	4311      	orrs	r1, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f56:	0212      	lsls	r2, r2, #8
 8003f58:	4311      	orrs	r1, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f5e:	0852      	lsrs	r2, r2, #1
 8003f60:	3a01      	subs	r2, #1
 8003f62:	0552      	lsls	r2, r2, #21
 8003f64:	4311      	orrs	r1, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f6a:	0852      	lsrs	r2, r2, #1
 8003f6c:	3a01      	subs	r2, #1
 8003f6e:	0652      	lsls	r2, r2, #25
 8003f70:	4311      	orrs	r1, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f76:	06d2      	lsls	r2, r2, #27
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	493a      	ldr	r1, [pc, #232]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f80:	4b38      	ldr	r3, [pc, #224]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a37      	ldr	r2, [pc, #220]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f8c:	4b35      	ldr	r3, [pc, #212]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4a34      	ldr	r2, [pc, #208]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f98:	f7fd f8de 	bl	8001158 <HAL_GetTick>
 8003f9c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fd f8da 	bl	8001158 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e054      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb2:	4b2c      	ldr	r3, [pc, #176]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fbe:	e04c      	b.n	800405a <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e04b      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc4:	4b27      	ldr	r3, [pc, #156]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d144      	bne.n	800405a <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a23      	ldr	r2, [pc, #140]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fdc:	4b21      	ldr	r3, [pc, #132]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4a20      	ldr	r2, [pc, #128]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8003fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fe8:	f7fd f8b6 	bl	8001158 <HAL_GetTick>
 8003fec:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fd f8b2 	bl	8001158 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e02c      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004002:	4b18      	ldr	r3, [pc, #96]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x878>
 800400e:	e024      	b.n	800405a <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	2b0c      	cmp	r3, #12
 8004014:	d01f      	beq.n	8004056 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004016:	4b13      	ldr	r3, [pc, #76]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a12      	ldr	r2, [pc, #72]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 800401c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004022:	f7fd f899 	bl	8001158 <HAL_GetTick>
 8004026:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402a:	f7fd f895 	bl	8001158 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e00f      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f0      	bne.n	800402a <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	4905      	ldr	r1, [pc, #20]	; (8004064 <HAL_RCC_OscConfig+0x8ec>)
 800404e:	4b07      	ldr	r3, [pc, #28]	; (800406c <HAL_RCC_OscConfig+0x8f4>)
 8004050:	4013      	ands	r3, r2
 8004052:	60cb      	str	r3, [r1, #12]
 8004054:	e001      	b.n	800405a <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3728      	adds	r7, #40	; 0x28
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40021000 	.word	0x40021000
 8004068:	019d800c 	.word	0x019d800c
 800406c:	feeefffc 	.word	0xfeeefffc

08004070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e11d      	b.n	80042c4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004088:	4b90      	ldr	r3, [pc, #576]	; (80042cc <HAL_RCC_ClockConfig+0x25c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d910      	bls.n	80040b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b8d      	ldr	r3, [pc, #564]	; (80042cc <HAL_RCC_ClockConfig+0x25c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 020f 	bic.w	r2, r3, #15
 800409e:	498b      	ldr	r1, [pc, #556]	; (80042cc <HAL_RCC_ClockConfig+0x25c>)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b89      	ldr	r3, [pc, #548]	; (80042cc <HAL_RCC_ClockConfig+0x25c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e105      	b.n	80042c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d010      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	4b81      	ldr	r3, [pc, #516]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d908      	bls.n	80040e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d4:	4b7e      	ldr	r3, [pc, #504]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	497b      	ldr	r1, [pc, #492]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d079      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d11e      	bne.n	8004138 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fa:	4b75      	ldr	r3, [pc, #468]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0dc      	b.n	80042c4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800410a:	f000 fa25 	bl	8004558 <RCC_GetSysClockFreqFromPLLSource>
 800410e:	4603      	mov	r3, r0
 8004110:	4a70      	ldr	r2, [pc, #448]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d946      	bls.n	80041a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004116:	4b6e      	ldr	r3, [pc, #440]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d140      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004122:	4b6b      	ldr	r3, [pc, #428]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800412a:	4a69      	ldr	r2, [pc, #420]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 800412c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004130:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e035      	b.n	80041a4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d107      	bne.n	8004150 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004140:	4b63      	ldr	r3, [pc, #396]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d115      	bne.n	8004178 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0b9      	b.n	80042c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d107      	bne.n	8004168 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004158:	4b5d      	ldr	r3, [pc, #372]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0ad      	b.n	80042c4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004168:	4b59      	ldr	r3, [pc, #356]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0a5      	b.n	80042c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004178:	f000 f8b4 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 800417c:	4603      	mov	r3, r0
 800417e:	4a55      	ldr	r2, [pc, #340]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d90f      	bls.n	80041a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004184:	4b52      	ldr	r3, [pc, #328]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d109      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004190:	4b4f      	ldr	r3, [pc, #316]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004198:	4a4d      	ldr	r2, [pc, #308]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 800419a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041a4:	4b4a      	ldr	r3, [pc, #296]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f023 0203 	bic.w	r2, r3, #3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4947      	ldr	r1, [pc, #284]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b6:	f7fc ffcf 	bl	8001158 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041bc:	e00a      	b.n	80041d4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041be:	f7fc ffcb 	bl	8001158 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e077      	b.n	80042c4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d4:	4b3e      	ldr	r3, [pc, #248]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 020c 	and.w	r2, r3, #12
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d1eb      	bne.n	80041be <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b80      	cmp	r3, #128	; 0x80
 80041ea:	d105      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80041ec:	4b38      	ldr	r3, [pc, #224]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4a37      	ldr	r2, [pc, #220]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 80041f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041f6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d010      	beq.n	8004226 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	4b31      	ldr	r3, [pc, #196]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004210:	429a      	cmp	r2, r3
 8004212:	d208      	bcs.n	8004226 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004214:	4b2e      	ldr	r3, [pc, #184]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	492b      	ldr	r1, [pc, #172]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004226:	4b29      	ldr	r3, [pc, #164]	; (80042cc <HAL_RCC_ClockConfig+0x25c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d210      	bcs.n	8004256 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004234:	4b25      	ldr	r3, [pc, #148]	; (80042cc <HAL_RCC_ClockConfig+0x25c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 020f 	bic.w	r2, r3, #15
 800423c:	4923      	ldr	r1, [pc, #140]	; (80042cc <HAL_RCC_ClockConfig+0x25c>)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	4313      	orrs	r3, r2
 8004242:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004244:	4b21      	ldr	r3, [pc, #132]	; (80042cc <HAL_RCC_ClockConfig+0x25c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d001      	beq.n	8004256 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e036      	b.n	80042c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d008      	beq.n	8004274 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004262:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	4918      	ldr	r1, [pc, #96]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004270:	4313      	orrs	r3, r2
 8004272:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004280:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4910      	ldr	r1, [pc, #64]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004290:	4313      	orrs	r3, r2
 8004292:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004294:	f000 f826 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 8004298:	4602      	mov	r2, r0
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	091b      	lsrs	r3, r3, #4
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	490c      	ldr	r1, [pc, #48]	; (80042d8 <HAL_RCC_ClockConfig+0x268>)
 80042a6:	5ccb      	ldrb	r3, [r1, r3]
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
 80042b0:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <HAL_RCC_ClockConfig+0x26c>)
 80042b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042b4:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <HAL_RCC_ClockConfig+0x270>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fc fdff 	bl	8000ebc <HAL_InitTick>
 80042be:	4603      	mov	r3, r0
 80042c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40022000 	.word	0x40022000
 80042d0:	40021000 	.word	0x40021000
 80042d4:	04c4b400 	.word	0x04c4b400
 80042d8:	08005714 	.word	0x08005714
 80042dc:	20000000 	.word	0x20000000
 80042e0:	20000004 	.word	0x20000004

080042e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b089      	sub	sp, #36	; 0x24
 80042e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	2300      	movs	r3, #0
 80042f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f2:	4b3e      	ldr	r3, [pc, #248]	; (80043ec <HAL_RCC_GetSysClockFreq+0x108>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042fc:	4b3b      	ldr	r3, [pc, #236]	; (80043ec <HAL_RCC_GetSysClockFreq+0x108>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x34>
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	2b0c      	cmp	r3, #12
 8004310:	d121      	bne.n	8004356 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d11e      	bne.n	8004356 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004318:	4b34      	ldr	r3, [pc, #208]	; (80043ec <HAL_RCC_GetSysClockFreq+0x108>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004324:	4b31      	ldr	r3, [pc, #196]	; (80043ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432a:	0a1b      	lsrs	r3, r3, #8
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	e005      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004334:	4b2d      	ldr	r3, [pc, #180]	; (80043ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	091b      	lsrs	r3, r3, #4
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004340:	4a2b      	ldr	r2, [pc, #172]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004348:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10d      	bne.n	800436c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004354:	e00a      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b04      	cmp	r3, #4
 800435a:	d102      	bne.n	8004362 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800435c:	4b25      	ldr	r3, [pc, #148]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	e004      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d101      	bne.n	800436c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004368:	4b23      	ldr	r3, [pc, #140]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800436a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b0c      	cmp	r3, #12
 8004370:	d134      	bne.n	80043dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004372:	4b1e      	ldr	r3, [pc, #120]	; (80043ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d003      	beq.n	800438a <HAL_RCC_GetSysClockFreq+0xa6>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d003      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0xac>
 8004388:	e005      	b.n	8004396 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800438a:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800438c:	617b      	str	r3, [r7, #20]
      break;
 800438e:	e005      	b.n	800439c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004390:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004392:	617b      	str	r3, [r7, #20]
      break;
 8004394:	e002      	b.n	800439c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	617b      	str	r3, [r7, #20]
      break;
 800439a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800439c:	4b13      	ldr	r3, [pc, #76]	; (80043ec <HAL_RCC_GetSysClockFreq+0x108>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	3301      	adds	r3, #1
 80043a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043aa:	4b10      	ldr	r3, [pc, #64]	; (80043ec <HAL_RCC_GetSysClockFreq+0x108>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	fb03 f202 	mul.w	r2, r3, r2
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043c2:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <HAL_RCC_GetSysClockFreq+0x108>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	0e5b      	lsrs	r3, r3, #25
 80043c8:	f003 0303 	and.w	r3, r3, #3
 80043cc:	3301      	adds	r3, #1
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043dc:	69bb      	ldr	r3, [r7, #24]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3724      	adds	r7, #36	; 0x24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40021000 	.word	0x40021000
 80043f0:	0800572c 	.word	0x0800572c
 80043f4:	00f42400 	.word	0x00f42400
 80043f8:	007a1200 	.word	0x007a1200

080043fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004400:	4b03      	ldr	r3, [pc, #12]	; (8004410 <HAL_RCC_GetHCLKFreq+0x14>)
 8004402:	681b      	ldr	r3, [r3, #0]
}
 8004404:	4618      	mov	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	20000000 	.word	0x20000000

08004414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004418:	f7ff fff0 	bl	80043fc <HAL_RCC_GetHCLKFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	0adb      	lsrs	r3, r3, #11
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	4904      	ldr	r1, [pc, #16]	; (800443c <HAL_RCC_GetPCLK2Freq+0x28>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004434:	4618      	mov	r0, r3
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40021000 	.word	0x40021000
 800443c:	08005724 	.word	0x08005724

08004440 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	220f      	movs	r2, #15
 800444e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004450:	4b12      	ldr	r3, [pc, #72]	; (800449c <HAL_RCC_GetClockConfig+0x5c>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0203 	and.w	r2, r3, #3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <HAL_RCC_GetClockConfig+0x5c>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004468:	4b0c      	ldr	r3, [pc, #48]	; (800449c <HAL_RCC_GetClockConfig+0x5c>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004474:	4b09      	ldr	r3, [pc, #36]	; (800449c <HAL_RCC_GetClockConfig+0x5c>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	08db      	lsrs	r3, r3, #3
 800447a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004482:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <HAL_RCC_GetClockConfig+0x60>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 020f 	and.w	r2, r3, #15
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	601a      	str	r2, [r3, #0]
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000
 80044a0:	40022000 	.word	0x40022000

080044a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044b0:	4b27      	ldr	r3, [pc, #156]	; (8004550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044bc:	f7ff f898 	bl	80035f0 <HAL_PWREx_GetVoltageRange>
 80044c0:	6178      	str	r0, [r7, #20]
 80044c2:	e014      	b.n	80044ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044c4:	4b22      	ldr	r3, [pc, #136]	; (8004550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c8:	4a21      	ldr	r2, [pc, #132]	; (8004550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ce:	6593      	str	r3, [r2, #88]	; 0x58
 80044d0:	4b1f      	ldr	r3, [pc, #124]	; (8004550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044dc:	f7ff f888 	bl	80035f0 <HAL_PWREx_GetVoltageRange>
 80044e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044e2:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e6:	4a1a      	ldr	r2, [pc, #104]	; (8004550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f4:	d10b      	bne.n	800450e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b80      	cmp	r3, #128	; 0x80
 80044fa:	d913      	bls.n	8004524 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2ba0      	cmp	r3, #160	; 0xa0
 8004500:	d902      	bls.n	8004508 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004502:	2302      	movs	r3, #2
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	e00d      	b.n	8004524 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004508:	2301      	movs	r3, #1
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	e00a      	b.n	8004524 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b7f      	cmp	r3, #127	; 0x7f
 8004512:	d902      	bls.n	800451a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004514:	2302      	movs	r3, #2
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	e004      	b.n	8004524 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b70      	cmp	r3, #112	; 0x70
 800451e:	d101      	bne.n	8004524 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004520:	2301      	movs	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f023 020f 	bic.w	r2, r3, #15
 800452c:	4909      	ldr	r1, [pc, #36]	; (8004554 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004534:	4b07      	ldr	r3, [pc, #28]	; (8004554 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	429a      	cmp	r2, r3
 8004540:	d001      	beq.n	8004546 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40021000 	.word	0x40021000
 8004554:	40022000 	.word	0x40022000

08004558 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800455e:	4b2d      	ldr	r3, [pc, #180]	; (8004614 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b03      	cmp	r3, #3
 800456c:	d00b      	beq.n	8004586 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b03      	cmp	r3, #3
 8004572:	d825      	bhi.n	80045c0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d008      	beq.n	800458c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d11f      	bne.n	80045c0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004580:	4b25      	ldr	r3, [pc, #148]	; (8004618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004582:	613b      	str	r3, [r7, #16]
    break;
 8004584:	e01f      	b.n	80045c6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004586:	4b25      	ldr	r3, [pc, #148]	; (800461c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004588:	613b      	str	r3, [r7, #16]
    break;
 800458a:	e01c      	b.n	80045c6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800458c:	4b21      	ldr	r3, [pc, #132]	; (8004614 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d107      	bne.n	80045a8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004598:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800459a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	e005      	b.n	80045b4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045a8:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80045b4:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045bc:	613b      	str	r3, [r7, #16]
    break;
 80045be:	e002      	b.n	80045c6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]
    break;
 80045c4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045c6:	4b13      	ldr	r3, [pc, #76]	; (8004614 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	091b      	lsrs	r3, r3, #4
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	3301      	adds	r3, #1
 80045d2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	0a1b      	lsrs	r3, r3, #8
 80045da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	fb03 f202 	mul.w	r2, r3, r2
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ea:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045ec:	4b09      	ldr	r3, [pc, #36]	; (8004614 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	0e5b      	lsrs	r3, r3, #25
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	3301      	adds	r3, #1
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004606:	683b      	ldr	r3, [r7, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	40021000 	.word	0x40021000
 8004618:	00f42400 	.word	0x00f42400
 800461c:	007a1200 	.word	0x007a1200
 8004620:	0800572c 	.word	0x0800572c

08004624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800462c:	2300      	movs	r3, #0
 800462e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004630:	2300      	movs	r3, #0
 8004632:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800463c:	2b00      	cmp	r3, #0
 800463e:	d040      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004644:	2b80      	cmp	r3, #128	; 0x80
 8004646:	d02a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004648:	2b80      	cmp	r3, #128	; 0x80
 800464a:	d825      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800464c:	2b60      	cmp	r3, #96	; 0x60
 800464e:	d026      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004650:	2b60      	cmp	r3, #96	; 0x60
 8004652:	d821      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d006      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	d81d      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d009      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004660:	2b20      	cmp	r3, #32
 8004662:	d010      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004664:	e018      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004666:	4b89      	ldr	r3, [pc, #548]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	4a88      	ldr	r2, [pc, #544]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800466c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004670:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004672:	e015      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3304      	adds	r3, #4
 8004678:	2100      	movs	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fb3e 	bl	8004cfc <RCCEx_PLLSAI1_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004684:	e00c      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3320      	adds	r3, #32
 800468a:	2100      	movs	r1, #0
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fc29 	bl	8004ee4 <RCCEx_PLLSAI2_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004696:	e003      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	74fb      	strb	r3, [r7, #19]
      break;
 800469c:	e000      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800469e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10b      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046a6:	4b79      	ldr	r3, [pc, #484]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ac:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b4:	4975      	ldr	r1, [pc, #468]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80046bc:	e001      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046be:	7cfb      	ldrb	r3, [r7, #19]
 80046c0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d047      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d6:	d030      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80046d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046dc:	d82a      	bhi.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046e2:	d02a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80046e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046e8:	d824      	bhi.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ee:	d008      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80046f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f4:	d81e      	bhi.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80046fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fe:	d010      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004700:	e018      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004702:	4b62      	ldr	r3, [pc, #392]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	4a61      	ldr	r2, [pc, #388]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800470c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800470e:	e015      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	2100      	movs	r1, #0
 8004716:	4618      	mov	r0, r3
 8004718:	f000 faf0 	bl	8004cfc <RCCEx_PLLSAI1_Config>
 800471c:	4603      	mov	r3, r0
 800471e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004720:	e00c      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3320      	adds	r3, #32
 8004726:	2100      	movs	r1, #0
 8004728:	4618      	mov	r0, r3
 800472a:	f000 fbdb 	bl	8004ee4 <RCCEx_PLLSAI2_Config>
 800472e:	4603      	mov	r3, r0
 8004730:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004732:	e003      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	74fb      	strb	r3, [r7, #19]
      break;
 8004738:	e000      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800473a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800473c:	7cfb      	ldrb	r3, [r7, #19]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004742:	4b52      	ldr	r3, [pc, #328]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004744:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004750:	494e      	ldr	r1, [pc, #312]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004758:	e001      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 809f 	beq.w	80048aa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800476c:	2300      	movs	r3, #0
 800476e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004770:	4b46      	ldr	r3, [pc, #280]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00d      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004786:	4b41      	ldr	r3, [pc, #260]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	4a40      	ldr	r2, [pc, #256]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800478c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004790:	6593      	str	r3, [r2, #88]	; 0x58
 8004792:	4b3e      	ldr	r3, [pc, #248]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800479e:	2301      	movs	r3, #1
 80047a0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047a2:	4b3b      	ldr	r3, [pc, #236]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a3a      	ldr	r2, [pc, #232]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047ae:	f7fc fcd3 	bl	8001158 <HAL_GetTick>
 80047b2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047b4:	e009      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b6:	f7fc fccf 	bl	8001158 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d902      	bls.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	74fb      	strb	r3, [r7, #19]
        break;
 80047c8:	e005      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047ca:	4b31      	ldr	r3, [pc, #196]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0ef      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d15b      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047dc:	4b2b      	ldr	r3, [pc, #172]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01f      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d019      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047fa:	4b24      	ldr	r3, [pc, #144]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004804:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004806:	4b21      	ldr	r3, [pc, #132]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	4a1f      	ldr	r2, [pc, #124]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800480e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004816:	4b1d      	ldr	r3, [pc, #116]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	4a1b      	ldr	r2, [pc, #108]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800481e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004826:	4a19      	ldr	r2, [pc, #100]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d016      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fc fc8e 	bl	8001158 <HAL_GetTick>
 800483c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483e:	e00b      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004840:	f7fc fc8a 	bl	8001158 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f241 3288 	movw	r2, #5000	; 0x1388
 800484e:	4293      	cmp	r3, r2
 8004850:	d902      	bls.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	74fb      	strb	r3, [r7, #19]
            break;
 8004856:	e006      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004858:	4b0c      	ldr	r3, [pc, #48]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0ec      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004866:	7cfb      	ldrb	r3, [r7, #19]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10c      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800487c:	4903      	ldr	r1, [pc, #12]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004884:	e008      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004886:	7cfb      	ldrb	r3, [r7, #19]
 8004888:	74bb      	strb	r3, [r7, #18]
 800488a:	e005      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800488c:	40021000 	.word	0x40021000
 8004890:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004894:	7cfb      	ldrb	r3, [r7, #19]
 8004896:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004898:	7c7b      	ldrb	r3, [r7, #17]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d105      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489e:	4ba0      	ldr	r3, [pc, #640]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a2:	4a9f      	ldr	r2, [pc, #636]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048b6:	4b9a      	ldr	r3, [pc, #616]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048bc:	f023 0203 	bic.w	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c4:	4996      	ldr	r1, [pc, #600]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048d8:	4b91      	ldr	r3, [pc, #580]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048de:	f023 020c 	bic.w	r2, r3, #12
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	498e      	ldr	r1, [pc, #568]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048fa:	4b89      	ldr	r3, [pc, #548]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004908:	4985      	ldr	r1, [pc, #532]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800491c:	4b80      	ldr	r3, [pc, #512]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492a:	497d      	ldr	r1, [pc, #500]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800493e:	4b78      	ldr	r3, [pc, #480]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004944:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494c:	4974      	ldr	r1, [pc, #464]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004960:	4b6f      	ldr	r3, [pc, #444]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004966:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496e:	496c      	ldr	r1, [pc, #432]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004982:	4b67      	ldr	r3, [pc, #412]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004988:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004990:	4963      	ldr	r1, [pc, #396]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049a4:	4b5e      	ldr	r3, [pc, #376]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049b2:	495b      	ldr	r1, [pc, #364]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049c6:	4b56      	ldr	r3, [pc, #344]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	4952      	ldr	r1, [pc, #328]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049e8:	4b4d      	ldr	r3, [pc, #308]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f6:	494a      	ldr	r1, [pc, #296]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a0a:	4b45      	ldr	r3, [pc, #276]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a18:	4941      	ldr	r1, [pc, #260]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a2c:	4b3c      	ldr	r3, [pc, #240]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a32:	f023 0203 	bic.w	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a3a:	4939      	ldr	r1, [pc, #228]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d028      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a4e:	4b34      	ldr	r3, [pc, #208]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a5c:	4930      	ldr	r1, [pc, #192]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a6c:	d106      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a6e:	4b2c      	ldr	r3, [pc, #176]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	4a2b      	ldr	r2, [pc, #172]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a78:	60d3      	str	r3, [r2, #12]
 8004a7a:	e011      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 f935 	bl	8004cfc <RCCEx_PLLSAI1_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a96:	7cfb      	ldrb	r3, [r7, #19]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004a9c:	7cfb      	ldrb	r3, [r7, #19]
 8004a9e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d04d      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab4:	d108      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004ab6:	4b1a      	ldr	r3, [pc, #104]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004abc:	4a18      	ldr	r2, [pc, #96]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ac2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ac6:	e012      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ac8:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ace:	4a14      	ldr	r2, [pc, #80]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ad0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ad4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ad8:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ade:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ae6:	490e      	ldr	r1, [pc, #56]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004af6:	d106      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004af8:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4a08      	ldr	r2, [pc, #32]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b02:	60d3      	str	r3, [r2, #12]
 8004b04:	e020      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b0e:	d109      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b10:	4b03      	ldr	r3, [pc, #12]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	4a02      	ldr	r2, [pc, #8]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1a:	60d3      	str	r3, [r2, #12]
 8004b1c:	e014      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004b1e:	bf00      	nop
 8004b20:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3304      	adds	r3, #4
 8004b32:	2101      	movs	r1, #1
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 f8e1 	bl	8004cfc <RCCEx_PLLSAI1_Config>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b3e:	7cfb      	ldrb	r3, [r7, #19]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004b44:	7cfb      	ldrb	r3, [r7, #19]
 8004b46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d028      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b54:	4b68      	ldr	r3, [pc, #416]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b62:	4965      	ldr	r1, [pc, #404]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b72:	d106      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b74:	4b60      	ldr	r3, [pc, #384]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4a5f      	ldr	r2, [pc, #380]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b7e:	60d3      	str	r3, [r2, #12]
 8004b80:	e011      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b8a:	d10c      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	2101      	movs	r1, #1
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 f8b2 	bl	8004cfc <RCCEx_PLLSAI1_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b9c:	7cfb      	ldrb	r3, [r7, #19]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004ba2:	7cfb      	ldrb	r3, [r7, #19]
 8004ba4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01e      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bb2:	4b51      	ldr	r3, [pc, #324]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc2:	494d      	ldr	r1, [pc, #308]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	2102      	movs	r1, #2
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f88d 	bl	8004cfc <RCCEx_PLLSAI1_Config>
 8004be2:	4603      	mov	r3, r0
 8004be4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004be6:	7cfb      	ldrb	r3, [r7, #19]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004bec:	7cfb      	ldrb	r3, [r7, #19]
 8004bee:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bfc:	4b3e      	ldr	r3, [pc, #248]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c02:	f023 0204 	bic.w	r2, r3, #4
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c0c:	493a      	ldr	r1, [pc, #232]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00b      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c20:	4b35      	ldr	r3, [pc, #212]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c26:	f023 0218 	bic.w	r2, r3, #24
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	4931      	ldr	r1, [pc, #196]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d035      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c44:	4b2c      	ldr	r3, [pc, #176]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a2b      	ldr	r2, [pc, #172]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c50:	f7fc fa82 	bl	8001158 <HAL_GetTick>
 8004c54:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c56:	e009      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c58:	f7fc fa7e 	bl	8001158 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d902      	bls.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	74fb      	strb	r3, [r7, #19]
        break;
 8004c6a:	e005      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c6c:	4b22      	ldr	r3, [pc, #136]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1ef      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004c78:	7cfb      	ldrb	r3, [r7, #19]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d113      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004c7e:	4b1e      	ldr	r3, [pc, #120]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c8e:	491a      	ldr	r1, [pc, #104]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3320      	adds	r3, #32
 8004c9a:	2102      	movs	r1, #2
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 f921 	bl	8004ee4 <RCCEx_PLLSAI2_Config>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004ca6:	7cfb      	ldrb	r3, [r7, #19]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004cac:	7cfb      	ldrb	r3, [r7, #19]
 8004cae:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d017      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004cbc:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004cbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ccc:	490a      	ldr	r1, [pc, #40]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cde:	d105      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4a04      	ldr	r2, [pc, #16]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cec:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000

08004cfc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d0a:	4b72      	ldr	r3, [pc, #456]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00e      	beq.n	8004d34 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d16:	4b6f      	ldr	r3, [pc, #444]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f003 0203 	and.w	r2, r3, #3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d103      	bne.n	8004d2e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
       ||
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d142      	bne.n	8004db4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	73fb      	strb	r3, [r7, #15]
 8004d32:	e03f      	b.n	8004db4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d018      	beq.n	8004d6e <RCCEx_PLLSAI1_Config+0x72>
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d825      	bhi.n	8004d8c <RCCEx_PLLSAI1_Config+0x90>
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d002      	beq.n	8004d4a <RCCEx_PLLSAI1_Config+0x4e>
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d009      	beq.n	8004d5c <RCCEx_PLLSAI1_Config+0x60>
 8004d48:	e020      	b.n	8004d8c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d4a:	4b62      	ldr	r3, [pc, #392]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d11d      	bne.n	8004d92 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d5a:	e01a      	b.n	8004d92 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d5c:	4b5d      	ldr	r3, [pc, #372]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d116      	bne.n	8004d96 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d6c:	e013      	b.n	8004d96 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d6e:	4b59      	ldr	r3, [pc, #356]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10f      	bne.n	8004d9a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d7a:	4b56      	ldr	r3, [pc, #344]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d8a:	e006      	b.n	8004d9a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d90:	e004      	b.n	8004d9c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d92:	bf00      	nop
 8004d94:	e002      	b.n	8004d9c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d96:	bf00      	nop
 8004d98:	e000      	b.n	8004d9c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d108      	bne.n	8004db4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004da2:	4b4c      	ldr	r3, [pc, #304]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f023 0203 	bic.w	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4949      	ldr	r1, [pc, #292]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f040 8086 	bne.w	8004ec8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004dbc:	4b45      	ldr	r3, [pc, #276]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a44      	ldr	r2, [pc, #272]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc8:	f7fc f9c6 	bl	8001158 <HAL_GetTick>
 8004dcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dce:	e009      	b.n	8004de4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dd0:	f7fc f9c2 	bl	8001158 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d902      	bls.n	8004de4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	73fb      	strb	r3, [r7, #15]
        break;
 8004de2:	e005      	b.n	8004df0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004de4:	4b3b      	ldr	r3, [pc, #236]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1ef      	bne.n	8004dd0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d168      	bne.n	8004ec8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d113      	bne.n	8004e24 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dfc:	4b35      	ldr	r3, [pc, #212]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	4b35      	ldr	r3, [pc, #212]	; (8004ed8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6892      	ldr	r2, [r2, #8]
 8004e08:	0211      	lsls	r1, r2, #8
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	68d2      	ldr	r2, [r2, #12]
 8004e0e:	06d2      	lsls	r2, r2, #27
 8004e10:	4311      	orrs	r1, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6852      	ldr	r2, [r2, #4]
 8004e16:	3a01      	subs	r2, #1
 8004e18:	0112      	lsls	r2, r2, #4
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	492d      	ldr	r1, [pc, #180]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	610b      	str	r3, [r1, #16]
 8004e22:	e02d      	b.n	8004e80 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d115      	bne.n	8004e56 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e2a:	4b2a      	ldr	r3, [pc, #168]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	4b2b      	ldr	r3, [pc, #172]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6892      	ldr	r2, [r2, #8]
 8004e36:	0211      	lsls	r1, r2, #8
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6912      	ldr	r2, [r2, #16]
 8004e3c:	0852      	lsrs	r2, r2, #1
 8004e3e:	3a01      	subs	r2, #1
 8004e40:	0552      	lsls	r2, r2, #21
 8004e42:	4311      	orrs	r1, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6852      	ldr	r2, [r2, #4]
 8004e48:	3a01      	subs	r2, #1
 8004e4a:	0112      	lsls	r2, r2, #4
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	4921      	ldr	r1, [pc, #132]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	610b      	str	r3, [r1, #16]
 8004e54:	e014      	b.n	8004e80 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e56:	4b1f      	ldr	r3, [pc, #124]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	4b21      	ldr	r3, [pc, #132]	; (8004ee0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6892      	ldr	r2, [r2, #8]
 8004e62:	0211      	lsls	r1, r2, #8
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6952      	ldr	r2, [r2, #20]
 8004e68:	0852      	lsrs	r2, r2, #1
 8004e6a:	3a01      	subs	r2, #1
 8004e6c:	0652      	lsls	r2, r2, #25
 8004e6e:	4311      	orrs	r1, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6852      	ldr	r2, [r2, #4]
 8004e74:	3a01      	subs	r2, #1
 8004e76:	0112      	lsls	r2, r2, #4
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	4916      	ldr	r1, [pc, #88]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e80:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a13      	ldr	r2, [pc, #76]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8c:	f7fc f964 	bl	8001158 <HAL_GetTick>
 8004e90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e92:	e009      	b.n	8004ea8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e94:	f7fc f960 	bl	8001158 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d902      	bls.n	8004ea8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ea6:	e005      	b.n	8004eb4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ea8:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0ef      	beq.n	8004e94 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004eba:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	4904      	ldr	r1, [pc, #16]	; (8004ed4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	07ff800f 	.word	0x07ff800f
 8004edc:	ff9f800f 	.word	0xff9f800f
 8004ee0:	f9ff800f 	.word	0xf9ff800f

08004ee4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ef2:	4b72      	ldr	r3, [pc, #456]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00e      	beq.n	8004f1c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004efe:	4b6f      	ldr	r3, [pc, #444]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f003 0203 	and.w	r2, r3, #3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d103      	bne.n	8004f16 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
       ||
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d142      	bne.n	8004f9c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
 8004f1a:	e03f      	b.n	8004f9c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d018      	beq.n	8004f56 <RCCEx_PLLSAI2_Config+0x72>
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d825      	bhi.n	8004f74 <RCCEx_PLLSAI2_Config+0x90>
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d002      	beq.n	8004f32 <RCCEx_PLLSAI2_Config+0x4e>
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d009      	beq.n	8004f44 <RCCEx_PLLSAI2_Config+0x60>
 8004f30:	e020      	b.n	8004f74 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f32:	4b62      	ldr	r3, [pc, #392]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d11d      	bne.n	8004f7a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f42:	e01a      	b.n	8004f7a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f44:	4b5d      	ldr	r3, [pc, #372]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d116      	bne.n	8004f7e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f54:	e013      	b.n	8004f7e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f56:	4b59      	ldr	r3, [pc, #356]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10f      	bne.n	8004f82 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f62:	4b56      	ldr	r3, [pc, #344]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f72:	e006      	b.n	8004f82 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	73fb      	strb	r3, [r7, #15]
      break;
 8004f78:	e004      	b.n	8004f84 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f7a:	bf00      	nop
 8004f7c:	e002      	b.n	8004f84 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f7e:	bf00      	nop
 8004f80:	e000      	b.n	8004f84 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f82:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d108      	bne.n	8004f9c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004f8a:	4b4c      	ldr	r3, [pc, #304]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f023 0203 	bic.w	r2, r3, #3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4949      	ldr	r1, [pc, #292]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f040 8086 	bne.w	80050b0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004fa4:	4b45      	ldr	r3, [pc, #276]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a44      	ldr	r2, [pc, #272]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb0:	f7fc f8d2 	bl	8001158 <HAL_GetTick>
 8004fb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fb6:	e009      	b.n	8004fcc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fb8:	f7fc f8ce 	bl	8001158 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d902      	bls.n	8004fcc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	73fb      	strb	r3, [r7, #15]
        break;
 8004fca:	e005      	b.n	8004fd8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fcc:	4b3b      	ldr	r3, [pc, #236]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1ef      	bne.n	8004fb8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d168      	bne.n	80050b0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d113      	bne.n	800500c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fe4:	4b35      	ldr	r3, [pc, #212]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fe6:	695a      	ldr	r2, [r3, #20]
 8004fe8:	4b35      	ldr	r3, [pc, #212]	; (80050c0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6892      	ldr	r2, [r2, #8]
 8004ff0:	0211      	lsls	r1, r2, #8
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	68d2      	ldr	r2, [r2, #12]
 8004ff6:	06d2      	lsls	r2, r2, #27
 8004ff8:	4311      	orrs	r1, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6852      	ldr	r2, [r2, #4]
 8004ffe:	3a01      	subs	r2, #1
 8005000:	0112      	lsls	r2, r2, #4
 8005002:	430a      	orrs	r2, r1
 8005004:	492d      	ldr	r1, [pc, #180]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005006:	4313      	orrs	r3, r2
 8005008:	614b      	str	r3, [r1, #20]
 800500a:	e02d      	b.n	8005068 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d115      	bne.n	800503e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005012:	4b2a      	ldr	r3, [pc, #168]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005014:	695a      	ldr	r2, [r3, #20]
 8005016:	4b2b      	ldr	r3, [pc, #172]	; (80050c4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005018:	4013      	ands	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6892      	ldr	r2, [r2, #8]
 800501e:	0211      	lsls	r1, r2, #8
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6912      	ldr	r2, [r2, #16]
 8005024:	0852      	lsrs	r2, r2, #1
 8005026:	3a01      	subs	r2, #1
 8005028:	0552      	lsls	r2, r2, #21
 800502a:	4311      	orrs	r1, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6852      	ldr	r2, [r2, #4]
 8005030:	3a01      	subs	r2, #1
 8005032:	0112      	lsls	r2, r2, #4
 8005034:	430a      	orrs	r2, r1
 8005036:	4921      	ldr	r1, [pc, #132]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005038:	4313      	orrs	r3, r2
 800503a:	614b      	str	r3, [r1, #20]
 800503c:	e014      	b.n	8005068 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800503e:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	4b21      	ldr	r3, [pc, #132]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005044:	4013      	ands	r3, r2
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6892      	ldr	r2, [r2, #8]
 800504a:	0211      	lsls	r1, r2, #8
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6952      	ldr	r2, [r2, #20]
 8005050:	0852      	lsrs	r2, r2, #1
 8005052:	3a01      	subs	r2, #1
 8005054:	0652      	lsls	r2, r2, #25
 8005056:	4311      	orrs	r1, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6852      	ldr	r2, [r2, #4]
 800505c:	3a01      	subs	r2, #1
 800505e:	0112      	lsls	r2, r2, #4
 8005060:	430a      	orrs	r2, r1
 8005062:	4916      	ldr	r1, [pc, #88]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005064:	4313      	orrs	r3, r2
 8005066:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005068:	4b14      	ldr	r3, [pc, #80]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a13      	ldr	r2, [pc, #76]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800506e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005072:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005074:	f7fc f870 	bl	8001158 <HAL_GetTick>
 8005078:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800507a:	e009      	b.n	8005090 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800507c:	f7fc f86c 	bl	8001158 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d902      	bls.n	8005090 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	73fb      	strb	r3, [r7, #15]
          break;
 800508e:	e005      	b.n	800509c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005090:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0ef      	beq.n	800507c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050a2:	4b06      	ldr	r3, [pc, #24]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	4904      	ldr	r1, [pc, #16]	; (80050bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000
 80050c0:	07ff800f 	.word	0x07ff800f
 80050c4:	ff9f800f 	.word	0xff9f800f
 80050c8:	f9ff800f 	.word	0xf9ff800f

080050cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e049      	b.n	8005172 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f841 	bl	800517a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3304      	adds	r3, #4
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f000 f9f8 	bl	8005500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d001      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e04f      	b.n	8005248 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a23      	ldr	r2, [pc, #140]	; (8005254 <HAL_TIM_Base_Start_IT+0xc4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d01d      	beq.n	8005206 <HAL_TIM_Base_Start_IT+0x76>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d2:	d018      	beq.n	8005206 <HAL_TIM_Base_Start_IT+0x76>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1f      	ldr	r2, [pc, #124]	; (8005258 <HAL_TIM_Base_Start_IT+0xc8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d013      	beq.n	8005206 <HAL_TIM_Base_Start_IT+0x76>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1e      	ldr	r2, [pc, #120]	; (800525c <HAL_TIM_Base_Start_IT+0xcc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00e      	beq.n	8005206 <HAL_TIM_Base_Start_IT+0x76>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <HAL_TIM_Base_Start_IT+0xd0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d009      	beq.n	8005206 <HAL_TIM_Base_Start_IT+0x76>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1b      	ldr	r2, [pc, #108]	; (8005264 <HAL_TIM_Base_Start_IT+0xd4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d004      	beq.n	8005206 <HAL_TIM_Base_Start_IT+0x76>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a19      	ldr	r2, [pc, #100]	; (8005268 <HAL_TIM_Base_Start_IT+0xd8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d115      	bne.n	8005232 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	4b17      	ldr	r3, [pc, #92]	; (800526c <HAL_TIM_Base_Start_IT+0xdc>)
 800520e:	4013      	ands	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b06      	cmp	r3, #6
 8005216:	d015      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0xb4>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521e:	d011      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005230:	e008      	b.n	8005244 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0201 	orr.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	e000      	b.n	8005246 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005244:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	40012c00 	.word	0x40012c00
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40013400 	.word	0x40013400
 8005268:	40014000 	.word	0x40014000
 800526c:	00010007 	.word	0x00010007

08005270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b02      	cmp	r3, #2
 8005284:	d122      	bne.n	80052cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b02      	cmp	r3, #2
 8005292:	d11b      	bne.n	80052cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0202 	mvn.w	r2, #2
 800529c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f905 	bl	80054c2 <HAL_TIM_IC_CaptureCallback>
 80052b8:	e005      	b.n	80052c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f8f7 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f908 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d122      	bne.n	8005320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d11b      	bne.n	8005320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0204 	mvn.w	r2, #4
 80052f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f8db 	bl	80054c2 <HAL_TIM_IC_CaptureCallback>
 800530c:	e005      	b.n	800531a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f8cd 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f8de 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b08      	cmp	r3, #8
 800532c:	d122      	bne.n	8005374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b08      	cmp	r3, #8
 800533a:	d11b      	bne.n	8005374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0208 	mvn.w	r2, #8
 8005344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2204      	movs	r2, #4
 800534a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f8b1 	bl	80054c2 <HAL_TIM_IC_CaptureCallback>
 8005360:	e005      	b.n	800536e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f8a3 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f8b4 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0310 	and.w	r3, r3, #16
 800537e:	2b10      	cmp	r3, #16
 8005380:	d122      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	2b10      	cmp	r3, #16
 800538e:	d11b      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0210 	mvn.w	r2, #16
 8005398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2208      	movs	r2, #8
 800539e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f887 	bl	80054c2 <HAL_TIM_IC_CaptureCallback>
 80053b4:	e005      	b.n	80053c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f879 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f88a 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d10e      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d107      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0201 	mvn.w	r2, #1
 80053ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fb fbf2 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b80      	cmp	r3, #128	; 0x80
 8005400:	d10e      	bne.n	8005420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540c:	2b80      	cmp	r3, #128	; 0x80
 800540e:	d107      	bne.n	8005420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f914 	bl	8005648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542e:	d10e      	bne.n	800544e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543a:	2b80      	cmp	r3, #128	; 0x80
 800543c:	d107      	bne.n	800544e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f907 	bl	800565c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005458:	2b40      	cmp	r3, #64	; 0x40
 800545a:	d10e      	bne.n	800547a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	d107      	bne.n	800547a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f838 	bl	80054ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b20      	cmp	r3, #32
 8005486:	d10e      	bne.n	80054a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b20      	cmp	r3, #32
 8005494:	d107      	bne.n	80054a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f06f 0220 	mvn.w	r2, #32
 800549e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f8c7 	bl	8005634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054a6:	bf00      	nop
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a40      	ldr	r2, [pc, #256]	; (8005614 <TIM_Base_SetConfig+0x114>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d013      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551e:	d00f      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a3d      	ldr	r2, [pc, #244]	; (8005618 <TIM_Base_SetConfig+0x118>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00b      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a3c      	ldr	r2, [pc, #240]	; (800561c <TIM_Base_SetConfig+0x11c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d007      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a3b      	ldr	r2, [pc, #236]	; (8005620 <TIM_Base_SetConfig+0x120>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a3a      	ldr	r2, [pc, #232]	; (8005624 <TIM_Base_SetConfig+0x124>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d108      	bne.n	8005552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2f      	ldr	r2, [pc, #188]	; (8005614 <TIM_Base_SetConfig+0x114>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01f      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005560:	d01b      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2c      	ldr	r2, [pc, #176]	; (8005618 <TIM_Base_SetConfig+0x118>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d017      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2b      	ldr	r2, [pc, #172]	; (800561c <TIM_Base_SetConfig+0x11c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a2a      	ldr	r2, [pc, #168]	; (8005620 <TIM_Base_SetConfig+0x120>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00f      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a29      	ldr	r2, [pc, #164]	; (8005624 <TIM_Base_SetConfig+0x124>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00b      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a28      	ldr	r2, [pc, #160]	; (8005628 <TIM_Base_SetConfig+0x128>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d007      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a27      	ldr	r2, [pc, #156]	; (800562c <TIM_Base_SetConfig+0x12c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d003      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a26      	ldr	r2, [pc, #152]	; (8005630 <TIM_Base_SetConfig+0x130>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d108      	bne.n	80055ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a10      	ldr	r2, [pc, #64]	; (8005614 <TIM_Base_SetConfig+0x114>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00f      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a12      	ldr	r2, [pc, #72]	; (8005624 <TIM_Base_SetConfig+0x124>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00b      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a11      	ldr	r2, [pc, #68]	; (8005628 <TIM_Base_SetConfig+0x128>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a10      	ldr	r2, [pc, #64]	; (800562c <TIM_Base_SetConfig+0x12c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a0f      	ldr	r2, [pc, #60]	; (8005630 <TIM_Base_SetConfig+0x130>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d103      	bne.n	8005600 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	615a      	str	r2, [r3, #20]
}
 8005606:	bf00      	nop
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40013400 	.word	0x40013400
 8005628:	40014000 	.word	0x40014000
 800562c:	40014400 	.word	0x40014400
 8005630:	40014800 	.word	0x40014800

08005634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <__libc_init_array>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	4d0d      	ldr	r5, [pc, #52]	; (80056a8 <__libc_init_array+0x38>)
 8005674:	4c0d      	ldr	r4, [pc, #52]	; (80056ac <__libc_init_array+0x3c>)
 8005676:	1b64      	subs	r4, r4, r5
 8005678:	10a4      	asrs	r4, r4, #2
 800567a:	2600      	movs	r6, #0
 800567c:	42a6      	cmp	r6, r4
 800567e:	d109      	bne.n	8005694 <__libc_init_array+0x24>
 8005680:	4d0b      	ldr	r5, [pc, #44]	; (80056b0 <__libc_init_array+0x40>)
 8005682:	4c0c      	ldr	r4, [pc, #48]	; (80056b4 <__libc_init_array+0x44>)
 8005684:	f000 f82e 	bl	80056e4 <_init>
 8005688:	1b64      	subs	r4, r4, r5
 800568a:	10a4      	asrs	r4, r4, #2
 800568c:	2600      	movs	r6, #0
 800568e:	42a6      	cmp	r6, r4
 8005690:	d105      	bne.n	800569e <__libc_init_array+0x2e>
 8005692:	bd70      	pop	{r4, r5, r6, pc}
 8005694:	f855 3b04 	ldr.w	r3, [r5], #4
 8005698:	4798      	blx	r3
 800569a:	3601      	adds	r6, #1
 800569c:	e7ee      	b.n	800567c <__libc_init_array+0xc>
 800569e:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a2:	4798      	blx	r3
 80056a4:	3601      	adds	r6, #1
 80056a6:	e7f2      	b.n	800568e <__libc_init_array+0x1e>
 80056a8:	0800575c 	.word	0x0800575c
 80056ac:	0800575c 	.word	0x0800575c
 80056b0:	0800575c 	.word	0x0800575c
 80056b4:	08005760 	.word	0x08005760

080056b8 <memcpy>:
 80056b8:	440a      	add	r2, r1
 80056ba:	4291      	cmp	r1, r2
 80056bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80056c0:	d100      	bne.n	80056c4 <memcpy+0xc>
 80056c2:	4770      	bx	lr
 80056c4:	b510      	push	{r4, lr}
 80056c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ce:	4291      	cmp	r1, r2
 80056d0:	d1f9      	bne.n	80056c6 <memcpy+0xe>
 80056d2:	bd10      	pop	{r4, pc}

080056d4 <memset>:
 80056d4:	4402      	add	r2, r0
 80056d6:	4603      	mov	r3, r0
 80056d8:	4293      	cmp	r3, r2
 80056da:	d100      	bne.n	80056de <memset+0xa>
 80056dc:	4770      	bx	lr
 80056de:	f803 1b01 	strb.w	r1, [r3], #1
 80056e2:	e7f9      	b.n	80056d8 <memset+0x4>

080056e4 <_init>:
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	bf00      	nop
 80056e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ea:	bc08      	pop	{r3}
 80056ec:	469e      	mov	lr, r3
 80056ee:	4770      	bx	lr

080056f0 <_fini>:
 80056f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f2:	bf00      	nop
 80056f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f6:	bc08      	pop	{r3}
 80056f8:	469e      	mov	lr, r3
 80056fa:	4770      	bx	lr
