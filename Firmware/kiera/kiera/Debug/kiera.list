
kiera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c3c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004df8  08004df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e40  08004e40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e40  08004e40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e40  08004e40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e40  08004e40  00014e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e44  08004e44  00014e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  08004e54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004e54  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158de  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002718  00000000  00000000  0003591a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00038038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  000392c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d170  00000000  00000000  0003a430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013829  00000000  00000000  000675a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00121588  00000000  00000000  0007adc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019c351  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee8  00000000  00000000  0019c3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004de0 	.word	0x08004de0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004de0 	.word	0x08004de0

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 fd31 	bl	8000c66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f814 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f92e 	bl	8000468 <MX_GPIO_Init>
  MX_CAN1_Init();
 800020c:	f000 f8ce 	bl	80003ac <MX_CAN1_Init>
  MX_DMA_Init();
 8000210:	f000 f900 	bl	8000414 <MX_DMA_Init>
  MX_ADC1_Init();
 8000214:	f000 f852 	bl	80002bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADC_Start_IT(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_reading, 10);
 8000218:	220a      	movs	r2, #10
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <main+0x2c>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <main+0x30>)
 800021e:	f001 f8b9 	bl	8001394 <HAL_ADC_Start_DMA>
	  /* USER CODE END WHILE */


	  /* USER CODE BEGIN 3 */
//	  toggle diode
	  toggle_led();
 8000222:	f000 fab9 	bl	8000798 <toggle_led>
 8000226:	e7fc      	b.n	8000222 <main+0x26>
 8000228:	2000002c 	.word	0x2000002c
 800022c:	20000040 	.word	0x20000040

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b098      	sub	sp, #96	; 0x60
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2248      	movs	r2, #72	; 0x48
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f004 fdc6 	bl	8004dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000252:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000256:	f002 fd77 	bl	8002d48 <HAL_PWREx_ControlVoltageScaling>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000260:	f000 fae4 	bl	800082c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000264:	2310      	movs	r3, #16
 8000266:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000270:	2360      	movs	r3, #96	; 0x60
 8000272:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000274:	2300      	movs	r3, #0
 8000276:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	4618      	mov	r0, r3
 800027e:	f002 fe07 	bl	8002e90 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000288:	f000 fad0 	bl	800082c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000290:	2300      	movs	r3, #0
 8000292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f003 fa7b 	bl	80037a0 <HAL_RCC_ClockConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002b0:	f000 fabc 	bl	800082c <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3760      	adds	r7, #96	; 0x60
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b08a      	sub	sp, #40	; 0x28
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002c2:	f107 031c 	add.w	r3, r7, #28
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
 80002dc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002de:	4b30      	ldr	r3, [pc, #192]	; (80003a0 <MX_ADC1_Init+0xe4>)
 80002e0:	4a30      	ldr	r2, [pc, #192]	; (80003a4 <MX_ADC1_Init+0xe8>)
 80002e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 80002e4:	4b2e      	ldr	r3, [pc, #184]	; (80003a0 <MX_ADC1_Init+0xe4>)
 80002e6:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 80002ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ec:	4b2c      	ldr	r3, [pc, #176]	; (80003a0 <MX_ADC1_Init+0xe4>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <MX_ADC1_Init+0xe4>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002f8:	4b29      	ldr	r3, [pc, #164]	; (80003a0 <MX_ADC1_Init+0xe4>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002fe:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <MX_ADC1_Init+0xe4>)
 8000300:	2204      	movs	r2, #4
 8000302:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000304:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <MX_ADC1_Init+0xe4>)
 8000306:	2200      	movs	r2, #0
 8000308:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800030a:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <MX_ADC1_Init+0xe4>)
 800030c:	2201      	movs	r2, #1
 800030e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000310:	4b23      	ldr	r3, [pc, #140]	; (80003a0 <MX_ADC1_Init+0xe4>)
 8000312:	2201      	movs	r2, #1
 8000314:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000316:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <MX_ADC1_Init+0xe4>)
 8000318:	2200      	movs	r2, #0
 800031a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800031e:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <MX_ADC1_Init+0xe4>)
 8000320:	2200      	movs	r2, #0
 8000322:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000324:	4b1e      	ldr	r3, [pc, #120]	; (80003a0 <MX_ADC1_Init+0xe4>)
 8000326:	2200      	movs	r2, #0
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800032a:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <MX_ADC1_Init+0xe4>)
 800032c:	2201      	movs	r2, #1
 800032e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000332:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <MX_ADC1_Init+0xe4>)
 8000334:	2200      	movs	r2, #0
 8000336:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000338:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <MX_ADC1_Init+0xe4>)
 800033a:	2200      	movs	r2, #0
 800033c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000340:	4817      	ldr	r0, [pc, #92]	; (80003a0 <MX_ADC1_Init+0xe4>)
 8000342:	f000 fed5 	bl	80010f0 <HAL_ADC_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800034c:	f000 fa6e 	bl	800082c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000350:	2300      	movs	r3, #0
 8000352:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000354:	f107 031c 	add.w	r3, r7, #28
 8000358:	4619      	mov	r1, r3
 800035a:	4811      	ldr	r0, [pc, #68]	; (80003a0 <MX_ADC1_Init+0xe4>)
 800035c:	f001 fe04 	bl	8001f68 <HAL_ADCEx_MultiModeConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000366:	f000 fa61 	bl	800082c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800036a:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_ADC1_Init+0xec>)
 800036c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800036e:	2306      	movs	r3, #6
 8000370:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000372:	2307      	movs	r3, #7
 8000374:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000376:	237f      	movs	r3, #127	; 0x7f
 8000378:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800037a:	2304      	movs	r3, #4
 800037c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4619      	mov	r1, r3
 8000386:	4806      	ldr	r0, [pc, #24]	; (80003a0 <MX_ADC1_Init+0xe4>)
 8000388:	f001 f8d6 	bl	8001538 <HAL_ADC_ConfigChannel>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000392:	f000 fa4b 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	3728      	adds	r7, #40	; 0x28
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000040 	.word	0x20000040
 80003a4:	50040000 	.word	0x50040000
 80003a8:	19200040 	.word	0x19200040

080003ac <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80003b0:	4b16      	ldr	r3, [pc, #88]	; (800040c <MX_CAN1_Init+0x60>)
 80003b2:	4a17      	ldr	r2, [pc, #92]	; (8000410 <MX_CAN1_Init+0x64>)
 80003b4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <MX_CAN1_Init+0x60>)
 80003b8:	2210      	movs	r2, #16
 80003ba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80003bc:	4b13      	ldr	r3, [pc, #76]	; (800040c <MX_CAN1_Init+0x60>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <MX_CAN1_Init+0x60>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80003c8:	4b10      	ldr	r3, [pc, #64]	; (800040c <MX_CAN1_Init+0x60>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <MX_CAN1_Init+0x60>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80003d4:	4b0d      	ldr	r3, [pc, #52]	; (800040c <MX_CAN1_Init+0x60>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <MX_CAN1_Init+0x60>)
 80003dc:	2200      	movs	r2, #0
 80003de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <MX_CAN1_Init+0x60>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80003e6:	4b09      	ldr	r3, [pc, #36]	; (800040c <MX_CAN1_Init+0x60>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <MX_CAN1_Init+0x60>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_CAN1_Init+0x60>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80003f8:	4804      	ldr	r0, [pc, #16]	; (800040c <MX_CAN1_Init+0x60>)
 80003fa:	f001 fe59 	bl	80020b0 <HAL_CAN_Init>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000404:	f000 fa12 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000108 	.word	0x20000108
 8000410:	40006400 	.word	0x40006400

08000414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800041a:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_DMA_Init+0x50>)
 800041c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800041e:	4a11      	ldr	r2, [pc, #68]	; (8000464 <MX_DMA_Init+0x50>)
 8000420:	f043 0304 	orr.w	r3, r3, #4
 8000424:	6493      	str	r3, [r2, #72]	; 0x48
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_DMA_Init+0x50>)
 8000428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800042a:	f003 0304 	and.w	r3, r3, #4
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <MX_DMA_Init+0x50>)
 8000434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000436:	4a0b      	ldr	r2, [pc, #44]	; (8000464 <MX_DMA_Init+0x50>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6493      	str	r3, [r2, #72]	; 0x48
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <MX_DMA_Init+0x50>)
 8000440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	2100      	movs	r1, #0
 800044e:	2010      	movs	r0, #16
 8000450:	f001 ffe2 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000454:	2010      	movs	r0, #16
 8000456:	f001 fffb 	bl	8002450 <HAL_NVIC_EnableIRQ>

}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08a      	sub	sp, #40	; 0x28
 800046c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800047e:	4b5b      	ldr	r3, [pc, #364]	; (80005ec <MX_GPIO_Init+0x184>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000482:	4a5a      	ldr	r2, [pc, #360]	; (80005ec <MX_GPIO_Init+0x184>)
 8000484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800048a:	4b58      	ldr	r3, [pc, #352]	; (80005ec <MX_GPIO_Init+0x184>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000492:	613b      	str	r3, [r7, #16]
 8000494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000496:	4b55      	ldr	r3, [pc, #340]	; (80005ec <MX_GPIO_Init+0x184>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049a:	4a54      	ldr	r2, [pc, #336]	; (80005ec <MX_GPIO_Init+0x184>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004a2:	4b52      	ldr	r3, [pc, #328]	; (80005ec <MX_GPIO_Init+0x184>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	4b4f      	ldr	r3, [pc, #316]	; (80005ec <MX_GPIO_Init+0x184>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	4a4e      	ldr	r2, [pc, #312]	; (80005ec <MX_GPIO_Init+0x184>)
 80004b4:	f043 0304 	orr.w	r3, r3, #4
 80004b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ba:	4b4c      	ldr	r3, [pc, #304]	; (80005ec <MX_GPIO_Init+0x184>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	f003 0304 	and.w	r3, r3, #4
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004c6:	4b49      	ldr	r3, [pc, #292]	; (80005ec <MX_GPIO_Init+0x184>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	4a48      	ldr	r2, [pc, #288]	; (80005ec <MX_GPIO_Init+0x184>)
 80004cc:	f043 0308 	orr.w	r3, r3, #8
 80004d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004d2:	4b46      	ldr	r3, [pc, #280]	; (80005ec <MX_GPIO_Init+0x184>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	f003 0308 	and.w	r3, r3, #8
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004de:	4b43      	ldr	r3, [pc, #268]	; (80005ec <MX_GPIO_Init+0x184>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	4a42      	ldr	r2, [pc, #264]	; (80005ec <MX_GPIO_Init+0x184>)
 80004e4:	f043 0302 	orr.w	r3, r3, #2
 80004e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ea:	4b40      	ldr	r3, [pc, #256]	; (80005ec <MX_GPIO_Init+0x184>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	f003 0302 	and.w	r3, r3, #2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	21f0      	movs	r1, #240	; 0xf0
 80004fa:	483d      	ldr	r0, [pc, #244]	; (80005f0 <MX_GPIO_Init+0x188>)
 80004fc:	f002 fbba 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000500:	2304      	movs	r3, #4
 8000502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000504:	230b      	movs	r3, #11
 8000506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	4619      	mov	r1, r3
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f002 fa1b 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800051a:	23f0      	movs	r3, #240	; 0xf0
 800051c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051e:	2302      	movs	r3, #2
 8000520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000526:	2303      	movs	r3, #3
 8000528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800052a:	2305      	movs	r3, #5
 800052c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	4619      	mov	r1, r3
 8000534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000538:	f002 fa0a 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 SW4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|SW4_Pin;
 800053c:	f44f 6303 	mov.w	r3, #2096	; 0x830
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000542:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <MX_GPIO_Init+0x18c>)
 8000544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	4829      	ldr	r0, [pc, #164]	; (80005f8 <MX_GPIO_Init+0x190>)
 8000552:	f002 f9fd 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW3_Pin SW5_Pin */
  GPIO_InitStruct.Pin = SW3_Pin|SW5_Pin;
 8000556:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800055c:	4b27      	ldr	r3, [pc, #156]	; (80005fc <MX_GPIO_Init+0x194>)
 800055e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4619      	mov	r1, r3
 800056a:	4823      	ldr	r0, [pc, #140]	; (80005f8 <MX_GPIO_Init+0x190>)
 800056c:	f002 f9f0 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW6_Pin */
  GPIO_InitStruct.Pin = SW6_Pin;
 8000570:	2304      	movs	r3, #4
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000574:	4b21      	ldr	r3, [pc, #132]	; (80005fc <MX_GPIO_Init+0x194>)
 8000576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW6_GPIO_Port, &GPIO_InitStruct);
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4619      	mov	r1, r3
 8000582:	481f      	ldr	r0, [pc, #124]	; (8000600 <MX_GPIO_Init+0x198>)
 8000584:	f002 f9e4 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : ControlLed4_Pin ControlLed3_Pin ControlLed2_Pin ControlLed1_Pin */
  GPIO_InitStruct.Pin = ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin;
 8000588:	23f0      	movs	r3, #240	; 0xf0
 800058a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	2301      	movs	r3, #1
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4619      	mov	r1, r3
 800059e:	4814      	ldr	r0, [pc, #80]	; (80005f0 <MX_GPIO_Init+0x188>)
 80005a0:	f002 f9d6 	bl	8002950 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2100      	movs	r1, #0
 80005a8:	2008      	movs	r0, #8
 80005aa:	f001 ff35 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005ae:	2008      	movs	r0, #8
 80005b0:	f001 ff4e 	bl	8002450 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	200a      	movs	r0, #10
 80005ba:	f001 ff2d 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80005be:	200a      	movs	r0, #10
 80005c0:	f001 ff46 	bl	8002450 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	2017      	movs	r0, #23
 80005ca:	f001 ff25 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005ce:	2017      	movs	r0, #23
 80005d0:	f001 ff3e 	bl	8002450 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2100      	movs	r1, #0
 80005d8:	2028      	movs	r0, #40	; 0x28
 80005da:	f001 ff1d 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005de:	2028      	movs	r0, #40	; 0x28
 80005e0:	f001 ff36 	bl	8002450 <HAL_NVIC_EnableIRQ>

}
 80005e4:	bf00      	nop
 80005e6:	3728      	adds	r7, #40	; 0x28
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000400 	.word	0x48000400
 80005f4:	10110000 	.word	0x10110000
 80005f8:	48000800 	.word	0x48000800
 80005fc:	10210000 	.word	0x10210000
 8000600:	48000c00 	.word	0x48000c00

08000604 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	80fb      	strh	r3, [r7, #6]

	uint32_t timer;

	if (GPIO_Pin == SW5_Pin)
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000614:	d107      	bne.n	8000626 <HAL_GPIO_EXTI_Callback+0x22>
	{
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <HAL_GPIO_EXTI_Callback+0x3c>)
 800061a:	f002 fb43 	bl	8002ca4 <HAL_GPIO_TogglePin>

		timer = HAL_GetTick();
 800061e:	f000 fb4f 	bl	8000cc0 <HAL_GetTick>
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	e006      	b.n	8000634 <HAL_GPIO_EXTI_Callback+0x30>

	}
	else if (GPIO_Pin == SW6_Pin)
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	2b04      	cmp	r3, #4
 800062a:	d103      	bne.n	8000634 <HAL_GPIO_EXTI_Callback+0x30>
	{
		HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
 800062c:	2140      	movs	r1, #64	; 0x40
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000630:	f002 fb38 	bl	8002ca4 <HAL_GPIO_TogglePin>

	}
	timer = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	48000400 	.word	0x48000400

08000644 <calculate_average_adc>:


float calculate_average_adc()
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
	average_adc = 0;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <calculate_average_adc+0x6c>)
 800064c:	f04f 0200 	mov.w	r2, #0
 8000650:	601a      	str	r2, [r3, #0]

	//	  calculate average adc
	for (int i = 0; i < 10; i++) {
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e012      	b.n	800067e <calculate_average_adc+0x3a>
		average_adc = average_adc + adc_reading[i];
 8000658:	4a16      	ldr	r2, [pc, #88]	; (80006b4 <calculate_average_adc+0x70>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000660:	ee07 3a90 	vmov	s15, r3
 8000664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <calculate_average_adc+0x6c>)
 800066a:	edd3 7a00 	vldr	s15, [r3]
 800066e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <calculate_average_adc+0x6c>)
 8000674:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 10; i++) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3301      	adds	r3, #1
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b09      	cmp	r3, #9
 8000682:	dde9      	ble.n	8000658 <calculate_average_adc+0x14>
	}

	average_adc = average_adc / 10;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <calculate_average_adc+0x6c>)
 8000686:	ed93 7a00 	vldr	s14, [r3]
 800068a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800068e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <calculate_average_adc+0x6c>)
 8000694:	edc3 7a00 	vstr	s15, [r3]

	return average_adc;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <calculate_average_adc+0x6c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	ee07 3a90 	vmov	s15, r3
}
 80006a0:	eeb0 0a67 	vmov.f32	s0, s15
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000130 	.word	0x20000130
 80006b4:	2000002c 	.word	0x2000002c

080006b8 <choose_left_scroll_state>:


int choose_left_scroll_state()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
	float current_average_adc = calculate_average_adc();
 80006be:	f7ff ffc1 	bl	8000644 <calculate_average_adc>
 80006c2:	ed87 0a00 	vstr	s0, [r7]
	int lss; //Left Scroll State

	if (1110 < current_average_adc && current_average_adc < 1115)
 80006c6:	edd7 7a00 	vldr	s15, [r7]
 80006ca:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000778 <choose_left_scroll_state+0xc0>
 80006ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d6:	dd0b      	ble.n	80006f0 <choose_left_scroll_state+0x38>
 80006d8:	edd7 7a00 	vldr	s15, [r7]
 80006dc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800077c <choose_left_scroll_state+0xc4>
 80006e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e8:	d502      	bpl.n	80006f0 <choose_left_scroll_state+0x38>
	{
		lss = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	e03d      	b.n	800076c <choose_left_scroll_state+0xb4>
	} else if (3129 < current_average_adc && current_average_adc < 3133)
 80006f0:	edd7 7a00 	vldr	s15, [r7]
 80006f4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000780 <choose_left_scroll_state+0xc8>
 80006f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000700:	dd0b      	ble.n	800071a <choose_left_scroll_state+0x62>
 8000702:	edd7 7a00 	vldr	s15, [r7]
 8000706:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000784 <choose_left_scroll_state+0xcc>
 800070a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800070e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000712:	d502      	bpl.n	800071a <choose_left_scroll_state+0x62>
	{
		lss = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	e028      	b.n	800076c <choose_left_scroll_state+0xb4>
	} else if (3715 < current_average_adc && current_average_adc < 3721)
 800071a:	edd7 7a00 	vldr	s15, [r7]
 800071e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000788 <choose_left_scroll_state+0xd0>
 8000722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072a:	dd0b      	ble.n	8000744 <choose_left_scroll_state+0x8c>
 800072c:	edd7 7a00 	vldr	s15, [r7]
 8000730:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800078c <choose_left_scroll_state+0xd4>
 8000734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073c:	d502      	bpl.n	8000744 <choose_left_scroll_state+0x8c>
	{
		lss = 3;
 800073e:	2303      	movs	r3, #3
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	e013      	b.n	800076c <choose_left_scroll_state+0xb4>
	} else if (3970 < current_average_adc && current_average_adc < 3975)
 8000744:	edd7 7a00 	vldr	s15, [r7]
 8000748:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000790 <choose_left_scroll_state+0xd8>
 800074c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000754:	dd0a      	ble.n	800076c <choose_left_scroll_state+0xb4>
 8000756:	edd7 7a00 	vldr	s15, [r7]
 800075a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000794 <choose_left_scroll_state+0xdc>
 800075e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000766:	d501      	bpl.n	800076c <choose_left_scroll_state+0xb4>
	{
		lss = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	607b      	str	r3, [r7, #4]
	}

	return lss;
 800076c:	687b      	ldr	r3, [r7, #4]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	448ac000 	.word	0x448ac000
 800077c:	448b6000 	.word	0x448b6000
 8000780:	45439000 	.word	0x45439000
 8000784:	4543d000 	.word	0x4543d000
 8000788:	45683000 	.word	0x45683000
 800078c:	45689000 	.word	0x45689000
 8000790:	45782000 	.word	0x45782000
 8000794:	45787000 	.word	0x45787000

08000798 <toggle_led>:

void toggle_led()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	switch (choose_left_scroll_state())
 800079c:	f7ff ff8c 	bl	80006b8 <choose_left_scroll_state>
 80007a0:	4603      	mov	r3, r0
 80007a2:	3b01      	subs	r3, #1
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	d82b      	bhi.n	8000800 <toggle_led+0x68>
 80007a8:	a201      	add	r2, pc, #4	; (adr r2, 80007b0 <toggle_led+0x18>)
 80007aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ae:	bf00      	nop
 80007b0:	080007c1 	.word	0x080007c1
 80007b4:	080007d1 	.word	0x080007d1
 80007b8:	080007e1 	.word	0x080007e1
 80007bc:	080007f1 	.word	0x080007f1
	{
	case 1:
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	4810      	ldr	r0, [pc, #64]	; (8000804 <toggle_led+0x6c>)
 80007c4:	f002 fa6e 	bl	8002ca4 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80007c8:	20c8      	movs	r0, #200	; 0xc8
 80007ca:	f000 fa85 	bl	8000cd8 <HAL_Delay>
		break;
 80007ce:	e017      	b.n	8000800 <toggle_led+0x68>
	case 2:
		HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
 80007d0:	2140      	movs	r1, #64	; 0x40
 80007d2:	480c      	ldr	r0, [pc, #48]	; (8000804 <toggle_led+0x6c>)
 80007d4:	f002 fa66 	bl	8002ca4 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80007d8:	20c8      	movs	r0, #200	; 0xc8
 80007da:	f000 fa7d 	bl	8000cd8 <HAL_Delay>
		break;
 80007de:	e00f      	b.n	8000800 <toggle_led+0x68>
	case 3:
		HAL_GPIO_TogglePin(ControlLed3_GPIO_Port, ControlLed3_Pin);
 80007e0:	2120      	movs	r1, #32
 80007e2:	4808      	ldr	r0, [pc, #32]	; (8000804 <toggle_led+0x6c>)
 80007e4:	f002 fa5e 	bl	8002ca4 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80007e8:	20c8      	movs	r0, #200	; 0xc8
 80007ea:	f000 fa75 	bl	8000cd8 <HAL_Delay>
		break;
 80007ee:	e007      	b.n	8000800 <toggle_led+0x68>
	case 4:
		HAL_GPIO_TogglePin(ControlLed4_GPIO_Port, ControlLed4_Pin);
 80007f0:	2110      	movs	r1, #16
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <toggle_led+0x6c>)
 80007f4:	f002 fa56 	bl	8002ca4 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80007f8:	20c8      	movs	r0, #200	; 0xc8
 80007fa:	f000 fa6d 	bl	8000cd8 <HAL_Delay>
		break;
 80007fe:	bf00      	nop
	}
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	48000400 	.word	0x48000400

08000808 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d101      	bne.n	800081e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800081a:	f000 fa3d 	bl	8000c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40012c00 	.word	0x40012c00

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_MspInit+0x44>)
 8000840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <HAL_MspInit+0x44>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6613      	str	r3, [r2, #96]	; 0x60
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_MspInit+0x44>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_MspInit+0x44>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <HAL_MspInit+0x44>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	6593      	str	r3, [r2, #88]	; 0x58
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_MspInit+0x44>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0b0      	sub	sp, #192	; 0xc0
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2298      	movs	r2, #152	; 0x98
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f004 fa95 	bl	8004dd0 <memset>
  if(hadc->Instance==ADC1)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a3d      	ldr	r2, [pc, #244]	; (80009a0 <HAL_ADC_MspInit+0x120>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d172      	bne.n	8000996 <HAL_ADC_MspInit+0x116>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008b4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80008c6:	2310      	movs	r3, #16
 80008c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 fa2b 	bl	8003d3c <HAL_RCCEx_PeriphCLKConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80008ec:	f7ff ff9e 	bl	800082c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008f0:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <HAL_ADC_MspInit+0x124>)
 80008f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f4:	4a2b      	ldr	r2, [pc, #172]	; (80009a4 <HAL_ADC_MspInit+0x124>)
 80008f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <HAL_ADC_MspInit+0x124>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <HAL_ADC_MspInit+0x124>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090c:	4a25      	ldr	r2, [pc, #148]	; (80009a4 <HAL_ADC_MspInit+0x124>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <HAL_ADC_MspInit+0x124>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = SW1_Pin;
 8000920:	2302      	movs	r3, #2
 8000922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000926:	230b      	movs	r3, #11
 8000928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000936:	4619      	mov	r1, r3
 8000938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093c:	f002 f808 	bl	8002950 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel6;
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <HAL_ADC_MspInit+0x128>)
 8000942:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <HAL_ADC_MspInit+0x12c>)
 8000944:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <HAL_ADC_MspInit+0x128>)
 8000948:	2205      	movs	r2, #5
 800094a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <HAL_ADC_MspInit+0x128>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_ADC_MspInit+0x128>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <HAL_ADC_MspInit+0x128>)
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_ADC_MspInit+0x128>)
 8000960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000964:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_ADC_MspInit+0x128>)
 8000968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_ADC_MspInit+0x128>)
 8000970:	2220      	movs	r2, #32
 8000972:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_ADC_MspInit+0x128>)
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <HAL_ADC_MspInit+0x128>)
 800097c:	f001 fd76 	bl	800246c <HAL_DMA_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000986:	f7ff ff51 	bl	800082c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <HAL_ADC_MspInit+0x128>)
 800098e:	651a      	str	r2, [r3, #80]	; 0x50
 8000990:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <HAL_ADC_MspInit+0x128>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000996:	bf00      	nop
 8000998:	37c0      	adds	r7, #192	; 0xc0
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	50040000 	.word	0x50040000
 80009a4:	40021000 	.word	0x40021000
 80009a8:	200000a8 	.word	0x200000a8
 80009ac:	4002006c 	.word	0x4002006c

080009b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a18      	ldr	r2, [pc, #96]	; (8000a30 <HAL_CAN_MspInit+0x80>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d129      	bne.n	8000a26 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_CAN_MspInit+0x84>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <HAL_CAN_MspInit+0x84>)
 80009d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009dc:	6593      	str	r3, [r2, #88]	; 0x58
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_CAN_MspInit+0x84>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_CAN_MspInit+0x84>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <HAL_CAN_MspInit+0x84>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <HAL_CAN_MspInit+0x84>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a14:	2309      	movs	r3, #9
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f001 ff95 	bl	8002950 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40006400 	.word	0x40006400
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	; 0x30
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	2019      	movs	r0, #25
 8000a4e:	f001 fce3 	bl	8002418 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a52:	2019      	movs	r0, #25
 8000a54:	f001 fcfc 	bl	8002450 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <HAL_InitTick+0x9c>)
 8000a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <HAL_InitTick+0x9c>)
 8000a5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a62:	6613      	str	r3, [r2, #96]	; 0x60
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <HAL_InitTick+0x9c>)
 8000a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a70:	f107 0210 	add.w	r2, r7, #16
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f003 f86a 	bl	8003b54 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a80:	f003 f852 	bl	8003b28 <HAL_RCC_GetPCLK2Freq>
 8000a84:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a88:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <HAL_InitTick+0xa0>)
 8000a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8e:	0c9b      	lsrs	r3, r3, #18
 8000a90:	3b01      	subs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_InitTick+0xa4>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <HAL_InitTick+0xa8>)
 8000a98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_InitTick+0xa4>)
 8000a9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_InitTick+0xa4>)
 8000aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_InitTick+0xa4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_InitTick+0xa4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <HAL_InitTick+0xa4>)
 8000ab6:	f003 fe95 	bl	80047e4 <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d104      	bne.n	8000aca <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ac0:	4806      	ldr	r0, [pc, #24]	; (8000adc <HAL_InitTick+0xa4>)
 8000ac2:	f003 fef1 	bl	80048a8 <HAL_TIM_Base_Start_IT>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3730      	adds	r7, #48	; 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	20000134 	.word	0x20000134
 8000ae0:	40012c00 	.word	0x40012c00

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000b3e:	2004      	movs	r0, #4
 8000b40:	f002 f8ca 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000b4c:	2010      	movs	r0, #16
 8000b4e:	f002 f8c3 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <DMA1_Channel6_IRQHandler+0x10>)
 8000b5e:	f001 fda8 	bl	80026b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000a8 	.word	0x200000a8

08000b6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b70:	2020      	movs	r0, #32
 8000b72:	f002 f8b1 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b82:	f003 ff01 	bl	8004988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000134 	.word	0x20000134

08000b90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000b94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b98:	f002 f89e 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000b9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ba0:	f002 f89a 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000ba4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ba8:	f002 f896 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <SystemInit+0x5c>)
 8000bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <SystemInit+0x5c>)
 8000bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <SystemInit+0x60>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <SystemInit+0x60>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <SystemInit+0x60>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <SystemInit+0x60>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <SystemInit+0x60>)
 8000bdc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000be0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000be4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <SystemInit+0x60>)
 8000be8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <SystemInit+0x60>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <SystemInit+0x60>)
 8000bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <SystemInit+0x60>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00
 8000c10:	40021000 	.word	0x40021000

08000c14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c18:	f7ff ffca 	bl	8000bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c1e:	e003      	b.n	8000c28 <LoopCopyDataInit>

08000c20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c26:	3104      	adds	r1, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c28:	480a      	ldr	r0, [pc, #40]	; (8000c54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c30:	d3f6      	bcc.n	8000c20 <CopyDataInit>
	ldr	r2, =_sbss
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c34:	e002      	b.n	8000c3c <LoopFillZerobss>

08000c36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c38:	f842 3b04 	str.w	r3, [r2], #4

08000c3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <LoopForever+0x16>)
	cmp	r2, r3
 8000c3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c40:	d3f9      	bcc.n	8000c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c42:	f004 f8a1 	bl	8004d88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c46:	f7ff fad9 	bl	80001fc <main>

08000c4a <LoopForever>:

LoopForever:
    b LoopForever
 8000c4a:	e7fe      	b.n	8000c4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c4c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000c50:	08004e48 	.word	0x08004e48
	ldr	r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c58:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000c5c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000c60:	20000184 	.word	0x20000184

08000c64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC1_2_IRQHandler>

08000c66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f001 fbc6 	bl	8002402 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c76:	200f      	movs	r0, #15
 8000c78:	f7ff fede 	bl	8000a38 <HAL_InitTick>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	71fb      	strb	r3, [r7, #7]
 8000c86:	e001      	b.n	8000c8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c88:	f7ff fdd6 	bl	8000838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000180 	.word	0x20000180

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000180 	.word	0x20000180

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff ffee 	bl	8000cc0 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_Delay+0x44>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffde 	bl	8000cc0 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008

08000d20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	431a      	orrs	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	609a      	str	r2, [r3, #8]
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	3360      	adds	r3, #96	; 0x60
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <LL_ADC_SetOffset+0x44>)
 8000daa:	4013      	ands	r3, r2
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	430a      	orrs	r2, r1
 8000db6:	4313      	orrs	r3, r2
 8000db8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000dc0:	bf00      	nop
 8000dc2:	371c      	adds	r7, #28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	03fff000 	.word	0x03fff000

08000dd0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3360      	adds	r3, #96	; 0x60
 8000dde:	461a      	mov	r2, r3
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3360      	adds	r3, #96	; 0x60
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	431a      	orrs	r2, r3
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e26:	bf00      	nop
 8000e28:	371c      	adds	r7, #28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	431a      	orrs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	615a      	str	r2, [r3, #20]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d101      	bne.n	8000e70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b087      	sub	sp, #28
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	3330      	adds	r3, #48	; 0x30
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	0a1b      	lsrs	r3, r3, #8
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	4413      	add	r3, r2
 8000e9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	f003 031f 	and.w	r3, r3, #31
 8000ea8:	211f      	movs	r1, #31
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	0e9b      	lsrs	r3, r3, #26
 8000eb6:	f003 011f 	and.w	r1, r3, #31
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	f003 031f 	and.w	r3, r3, #31
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000eca:	bf00      	nop
 8000ecc:	371c      	adds	r7, #28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b087      	sub	sp, #28
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	3314      	adds	r3, #20
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	0e5b      	lsrs	r3, r3, #25
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	4413      	add	r3, r2
 8000ef4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	0d1b      	lsrs	r3, r3, #20
 8000efe:	f003 031f 	and.w	r3, r3, #31
 8000f02:	2107      	movs	r1, #7
 8000f04:	fa01 f303 	lsl.w	r3, r1, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	0d1b      	lsrs	r3, r3, #20
 8000f10:	f003 031f 	and.w	r3, r3, #31
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f20:	bf00      	nop
 8000f22:	371c      	adds	r7, #28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f44:	43db      	mvns	r3, r3
 8000f46:	401a      	ands	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0318 	and.w	r3, r3, #24
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f50:	40d9      	lsrs	r1, r3
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	400b      	ands	r3, r1
 8000f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	0007ffff 	.word	0x0007ffff

08000f74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 031f 	and.w	r3, r3, #31
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000fa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	6093      	str	r3, [r2, #8]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fc8:	d101      	bne.n	8000fce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000fec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ff0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001018:	d101      	bne.n	800101e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800103c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001040:	f043 0201 	orr.w	r2, r3, #1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b01      	cmp	r3, #1
 8001066:	d101      	bne.n	800106c <LL_ADC_IsEnabled+0x18>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <LL_ADC_IsEnabled+0x1a>
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800108a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800108e:	f043 0204 	orr.w	r2, r3, #4
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d101      	bne.n	80010ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d101      	bne.n	80010e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e134      	b.n	8001374 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001114:	2b00      	cmp	r3, #0
 8001116:	d109      	bne.n	800112c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff fbb1 	bl	8000880 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff3f 	bl	8000fb4 <LL_ADC_IsDeepPowerDownEnabled>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d004      	beq.n	8001146 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff25 	bl	8000f90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff5a 	bl	8001004 <LL_ADC_IsInternalRegulatorEnabled>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d115      	bne.n	8001182 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff3e 	bl	8000fdc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001160:	4b86      	ldr	r3, [pc, #536]	; (800137c <HAL_ADC_Init+0x28c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	099b      	lsrs	r3, r3, #6
 8001166:	4a86      	ldr	r2, [pc, #536]	; (8001380 <HAL_ADC_Init+0x290>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	099b      	lsrs	r3, r3, #6
 800116e:	3301      	adds	r3, #1
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001174:	e002      	b.n	800117c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	3b01      	subs	r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f9      	bne.n	8001176 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff3c 	bl	8001004 <LL_ADC_IsInternalRegulatorEnabled>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10d      	bne.n	80011ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	f043 0210 	orr.w	r2, r3, #16
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a2:	f043 0201 	orr.w	r2, r3, #1
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff75 	bl	80010a2 <LL_ADC_REG_IsConversionOngoing>
 80011b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f040 80cd 	bne.w	8001362 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f040 80c9 	bne.w	8001362 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011d8:	f043 0202 	orr.w	r2, r3, #2
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff35 	bl	8001054 <LL_ADC_IsEnabled>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d110      	bne.n	8001212 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011f0:	4864      	ldr	r0, [pc, #400]	; (8001384 <HAL_ADC_Init+0x294>)
 80011f2:	f7ff ff2f 	bl	8001054 <LL_ADC_IsEnabled>
 80011f6:	4604      	mov	r4, r0
 80011f8:	4863      	ldr	r0, [pc, #396]	; (8001388 <HAL_ADC_Init+0x298>)
 80011fa:	f7ff ff2b 	bl	8001054 <LL_ADC_IsEnabled>
 80011fe:	4603      	mov	r3, r0
 8001200:	4323      	orrs	r3, r4
 8001202:	2b00      	cmp	r3, #0
 8001204:	d105      	bne.n	8001212 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4619      	mov	r1, r3
 800120c:	485f      	ldr	r0, [pc, #380]	; (800138c <HAL_ADC_Init+0x29c>)
 800120e:	f7ff fd87 	bl	8000d20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7e5b      	ldrb	r3, [r3, #25]
 8001216:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800121c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001222:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001228:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001230:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d106      	bne.n	800124e <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	3b01      	subs	r3, #1
 8001246:	045b      	lsls	r3, r3, #17
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001252:	2b00      	cmp	r3, #0
 8001254:	d009      	beq.n	800126a <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	4b47      	ldr	r3, [pc, #284]	; (8001390 <HAL_ADC_Init+0x2a0>)
 8001272:	4013      	ands	r3, r2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6812      	ldr	r2, [r2, #0]
 8001278:	69b9      	ldr	r1, [r7, #24]
 800127a:	430b      	orrs	r3, r1
 800127c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff0d 	bl	80010a2 <LL_ADC_REG_IsConversionOngoing>
 8001288:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff1a 	bl	80010c8 <LL_ADC_INJ_IsConversionOngoing>
 8001294:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d140      	bne.n	800131e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d13d      	bne.n	800131e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7e1b      	ldrb	r3, [r3, #24]
 80012aa:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012ac:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012b4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012c4:	f023 0306 	bic.w	r3, r3, #6
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	69b9      	ldr	r1, [r7, #24]
 80012ce:	430b      	orrs	r3, r1
 80012d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d118      	bne.n	800130e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012e6:	f023 0304 	bic.w	r3, r3, #4
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012f2:	4311      	orrs	r1, r2
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80012f8:	4311      	orrs	r1, r2
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80012fe:	430a      	orrs	r2, r1
 8001300:	431a      	orrs	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0201 	orr.w	r2, r2, #1
 800130a:	611a      	str	r2, [r3, #16]
 800130c:	e007      	b.n	800131e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0201 	bic.w	r2, r2, #1
 800131c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d10c      	bne.n	8001340 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	f023 010f 	bic.w	r1, r3, #15
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	1e5a      	subs	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	631a      	str	r2, [r3, #48]	; 0x30
 800133e:	e007      	b.n	8001350 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 020f 	bic.w	r2, r2, #15
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001354:	f023 0303 	bic.w	r3, r3, #3
 8001358:	f043 0201 	orr.w	r2, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	659a      	str	r2, [r3, #88]	; 0x58
 8001360:	e007      	b.n	8001372 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	f043 0210 	orr.w	r2, r3, #16
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001372:	7ffb      	ldrb	r3, [r7, #31]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3724      	adds	r7, #36	; 0x24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	20000000 	.word	0x20000000
 8001380:	053e2d63 	.word	0x053e2d63
 8001384:	50040000 	.word	0x50040000
 8001388:	50040100 	.word	0x50040100
 800138c:	50040300 	.word	0x50040300
 8001390:	fff0c007 	.word	0xfff0c007

08001394 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013a0:	4850      	ldr	r0, [pc, #320]	; (80014e4 <HAL_ADC_Start_DMA+0x150>)
 80013a2:	f7ff fde7 	bl	8000f74 <LL_ADC_GetMultimode>
 80013a6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fe78 	bl	80010a2 <LL_ADC_REG_IsConversionOngoing>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f040 808e 	bne.w	80014d6 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <HAL_ADC_Start_DMA+0x34>
 80013c4:	2302      	movs	r3, #2
 80013c6:	e089      	b.n	80014dc <HAL_ADC_Start_DMA+0x148>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	2b05      	cmp	r3, #5
 80013da:	d002      	beq.n	80013e2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	2b09      	cmp	r3, #9
 80013e0:	d172      	bne.n	80014c8 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 fca4 	bl	8001d30 <ADC_Enable>
 80013e8:	4603      	mov	r3, r0
 80013ea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d165      	bne.n	80014be <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a37      	ldr	r2, [pc, #220]	; (80014e8 <HAL_ADC_Start_DMA+0x154>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d002      	beq.n	8001416 <HAL_ADC_Start_DMA+0x82>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	e000      	b.n	8001418 <HAL_ADC_Start_DMA+0x84>
 8001416:	4b35      	ldr	r3, [pc, #212]	; (80014ec <HAL_ADC_Start_DMA+0x158>)
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	4293      	cmp	r3, r2
 800141e:	d002      	beq.n	8001426 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d105      	bne.n	8001432 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001442:	f023 0206 	bic.w	r2, r3, #6
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	65da      	str	r2, [r3, #92]	; 0x5c
 800144a:	e002      	b.n	8001452 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001456:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <HAL_ADC_Start_DMA+0x15c>)
 8001458:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800145e:	4a25      	ldr	r2, [pc, #148]	; (80014f4 <HAL_ADC_Start_DMA+0x160>)
 8001460:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001466:	4a24      	ldr	r2, [pc, #144]	; (80014f8 <HAL_ADC_Start_DMA+0x164>)
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	221c      	movs	r2, #28
 8001470:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f042 0210 	orr.w	r2, r2, #16
 8001488:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 0201 	orr.w	r2, r2, #1
 8001498:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3340      	adds	r3, #64	; 0x40
 80014a4:	4619      	mov	r1, r3
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f001 f887 	bl	80025bc <HAL_DMA_Start_IT>
 80014ae:	4603      	mov	r3, r0
 80014b0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fddf 	bl	800107a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80014bc:	e00d      	b.n	80014da <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 80014c6:	e008      	b.n	80014da <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80014d4:	e001      	b.n	80014da <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014d6:	2302      	movs	r3, #2
 80014d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80014da:	7dfb      	ldrb	r3, [r7, #23]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	50040300 	.word	0x50040300
 80014e8:	50040100 	.word	0x50040100
 80014ec:	50040000 	.word	0x50040000
 80014f0:	08001df5 	.word	0x08001df5
 80014f4:	08001ecd 	.word	0x08001ecd
 80014f8:	08001ee9 	.word	0x08001ee9

080014fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b0b6      	sub	sp, #216	; 0xd8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <HAL_ADC_ConfigChannel+0x22>
 8001556:	2302      	movs	r3, #2
 8001558:	e3d5      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x7ce>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fd9b 	bl	80010a2 <LL_ADC_REG_IsConversionOngoing>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	f040 83ba 	bne.w	8001ce8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b05      	cmp	r3, #5
 800157a:	d824      	bhi.n	80015c6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	3b02      	subs	r3, #2
 8001582:	2b03      	cmp	r3, #3
 8001584:	d81b      	bhi.n	80015be <HAL_ADC_ConfigChannel+0x86>
 8001586:	a201      	add	r2, pc, #4	; (adr r2, 800158c <HAL_ADC_ConfigChannel+0x54>)
 8001588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158c:	0800159d 	.word	0x0800159d
 8001590:	080015a5 	.word	0x080015a5
 8001594:	080015ad 	.word	0x080015ad
 8001598:	080015b5 	.word	0x080015b5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	220c      	movs	r2, #12
 80015a0:	605a      	str	r2, [r3, #4]
          break;
 80015a2:	e011      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2212      	movs	r2, #18
 80015a8:	605a      	str	r2, [r3, #4]
          break;
 80015aa:	e00d      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2218      	movs	r2, #24
 80015b0:	605a      	str	r2, [r3, #4]
          break;
 80015b2:	e009      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ba:	605a      	str	r2, [r3, #4]
          break;
 80015bc:	e004      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2206      	movs	r2, #6
 80015c2:	605a      	str	r2, [r3, #4]
          break;
 80015c4:	e000      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80015c6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	f7ff fc52 	bl	8000e7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fd5f 	bl	80010a2 <LL_ADC_REG_IsConversionOngoing>
 80015e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fd6b 	bl	80010c8 <LL_ADC_INJ_IsConversionOngoing>
 80015f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 81c1 	bne.w	8001982 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001600:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001604:	2b00      	cmp	r3, #0
 8001606:	f040 81bc 	bne.w	8001982 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001612:	d10f      	bne.n	8001634 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2200      	movs	r2, #0
 800161e:	4619      	mov	r1, r3
 8001620:	f7ff fc59 	bl	8000ed6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fc00 	bl	8000e32 <LL_ADC_SetSamplingTimeCommonConfig>
 8001632:	e00e      	b.n	8001652 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	6819      	ldr	r1, [r3, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	461a      	mov	r2, r3
 8001642:	f7ff fc48 	bl	8000ed6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fbf0 	bl	8000e32 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	08db      	lsrs	r3, r3, #3
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	2b04      	cmp	r3, #4
 8001672:	d00a      	beq.n	800168a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	6919      	ldr	r1, [r3, #16]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001684:	f7ff fb80 	bl	8000d88 <LL_ADC_SetOffset>
 8001688:	e17b      	b.n	8001982 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fb9d 	bl	8000dd0 <LL_ADC_GetOffsetChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10a      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x17e>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fb92 	bl	8000dd0 <LL_ADC_GetOffsetChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	0e9b      	lsrs	r3, r3, #26
 80016b0:	f003 021f 	and.w	r2, r3, #31
 80016b4:	e01e      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x1bc>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fb87 	bl	8000dd0 <LL_ADC_GetOffsetChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016cc:	fa93 f3a3 	rbit	r3, r3
 80016d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80016e4:	2320      	movs	r3, #32
 80016e6:	e004      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80016e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016ec:	fab3 f383 	clz	r3, r3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1d4>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	0e9b      	lsrs	r3, r3, #26
 8001706:	f003 031f 	and.w	r3, r3, #31
 800170a:	e018      	b.n	800173e <HAL_ADC_ConfigChannel+0x206>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001718:	fa93 f3a3 	rbit	r3, r3
 800171c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001728:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001730:	2320      	movs	r3, #32
 8001732:	e004      	b.n	800173e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001734:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001738:	fab3 f383 	clz	r3, r3
 800173c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800173e:	429a      	cmp	r2, r3
 8001740:	d106      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fb56 	bl	8000dfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2101      	movs	r1, #1
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fb3a 	bl	8000dd0 <LL_ADC_GetOffsetChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10a      	bne.n	800177c <HAL_ADC_ConfigChannel+0x244>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2101      	movs	r1, #1
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fb2f 	bl	8000dd0 <LL_ADC_GetOffsetChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	0e9b      	lsrs	r3, r3, #26
 8001776:	f003 021f 	and.w	r2, r3, #31
 800177a:	e01e      	b.n	80017ba <HAL_ADC_ConfigChannel+0x282>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2101      	movs	r1, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fb24 	bl	8000dd0 <LL_ADC_GetOffsetChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800179a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800179e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80017a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80017aa:	2320      	movs	r3, #32
 80017ac:	e004      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80017ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017b2:	fab3 f383 	clz	r3, r3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d105      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x29a>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	0e9b      	lsrs	r3, r3, #26
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	e018      	b.n	8001804 <HAL_ADC_ConfigChannel+0x2cc>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80017e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80017ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80017f6:	2320      	movs	r3, #32
 80017f8:	e004      	b.n	8001804 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80017fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001804:	429a      	cmp	r2, r3
 8001806:	d106      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2200      	movs	r2, #0
 800180e:	2101      	movs	r1, #1
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff faf3 	bl	8000dfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2102      	movs	r1, #2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fad7 	bl	8000dd0 <LL_ADC_GetOffsetChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10a      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x30a>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2102      	movs	r1, #2
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff facc 	bl	8000dd0 <LL_ADC_GetOffsetChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	0e9b      	lsrs	r3, r3, #26
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	e01e      	b.n	8001880 <HAL_ADC_ConfigChannel+0x348>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2102      	movs	r1, #2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fac1 	bl	8000dd0 <LL_ADC_GetOffsetChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001858:	fa93 f3a3 	rbit	r3, r3
 800185c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001864:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001868:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001870:	2320      	movs	r3, #32
 8001872:	e004      	b.n	800187e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001874:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001878:	fab3 f383 	clz	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x360>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0e9b      	lsrs	r3, r3, #26
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	e016      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x38e>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018a4:	fa93 f3a3 	rbit	r3, r3
 80018a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80018aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80018b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80018b8:	2320      	movs	r3, #32
 80018ba:	e004      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80018bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018c0:	fab3 f383 	clz	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d106      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2200      	movs	r2, #0
 80018d0:	2102      	movs	r1, #2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fa92 	bl	8000dfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2103      	movs	r1, #3
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fa76 	bl	8000dd0 <LL_ADC_GetOffsetChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10a      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x3cc>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2103      	movs	r1, #3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fa6b 	bl	8000dd0 <LL_ADC_GetOffsetChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	0e9b      	lsrs	r3, r3, #26
 80018fe:	f003 021f 	and.w	r2, r3, #31
 8001902:	e017      	b.n	8001934 <HAL_ADC_ConfigChannel+0x3fc>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2103      	movs	r1, #3
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fa60 	bl	8000dd0 <LL_ADC_GetOffsetChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800191c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800191e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001926:	2320      	movs	r3, #32
 8001928:	e003      	b.n	8001932 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800192a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800192c:	fab3 f383 	clz	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <HAL_ADC_ConfigChannel+0x414>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	0e9b      	lsrs	r3, r3, #26
 8001946:	f003 031f 	and.w	r3, r3, #31
 800194a:	e011      	b.n	8001970 <HAL_ADC_ConfigChannel+0x438>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001954:	fa93 f3a3 	rbit	r3, r3
 8001958:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800195a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800195c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800195e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001964:	2320      	movs	r3, #32
 8001966:	e003      	b.n	8001970 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800196a:	fab3 f383 	clz	r3, r3
 800196e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001970:	429a      	cmp	r2, r3
 8001972:	d106      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2200      	movs	r2, #0
 800197a:	2103      	movs	r1, #3
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fa3d 	bl	8000dfc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fb64 	bl	8001054 <LL_ADC_IsEnabled>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	f040 8140 	bne.w	8001c14 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6819      	ldr	r1, [r3, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	461a      	mov	r2, r3
 80019a2:	f7ff fac3 	bl	8000f2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	4a8f      	ldr	r2, [pc, #572]	; (8001be8 <HAL_ADC_ConfigChannel+0x6b0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	f040 8131 	bne.w	8001c14 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10b      	bne.n	80019da <HAL_ADC_ConfigChannel+0x4a2>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	0e9b      	lsrs	r3, r3, #26
 80019c8:	3301      	adds	r3, #1
 80019ca:	f003 031f 	and.w	r3, r3, #31
 80019ce:	2b09      	cmp	r3, #9
 80019d0:	bf94      	ite	ls
 80019d2:	2301      	movls	r3, #1
 80019d4:	2300      	movhi	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	e019      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x4d6>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80019e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019ea:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80019ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80019f2:	2320      	movs	r3, #32
 80019f4:	e003      	b.n	80019fe <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80019f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	3301      	adds	r3, #1
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	2b09      	cmp	r3, #9
 8001a06:	bf94      	ite	ls
 8001a08:	2301      	movls	r3, #1
 8001a0a:	2300      	movhi	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d079      	beq.n	8001b06 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d107      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x4f6>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	0e9b      	lsrs	r3, r3, #26
 8001a24:	3301      	adds	r3, #1
 8001a26:	069b      	lsls	r3, r3, #26
 8001a28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a2c:	e015      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x522>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a36:	fa93 f3a3 	rbit	r3, r3
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a3e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001a46:	2320      	movs	r3, #32
 8001a48:	e003      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4c:	fab3 f383 	clz	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	3301      	adds	r3, #1
 8001a54:	069b      	lsls	r3, r3, #26
 8001a56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x542>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0e9b      	lsrs	r3, r3, #26
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	e017      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x572>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001a92:	2320      	movs	r3, #32
 8001a94:	e003      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	ea42 0103 	orr.w	r1, r2, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10a      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x598>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0e9b      	lsrs	r3, r3, #26
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f003 021f 	and.w	r2, r3, #31
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	051b      	lsls	r3, r3, #20
 8001ace:	e018      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x5ca>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad8:	fa93 f3a3 	rbit	r3, r3
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001ae8:	2320      	movs	r3, #32
 8001aea:	e003      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	3301      	adds	r3, #1
 8001af6:	f003 021f 	and.w	r2, r3, #31
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b02:	430b      	orrs	r3, r1
 8001b04:	e081      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d107      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x5ea>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	0e9b      	lsrs	r3, r3, #26
 8001b18:	3301      	adds	r3, #1
 8001b1a:	069b      	lsls	r3, r3, #26
 8001b1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b20:	e015      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x616>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	e003      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	069b      	lsls	r3, r3, #26
 8001b4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x636>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0e9b      	lsrs	r3, r3, #26
 8001b60:	3301      	adds	r3, #1
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2101      	movs	r1, #1
 8001b68:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6c:	e017      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x666>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	61fb      	str	r3, [r7, #28]
  return result;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001b86:	2320      	movs	r3, #32
 8001b88:	e003      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3301      	adds	r3, #1
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	2101      	movs	r1, #1
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	ea42 0103 	orr.w	r1, r2, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10d      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x692>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	0e9b      	lsrs	r3, r3, #26
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f003 021f 	and.w	r2, r3, #31
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b1e      	subs	r3, #30
 8001bc2:	051b      	lsls	r3, r3, #20
 8001bc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	e01e      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x6d0>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	613b      	str	r3, [r7, #16]
  return result;
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d104      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001be2:	2320      	movs	r3, #32
 8001be4:	e006      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x6bc>
 8001be6:	bf00      	nop
 8001be8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f003 021f 	and.w	r2, r3, #31
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	3b1e      	subs	r3, #30
 8001c02:	051b      	lsls	r3, r3, #20
 8001c04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	6892      	ldr	r2, [r2, #8]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7ff f961 	bl	8000ed6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <HAL_ADC_ConfigChannel+0x7d8>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d06c      	beq.n	8001cfa <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c20:	483c      	ldr	r0, [pc, #240]	; (8001d14 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c22:	f7ff f8a3 	bl	8000d6c <LL_ADC_GetCommonPathInternalCh>
 8001c26:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a3a      	ldr	r2, [pc, #232]	; (8001d18 <HAL_ADC_ConfigChannel+0x7e0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d127      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d121      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a35      	ldr	r2, [pc, #212]	; (8001d1c <HAL_ADC_ConfigChannel+0x7e4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d157      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c52:	4619      	mov	r1, r3
 8001c54:	482f      	ldr	r0, [pc, #188]	; (8001d14 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c56:	f7ff f876 	bl	8000d46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c5a:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <HAL_ADC_ConfigChannel+0x7e8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	099b      	lsrs	r3, r3, #6
 8001c60:	4a30      	ldr	r2, [pc, #192]	; (8001d24 <HAL_ADC_ConfigChannel+0x7ec>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	099b      	lsrs	r3, r3, #6
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c74:	e002      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f9      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c82:	e03a      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a27      	ldr	r2, [pc, #156]	; (8001d28 <HAL_ADC_ConfigChannel+0x7f0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d113      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x77e>
 8001c8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10d      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <HAL_ADC_ConfigChannel+0x7e4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d12a      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ca4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cac:	4619      	mov	r1, r3
 8001cae:	4819      	ldr	r0, [pc, #100]	; (8001d14 <HAL_ADC_ConfigChannel+0x7dc>)
 8001cb0:	f7ff f849 	bl	8000d46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cb4:	e021      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1c      	ldr	r2, [pc, #112]	; (8001d2c <HAL_ADC_ConfigChannel+0x7f4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d11c      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d116      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <HAL_ADC_ConfigChannel+0x7e4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d111      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ce2:	f7ff f830 	bl	8000d46 <LL_ADC_SetCommonPathInternalCh>
 8001ce6:	e008      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	f043 0220 	orr.w	r2, r3, #32
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001d02:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	37d8      	adds	r7, #216	; 0xd8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	80080000 	.word	0x80080000
 8001d14:	50040300 	.word	0x50040300
 8001d18:	c7520000 	.word	0xc7520000
 8001d1c:	50040000 	.word	0x50040000
 8001d20:	20000000 	.word	0x20000000
 8001d24:	053e2d63 	.word	0x053e2d63
 8001d28:	cb840000 	.word	0xcb840000
 8001d2c:	80000001 	.word	0x80000001

08001d30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff f989 	bl	8001054 <LL_ADC_IsEnabled>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d14d      	bne.n	8001de4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <ADC_Enable+0xc0>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00d      	beq.n	8001d72 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	f043 0210 	orr.w	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e039      	b.n	8001de6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f958 	bl	800102c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001d7c:	f7fe ffa0 	bl	8000cc0 <HAL_GetTick>
 8001d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d82:	e028      	b.n	8001dd6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff f963 	bl	8001054 <LL_ADC_IsEnabled>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d104      	bne.n	8001d9e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff f947 	bl	800102c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d9e:	f7fe ff8f 	bl	8000cc0 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d914      	bls.n	8001dd6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d00d      	beq.n	8001dd6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	f043 0210 	orr.w	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e007      	b.n	8001de6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d1cf      	bne.n	8001d84 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	8000003f 	.word	0x8000003f

08001df4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d14b      	bne.n	8001ea6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d021      	beq.n	8001e6c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff f813 	bl	8000e58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d032      	beq.n	8001e9e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d12b      	bne.n	8001e9e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d11f      	bne.n	8001e9e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	659a      	str	r2, [r3, #88]	; 0x58
 8001e6a:	e018      	b.n	8001e9e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d111      	bne.n	8001e9e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d105      	bne.n	8001e9e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f043 0201 	orr.w	r2, r3, #1
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff fb2c 	bl	80014fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ea4:	e00e      	b.n	8001ec4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7ff fb36 	bl	8001524 <HAL_ADC_ErrorCallback>
}
 8001eb8:	e004      	b.n	8001ec4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f7ff fb18 	bl	8001510 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	f043 0204 	orr.w	r2, r3, #4
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f7ff fb08 	bl	8001524 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <LL_ADC_IsEnabled>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <LL_ADC_IsEnabled+0x18>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <LL_ADC_IsEnabled+0x1a>
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_ADC_REG_IsConversionOngoing>:
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d101      	bne.n	8001f5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b0a1      	sub	sp, #132	; 0x84
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e089      	b.n	800209a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001f8e:	2300      	movs	r3, #0
 8001f90:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001f92:	2300      	movs	r3, #0
 8001f94:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a42      	ldr	r2, [pc, #264]	; (80020a4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d102      	bne.n	8001fa6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001fa0:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	e001      	b.n	8001faa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10b      	bne.n	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	f043 0220 	orr.w	r2, r3, #32
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e068      	b.n	800209a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ffb9 	bl	8001f42 <LL_ADC_REG_IsConversionOngoing>
 8001fd0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ffb3 	bl	8001f42 <LL_ADC_REG_IsConversionOngoing>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d14a      	bne.n	8002078 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d147      	bne.n	8002078 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001fe8:	4b30      	ldr	r3, [pc, #192]	; (80020ac <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001fea:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d027      	beq.n	8002044 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	6859      	ldr	r1, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002006:	035b      	lsls	r3, r3, #13
 8002008:	430b      	orrs	r3, r1
 800200a:	431a      	orrs	r2, r3
 800200c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800200e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002010:	4824      	ldr	r0, [pc, #144]	; (80020a4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002012:	f7ff ff83 	bl	8001f1c <LL_ADC_IsEnabled>
 8002016:	4604      	mov	r4, r0
 8002018:	4823      	ldr	r0, [pc, #140]	; (80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800201a:	f7ff ff7f 	bl	8001f1c <LL_ADC_IsEnabled>
 800201e:	4603      	mov	r3, r0
 8002020:	4323      	orrs	r3, r4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d132      	bne.n	800208c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800202e:	f023 030f 	bic.w	r3, r3, #15
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	6811      	ldr	r1, [r2, #0]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	6892      	ldr	r2, [r2, #8]
 800203a:	430a      	orrs	r2, r1
 800203c:	431a      	orrs	r2, r3
 800203e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002040:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002042:	e023      	b.n	800208c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800204c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800204e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002050:	4814      	ldr	r0, [pc, #80]	; (80020a4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002052:	f7ff ff63 	bl	8001f1c <LL_ADC_IsEnabled>
 8002056:	4604      	mov	r4, r0
 8002058:	4813      	ldr	r0, [pc, #76]	; (80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800205a:	f7ff ff5f 	bl	8001f1c <LL_ADC_IsEnabled>
 800205e:	4603      	mov	r3, r0
 8002060:	4323      	orrs	r3, r4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d112      	bne.n	800208c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800206e:	f023 030f 	bic.w	r3, r3, #15
 8002072:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002074:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002076:	e009      	b.n	800208c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	f043 0220 	orr.w	r2, r3, #32
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800208a:	e000      	b.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800208c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002096:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800209a:	4618      	mov	r0, r3
 800209c:	3784      	adds	r7, #132	; 0x84
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd90      	pop	{r4, r7, pc}
 80020a2:	bf00      	nop
 80020a4:	50040000 	.word	0x50040000
 80020a8:	50040100 	.word	0x50040100
 80020ac:	50040300 	.word	0x50040300

080020b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0ed      	b.n	800229e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe fc6e 	bl	80009b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0202 	bic.w	r2, r2, #2
 80020e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020e4:	f7fe fdec 	bl	8000cc0 <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020ea:	e012      	b.n	8002112 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020ec:	f7fe fde8 	bl	8000cc0 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b0a      	cmp	r3, #10
 80020f8:	d90b      	bls.n	8002112 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2205      	movs	r2, #5
 800210a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0c5      	b.n	800229e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e5      	bne.n	80020ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002130:	f7fe fdc6 	bl	8000cc0 <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002136:	e012      	b.n	800215e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002138:	f7fe fdc2 	bl	8000cc0 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b0a      	cmp	r3, #10
 8002144:	d90b      	bls.n	800215e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2205      	movs	r2, #5
 8002156:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e09f      	b.n	800229e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0e5      	beq.n	8002138 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7e1b      	ldrb	r3, [r3, #24]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d108      	bne.n	8002186 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e007      	b.n	8002196 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002194:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7e5b      	ldrb	r3, [r3, #25]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d108      	bne.n	80021b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e007      	b.n	80021c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7e9b      	ldrb	r3, [r3, #26]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d108      	bne.n	80021da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0220 	orr.w	r2, r2, #32
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	e007      	b.n	80021ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0220 	bic.w	r2, r2, #32
 80021e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7edb      	ldrb	r3, [r3, #27]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d108      	bne.n	8002204 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0210 	bic.w	r2, r2, #16
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e007      	b.n	8002214 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0210 	orr.w	r2, r2, #16
 8002212:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7f1b      	ldrb	r3, [r3, #28]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d108      	bne.n	800222e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0208 	orr.w	r2, r2, #8
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	e007      	b.n	800223e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0208 	bic.w	r2, r2, #8
 800223c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7f5b      	ldrb	r3, [r3, #29]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d108      	bne.n	8002258 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0204 	orr.w	r2, r2, #4
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e007      	b.n	8002268 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0204 	bic.w	r2, r2, #4
 8002266:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	ea42 0103 	orr.w	r1, r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	1e5a      	subs	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022da:	4a04      	ldr	r2, [pc, #16]	; (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	60d3      	str	r3, [r2, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <__NVIC_GetPriorityGrouping+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0307 	and.w	r3, r3, #7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db0b      	blt.n	8002336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4907      	ldr	r1, [pc, #28]	; (8002344 <__NVIC_EnableIRQ+0x38>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2001      	movs	r0, #1
 800232e:	fa00 f202 	lsl.w	r2, r0, r2
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000e100 	.word	0xe000e100

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	; (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	; (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ff4c 	bl	80022a8 <__NVIC_SetPriorityGrouping>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800242a:	f7ff ff61 	bl	80022f0 <__NVIC_GetPriorityGrouping>
 800242e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	6978      	ldr	r0, [r7, #20]
 8002436:	f7ff ffb1 	bl	800239c <NVIC_EncodePriority>
 800243a:	4602      	mov	r2, r0
 800243c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff80 	bl	8002348 <__NVIC_SetPriority>
}
 8002448:	bf00      	nop
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff54 	bl	800230c <__NVIC_EnableIRQ>
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e08d      	b.n	800259a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <HAL_DMA_Init+0x138>)
 8002486:	429a      	cmp	r2, r3
 8002488:	d80f      	bhi.n	80024aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	4b45      	ldr	r3, [pc, #276]	; (80025a8 <HAL_DMA_Init+0x13c>)
 8002492:	4413      	add	r3, r2
 8002494:	4a45      	ldr	r2, [pc, #276]	; (80025ac <HAL_DMA_Init+0x140>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	009a      	lsls	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a42      	ldr	r2, [pc, #264]	; (80025b0 <HAL_DMA_Init+0x144>)
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
 80024a8:	e00e      	b.n	80024c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	4b40      	ldr	r3, [pc, #256]	; (80025b4 <HAL_DMA_Init+0x148>)
 80024b2:	4413      	add	r3, r2
 80024b4:	4a3d      	ldr	r2, [pc, #244]	; (80025ac <HAL_DMA_Init+0x140>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	009a      	lsls	r2, r3, #2
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a3c      	ldr	r2, [pc, #240]	; (80025b8 <HAL_DMA_Init+0x14c>)
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80024de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f9b6 	bl	800288c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002528:	d102      	bne.n	8002530 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002544:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d010      	beq.n	8002570 <HAL_DMA_Init+0x104>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b04      	cmp	r3, #4
 8002554:	d80c      	bhi.n	8002570 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f9d6 	bl	8002908 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	e008      	b.n	8002582 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40020407 	.word	0x40020407
 80025a8:	bffdfff8 	.word	0xbffdfff8
 80025ac:	cccccccd 	.word	0xcccccccd
 80025b0:	40020000 	.word	0x40020000
 80025b4:	bffdfbf8 	.word	0xbffdfbf8
 80025b8:	40020400 	.word	0x40020400

080025bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_DMA_Start_IT+0x20>
 80025d8:	2302      	movs	r3, #2
 80025da:	e066      	b.n	80026aa <HAL_DMA_Start_IT+0xee>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d155      	bne.n	800269c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f8fb 	bl	8002810 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 020e 	orr.w	r2, r2, #14
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e00f      	b.n	8002654 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0204 	bic.w	r2, r2, #4
 8002642:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 020a 	orr.w	r2, r2, #10
 8002652:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d007      	beq.n	8002672 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002670:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002688:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0201 	orr.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e005      	b.n	80026a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80026a4:	2302      	movs	r3, #2
 80026a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f003 031c 	and.w	r3, r3, #28
 80026d2:	2204      	movs	r2, #4
 80026d4:	409a      	lsls	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d026      	beq.n	800272c <HAL_DMA_IRQHandler+0x7a>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d021      	beq.n	800272c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0204 	bic.w	r2, r2, #4
 8002704:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f003 021c 	and.w	r2, r3, #28
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2104      	movs	r1, #4
 8002714:	fa01 f202 	lsl.w	r2, r1, r2
 8002718:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	2b00      	cmp	r3, #0
 8002720:	d071      	beq.n	8002806 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800272a:	e06c      	b.n	8002806 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	f003 031c 	and.w	r3, r3, #28
 8002734:	2202      	movs	r2, #2
 8002736:	409a      	lsls	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d02e      	beq.n	800279e <HAL_DMA_IRQHandler+0xec>
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d029      	beq.n	800279e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10b      	bne.n	8002770 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 020a 	bic.w	r2, r2, #10
 8002766:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	f003 021c 	and.w	r2, r3, #28
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	2102      	movs	r1, #2
 800277e:	fa01 f202 	lsl.w	r2, r1, r2
 8002782:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d038      	beq.n	8002806 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800279c:	e033      	b.n	8002806 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f003 031c 	and.w	r3, r3, #28
 80027a6:	2208      	movs	r2, #8
 80027a8:	409a      	lsls	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d02a      	beq.n	8002808 <HAL_DMA_IRQHandler+0x156>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d025      	beq.n	8002808 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 020e 	bic.w	r2, r2, #14
 80027ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	f003 021c 	and.w	r2, r3, #28
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f202 	lsl.w	r2, r1, r2
 80027de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d004      	beq.n	8002808 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002806:	bf00      	nop
 8002808:	bf00      	nop
}
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002826:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282c:	2b00      	cmp	r3, #0
 800282e:	d004      	beq.n	800283a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002838:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f003 021c 	and.w	r2, r3, #28
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f202 	lsl.w	r2, r1, r2
 800284c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b10      	cmp	r3, #16
 800285c:	d108      	bne.n	8002870 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800286e:	e007      	b.n	8002880 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	60da      	str	r2, [r3, #12]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800289c:	429a      	cmp	r2, r3
 800289e:	d80a      	bhi.n	80028b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028ac:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6493      	str	r3, [r2, #72]	; 0x48
 80028b4:	e007      	b.n	80028c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	009a      	lsls	r2, r3, #2
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80028c0:	4413      	add	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	3b08      	subs	r3, #8
 80028ce:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80028dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	2201      	movs	r2, #1
 80028e6:	409a      	lsls	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40020407 	.word	0x40020407
 80028fc:	4002081c 	.word	0x4002081c
 8002900:	cccccccd 	.word	0xcccccccd
 8002904:	40020880 	.word	0x40020880

08002908 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	461a      	mov	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a08      	ldr	r2, [pc, #32]	; (800294c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800292a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3b01      	subs	r3, #1
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2201      	movs	r2, #1
 8002936:	409a      	lsls	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	1000823f 	.word	0x1000823f
 800294c:	40020940 	.word	0x40020940

08002950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295e:	e166      	b.n	8002c2e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	4013      	ands	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8158 	beq.w	8002c28 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d00b      	beq.n	8002998 <HAL_GPIO_Init+0x48>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d007      	beq.n	8002998 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800298c:	2b11      	cmp	r3, #17
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b12      	cmp	r3, #18
 8002996:	d130      	bne.n	80029fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	2203      	movs	r2, #3
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ce:	2201      	movs	r2, #1
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	f003 0201 	and.w	r2, r3, #1
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	2203      	movs	r2, #3
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0xea>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b12      	cmp	r3, #18
 8002a38:	d123      	bne.n	8002a82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	08da      	lsrs	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3208      	adds	r2, #8
 8002a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	220f      	movs	r2, #15
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	08da      	lsrs	r2, r3, #3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3208      	adds	r2, #8
 8002a7c:	6939      	ldr	r1, [r7, #16]
 8002a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0203 	and.w	r2, r3, #3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80b2 	beq.w	8002c28 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac4:	4b61      	ldr	r3, [pc, #388]	; (8002c4c <HAL_GPIO_Init+0x2fc>)
 8002ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac8:	4a60      	ldr	r2, [pc, #384]	; (8002c4c <HAL_GPIO_Init+0x2fc>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6613      	str	r3, [r2, #96]	; 0x60
 8002ad0:	4b5e      	ldr	r3, [pc, #376]	; (8002c4c <HAL_GPIO_Init+0x2fc>)
 8002ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002adc:	4a5c      	ldr	r2, [pc, #368]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	220f      	movs	r2, #15
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b06:	d02b      	beq.n	8002b60 <HAL_GPIO_Init+0x210>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a52      	ldr	r2, [pc, #328]	; (8002c54 <HAL_GPIO_Init+0x304>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d025      	beq.n	8002b5c <HAL_GPIO_Init+0x20c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a51      	ldr	r2, [pc, #324]	; (8002c58 <HAL_GPIO_Init+0x308>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d01f      	beq.n	8002b58 <HAL_GPIO_Init+0x208>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a50      	ldr	r2, [pc, #320]	; (8002c5c <HAL_GPIO_Init+0x30c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d019      	beq.n	8002b54 <HAL_GPIO_Init+0x204>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a4f      	ldr	r2, [pc, #316]	; (8002c60 <HAL_GPIO_Init+0x310>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d013      	beq.n	8002b50 <HAL_GPIO_Init+0x200>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a4e      	ldr	r2, [pc, #312]	; (8002c64 <HAL_GPIO_Init+0x314>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00d      	beq.n	8002b4c <HAL_GPIO_Init+0x1fc>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a4d      	ldr	r2, [pc, #308]	; (8002c68 <HAL_GPIO_Init+0x318>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d007      	beq.n	8002b48 <HAL_GPIO_Init+0x1f8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a4c      	ldr	r2, [pc, #304]	; (8002c6c <HAL_GPIO_Init+0x31c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_GPIO_Init+0x1f4>
 8002b40:	2307      	movs	r3, #7
 8002b42:	e00e      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b44:	2308      	movs	r3, #8
 8002b46:	e00c      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b48:	2306      	movs	r3, #6
 8002b4a:	e00a      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b4c:	2305      	movs	r3, #5
 8002b4e:	e008      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b50:	2304      	movs	r3, #4
 8002b52:	e006      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b54:	2303      	movs	r3, #3
 8002b56:	e004      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e002      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b60:	2300      	movs	r3, #0
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	f002 0203 	and.w	r2, r2, #3
 8002b68:	0092      	lsls	r2, r2, #2
 8002b6a:	4093      	lsls	r3, r2
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b72:	4937      	ldr	r1, [pc, #220]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	3302      	adds	r3, #2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b80:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ba4:	4a32      	ldr	r2, [pc, #200]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bce:	4a28      	ldr	r2, [pc, #160]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bd4:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bf8:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c22:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f47f ae91 	bne.w	8002960 <HAL_GPIO_Init+0x10>
  }
}
 8002c3e:	bf00      	nop
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40010000 	.word	0x40010000
 8002c54:	48000400 	.word	0x48000400
 8002c58:	48000800 	.word	0x48000800
 8002c5c:	48000c00 	.word	0x48000c00
 8002c60:	48001000 	.word	0x48001000
 8002c64:	48001400 	.word	0x48001400
 8002c68:	48001800 	.word	0x48001800
 8002c6c:	48001c00 	.word	0x48001c00
 8002c70:	40010400 	.word	0x40010400

08002c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c84:	787b      	ldrb	r3, [r7, #1]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c90:	e002      	b.n	8002c98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	041a      	lsls	r2, r3, #16
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	43d9      	mvns	r1, r3
 8002cc2:	887b      	ldrh	r3, [r7, #2]
 8002cc4:	400b      	ands	r3, r1
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	619a      	str	r2, [r3, #24]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fc84 	bl	8000604 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40010400 	.word	0x40010400

08002d08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d18:	d102      	bne.n	8002d20 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d1e:	e00b      	b.n	8002d38 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d2e:	d102      	bne.n	8002d36 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d34:	e000      	b.n	8002d38 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002d36:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40007000 	.word	0x40007000

08002d48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d141      	bne.n	8002dda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d56:	4b4b      	ldr	r3, [pc, #300]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d62:	d131      	bne.n	8002dc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d64:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d6a:	4a46      	ldr	r2, [pc, #280]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d74:	4b43      	ldr	r3, [pc, #268]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d7c:	4a41      	ldr	r2, [pc, #260]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002d84:	4b40      	ldr	r3, [pc, #256]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2232      	movs	r2, #50	; 0x32
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	4a3f      	ldr	r2, [pc, #252]	; (8002e8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	0c9b      	lsrs	r3, r3, #18
 8002d96:	3301      	adds	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d9a:	e002      	b.n	8002da2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002da2:	4b38      	ldr	r3, [pc, #224]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dae:	d102      	bne.n	8002db6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f2      	bne.n	8002d9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc2:	d158      	bne.n	8002e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e057      	b.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dc8:	4b2e      	ldr	r3, [pc, #184]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dce:	4a2d      	ldr	r2, [pc, #180]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002dd8:	e04d      	b.n	8002e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de0:	d141      	bne.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002de2:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dee:	d131      	bne.n	8002e54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002df0:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df6:	4a23      	ldr	r2, [pc, #140]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e00:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e08:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2232      	movs	r2, #50	; 0x32
 8002e16:	fb02 f303 	mul.w	r3, r2, r3
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	0c9b      	lsrs	r3, r3, #18
 8002e22:	3301      	adds	r3, #1
 8002e24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e26:	e002      	b.n	8002e2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3a:	d102      	bne.n	8002e42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f2      	bne.n	8002e28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e4e:	d112      	bne.n	8002e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e011      	b.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e64:	e007      	b.n	8002e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e6e:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e74:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	40007000 	.word	0x40007000
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	431bde83 	.word	0x431bde83

08002e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	; 0x28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d102      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f000 bc76 	b.w	8003790 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea4:	4ba1      	ldr	r3, [pc, #644]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eae:	4b9f      	ldr	r3, [pc, #636]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80e6 	beq.w	8003092 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <HAL_RCC_OscConfig+0x4c>
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	f040 808d 	bne.w	8002fee <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	f040 8089 	bne.w	8002fee <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002edc:	4b93      	ldr	r3, [pc, #588]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d006      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x66>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f000 bc4d 	b.w	8003790 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002efa:	4b8c      	ldr	r3, [pc, #560]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d004      	beq.n	8002f10 <HAL_RCC_OscConfig+0x80>
 8002f06:	4b89      	ldr	r3, [pc, #548]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0e:	e005      	b.n	8002f1c <HAL_RCC_OscConfig+0x8c>
 8002f10:	4b86      	ldr	r3, [pc, #536]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d224      	bcs.n	8002f6a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fe47 	bl	8003bb8 <RCC_SetFlashLatencyFromMSIRange>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	f000 bc2d 	b.w	8003790 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f36:	4b7d      	ldr	r3, [pc, #500]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a7c      	ldr	r2, [pc, #496]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002f3c:	f043 0308 	orr.w	r3, r3, #8
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b7a      	ldr	r3, [pc, #488]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	4977      	ldr	r1, [pc, #476]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f54:	4b75      	ldr	r3, [pc, #468]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	4972      	ldr	r1, [pc, #456]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
 8002f68:	e025      	b.n	8002fb6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f6a:	4b70      	ldr	r3, [pc, #448]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a6f      	ldr	r2, [pc, #444]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002f70:	f043 0308 	orr.w	r3, r3, #8
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b6d      	ldr	r3, [pc, #436]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	496a      	ldr	r1, [pc, #424]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f88:	4b68      	ldr	r3, [pc, #416]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	4965      	ldr	r1, [pc, #404]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fe06 	bl	8003bb8 <RCC_SetFlashLatencyFromMSIRange>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e3ec      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fb6:	f000 fd1f 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4b5b      	ldr	r3, [pc, #364]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	495a      	ldr	r1, [pc, #360]	; (8003130 <HAL_RCC_OscConfig+0x2a0>)
 8002fc8:	5ccb      	ldrb	r3, [r1, r3]
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	4a58      	ldr	r2, [pc, #352]	; (8003134 <HAL_RCC_OscConfig+0x2a4>)
 8002fd4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fd6:	4b58      	ldr	r3, [pc, #352]	; (8003138 <HAL_RCC_OscConfig+0x2a8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fd2c 	bl	8000a38 <HAL_InitTick>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d052      	beq.n	8003090 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
 8002fec:	e3d0      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d032      	beq.n	800305c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ff6:	4b4d      	ldr	r3, [pc, #308]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a4c      	ldr	r2, [pc, #304]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003002:	f7fd fe5d 	bl	8000cc0 <HAL_GetTick>
 8003006:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800300a:	f7fd fe59 	bl	8000cc0 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e3b9      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800301c:	4b43      	ldr	r3, [pc, #268]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003028:	4b40      	ldr	r3, [pc, #256]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a3f      	ldr	r2, [pc, #252]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 800302e:	f043 0308 	orr.w	r3, r3, #8
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	493a      	ldr	r1, [pc, #232]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003046:	4b39      	ldr	r3, [pc, #228]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	4935      	ldr	r1, [pc, #212]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
 800305a:	e01a      	b.n	8003092 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800305c:	4b33      	ldr	r3, [pc, #204]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a32      	ldr	r2, [pc, #200]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003068:	f7fd fe2a 	bl	8000cc0 <HAL_GetTick>
 800306c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003070:	f7fd fe26 	bl	8000cc0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e386      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003082:	4b2a      	ldr	r3, [pc, #168]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x1e0>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d073      	beq.n	8003186 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_OscConfig+0x220>
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d10e      	bne.n	80030c8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d10b      	bne.n	80030c8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	4b1e      	ldr	r3, [pc, #120]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d063      	beq.n	8003184 <HAL_RCC_OscConfig+0x2f4>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d15f      	bne.n	8003184 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e363      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d0:	d106      	bne.n	80030e0 <HAL_RCC_OscConfig+0x250>
 80030d2:	4b16      	ldr	r3, [pc, #88]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a15      	ldr	r2, [pc, #84]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e01d      	b.n	800311c <HAL_RCC_OscConfig+0x28c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x274>
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a0f      	ldr	r2, [pc, #60]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 80030f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a0c      	ldr	r2, [pc, #48]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e00b      	b.n	800311c <HAL_RCC_OscConfig+0x28c>
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a08      	ldr	r2, [pc, #32]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 800310a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a05      	ldr	r2, [pc, #20]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8003116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d01b      	beq.n	800315c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fd fdcc 	bl	8000cc0 <HAL_GetTick>
 8003128:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800312a:	e010      	b.n	800314e <HAL_RCC_OscConfig+0x2be>
 800312c:	40021000 	.word	0x40021000
 8003130:	08004df8 	.word	0x08004df8
 8003134:	20000000 	.word	0x20000000
 8003138:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800313c:	f7fd fdc0 	bl	8000cc0 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	; 0x64
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e320      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800314e:	4ba0      	ldr	r3, [pc, #640]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x2ac>
 800315a:	e014      	b.n	8003186 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fd fdb0 	bl	8000cc0 <HAL_GetTick>
 8003160:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003164:	f7fd fdac 	bl	8000cc0 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e30c      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003176:	4b96      	ldr	r3, [pc, #600]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x2d4>
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d060      	beq.n	8003254 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	2b04      	cmp	r3, #4
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_OscConfig+0x314>
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d119      	bne.n	80031d2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d116      	bne.n	80031d2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031a4:	4b8a      	ldr	r3, [pc, #552]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_OscConfig+0x32c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e2e9      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	4b84      	ldr	r3, [pc, #528]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	4981      	ldr	r1, [pc, #516]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d0:	e040      	b.n	8003254 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d023      	beq.n	8003222 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031da:	4b7d      	ldr	r3, [pc, #500]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a7c      	ldr	r2, [pc, #496]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e6:	f7fd fd6b 	bl	8000cc0 <HAL_GetTick>
 80031ea:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ee:	f7fd fd67 	bl	8000cc0 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e2c7      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003200:	4b73      	ldr	r3, [pc, #460]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320c:	4b70      	ldr	r3, [pc, #448]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	496d      	ldr	r1, [pc, #436]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
 8003220:	e018      	b.n	8003254 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003222:	4b6b      	ldr	r3, [pc, #428]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a6a      	ldr	r2, [pc, #424]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 8003228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800322c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7fd fd47 	bl	8000cc0 <HAL_GetTick>
 8003232:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003236:	f7fd fd43 	bl	8000cc0 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e2a3      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003248:	4b61      	ldr	r3, [pc, #388]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f0      	bne.n	8003236 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d07f      	beq.n	8003360 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d05f      	beq.n	8003328 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003268:	4b59      	ldr	r3, [pc, #356]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 800326a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699a      	ldr	r2, [r3, #24]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	429a      	cmp	r2, r3
 800327c:	d037      	beq.n	80032ee <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d006      	beq.n	8003296 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e27c      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01b      	beq.n	80032d8 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80032a0:	4b4b      	ldr	r3, [pc, #300]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 80032a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a6:	4a4a      	ldr	r2, [pc, #296]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032b0:	f7fd fd06 	bl	8000cc0 <HAL_GetTick>
 80032b4:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b8:	f7fd fd02 	bl	8000cc0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b11      	cmp	r3, #17
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e262      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032ca:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 80032cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1ef      	bne.n	80032b8 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80032d8:	4b3d      	ldr	r3, [pc, #244]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 80032da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032de:	f023 0210 	bic.w	r2, r3, #16
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	493a      	ldr	r1, [pc, #232]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ee:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 80032f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f4:	4a36      	ldr	r2, [pc, #216]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fe:	f7fd fcdf 	bl	8000cc0 <HAL_GetTick>
 8003302:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003306:	f7fd fcdb 	bl	8000cc0 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b11      	cmp	r3, #17
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e23b      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003318:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 800331a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0ef      	beq.n	8003306 <HAL_RCC_OscConfig+0x476>
 8003326:	e01b      	b.n	8003360 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003328:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 800332a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332e:	4a28      	ldr	r2, [pc, #160]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fd fcc2 	bl	8000cc0 <HAL_GetTick>
 800333c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003340:	f7fd fcbe 	bl	8000cc0 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b11      	cmp	r3, #17
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e21e      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003352:	4b1f      	ldr	r3, [pc, #124]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 8003354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1ef      	bne.n	8003340 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80c1 	beq.w	80034f0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336e:	2300      	movs	r3, #0
 8003370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003374:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10e      	bne.n	800339e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 8003382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003384:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 8003386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338a:	6593      	str	r3, [r2, #88]	; 0x58
 800338c:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <HAL_RCC_OscConfig+0x540>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <HAL_RCC_OscConfig+0x544>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d11c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033aa:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <HAL_RCC_OscConfig+0x544>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <HAL_RCC_OscConfig+0x544>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b6:	f7fd fc83 	bl	8000cc0 <HAL_GetTick>
 80033ba:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033bc:	e00c      	b.n	80033d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033be:	f7fd fc7f 	bl	8000cc0 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d905      	bls.n	80033d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e1df      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d8:	4b99      	ldr	r3, [pc, #612]	; (8003640 <HAL_RCC_OscConfig+0x7b0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ec      	beq.n	80033be <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d02c      	beq.n	800344a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80033f0:	4b94      	ldr	r3, [pc, #592]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003402:	4990      	ldr	r1, [pc, #576]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d010      	beq.n	8003438 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003416:	4b8b      	ldr	r3, [pc, #556]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	4a89      	ldr	r2, [pc, #548]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003426:	4b87      	ldr	r3, [pc, #540]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	4a85      	ldr	r2, [pc, #532]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003436:	e018      	b.n	800346a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003438:	4b82      	ldr	r3, [pc, #520]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	4a81      	ldr	r2, [pc, #516]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003448:	e00f      	b.n	800346a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800344a:	4b7e      	ldr	r3, [pc, #504]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	4a7c      	ldr	r2, [pc, #496]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800345a:	4b7a      	ldr	r3, [pc, #488]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	4a78      	ldr	r2, [pc, #480]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 8003462:	f023 0304 	bic.w	r3, r3, #4
 8003466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d016      	beq.n	80034a0 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003472:	f7fd fc25 	bl	8000cc0 <HAL_GetTick>
 8003476:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003478:	e00a      	b.n	8003490 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fd fc21 	bl	8000cc0 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	; 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e17f      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003490:	4b6c      	ldr	r3, [pc, #432]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0ed      	beq.n	800347a <HAL_RCC_OscConfig+0x5ea>
 800349e:	e01d      	b.n	80034dc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fd fc0e 	bl	8000cc0 <HAL_GetTick>
 80034a4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fd fc0a 	bl	8000cc0 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e168      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034be:	4b61      	ldr	r3, [pc, #388]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1ed      	bne.n	80034a8 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80034cc:	4b5d      	ldr	r3, [pc, #372]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	4a5c      	ldr	r2, [pc, #368]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 80034d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d105      	bne.n	80034f0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e4:	4b57      	ldr	r3, [pc, #348]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	4a56      	ldr	r2, [pc, #344]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 80034ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d03c      	beq.n	8003576 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01c      	beq.n	800353e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003504:	4b4f      	ldr	r3, [pc, #316]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 8003506:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800350a:	4a4e      	ldr	r2, [pc, #312]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7fd fbd4 	bl	8000cc0 <HAL_GetTick>
 8003518:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800351c:	f7fd fbd0 	bl	8000cc0 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e130      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800352e:	4b45      	ldr	r3, [pc, #276]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 8003530:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ef      	beq.n	800351c <HAL_RCC_OscConfig+0x68c>
 800353c:	e01b      	b.n	8003576 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800353e:	4b41      	ldr	r3, [pc, #260]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 8003540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003544:	4a3f      	ldr	r2, [pc, #252]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354e:	f7fd fbb7 	bl	8000cc0 <HAL_GetTick>
 8003552:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003556:	f7fd fbb3 	bl	8000cc0 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e113      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003568:	4b36      	ldr	r3, [pc, #216]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 800356a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ef      	bne.n	8003556 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8107 	beq.w	800378e <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2b02      	cmp	r3, #2
 8003586:	f040 80cf 	bne.w	8003728 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800358a:	4b2e      	ldr	r3, [pc, #184]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0203 	and.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	429a      	cmp	r2, r3
 800359c:	d12c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a8:	3b01      	subs	r3, #1
 80035aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d123      	bne.n	80035f8 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d11b      	bne.n	80035f8 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d113      	bne.n	80035f8 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	3b01      	subs	r3, #1
 80035de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d109      	bne.n	80035f8 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	085b      	lsrs	r3, r3, #1
 80035f0:	3b01      	subs	r3, #1
 80035f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d071      	beq.n	80036dc <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	2b0c      	cmp	r3, #12
 80035fc:	d06c      	beq.n	80036d8 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035fe:	4b11      	ldr	r3, [pc, #68]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d105      	bne.n	8003616 <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800360a:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e0ba      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800361a:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a09      	ldr	r2, [pc, #36]	; (8003644 <HAL_RCC_OscConfig+0x7b4>)
 8003620:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003624:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003626:	f7fd fb4b 	bl	8000cc0 <HAL_GetTick>
 800362a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800362c:	e00c      	b.n	8003648 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362e:	f7fd fb47 	bl	8000cc0 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d905      	bls.n	8003648 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0a7      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
 8003640:	40007000 	.word	0x40007000
 8003644:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003648:	4b53      	ldr	r3, [pc, #332]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1ec      	bne.n	800362e <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003654:	4b50      	ldr	r3, [pc, #320]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	4b50      	ldr	r3, [pc, #320]	; (800379c <HAL_RCC_OscConfig+0x90c>)
 800365a:	4013      	ands	r3, r2
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003664:	3a01      	subs	r2, #1
 8003666:	0112      	lsls	r2, r2, #4
 8003668:	4311      	orrs	r1, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800366e:	0212      	lsls	r2, r2, #8
 8003670:	4311      	orrs	r1, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003676:	0852      	lsrs	r2, r2, #1
 8003678:	3a01      	subs	r2, #1
 800367a:	0552      	lsls	r2, r2, #21
 800367c:	4311      	orrs	r1, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003682:	0852      	lsrs	r2, r2, #1
 8003684:	3a01      	subs	r2, #1
 8003686:	0652      	lsls	r2, r2, #25
 8003688:	4311      	orrs	r1, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800368e:	06d2      	lsls	r2, r2, #27
 8003690:	430a      	orrs	r2, r1
 8003692:	4941      	ldr	r1, [pc, #260]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 8003694:	4313      	orrs	r3, r2
 8003696:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003698:	4b3f      	ldr	r3, [pc, #252]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a3e      	ldr	r2, [pc, #248]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 800369e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036a4:	4b3c      	ldr	r3, [pc, #240]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4a3b      	ldr	r2, [pc, #236]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 80036aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036b0:	f7fd fb06 	bl	8000cc0 <HAL_GetTick>
 80036b4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fd fb02 	bl	8000cc0 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e062      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ca:	4b33      	ldr	r3, [pc, #204]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036d6:	e05a      	b.n	800378e <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e059      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036dc:	4b2e      	ldr	r3, [pc, #184]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d152      	bne.n	800378e <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036e8:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a2a      	ldr	r2, [pc, #168]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 80036ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036f4:	4b28      	ldr	r3, [pc, #160]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a27      	ldr	r2, [pc, #156]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 80036fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003700:	f7fd fade 	bl	8000cc0 <HAL_GetTick>
 8003704:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7fd fada 	bl	8000cc0 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e03a      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371a:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x878>
 8003726:	e032      	b.n	800378e <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	2b0c      	cmp	r3, #12
 800372c:	d02d      	beq.n	800378a <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372e:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a19      	ldr	r2, [pc, #100]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 8003734:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003738:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800373a:	4b17      	ldr	r3, [pc, #92]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d105      	bne.n	8003752 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003746:	4b14      	ldr	r3, [pc, #80]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	4a13      	ldr	r2, [pc, #76]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 800374c:	f023 0303 	bic.w	r3, r3, #3
 8003750:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003752:	4b11      	ldr	r3, [pc, #68]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	4a10      	ldr	r2, [pc, #64]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 8003758:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800375c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003760:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003762:	f7fd faad 	bl	8000cc0 <HAL_GetTick>
 8003766:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376a:	f7fd faa9 	bl	8000cc0 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e009      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCC_OscConfig+0x908>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f0      	bne.n	800376a <HAL_RCC_OscConfig+0x8da>
 8003788:	e001      	b.n	800378e <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3728      	adds	r7, #40	; 0x28
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000
 800379c:	019d800c 	.word	0x019d800c

080037a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e10f      	b.n	80039d8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b8:	4b89      	ldr	r3, [pc, #548]	; (80039e0 <HAL_RCC_ClockConfig+0x240>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d910      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b86      	ldr	r3, [pc, #536]	; (80039e0 <HAL_RCC_ClockConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 020f 	bic.w	r2, r3, #15
 80037ce:	4984      	ldr	r1, [pc, #528]	; (80039e0 <HAL_RCC_ClockConfig+0x240>)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b82      	ldr	r3, [pc, #520]	; (80039e0 <HAL_RCC_ClockConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0f7      	b.n	80039d8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8089 	beq.w	8003908 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d133      	bne.n	8003866 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fe:	4b79      	ldr	r3, [pc, #484]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0e4      	b.n	80039d8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800380e:	f000 fa2d 	bl	8003c6c <RCC_GetSysClockFreqFromPLLSource>
 8003812:	4603      	mov	r3, r0
 8003814:	4a74      	ldr	r2, [pc, #464]	; (80039e8 <HAL_RCC_ClockConfig+0x248>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d955      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800381a:	4b72      	ldr	r3, [pc, #456]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003826:	4b6f      	ldr	r3, [pc, #444]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800382e:	4a6d      	ldr	r2, [pc, #436]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 8003830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003834:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	e044      	b.n	80038c6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d03e      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x126>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d13a      	bne.n	80038c6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003850:	4b64      	ldr	r3, [pc, #400]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003858:	4a62      	ldr	r2, [pc, #392]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 800385a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800385e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003860:	2380      	movs	r3, #128	; 0x80
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	e02f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800386e:	4b5d      	ldr	r3, [pc, #372]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d115      	bne.n	80038a6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e0ac      	b.n	80039d8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d107      	bne.n	8003896 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003886:	4b57      	ldr	r3, [pc, #348]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e0a0      	b.n	80039d8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003896:	4b53      	ldr	r3, [pc, #332]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e098      	b.n	80039d8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80038a6:	f000 f8a7 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 80038aa:	4603      	mov	r3, r0
 80038ac:	4a4e      	ldr	r2, [pc, #312]	; (80039e8 <HAL_RCC_ClockConfig+0x248>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d909      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038b2:	4b4c      	ldr	r3, [pc, #304]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ba:	4a4a      	ldr	r2, [pc, #296]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 80038bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038c6:	4b47      	ldr	r3, [pc, #284]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f023 0203 	bic.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4944      	ldr	r1, [pc, #272]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d8:	f7fd f9f2 	bl	8000cc0 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fd f9ee 	bl	8000cc0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e070      	b.n	80039d8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	4b3b      	ldr	r3, [pc, #236]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 020c 	and.w	r2, r3, #12
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	429a      	cmp	r2, r3
 8003906:	d1eb      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d009      	beq.n	8003928 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003914:	4b33      	ldr	r3, [pc, #204]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4930      	ldr	r1, [pc, #192]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]
 8003926:	e008      	b.n	800393a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b80      	cmp	r3, #128	; 0x80
 800392c:	d105      	bne.n	800393a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800392e:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	4a2c      	ldr	r2, [pc, #176]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 8003934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003938:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800393a:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_RCC_ClockConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d210      	bcs.n	800396a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003948:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <HAL_RCC_ClockConfig+0x240>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f023 020f 	bic.w	r2, r3, #15
 8003950:	4923      	ldr	r1, [pc, #140]	; (80039e0 <HAL_RCC_ClockConfig+0x240>)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	4313      	orrs	r3, r2
 8003956:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003958:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <HAL_RCC_ClockConfig+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d001      	beq.n	800396a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e036      	b.n	80039d8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	d008      	beq.n	8003988 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003976:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	4918      	ldr	r1, [pc, #96]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 8003984:	4313      	orrs	r3, r2
 8003986:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d009      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003994:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4910      	ldr	r1, [pc, #64]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039a8:	f000 f826 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <HAL_RCC_ClockConfig+0x244>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	490c      	ldr	r1, [pc, #48]	; (80039ec <HAL_RCC_ClockConfig+0x24c>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
 80039c4:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <HAL_RCC_ClockConfig+0x250>)
 80039c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <HAL_RCC_ClockConfig+0x254>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd f833 	bl	8000a38 <HAL_InitTick>
 80039d2:	4603      	mov	r3, r0
 80039d4:	73fb      	strb	r3, [r7, #15]

  return status;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40022000 	.word	0x40022000
 80039e4:	40021000 	.word	0x40021000
 80039e8:	04c4b400 	.word	0x04c4b400
 80039ec:	08004df8 	.word	0x08004df8
 80039f0:	20000000 	.word	0x20000000
 80039f4:	20000004 	.word	0x20000004

080039f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a06:	4b3e      	ldr	r3, [pc, #248]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a10:	4b3b      	ldr	r3, [pc, #236]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0x34>
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d121      	bne.n	8003a6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d11e      	bne.n	8003a6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a2c:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d107      	bne.n	8003a48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a38:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e005      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a48:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a54:	4a2b      	ldr	r2, [pc, #172]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10d      	bne.n	8003a80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a68:	e00a      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d102      	bne.n	8003a76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a70:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	e004      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a7c:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8003a7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	d134      	bne.n	8003af0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a86:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_GetSysClockFreq+0xa6>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d003      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0xac>
 8003a9c:	e005      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aa0:	617b      	str	r3, [r7, #20]
      break;
 8003aa2:	e005      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003aa4:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8003aa6:	617b      	str	r3, [r7, #20]
      break;
 8003aa8:	e002      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	617b      	str	r3, [r7, #20]
      break;
 8003aae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ab0:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	3301      	adds	r3, #1
 8003abc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003abe:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	fb02 f203 	mul.w	r2, r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	0e5b      	lsrs	r3, r3, #25
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003af0:	69bb      	ldr	r3, [r7, #24]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3724      	adds	r7, #36	; 0x24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40021000 	.word	0x40021000
 8003b04:	08004e10 	.word	0x08004e10
 8003b08:	00f42400 	.word	0x00f42400
 8003b0c:	007a1200 	.word	0x007a1200

08003b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b14:	4b03      	ldr	r3, [pc, #12]	; (8003b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000000 	.word	0x20000000

08003b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b2c:	f7ff fff0 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8003b30:	4602      	mov	r2, r0
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	0adb      	lsrs	r3, r3, #11
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	4904      	ldr	r1, [pc, #16]	; (8003b50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b3e:	5ccb      	ldrb	r3, [r1, r3]
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	08004e08 	.word	0x08004e08

08003b54 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	220f      	movs	r2, #15
 8003b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003b64:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 0203 	and.w	r2, r3, #3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003b70:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003b88:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	08db      	lsrs	r3, r3, #3
 8003b8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b96:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <HAL_RCC_GetClockConfig+0x60>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 020f 	and.w	r2, r3, #15
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	601a      	str	r2, [r3, #0]
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40022000 	.word	0x40022000

08003bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bc4:	4b27      	ldr	r3, [pc, #156]	; (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bd0:	f7ff f89a 	bl	8002d08 <HAL_PWREx_GetVoltageRange>
 8003bd4:	6178      	str	r0, [r7, #20]
 8003bd6:	e014      	b.n	8003c02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bd8:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	4a21      	ldr	r2, [pc, #132]	; (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be2:	6593      	str	r3, [r2, #88]	; 0x58
 8003be4:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bf0:	f7ff f88a 	bl	8002d08 <HAL_PWREx_GetVoltageRange>
 8003bf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bf6:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c08:	d10b      	bne.n	8003c22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d913      	bls.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2ba0      	cmp	r3, #160	; 0xa0
 8003c14:	d902      	bls.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c16:	2302      	movs	r3, #2
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	e00d      	b.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	e00a      	b.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b7f      	cmp	r3, #127	; 0x7f
 8003c26:	d902      	bls.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003c28:	2302      	movs	r3, #2
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	e004      	b.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b70      	cmp	r3, #112	; 0x70
 8003c32:	d101      	bne.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c34:	2301      	movs	r3, #1
 8003c36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f023 020f 	bic.w	r2, r3, #15
 8003c40:	4909      	ldr	r1, [pc, #36]	; (8003c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c48:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d001      	beq.n	8003c5a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40022000 	.word	0x40022000

08003c6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003c76:	4b2d      	ldr	r3, [pc, #180]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d118      	bne.n	8003cb4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c82:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d107      	bne.n	8003c9e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c8e:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c94:	0a1b      	lsrs	r3, r3, #8
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e005      	b.n	8003caa <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c9e:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	091b      	lsrs	r3, r3, #4
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003caa:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d003      	beq.n	8003ccc <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d003      	beq.n	8003cd2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8003cca:	e005      	b.n	8003cd8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003ccc:	4b19      	ldr	r3, [pc, #100]	; (8003d34 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003cce:	613b      	str	r3, [r7, #16]
    break;
 8003cd0:	e005      	b.n	8003cde <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003cd2:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003cd4:	613b      	str	r3, [r7, #16]
    break;
 8003cd6:	e002      	b.n	8003cde <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	613b      	str	r3, [r7, #16]
    break;
 8003cdc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cde:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	3301      	adds	r3, #1
 8003cea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	fb02 f203 	mul.w	r2, r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d02:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d04:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	0e5b      	lsrs	r3, r3, #25
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003d1e:	683b      	ldr	r3, [r7, #0]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	08004e10 	.word	0x08004e10
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	007a1200 	.word	0x007a1200

08003d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d44:	2300      	movs	r3, #0
 8003d46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d48:	2300      	movs	r3, #0
 8003d4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d040      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5c:	2b80      	cmp	r3, #128	; 0x80
 8003d5e:	d02a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d60:	2b80      	cmp	r3, #128	; 0x80
 8003d62:	d825      	bhi.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d64:	2b60      	cmp	r3, #96	; 0x60
 8003d66:	d026      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d68:	2b60      	cmp	r3, #96	; 0x60
 8003d6a:	d821      	bhi.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d006      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d81d      	bhi.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d010      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003d7c:	e018      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d7e:	4b89      	ldr	r3, [pc, #548]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	4a88      	ldr	r2, [pc, #544]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d8a:	e015      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fb3e 	bl	8004414 <RCCEx_PLLSAI1_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d9c:	e00c      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3320      	adds	r3, #32
 8003da2:	2100      	movs	r1, #0
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fc29 	bl	80045fc <RCCEx_PLLSAI2_Config>
 8003daa:	4603      	mov	r3, r0
 8003dac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dae:	e003      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	74fb      	strb	r3, [r7, #19]
      break;
 8003db4:	e000      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003db6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10b      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dbe:	4b79      	ldr	r3, [pc, #484]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dc4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dcc:	4975      	ldr	r1, [pc, #468]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003dd4:	e001      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d047      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dee:	d030      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df4:	d82a      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dfa:	d02a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e00:	d824      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e06:	d008      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0c:	d81e      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e16:	d010      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e18:	e018      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e1a:	4b62      	ldr	r3, [pc, #392]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	4a61      	ldr	r2, [pc, #388]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e24:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e26:	e015      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 faf0 	bl	8004414 <RCCEx_PLLSAI1_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e38:	e00c      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3320      	adds	r3, #32
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fbdb 	bl	80045fc <RCCEx_PLLSAI2_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e4a:	e003      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	74fb      	strb	r3, [r7, #19]
      break;
 8003e50:	e000      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e5a:	4b52      	ldr	r3, [pc, #328]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	494e      	ldr	r1, [pc, #312]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e70:	e001      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e72:	7cfb      	ldrb	r3, [r7, #19]
 8003e74:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 809f 	beq.w	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e84:	2300      	movs	r3, #0
 8003e86:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e88:	4b46      	ldr	r3, [pc, #280]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00d      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e9e:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	4a40      	ldr	r2, [pc, #256]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eaa:	4b3e      	ldr	r3, [pc, #248]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eba:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a3a      	ldr	r2, [pc, #232]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ec6:	f7fc fefb 	bl	8000cc0 <HAL_GetTick>
 8003eca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ecc:	e009      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ece:	f7fc fef7 	bl	8000cc0 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d902      	bls.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	74fb      	strb	r3, [r7, #19]
        break;
 8003ee0:	e005      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ee2:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0ef      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003eee:	7cfb      	ldrb	r3, [r7, #19]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d15b      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01f      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d019      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f12:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f1e:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	4a1f      	ldr	r2, [pc, #124]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f34:	4a1b      	ldr	r2, [pc, #108]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f3e:	4a19      	ldr	r2, [pc, #100]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d016      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fc feb6 	bl	8000cc0 <HAL_GetTick>
 8003f54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f56:	e00b      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f58:	f7fc feb2 	bl	8000cc0 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d902      	bls.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	74fb      	strb	r3, [r7, #19]
            break;
 8003f6e:	e006      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0ec      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003f7e:	7cfb      	ldrb	r3, [r7, #19]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10c      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f84:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f94:	4903      	ldr	r1, [pc, #12]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f9e:	7cfb      	ldrb	r3, [r7, #19]
 8003fa0:	74bb      	strb	r3, [r7, #18]
 8003fa2:	e005      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fb0:	7c7b      	ldrb	r3, [r7, #17]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d105      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb6:	4ba0      	ldr	r3, [pc, #640]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	4a9f      	ldr	r2, [pc, #636]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fce:	4b9a      	ldr	r3, [pc, #616]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	f023 0203 	bic.w	r2, r3, #3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fdc:	4996      	ldr	r1, [pc, #600]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ff0:	4b91      	ldr	r3, [pc, #580]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f023 020c 	bic.w	r2, r3, #12
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	498e      	ldr	r1, [pc, #568]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004012:	4b89      	ldr	r3, [pc, #548]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004018:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004020:	4985      	ldr	r1, [pc, #532]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004034:	4b80      	ldr	r3, [pc, #512]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004042:	497d      	ldr	r1, [pc, #500]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004056:	4b78      	ldr	r3, [pc, #480]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004064:	4974      	ldr	r1, [pc, #464]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004078:	4b6f      	ldr	r3, [pc, #444]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004086:	496c      	ldr	r1, [pc, #432]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800409a:	4b67      	ldr	r3, [pc, #412]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a8:	4963      	ldr	r1, [pc, #396]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040bc:	4b5e      	ldr	r3, [pc, #376]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ca:	495b      	ldr	r1, [pc, #364]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040de:	4b56      	ldr	r3, [pc, #344]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	4952      	ldr	r1, [pc, #328]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004100:	4b4d      	ldr	r3, [pc, #308]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410e:	494a      	ldr	r1, [pc, #296]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004122:	4b45      	ldr	r3, [pc, #276]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004130:	4941      	ldr	r1, [pc, #260]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004144:	4b3c      	ldr	r3, [pc, #240]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004146:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800414a:	f023 0203 	bic.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004152:	4939      	ldr	r1, [pc, #228]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d028      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004166:	4b34      	ldr	r3, [pc, #208]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004174:	4930      	ldr	r1, [pc, #192]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004184:	d106      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004186:	4b2c      	ldr	r3, [pc, #176]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	4a2b      	ldr	r2, [pc, #172]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800418c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004190:	60d3      	str	r3, [r2, #12]
 8004192:	e011      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004198:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800419c:	d10c      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3304      	adds	r3, #4
 80041a2:	2101      	movs	r1, #1
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 f935 	bl	8004414 <RCCEx_PLLSAI1_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041ae:	7cfb      	ldrb	r3, [r7, #19]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80041b4:	7cfb      	ldrb	r3, [r7, #19]
 80041b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d04d      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041cc:	d108      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80041ce:	4b1a      	ldr	r3, [pc, #104]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d4:	4a18      	ldr	r2, [pc, #96]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041de:	e012      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80041e0:	4b15      	ldr	r3, [pc, #84]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041e6:	4a14      	ldr	r2, [pc, #80]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041f0:	4b11      	ldr	r3, [pc, #68]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041fe:	490e      	ldr	r1, [pc, #56]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800420a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800420e:	d106      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a08      	ldr	r2, [pc, #32]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800421a:	60d3      	str	r3, [r2, #12]
 800421c:	e020      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004226:	d109      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004228:	4b03      	ldr	r3, [pc, #12]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4a02      	ldr	r2, [pc, #8]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004232:	60d3      	str	r3, [r2, #12]
 8004234:	e014      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004240:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004244:	d10c      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	2101      	movs	r1, #1
 800424c:	4618      	mov	r0, r3
 800424e:	f000 f8e1 	bl	8004414 <RCCEx_PLLSAI1_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d028      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800426c:	4b68      	ldr	r3, [pc, #416]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800427a:	4965      	ldr	r1, [pc, #404]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004286:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800428a:	d106      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800428c:	4b60      	ldr	r3, [pc, #384]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4a5f      	ldr	r2, [pc, #380]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004296:	60d3      	str	r3, [r2, #12]
 8004298:	e011      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800429e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a2:	d10c      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	2101      	movs	r1, #1
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f8b2 	bl	8004414 <RCCEx_PLLSAI1_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042b4:	7cfb      	ldrb	r3, [r7, #19]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80042ba:	7cfb      	ldrb	r3, [r7, #19]
 80042bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01e      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042ca:	4b51      	ldr	r3, [pc, #324]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042da:	494d      	ldr	r1, [pc, #308]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ec:	d10c      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	2102      	movs	r1, #2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f88d 	bl	8004414 <RCCEx_PLLSAI1_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042fe:	7cfb      	ldrb	r3, [r7, #19]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00b      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004314:	4b3e      	ldr	r3, [pc, #248]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004316:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800431a:	f023 0204 	bic.w	r2, r3, #4
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004324:	493a      	ldr	r1, [pc, #232]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00b      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004338:	4b35      	ldr	r3, [pc, #212]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800433a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800433e:	f023 0218 	bic.w	r2, r3, #24
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004348:	4931      	ldr	r1, [pc, #196]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d035      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800435c:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2b      	ldr	r2, [pc, #172]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004368:	f7fc fcaa 	bl	8000cc0 <HAL_GetTick>
 800436c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800436e:	e009      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004370:	f7fc fca6 	bl	8000cc0 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d902      	bls.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	74fb      	strb	r3, [r7, #19]
        break;
 8004382:	e005      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004384:	4b22      	ldr	r3, [pc, #136]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1ef      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004390:	7cfb      	ldrb	r3, [r7, #19]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d113      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004396:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004398:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800439c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043a6:	491a      	ldr	r1, [pc, #104]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3320      	adds	r3, #32
 80043b2:	2102      	movs	r1, #2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 f921 	bl	80045fc <RCCEx_PLLSAI2_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80043be:	7cfb      	ldrb	r3, [r7, #19]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80043c4:	7cfb      	ldrb	r3, [r7, #19]
 80043c6:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d017      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80043d4:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	490a      	ldr	r1, [pc, #40]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043f6:	d105      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a04      	ldr	r2, [pc, #16]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004402:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004404:	7cbb      	ldrb	r3, [r7, #18]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000

08004414 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004422:	4b72      	ldr	r3, [pc, #456]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00e      	beq.n	800444c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800442e:	4b6f      	ldr	r3, [pc, #444]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0203 	and.w	r2, r3, #3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d103      	bne.n	8004446 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
       ||
 8004442:	2b00      	cmp	r3, #0
 8004444:	d142      	bne.n	80044cc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	73fb      	strb	r3, [r7, #15]
 800444a:	e03f      	b.n	80044cc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d018      	beq.n	8004486 <RCCEx_PLLSAI1_Config+0x72>
 8004454:	2b03      	cmp	r3, #3
 8004456:	d825      	bhi.n	80044a4 <RCCEx_PLLSAI1_Config+0x90>
 8004458:	2b01      	cmp	r3, #1
 800445a:	d002      	beq.n	8004462 <RCCEx_PLLSAI1_Config+0x4e>
 800445c:	2b02      	cmp	r3, #2
 800445e:	d009      	beq.n	8004474 <RCCEx_PLLSAI1_Config+0x60>
 8004460:	e020      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004462:	4b62      	ldr	r3, [pc, #392]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d11d      	bne.n	80044aa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004472:	e01a      	b.n	80044aa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004474:	4b5d      	ldr	r3, [pc, #372]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447c:	2b00      	cmp	r3, #0
 800447e:	d116      	bne.n	80044ae <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004484:	e013      	b.n	80044ae <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004486:	4b59      	ldr	r3, [pc, #356]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10f      	bne.n	80044b2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004492:	4b56      	ldr	r3, [pc, #344]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044a2:	e006      	b.n	80044b2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	73fb      	strb	r3, [r7, #15]
      break;
 80044a8:	e004      	b.n	80044b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044aa:	bf00      	nop
 80044ac:	e002      	b.n	80044b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d108      	bne.n	80044cc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80044ba:	4b4c      	ldr	r3, [pc, #304]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f023 0203 	bic.w	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4949      	ldr	r1, [pc, #292]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f040 8086 	bne.w	80045e0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044d4:	4b45      	ldr	r3, [pc, #276]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a44      	ldr	r2, [pc, #272]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80044da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e0:	f7fc fbee 	bl	8000cc0 <HAL_GetTick>
 80044e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044e6:	e009      	b.n	80044fc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044e8:	f7fc fbea 	bl	8000cc0 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d902      	bls.n	80044fc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	73fb      	strb	r3, [r7, #15]
        break;
 80044fa:	e005      	b.n	8004508 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044fc:	4b3b      	ldr	r3, [pc, #236]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1ef      	bne.n	80044e8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d168      	bne.n	80045e0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d113      	bne.n	800453c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004514:	4b35      	ldr	r3, [pc, #212]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	4b35      	ldr	r3, [pc, #212]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800451a:	4013      	ands	r3, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6892      	ldr	r2, [r2, #8]
 8004520:	0211      	lsls	r1, r2, #8
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	68d2      	ldr	r2, [r2, #12]
 8004526:	06d2      	lsls	r2, r2, #27
 8004528:	4311      	orrs	r1, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6852      	ldr	r2, [r2, #4]
 800452e:	3a01      	subs	r2, #1
 8004530:	0112      	lsls	r2, r2, #4
 8004532:	430a      	orrs	r2, r1
 8004534:	492d      	ldr	r1, [pc, #180]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004536:	4313      	orrs	r3, r2
 8004538:	610b      	str	r3, [r1, #16]
 800453a:	e02d      	b.n	8004598 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d115      	bne.n	800456e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004542:	4b2a      	ldr	r3, [pc, #168]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	4b2b      	ldr	r3, [pc, #172]	; (80045f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004548:	4013      	ands	r3, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6892      	ldr	r2, [r2, #8]
 800454e:	0211      	lsls	r1, r2, #8
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6912      	ldr	r2, [r2, #16]
 8004554:	0852      	lsrs	r2, r2, #1
 8004556:	3a01      	subs	r2, #1
 8004558:	0552      	lsls	r2, r2, #21
 800455a:	4311      	orrs	r1, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6852      	ldr	r2, [r2, #4]
 8004560:	3a01      	subs	r2, #1
 8004562:	0112      	lsls	r2, r2, #4
 8004564:	430a      	orrs	r2, r1
 8004566:	4921      	ldr	r1, [pc, #132]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004568:	4313      	orrs	r3, r2
 800456a:	610b      	str	r3, [r1, #16]
 800456c:	e014      	b.n	8004598 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800456e:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004574:	4013      	ands	r3, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6892      	ldr	r2, [r2, #8]
 800457a:	0211      	lsls	r1, r2, #8
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6952      	ldr	r2, [r2, #20]
 8004580:	0852      	lsrs	r2, r2, #1
 8004582:	3a01      	subs	r2, #1
 8004584:	0652      	lsls	r2, r2, #25
 8004586:	4311      	orrs	r1, r2
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6852      	ldr	r2, [r2, #4]
 800458c:	3a01      	subs	r2, #1
 800458e:	0112      	lsls	r2, r2, #4
 8004590:	430a      	orrs	r2, r1
 8004592:	4916      	ldr	r1, [pc, #88]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004594:	4313      	orrs	r3, r2
 8004596:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004598:	4b14      	ldr	r3, [pc, #80]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a13      	ldr	r2, [pc, #76]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 800459e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a4:	f7fc fb8c 	bl	8000cc0 <HAL_GetTick>
 80045a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045aa:	e009      	b.n	80045c0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045ac:	f7fc fb88 	bl	8000cc0 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d902      	bls.n	80045c0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	73fb      	strb	r3, [r7, #15]
          break;
 80045be:	e005      	b.n	80045cc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ef      	beq.n	80045ac <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	4904      	ldr	r1, [pc, #16]	; (80045ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000
 80045f0:	07ff800f 	.word	0x07ff800f
 80045f4:	ff9f800f 	.word	0xff9f800f
 80045f8:	f9ff800f 	.word	0xf9ff800f

080045fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800460a:	4b72      	ldr	r3, [pc, #456]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00e      	beq.n	8004634 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004616:	4b6f      	ldr	r3, [pc, #444]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f003 0203 	and.w	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d103      	bne.n	800462e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
       ||
 800462a:	2b00      	cmp	r3, #0
 800462c:	d142      	bne.n	80046b4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
 8004632:	e03f      	b.n	80046b4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b03      	cmp	r3, #3
 800463a:	d018      	beq.n	800466e <RCCEx_PLLSAI2_Config+0x72>
 800463c:	2b03      	cmp	r3, #3
 800463e:	d825      	bhi.n	800468c <RCCEx_PLLSAI2_Config+0x90>
 8004640:	2b01      	cmp	r3, #1
 8004642:	d002      	beq.n	800464a <RCCEx_PLLSAI2_Config+0x4e>
 8004644:	2b02      	cmp	r3, #2
 8004646:	d009      	beq.n	800465c <RCCEx_PLLSAI2_Config+0x60>
 8004648:	e020      	b.n	800468c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800464a:	4b62      	ldr	r3, [pc, #392]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d11d      	bne.n	8004692 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800465a:	e01a      	b.n	8004692 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800465c:	4b5d      	ldr	r3, [pc, #372]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004664:	2b00      	cmp	r3, #0
 8004666:	d116      	bne.n	8004696 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800466c:	e013      	b.n	8004696 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800466e:	4b59      	ldr	r3, [pc, #356]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10f      	bne.n	800469a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800467a:	4b56      	ldr	r3, [pc, #344]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800468a:	e006      	b.n	800469a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
      break;
 8004690:	e004      	b.n	800469c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004692:	bf00      	nop
 8004694:	e002      	b.n	800469c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004696:	bf00      	nop
 8004698:	e000      	b.n	800469c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800469a:	bf00      	nop
    }

    if(status == HAL_OK)
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d108      	bne.n	80046b4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80046a2:	4b4c      	ldr	r3, [pc, #304]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f023 0203 	bic.w	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4949      	ldr	r1, [pc, #292]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f040 8086 	bne.w	80047c8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046bc:	4b45      	ldr	r3, [pc, #276]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a44      	ldr	r2, [pc, #272]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c8:	f7fc fafa 	bl	8000cc0 <HAL_GetTick>
 80046cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046ce:	e009      	b.n	80046e4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046d0:	f7fc faf6 	bl	8000cc0 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d902      	bls.n	80046e4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	73fb      	strb	r3, [r7, #15]
        break;
 80046e2:	e005      	b.n	80046f0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046e4:	4b3b      	ldr	r3, [pc, #236]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ef      	bne.n	80046d0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d168      	bne.n	80047c8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d113      	bne.n	8004724 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046fc:	4b35      	ldr	r3, [pc, #212]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	4b35      	ldr	r3, [pc, #212]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004702:	4013      	ands	r3, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6892      	ldr	r2, [r2, #8]
 8004708:	0211      	lsls	r1, r2, #8
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68d2      	ldr	r2, [r2, #12]
 800470e:	06d2      	lsls	r2, r2, #27
 8004710:	4311      	orrs	r1, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6852      	ldr	r2, [r2, #4]
 8004716:	3a01      	subs	r2, #1
 8004718:	0112      	lsls	r2, r2, #4
 800471a:	430a      	orrs	r2, r1
 800471c:	492d      	ldr	r1, [pc, #180]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800471e:	4313      	orrs	r3, r2
 8004720:	614b      	str	r3, [r1, #20]
 8004722:	e02d      	b.n	8004780 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d115      	bne.n	8004756 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800472a:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <RCCEx_PLLSAI2_Config+0x1e0>)
 8004730:	4013      	ands	r3, r2
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6892      	ldr	r2, [r2, #8]
 8004736:	0211      	lsls	r1, r2, #8
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6912      	ldr	r2, [r2, #16]
 800473c:	0852      	lsrs	r2, r2, #1
 800473e:	3a01      	subs	r2, #1
 8004740:	0552      	lsls	r2, r2, #21
 8004742:	4311      	orrs	r1, r2
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6852      	ldr	r2, [r2, #4]
 8004748:	3a01      	subs	r2, #1
 800474a:	0112      	lsls	r2, r2, #4
 800474c:	430a      	orrs	r2, r1
 800474e:	4921      	ldr	r1, [pc, #132]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004750:	4313      	orrs	r3, r2
 8004752:	614b      	str	r3, [r1, #20]
 8004754:	e014      	b.n	8004780 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004756:	4b1f      	ldr	r3, [pc, #124]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004758:	695a      	ldr	r2, [r3, #20]
 800475a:	4b21      	ldr	r3, [pc, #132]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800475c:	4013      	ands	r3, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6892      	ldr	r2, [r2, #8]
 8004762:	0211      	lsls	r1, r2, #8
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6952      	ldr	r2, [r2, #20]
 8004768:	0852      	lsrs	r2, r2, #1
 800476a:	3a01      	subs	r2, #1
 800476c:	0652      	lsls	r2, r2, #25
 800476e:	4311      	orrs	r1, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6852      	ldr	r2, [r2, #4]
 8004774:	3a01      	subs	r2, #1
 8004776:	0112      	lsls	r2, r2, #4
 8004778:	430a      	orrs	r2, r1
 800477a:	4916      	ldr	r1, [pc, #88]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004780:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fc fa98 	bl	8000cc0 <HAL_GetTick>
 8004790:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004792:	e009      	b.n	80047a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004794:	f7fc fa94 	bl	8000cc0 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d902      	bls.n	80047a8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	73fb      	strb	r3, [r7, #15]
          break;
 80047a6:	e005      	b.n	80047b4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0ef      	beq.n	8004794 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047ba:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047bc:	695a      	ldr	r2, [r3, #20]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	4904      	ldr	r1, [pc, #16]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40021000 	.word	0x40021000
 80047d8:	07ff800f 	.word	0x07ff800f
 80047dc:	ff9f800f 	.word	0xff9f800f
 80047e0:	f9ff800f 	.word	0xf9ff800f

080047e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e049      	b.n	800488a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f841 	bl	8004892 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3304      	adds	r3, #4
 8004820:	4619      	mov	r1, r3
 8004822:	4610      	mov	r0, r2
 8004824:	f000 f9f8 	bl	8004c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d001      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e04f      	b.n	8004960 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a23      	ldr	r2, [pc, #140]	; (800496c <HAL_TIM_Base_Start_IT+0xc4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01d      	beq.n	800491e <HAL_TIM_Base_Start_IT+0x76>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ea:	d018      	beq.n	800491e <HAL_TIM_Base_Start_IT+0x76>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1f      	ldr	r2, [pc, #124]	; (8004970 <HAL_TIM_Base_Start_IT+0xc8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <HAL_TIM_Base_Start_IT+0x76>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a1e      	ldr	r2, [pc, #120]	; (8004974 <HAL_TIM_Base_Start_IT+0xcc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00e      	beq.n	800491e <HAL_TIM_Base_Start_IT+0x76>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1c      	ldr	r2, [pc, #112]	; (8004978 <HAL_TIM_Base_Start_IT+0xd0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d009      	beq.n	800491e <HAL_TIM_Base_Start_IT+0x76>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1b      	ldr	r2, [pc, #108]	; (800497c <HAL_TIM_Base_Start_IT+0xd4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <HAL_TIM_Base_Start_IT+0x76>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a19      	ldr	r2, [pc, #100]	; (8004980 <HAL_TIM_Base_Start_IT+0xd8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d115      	bne.n	800494a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	4b17      	ldr	r3, [pc, #92]	; (8004984 <HAL_TIM_Base_Start_IT+0xdc>)
 8004926:	4013      	ands	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b06      	cmp	r3, #6
 800492e:	d015      	beq.n	800495c <HAL_TIM_Base_Start_IT+0xb4>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004936:	d011      	beq.n	800495c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004948:	e008      	b.n	800495c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0201 	orr.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	e000      	b.n	800495e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	40012c00 	.word	0x40012c00
 8004970:	40000400 	.word	0x40000400
 8004974:	40000800 	.word	0x40000800
 8004978:	40000c00 	.word	0x40000c00
 800497c:	40013400 	.word	0x40013400
 8004980:	40014000 	.word	0x40014000
 8004984:	00010007 	.word	0x00010007

08004988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d122      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d11b      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0202 	mvn.w	r2, #2
 80049b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f905 	bl	8004bda <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f8f7 	bl	8004bc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f908 	bl	8004bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d122      	bne.n	8004a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d11b      	bne.n	8004a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0204 	mvn.w	r2, #4
 8004a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f8db 	bl	8004bda <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f8cd 	bl	8004bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f8de 	bl	8004bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d122      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d11b      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0208 	mvn.w	r2, #8
 8004a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2204      	movs	r2, #4
 8004a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f8b1 	bl	8004bda <HAL_TIM_IC_CaptureCallback>
 8004a78:	e005      	b.n	8004a86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f8a3 	bl	8004bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f8b4 	bl	8004bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d122      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d11b      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0210 	mvn.w	r2, #16
 8004ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2208      	movs	r2, #8
 8004ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f887 	bl	8004bda <HAL_TIM_IC_CaptureCallback>
 8004acc:	e005      	b.n	8004ada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f879 	bl	8004bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f88a 	bl	8004bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d10e      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d107      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0201 	mvn.w	r2, #1
 8004b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fb fe7e 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b16:	2b80      	cmp	r3, #128	; 0x80
 8004b18:	d10e      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b24:	2b80      	cmp	r3, #128	; 0x80
 8004b26:	d107      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f914 	bl	8004d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b46:	d10e      	bne.n	8004b66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	2b80      	cmp	r3, #128	; 0x80
 8004b54:	d107      	bne.n	8004b66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f907 	bl	8004d74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d10e      	bne.n	8004b92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d107      	bne.n	8004b92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f838 	bl	8004c02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d10e      	bne.n	8004bbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d107      	bne.n	8004bbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f06f 0220 	mvn.w	r2, #32
 8004bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f8c7 	bl	8004d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a40      	ldr	r2, [pc, #256]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d013      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c36:	d00f      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a3d      	ldr	r2, [pc, #244]	; (8004d30 <TIM_Base_SetConfig+0x118>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a3c      	ldr	r2, [pc, #240]	; (8004d34 <TIM_Base_SetConfig+0x11c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d007      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3b      	ldr	r2, [pc, #236]	; (8004d38 <TIM_Base_SetConfig+0x120>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a3a      	ldr	r2, [pc, #232]	; (8004d3c <TIM_Base_SetConfig+0x124>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d108      	bne.n	8004c6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a2f      	ldr	r2, [pc, #188]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01f      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c78:	d01b      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2c      	ldr	r2, [pc, #176]	; (8004d30 <TIM_Base_SetConfig+0x118>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d017      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2b      	ldr	r2, [pc, #172]	; (8004d34 <TIM_Base_SetConfig+0x11c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2a      	ldr	r2, [pc, #168]	; (8004d38 <TIM_Base_SetConfig+0x120>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00f      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a29      	ldr	r2, [pc, #164]	; (8004d3c <TIM_Base_SetConfig+0x124>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a28      	ldr	r2, [pc, #160]	; (8004d40 <TIM_Base_SetConfig+0x128>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a27      	ldr	r2, [pc, #156]	; (8004d44 <TIM_Base_SetConfig+0x12c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a26      	ldr	r2, [pc, #152]	; (8004d48 <TIM_Base_SetConfig+0x130>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d108      	bne.n	8004cc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a10      	ldr	r2, [pc, #64]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00f      	beq.n	8004d10 <TIM_Base_SetConfig+0xf8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a12      	ldr	r2, [pc, #72]	; (8004d3c <TIM_Base_SetConfig+0x124>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00b      	beq.n	8004d10 <TIM_Base_SetConfig+0xf8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a11      	ldr	r2, [pc, #68]	; (8004d40 <TIM_Base_SetConfig+0x128>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d007      	beq.n	8004d10 <TIM_Base_SetConfig+0xf8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a10      	ldr	r2, [pc, #64]	; (8004d44 <TIM_Base_SetConfig+0x12c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_Base_SetConfig+0xf8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a0f      	ldr	r2, [pc, #60]	; (8004d48 <TIM_Base_SetConfig+0x130>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d103      	bne.n	8004d18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	615a      	str	r2, [r3, #20]
}
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800
 8004d38:	40000c00 	.word	0x40000c00
 8004d3c:	40013400 	.word	0x40013400
 8004d40:	40014000 	.word	0x40014000
 8004d44:	40014400 	.word	0x40014400
 8004d48:	40014800 	.word	0x40014800

08004d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <__libc_init_array>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	4d0d      	ldr	r5, [pc, #52]	; (8004dc0 <__libc_init_array+0x38>)
 8004d8c:	4c0d      	ldr	r4, [pc, #52]	; (8004dc4 <__libc_init_array+0x3c>)
 8004d8e:	1b64      	subs	r4, r4, r5
 8004d90:	10a4      	asrs	r4, r4, #2
 8004d92:	2600      	movs	r6, #0
 8004d94:	42a6      	cmp	r6, r4
 8004d96:	d109      	bne.n	8004dac <__libc_init_array+0x24>
 8004d98:	4d0b      	ldr	r5, [pc, #44]	; (8004dc8 <__libc_init_array+0x40>)
 8004d9a:	4c0c      	ldr	r4, [pc, #48]	; (8004dcc <__libc_init_array+0x44>)
 8004d9c:	f000 f820 	bl	8004de0 <_init>
 8004da0:	1b64      	subs	r4, r4, r5
 8004da2:	10a4      	asrs	r4, r4, #2
 8004da4:	2600      	movs	r6, #0
 8004da6:	42a6      	cmp	r6, r4
 8004da8:	d105      	bne.n	8004db6 <__libc_init_array+0x2e>
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db0:	4798      	blx	r3
 8004db2:	3601      	adds	r6, #1
 8004db4:	e7ee      	b.n	8004d94 <__libc_init_array+0xc>
 8004db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dba:	4798      	blx	r3
 8004dbc:	3601      	adds	r6, #1
 8004dbe:	e7f2      	b.n	8004da6 <__libc_init_array+0x1e>
 8004dc0:	08004e40 	.word	0x08004e40
 8004dc4:	08004e40 	.word	0x08004e40
 8004dc8:	08004e40 	.word	0x08004e40
 8004dcc:	08004e44 	.word	0x08004e44

08004dd0 <memset>:
 8004dd0:	4402      	add	r2, r0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d100      	bne.n	8004dda <memset+0xa>
 8004dd8:	4770      	bx	lr
 8004dda:	f803 1b01 	strb.w	r1, [r3], #1
 8004dde:	e7f9      	b.n	8004dd4 <memset+0x4>

08004de0 <_init>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	bf00      	nop
 8004de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de6:	bc08      	pop	{r3}
 8004de8:	469e      	mov	lr, r3
 8004dea:	4770      	bx	lr

08004dec <_fini>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr
