
kiera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004488  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  08004648  08004648  00014648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049ac  080049ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080049ac  080049ac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049ac  080049ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080049ac  080049ac  000149ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080049b4  080049b4  000149b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000070  08004a2c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08004a2c  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a95  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003597  00000000  00000000  00042b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000297c  00000000  00000000  000460cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001008  00000000  00000000  00048a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d0  00000000  00000000  00049a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032928  00000000  00000000  0004ac20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000133bc  00000000  00000000  0007d548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001259bc  00000000  00000000  00090904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b62c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004724  00000000  00000000  001b6310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004630 	.word	0x08004630

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08004630 	.word	0x08004630

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <_ZNK11GpioElement6handleEv>:
class GpioElement
{
	public:
		GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted);

		virtual void handle() const { };
 80002a0:	4770      	bx	lr
	...

080002a4 <_ZN11GpioElementD1Ev>:

		virtual ~GpioElement() = default;
 80002a4:	4b01      	ldr	r3, [pc, #4]	; (80002ac <_ZN11GpioElementD1Ev+0x8>)
 80002a6:	6003      	str	r3, [r0, #0]
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	08004650 	.word	0x08004650

080002b0 <_ZN14GpioOutElementD1Ev>:
		void deactivate();

		//virtual void handle() override = 0;
		void toggle();

		~GpioOutElement() { };
 80002b0:	4a02      	ldr	r2, [pc, #8]	; (80002bc <_ZN14GpioOutElementD1Ev+0xc>)
 80002b2:	6002      	str	r2, [r0, #0]
		virtual ~GpioElement() = default;
 80002b4:	4a02      	ldr	r2, [pc, #8]	; (80002c0 <_ZN14GpioOutElementD1Ev+0x10>)
 80002b6:	6002      	str	r2, [r0, #0]
		~GpioOutElement() { };
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	08004664 	.word	0x08004664
 80002c0:	08004650 	.word	0x08004650

080002c4 <_ZN13GpioInElementD1Ev>:
		bool risingEdge() const;
		bool fallingEdge() const;

		bool const& getStateConstRefForDebug() const;

		~GpioInElement() { };
 80002c4:	4a02      	ldr	r2, [pc, #8]	; (80002d0 <_ZN13GpioInElementD1Ev+0xc>)
 80002c6:	6002      	str	r2, [r0, #0]
		virtual ~GpioElement() = default;
 80002c8:	4a02      	ldr	r2, [pc, #8]	; (80002d4 <_ZN13GpioInElementD1Ev+0x10>)
 80002ca:	6002      	str	r2, [r0, #0]
		~GpioInElement() { };
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	08004678 	.word	0x08004678
 80002d4:	08004650 	.word	0x08004650

080002d8 <_ZN11GpioElementD0Ev>:
		virtual ~GpioElement() = default;
 80002d8:	b510      	push	{r4, lr}
 80002da:	4604      	mov	r4, r0
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <_ZN11GpioElementD0Ev+0x14>)
 80002de:	6003      	str	r3, [r0, #0]
 80002e0:	2110      	movs	r1, #16
 80002e2:	f003 f975 	bl	80035d0 <_ZdlPvj>
 80002e6:	4620      	mov	r0, r4
 80002e8:	bd10      	pop	{r4, pc}
 80002ea:	bf00      	nop
 80002ec:	08004650 	.word	0x08004650

080002f0 <_ZN14GpioOutElementD0Ev>:
		~GpioOutElement() { };
 80002f0:	b510      	push	{r4, lr}
 80002f2:	4604      	mov	r4, r0
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <_ZN14GpioOutElementD0Ev+0x18>)
 80002f6:	6003      	str	r3, [r0, #0]
		virtual ~GpioElement() = default;
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <_ZN14GpioOutElementD0Ev+0x1c>)
 80002fa:	6003      	str	r3, [r0, #0]
		~GpioOutElement() { };
 80002fc:	2110      	movs	r1, #16
 80002fe:	f003 f967 	bl	80035d0 <_ZdlPvj>
 8000302:	4620      	mov	r0, r4
 8000304:	bd10      	pop	{r4, pc}
 8000306:	bf00      	nop
 8000308:	08004664 	.word	0x08004664
 800030c:	08004650 	.word	0x08004650

08000310 <_ZN13GpioInElementD0Ev>:
		~GpioInElement() { };
 8000310:	b510      	push	{r4, lr}
 8000312:	4604      	mov	r4, r0
 8000314:	4b04      	ldr	r3, [pc, #16]	; (8000328 <_ZN13GpioInElementD0Ev+0x18>)
 8000316:	6003      	str	r3, [r0, #0]
		virtual ~GpioElement() = default;
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <_ZN13GpioInElementD0Ev+0x1c>)
 800031a:	6003      	str	r3, [r0, #0]
		~GpioInElement() { };
 800031c:	2114      	movs	r1, #20
 800031e:	f003 f957 	bl	80035d0 <_ZdlPvj>
 8000322:	4620      	mov	r0, r4
 8000324:	bd10      	pop	{r4, pc}
 8000326:	bf00      	nop
 8000328:	08004678 	.word	0x08004678
 800032c:	08004650 	.word	0x08004650

08000330 <_ZNK13GpioInElement6handleEv>:
	this->falling_edge = false;
	return ret;
}

void GpioInElement::handle() const
{
 8000330:	b510      	push	{r4, lr}
 8000332:	4604      	mov	r4, r0
	 *		  1  |    1   |  0
	 *
	 *	  basically a XOR operation
	 *
	 */
	bool buff = ((HAL_GPIO_ReadPin((GPIO_TypeDef*)(this->port), this->pin) == GPIO_PIN_SET) != this->is_inverted);
 8000334:	8901      	ldrh	r1, [r0, #8]
 8000336:	68c0      	ldr	r0, [r0, #12]
 8000338:	f001 fdfc 	bl	8001f34 <HAL_GPIO_ReadPin>
 800033c:	2801      	cmp	r0, #1
 800033e:	bf14      	ite	ne
 8000340:	2000      	movne	r0, #0
 8000342:	2001      	moveq	r0, #1
 8000344:	7963      	ldrb	r3, [r4, #5]
 8000346:	4298      	cmp	r0, r3
 8000348:	bf14      	ite	ne
 800034a:	2201      	movne	r2, #1
 800034c:	2200      	moveq	r2, #0
	if (buff && !this->state) this->rising_edge = true;
 800034e:	d003      	beq.n	8000358 <_ZNK13GpioInElement6handleEv+0x28>
 8000350:	7921      	ldrb	r1, [r4, #4]
 8000352:	b909      	cbnz	r1, 8000358 <_ZNK13GpioInElement6handleEv+0x28>
 8000354:	2101      	movs	r1, #1
 8000356:	7421      	strb	r1, [r4, #16]
	if (!buff && this->state) this->falling_edge = true;
 8000358:	4298      	cmp	r0, r3
 800035a:	d001      	beq.n	8000360 <_ZNK13GpioInElement6handleEv+0x30>
	this->state = buff;
 800035c:	7122      	strb	r2, [r4, #4]
}
 800035e:	bd10      	pop	{r4, pc}
	if (!buff && this->state) this->falling_edge = true;
 8000360:	7923      	ldrb	r3, [r4, #4]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0fa      	beq.n	800035c <_ZNK13GpioInElement6handleEv+0x2c>
 8000366:	2301      	movs	r3, #1
 8000368:	7463      	strb	r3, [r4, #17]
 800036a:	e7f7      	b.n	800035c <_ZNK13GpioInElement6handleEv+0x2c>

0800036c <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>:
GpioElement::GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 800036c:	b410      	push	{r4}
						 port(port), pin(pin), is_inverted(is_inverted) { }
 800036e:	4c04      	ldr	r4, [pc, #16]	; (8000380 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb+0x14>)
 8000370:	6004      	str	r4, [r0, #0]
 8000372:	7143      	strb	r3, [r0, #5]
 8000374:	6082      	str	r2, [r0, #8]
 8000376:	60c1      	str	r1, [r0, #12]
 8000378:	f85d 4b04 	ldr.w	r4, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	08004650 	.word	0x08004650

08000384 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>:
GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin, const bool is_inverted) :
 8000384:	b510      	push	{r4, lr}
 8000386:	4604      	mov	r4, r0
							   GpioElement(port, pin, is_inverted) { }
 8000388:	f7ff fff0 	bl	800036c <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 800038c:	4b01      	ldr	r3, [pc, #4]	; (8000394 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb+0x10>)
 800038e:	6023      	str	r3, [r4, #0]
 8000390:	4620      	mov	r0, r4
 8000392:	bd10      	pop	{r4, pc}
 8000394:	08004664 	.word	0x08004664

08000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>:
GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 8000398:	b510      	push	{r4, lr}
 800039a:	4604      	mov	r4, r0
							 GpioElement(port, pin, is_inverted) { }
 800039c:	f7ff ffe6 	bl	800036c <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb+0x18>)
 80003a2:	6023      	str	r3, [r4, #0]
 80003a4:	2300      	movs	r3, #0
 80003a6:	7423      	strb	r3, [r4, #16]
 80003a8:	7463      	strb	r3, [r4, #17]
 80003aa:	4620      	mov	r0, r4
 80003ac:	bd10      	pop	{r4, pc}
 80003ae:	bf00      	nop
 80003b0:	08004678 	.word	0x08004678

080003b4 <_ZNK13GpioInElement8isActiveEv>:
}
 80003b4:	7900      	ldrb	r0, [r0, #4]
 80003b6:	4770      	bx	lr

080003b8 <_ZNK13GpioInElement10risingEdgeEv>:
{
 80003b8:	4603      	mov	r3, r0
	bool ret = this->rising_edge;
 80003ba:	7c00      	ldrb	r0, [r0, #16]
	this->rising_edge = false;
 80003bc:	2200      	movs	r2, #0
 80003be:	741a      	strb	r2, [r3, #16]
}
 80003c0:	4770      	bx	lr

080003c2 <_ZNK13GpioInElement11fallingEdgeEv>:
{
 80003c2:	4603      	mov	r3, r0
	bool ret = this->falling_edge;
 80003c4:	7c40      	ldrb	r0, [r0, #17]
	this->falling_edge = false;
 80003c6:	2200      	movs	r2, #0
 80003c8:	745a      	strb	r2, [r3, #17]
}
 80003ca:	4770      	bx	lr

080003cc <_ZNK13GpioInElement24getStateConstRefForDebugEv>:

bool const& GpioInElement::getStateConstRefForDebug() const
{
	return this->state;
}
 80003cc:	3004      	adds	r0, #4
 80003ce:	4770      	bx	lr

080003d0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003d2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	2400      	movs	r4, #0
 80003d6:	9405      	str	r4, [sp, #20]
 80003d8:	9406      	str	r4, [sp, #24]
 80003da:	9407      	str	r4, [sp, #28]
 80003dc:	9408      	str	r4, [sp, #32]
 80003de:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003e0:	4b41      	ldr	r3, [pc, #260]	; (80004e8 <_ZL12MX_GPIO_Initv+0x118>)
 80003e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80003ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80003f0:	9200      	str	r2, [sp, #0]
 80003f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003f6:	f042 0201 	orr.w	r2, r2, #1
 80003fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80003fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003fe:	f002 0201 	and.w	r2, r2, #1
 8000402:	9201      	str	r2, [sp, #4]
 8000404:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000408:	f042 0204 	orr.w	r2, r2, #4
 800040c:	64da      	str	r2, [r3, #76]	; 0x4c
 800040e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000410:	f002 0204 	and.w	r2, r2, #4
 8000414:	9202      	str	r2, [sp, #8]
 8000416:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800041a:	f042 0202 	orr.w	r2, r2, #2
 800041e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000420:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000422:	f002 0202 	and.w	r2, r2, #2
 8000426:	9203      	str	r2, [sp, #12]
 8000428:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800042a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800042c:	f042 0208 	orr.w	r2, r2, #8
 8000430:	64da      	str	r2, [r3, #76]	; 0x4c
 8000432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000434:	f003 0308 	and.w	r3, r3, #8
 8000438:	9304      	str	r3, [sp, #16]
 800043a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin, GPIO_PIN_RESET);
 800043c:	4d2b      	ldr	r5, [pc, #172]	; (80004ec <_ZL12MX_GPIO_Initv+0x11c>)
 800043e:	4622      	mov	r2, r4
 8000440:	21f0      	movs	r1, #240	; 0xf0
 8000442:	4628      	mov	r0, r5
 8000444:	f001 fd8e 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW7_Pin SW8_Pin SW9_Pin SW10_Pin */
  GPIO_InitStruct.Pin = SW7_Pin|SW8_Pin|SW9_Pin|SW10_Pin;
 8000448:	f240 3306 	movw	r3, #774	; 0x306
 800044c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800044e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000452:	a905      	add	r1, sp, #20
 8000454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000458:	f001 fbda 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800045c:	26f0      	movs	r6, #240	; 0xf0
 800045e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000460:	2302      	movs	r3, #2
 8000462:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000466:	2303      	movs	r3, #3
 8000468:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800046a:	2305      	movs	r3, #5
 800046c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046e:	a905      	add	r1, sp, #20
 8000470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000474:	f001 fbcc 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INIT1_Pin IMU_INIT2_Pin */
  GPIO_InitStruct.Pin = IMU_INIT1_Pin|IMU_INIT2_Pin;
 8000478:	2330      	movs	r3, #48	; 0x30
 800047a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800047c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000480:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000484:	4f1a      	ldr	r7, [pc, #104]	; (80004f0 <_ZL12MX_GPIO_Initv+0x120>)
 8000486:	a905      	add	r1, sp, #20
 8000488:	4638      	mov	r0, r7
 800048a:	f001 fbc1 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_1_Pin SW1_2_Pin SW1_3_Pin SW1_4_Pin */
  GPIO_InitStruct.Pin = SW1_1_Pin|SW1_2_Pin|SW1_3_Pin|SW1_4_Pin;
 800048e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000492:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000494:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000498:	a905      	add	r1, sp, #20
 800049a:	4628      	mov	r0, r5
 800049c:	f001 fbb8 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_1_Pin SW2_2_Pin SW2_3_Pin SW2_4_Pin
                           SW3_Pin SW4_Pin */
  GPIO_InitStruct.Pin = SW2_1_Pin|SW2_2_Pin|SW2_3_Pin|SW2_4_Pin
 80004a0:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 80004a4:	9305      	str	r3, [sp, #20]
                          |SW3_Pin|SW4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004aa:	a905      	add	r1, sp, #20
 80004ac:	4638      	mov	r0, r7
 80004ae:	f001 fbaf 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW6_Pin */
  GPIO_InitStruct.Pin = SW6_Pin;
 80004b2:	2304      	movs	r3, #4
 80004b4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SW6_GPIO_Port, &GPIO_InitStruct);
 80004ba:	a905      	add	r1, sp, #20
 80004bc:	480d      	ldr	r0, [pc, #52]	; (80004f4 <_ZL12MX_GPIO_Initv+0x124>)
 80004be:	f001 fba7 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ControlLed4_Pin ControlLed3_Pin ControlLed2_Pin ControlLed1_Pin */
  GPIO_InitStruct.Pin = ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin;
 80004c2:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c4:	2301      	movs	r3, #1
 80004c6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004cc:	a905      	add	r1, sp, #20
 80004ce:	4628      	mov	r0, r5
 80004d0:	f001 fb9e 	bl	8001c10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80004d4:	4622      	mov	r2, r4
 80004d6:	4621      	mov	r1, r4
 80004d8:	2017      	movs	r0, #23
 80004da:	f001 fb6f 	bl	8001bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80004de:	2017      	movs	r0, #23
 80004e0:	f001 fb88 	bl	8001bf4 <HAL_NVIC_EnableIRQ>

}
 80004e4:	b00b      	add	sp, #44	; 0x2c
 80004e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e8:	40021000 	.word	0x40021000
 80004ec:	48000400 	.word	0x48000400
 80004f0:	48000800 	.word	0x48000800
 80004f4:	48000c00 	.word	0x48000c00

080004f8 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v>:
    /// Allocate storage for an object from the pool.
    /// If asserts or exceptions are enabled and there are no more free items an
    /// etl::pool_no_allocation if thrown, otherwise a null pointer is returned.
    //*************************************************************************
    template <typename T>
    T* allocate()
 80004f8:	b510      	push	{r4, lr}
    {
      if (sizeof(T) > Item_Size)
 80004fa:	6902      	ldr	r2, [r0, #16]
 80004fc:	2a0b      	cmp	r2, #11
 80004fe:	d91b      	bls.n	8000538 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x40>
 8000500:	4603      	mov	r3, r0
    char* allocate_item()
    {
      char* p_value = ETL_NULLPTR;

      // Any free space left?
      if (items_allocated < Max_Size)
 8000502:	6882      	ldr	r2, [r0, #8]
 8000504:	6941      	ldr	r1, [r0, #20]
 8000506:	428a      	cmp	r2, r1
 8000508:	d21f      	bcs.n	800054a <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x52>
      {
        // Initialise another one if necessary.
        if (items_initialised < Max_Size)
 800050a:	68c2      	ldr	r2, [r0, #12]
 800050c:	4291      	cmp	r1, r2
 800050e:	d909      	bls.n	8000524 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x2c>
        {
          char* p = p_buffer + (items_initialised * Item_Size);
 8000510:	6800      	ldr	r0, [r0, #0]
 8000512:	691c      	ldr	r4, [r3, #16]
 8000514:	fb04 f202 	mul.w	r2, r4, r2
 8000518:	1881      	adds	r1, r0, r2
          char* np = p + Item_Size;
 800051a:	4421      	add	r1, r4
          *reinterpret_cast<char**>(p) = np;
 800051c:	5081      	str	r1, [r0, r2]
          ++items_initialised;
 800051e:	68da      	ldr	r2, [r3, #12]
 8000520:	3201      	adds	r2, #1
 8000522:	60da      	str	r2, [r3, #12]
        }

        // Get the address of new allocated item.
        p_value = p_next;
 8000524:	6858      	ldr	r0, [r3, #4]

        ++items_allocated;
 8000526:	689a      	ldr	r2, [r3, #8]
 8000528:	3201      	adds	r2, #1
 800052a:	609a      	str	r2, [r3, #8]
        if (items_allocated < Max_Size)
 800052c:	6959      	ldr	r1, [r3, #20]
 800052e:	428a      	cmp	r2, r1
 8000530:	d208      	bcs.n	8000544 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x4c>
        {
          // Set up the pointer to the next free item
          p_next = *reinterpret_cast<char**>(p_next);
 8000532:	6802      	ldr	r2, [r0, #0]
 8000534:	605a      	str	r2, [r3, #4]
    }
 8000536:	bd10      	pop	{r4, pc}
        ETL_ASSERT(false, ETL_ERROR(etl::pool_element_size));
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x60>)
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x64>)
 800053c:	2175      	movs	r1, #117	; 0x75
 800053e:	4808      	ldr	r0, [pc, #32]	; (8000560 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x68>)
 8000540:	f003 f84a 	bl	80035d8 <__assert_func>
        }
        else
        {
          // No more left!
          p_next = ETL_NULLPTR;
 8000544:	2200      	movs	r2, #0
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	e7f5      	b.n	8000536 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x3e>
        }
      }
      else
      {
        ETL_ASSERT(false, ETL_ERROR(pool_no_allocation));
 800054a:	4b03      	ldr	r3, [pc, #12]	; (8000558 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x60>)
 800054c:	4a05      	ldr	r2, [pc, #20]	; (8000564 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x6c>)
 800054e:	f240 1171 	movw	r1, #369	; 0x171
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x68>)
 8000554:	f003 f840 	bl	80035d8 <__assert_func>
 8000558:	08004684 	.word	0x08004684
 800055c:	0800468c 	.word	0x0800468c
 8000560:	080046d8 	.word	0x080046d8
 8000564:	080046f0 	.word	0x080046f0

08000568 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	//do nothing
}
 8000568:	4770      	bx	lr
	...

0800056c <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE>:

void sendStates(PUTM_CAN::scrollStates rotary_left, PUTM_CAN::scrollStates rotary_right, PUTM_CAN::buttonStates button)
{
 800056c:	b510      	push	{r4, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
	PUTM_CAN::Steering_Wheel_event payload
	{
		.button = button,
		.l_s_1 = rotary_left,
		.r_s_1 = rotary_right
	};
 8000570:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8000574:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8000578:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
  CAN_TxHeaderTypeDef header;
  uint8_t buff[max_dlc_size];

  constexpr Can_tx_message(const T &data,
                           const CAN_TxHeaderTypeDef &message_header)
      : header{message_header} {
 800057c:	f10d 0c04 	add.w	ip, sp, #4
 8000580:	4c0d      	ldr	r4, [pc, #52]	; (80005b8 <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x4c>)
 8000582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000584:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000588:	e894 0003 	ldmia.w	r4, {r0, r1}
 800058c:	e88c 0003 	stmia.w	ip, {r0, r1}
    static_assert(std::is_standard_layout<T>(), "Object must by C like struct");
    static_assert(std::is_trivially_copyable<T>(),
                  "Object must by C like struct");
    static_assert(sizeof(T) <= max_dlc_size,
                  "Object size must be less than 8bytes");
    std::memcpy(this->buff, &data, sizeof(T));
 8000590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000592:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000596:	0c1b      	lsrs	r3, r3, #16
 8000598:	f88d 301e 	strb.w	r3, [sp, #30]
  }

  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
    static uint32_t TxMailbox(0);
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x50>)
 800059e:	aa07      	add	r2, sp, #28
 80005a0:	a901      	add	r1, sp, #4
 80005a2:	4807      	ldr	r0, [pc, #28]	; (80005c0 <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x54>)
 80005a4:	f001 f95b 	bl	800185e <HAL_CAN_AddTxMessage>

	auto steering_wheel_frame = PUTM_CAN::Can_tx_message< PUTM_CAN::Steering_Wheel_event >
		(payload, PUTM_CAN::can_tx_header_STEERING_WHEEL_EVENT);

	if(steering_wheel_frame.send(hcan1) != HAL_OK)
 80005a8:	b908      	cbnz	r0, 80005ae <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x42>
	{
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
	}
}
 80005aa:	b00a      	add	sp, #40	; 0x28
 80005ac:	bd10      	pop	{r4, pc}
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 80005ae:	2180      	movs	r1, #128	; 0x80
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x58>)
 80005b2:	f001 fcef 	bl	8001f94 <HAL_GPIO_TogglePin>
}
 80005b6:	e7f8      	b.n	80005aa <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x3e>
 80005b8:	08004878 	.word	0x08004878
 80005bc:	2000008c 	.word	0x2000008c
 80005c0:	20000218 	.word	0x20000218
 80005c4:	48000400 	.word	0x48000400

080005c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005ca:	6802      	ldr	r2, [r0, #0]
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x14>)
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d000      	beq.n	80005d4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005d2:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80005d4:	f000 fef6 	bl	80013c4 <HAL_IncTick>
}
 80005d8:	e7fb      	b.n	80005d2 <HAL_TIM_PeriodElapsedCallback+0xa>
 80005da:	bf00      	nop
 80005dc:	40012c00 	.word	0x40012c00

080005e0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <Error_Handler+0x2>

080005e4 <_ZL12MX_CAN1_Initv>:
{
 80005e4:	b508      	push	{r3, lr}
  hcan1.Instance = CAN1;
 80005e6:	480d      	ldr	r0, [pc, #52]	; (800061c <_ZL12MX_CAN1_Initv+0x38>)
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <_ZL12MX_CAN1_Initv+0x3c>)
 80005ea:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005f4:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80005f6:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80005fa:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000600:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000602:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000604:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000606:	2201      	movs	r2, #1
 8000608:	7682      	strb	r2, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800060a:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800060c:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800060e:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000610:	f000 ff1c 	bl	800144c <HAL_CAN_Init>
 8000614:	b900      	cbnz	r0, 8000618 <_ZL12MX_CAN1_Initv+0x34>
}
 8000616:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000618:	f7ff ffe2 	bl	80005e0 <Error_Handler>
 800061c:	20000218 	.word	0x20000218
 8000620:	40006400 	.word	0x40006400

08000624 <_Z18SystemClock_Configv>:
{
 8000624:	b500      	push	{lr}
 8000626:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000628:	2248      	movs	r2, #72	; 0x48
 800062a:	2100      	movs	r1, #0
 800062c:	a806      	add	r0, sp, #24
 800062e:	f003 f835 	bl	800369c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000632:	2000      	movs	r0, #0
 8000634:	9001      	str	r0, [sp, #4]
 8000636:	9002      	str	r0, [sp, #8]
 8000638:	9003      	str	r0, [sp, #12]
 800063a:	9004      	str	r0, [sp, #16]
 800063c:	9005      	str	r0, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800063e:	f001 fcfb 	bl	8002038 <HAL_PWREx_ControlVoltageScaling>
 8000642:	bb20      	cbnz	r0, 800068e <_Z18SystemClock_Configv+0x6a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000644:	2310      	movs	r3, #16
 8000646:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000648:	2201      	movs	r2, #1
 800064a:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000650:	2360      	movs	r3, #96	; 0x60
 8000652:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000658:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065a:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 800065c:	223c      	movs	r2, #60	; 0x3c
 800065e:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000664:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	a806      	add	r0, sp, #24
 8000668:	f001 fd8a 	bl	8002180 <HAL_RCC_OscConfig>
 800066c:	b988      	cbnz	r0, 8000692 <_Z18SystemClock_Configv+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2303      	movs	r3, #3
 8000674:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800067e:	2105      	movs	r1, #5
 8000680:	a801      	add	r0, sp, #4
 8000682:	f002 f9f9 	bl	8002a78 <HAL_RCC_ClockConfig>
 8000686:	b930      	cbnz	r0, 8000696 <_Z18SystemClock_Configv+0x72>
}
 8000688:	b019      	add	sp, #100	; 0x64
 800068a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800068e:	f7ff ffa7 	bl	80005e0 <Error_Handler>
    Error_Handler();
 8000692:	f7ff ffa5 	bl	80005e0 <Error_Handler>
    Error_Handler();
 8000696:	f7ff ffa3 	bl	80005e0 <Error_Handler>
	...

0800069c <_Z8setUpCanv>:
{
 800069c:	b500      	push	{lr}
 800069e:	b08b      	sub	sp, #44	; 0x2c
	sFilterConfig.FilterBank = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	9305      	str	r3, [sp, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80006a4:	9306      	str	r3, [sp, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006a6:	2201      	movs	r2, #1
 80006a8:	9207      	str	r2, [sp, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80006aa:	9300      	str	r3, [sp, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80006ac:	9301      	str	r3, [sp, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80006ae:	9302      	str	r3, [sp, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80006b0:	9303      	str	r3, [sp, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80006b2:	9304      	str	r3, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80006b4:	9208      	str	r2, [sp, #32]
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80006b6:	4669      	mov	r1, sp
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <_Z8setUpCanv+0x50>)
 80006ba:	f000 ffc2 	bl	8001642 <HAL_CAN_ConfigFilter>
 80006be:	b978      	cbnz	r0, 80006e0 <_Z8setUpCanv+0x44>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80006c0:	480a      	ldr	r0, [pc, #40]	; (80006ec <_Z8setUpCanv+0x50>)
 80006c2:	f001 f888 	bl	80017d6 <HAL_CAN_Start>
 80006c6:	b968      	cbnz	r0, 80006e4 <_Z8setUpCanv+0x48>
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 80006c8:	2103      	movs	r1, #3
 80006ca:	4808      	ldr	r0, [pc, #32]	; (80006ec <_Z8setUpCanv+0x50>)
 80006cc:	f001 f997 	bl	80019fe <HAL_CAN_ActivateNotification>
 80006d0:	b950      	cbnz	r0, 80006e8 <_Z8setUpCanv+0x4c>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80006d2:	2102      	movs	r1, #2
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <_Z8setUpCanv+0x50>)
 80006d6:	f001 f992 	bl	80019fe <HAL_CAN_ActivateNotification>
}
 80006da:	b00b      	add	sp, #44	; 0x2c
 80006dc:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80006e0:	f7ff ff7e 	bl	80005e0 <Error_Handler>
		Error_Handler();
 80006e4:	f7ff ff7c 	bl	80005e0 <Error_Handler>
		Error_Handler();
 80006e8:	f7ff ff7a 	bl	80005e0 <Error_Handler>
 80006ec:	20000218 	.word	0x20000218

080006f0 <main>:
{
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	b082      	sub	sp, #8
  HAL_Init();
 80006f4:	f000 fe4d 	bl	8001392 <HAL_Init>
  SystemClock_Config();
 80006f8:	f7ff ff94 	bl	8000624 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80006fc:	f7ff fe68 	bl	80003d0 <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 8000700:	f7ff ff70 	bl	80005e4 <_ZL12MX_CAN1_Initv>
   setUpCan();
 8000704:	f7ff ffca 	bl	800069c <_Z8setUpCanv>
 8000708:	e01e      	b.n	8000748 <main+0x58>
	  right_rotary.handle();
 800070a:	4c81      	ldr	r4, [pc, #516]	; (8000910 <main+0x220>)
 800070c:	4620      	mov	r0, r4
 800070e:	f000 fbc2 	bl	8000e96 <_ZNK6Rotary6handleEv>
	  left_rotary.handle();
 8000712:	4d80      	ldr	r5, [pc, #512]	; (8000914 <main+0x224>)
 8000714:	4628      	mov	r0, r5
 8000716:	f000 fbbe 	bl	8000e96 <_ZNK6Rotary6handleEv>
	  auto left_rot = left_rotary.getRotation();
 800071a:	4628      	mov	r0, r5
 800071c:	f000 fc01 	bl	8000f22 <_ZN6Rotary11getRotationEv>
	  auto right_rot = right_rotary.getRotation();
 8000720:	4620      	mov	r0, r4
 8000722:	f000 fbfe 	bl	8000f22 <_ZN6Rotary11getRotationEv>
    //*************************************************************************
    /// <b>true</b> if the list has a shared pool.
    //*************************************************************************
    bool has_shared_pool() const
    {
      return pool_is_shared;
 8000726:	4b7c      	ldr	r3, [pc, #496]	; (8000918 <main+0x228>)
 8000728:	7c1b      	ldrb	r3, [r3, #16]
    //*************************************************************************
    /// Gets the size of the list.
    //*************************************************************************
    size_type size() const
    {
      if (has_shared_pool())
 800072a:	b9d3      	cbnz	r3, 8000762 <main+0x72>

        return count;
      }
      else
      {
        return p_node_pool->size();
 800072c:	4b7a      	ldr	r3, [pc, #488]	; (8000918 <main+0x228>)
 800072e:	681b      	ldr	r3, [r3, #0]
      return items_allocated;
 8000730:	689a      	ldr	r2, [r3, #8]
	  if(pressed_buttons_i.size() == 0) mission = Mission::Waiting;
 8000732:	b90a      	cbnz	r2, 8000738 <main+0x48>
 8000734:	4b79      	ldr	r3, [pc, #484]	; (800091c <main+0x22c>)
 8000736:	701a      	strb	r2, [r3, #0]
	  switch (mission)
 8000738:	4b78      	ldr	r3, [pc, #480]	; (800091c <main+0x22c>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d06d      	beq.n	800081c <main+0x12c>
 8000740:	2b02      	cmp	r3, #2
 8000742:	f000 815a 	beq.w	80009fa <main+0x30a>
 8000746:	b1ab      	cbz	r3, 8000774 <main+0x84>
	  HAL_Delay(config.basic_delay);
 8000748:	200a      	movs	r0, #10
 800074a:	f000 fe5b 	bl	8001404 <HAL_Delay>
	  for(const auto btn_ptr : buttons) btn_ptr->handle();
 800074e:	4c74      	ldr	r4, [pc, #464]	; (8000920 <main+0x230>)
 8000750:	4b74      	ldr	r3, [pc, #464]	; (8000924 <main+0x234>)
 8000752:	429c      	cmp	r4, r3
 8000754:	d0d9      	beq.n	800070a <main+0x1a>
 8000756:	f854 0b04 	ldr.w	r0, [r4], #4
 800075a:	6803      	ldr	r3, [r0, #0]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4798      	blx	r3
 8000760:	e7f6      	b.n	8000750 <main+0x60>
        node_t* p_node = terminal_node.next;
 8000762:	4b6d      	ldr	r3, [pc, #436]	; (8000918 <main+0x228>)
 8000764:	689b      	ldr	r3, [r3, #8]
        size_type count = 0U;
 8000766:	2200      	movs	r2, #0
        while (p_node != &terminal_node)
 8000768:	496f      	ldr	r1, [pc, #444]	; (8000928 <main+0x238>)
 800076a:	428b      	cmp	r3, r1
 800076c:	d0e1      	beq.n	8000732 <main+0x42>
          ++count;
 800076e:	3201      	adds	r2, #1
          p_node = p_node->next;
 8000770:	685b      	ldr	r3, [r3, #4]
        while (p_node != &terminal_node)
 8000772:	e7f9      	b.n	8000768 <main+0x78>
	  		  for (size_t i = 0; i < buttons.size(); i++)
 8000774:	2400      	movs	r4, #0
 8000776:	2c03      	cmp	r4, #3
 8000778:	d8e6      	bhi.n	8000748 <main+0x58>
	  			  if(buttons[i]->risingEdge())
 800077a:	4b69      	ldr	r3, [pc, #420]	; (8000920 <main+0x230>)
 800077c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000780:	f7ff fe1a 	bl	80003b8 <_ZNK13GpioInElement10risingEdgeEv>
 8000784:	b908      	cbnz	r0, 800078a <main+0x9a>
	  		  for (size_t i = 0; i < buttons.size(); i++)
 8000786:	3401      	adds	r4, #1
 8000788:	e7f5      	b.n	8000776 <main+0x86>
	  				  mission = Mission::FirstPressDetected;
 800078a:	4b64      	ldr	r3, [pc, #400]	; (800091c <main+0x22c>)
 800078c:	2201      	movs	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
    void emplace_back(Args && ... args)
    {
#if defined(ETL_CHECK_PUSH_POP)
      ETL_ASSERT(!full(), ETL_ERROR(list_full));
#endif
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 8000790:	4b61      	ldr	r3, [pc, #388]	; (8000918 <main+0x228>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d02a      	beq.n	80007ee <main+0xfe>
    //*************************************************************************
    /// Create a data_node_t.
    //*************************************************************************
    data_node_t* create_data_node()
    {
      data_node_t* (etl::ipool::*func)() = &etl::ipool::allocate<data_node_t>;
 8000798:	4a64      	ldr	r2, [pc, #400]	; (800092c <main+0x23c>)
 800079a:	9200      	str	r2, [sp, #0]
 800079c:	2200      	movs	r2, #0
 800079e:	9201      	str	r2, [sp, #4]
      if (sizeof(T) > Item_Size)
 80007a0:	691a      	ldr	r2, [r3, #16]
 80007a2:	2a0b      	cmp	r2, #11
 80007a4:	d92a      	bls.n	80007fc <main+0x10c>
      if (items_allocated < Max_Size)
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	6959      	ldr	r1, [r3, #20]
 80007aa:	428a      	cmp	r2, r1
 80007ac:	d22f      	bcs.n	800080e <main+0x11e>
        if (items_initialised < Max_Size)
 80007ae:	68da      	ldr	r2, [r3, #12]
 80007b0:	4291      	cmp	r1, r2
 80007b2:	d909      	bls.n	80007c8 <main+0xd8>
          char* p = p_buffer + (items_initialised * Item_Size);
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	691d      	ldr	r5, [r3, #16]
 80007b8:	fb05 f202 	mul.w	r2, r5, r2
 80007bc:	1881      	adds	r1, r0, r2
          char* np = p + Item_Size;
 80007be:	4429      	add	r1, r5
          *reinterpret_cast<char**>(p) = np;
 80007c0:	5081      	str	r1, [r0, r2]
          ++items_initialised;
 80007c2:	68da      	ldr	r2, [r3, #12]
 80007c4:	3201      	adds	r2, #1
 80007c6:	60da      	str	r2, [r3, #12]
        p_value = p_next;
 80007c8:	685a      	ldr	r2, [r3, #4]
        ++items_allocated;
 80007ca:	6899      	ldr	r1, [r3, #8]
 80007cc:	3101      	adds	r1, #1
 80007ce:	6099      	str	r1, [r3, #8]
        if (items_allocated < Max_Size)
 80007d0:	6958      	ldr	r0, [r3, #20]
 80007d2:	4281      	cmp	r1, r0
 80007d4:	d218      	bcs.n	8000808 <main+0x118>
          p_next = *reinterpret_cast<char**>(p_next);
 80007d6:	6811      	ldr	r1, [r2, #0]
 80007d8:	6059      	str	r1, [r3, #4]
      ::new (&(p_data_node->value)) T(etl::forward<Args>(args)...);
 80007da:	6094      	str	r4, [r2, #8]
      join(*position.previous, node);
 80007dc:	494e      	ldr	r1, [pc, #312]	; (8000918 <main+0x228>)
 80007de:	460b      	mov	r3, r1
 80007e0:	f853 0f04 	ldr.w	r0, [r3, #4]!
      left.next      = &right;
 80007e4:	6042      	str	r2, [r0, #4]
      right.previous = &left;
 80007e6:	6010      	str	r0, [r2, #0]
      left.next      = &right;
 80007e8:	6053      	str	r3, [r2, #4]
      right.previous = &left;
 80007ea:	604a      	str	r2, [r1, #4]
    }
 80007ec:	e7ac      	b.n	8000748 <main+0x58>
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 80007ee:	4b50      	ldr	r3, [pc, #320]	; (8000930 <main+0x240>)
 80007f0:	4a50      	ldr	r2, [pc, #320]	; (8000934 <main+0x244>)
 80007f2:	f240 31e1 	movw	r1, #993	; 0x3e1
 80007f6:	4850      	ldr	r0, [pc, #320]	; (8000938 <main+0x248>)
 80007f8:	f002 feee 	bl	80035d8 <__assert_func>
        ETL_ASSERT(false, ETL_ERROR(etl::pool_element_size));
 80007fc:	4b4f      	ldr	r3, [pc, #316]	; (800093c <main+0x24c>)
 80007fe:	4a50      	ldr	r2, [pc, #320]	; (8000940 <main+0x250>)
 8000800:	2175      	movs	r1, #117	; 0x75
 8000802:	4850      	ldr	r0, [pc, #320]	; (8000944 <main+0x254>)
 8000804:	f002 fee8 	bl	80035d8 <__assert_func>
          p_next = ETL_NULLPTR;
 8000808:	2100      	movs	r1, #0
 800080a:	6059      	str	r1, [r3, #4]
 800080c:	e7e5      	b.n	80007da <main+0xea>
        ETL_ASSERT(false, ETL_ERROR(pool_no_allocation));
 800080e:	4b4b      	ldr	r3, [pc, #300]	; (800093c <main+0x24c>)
 8000810:	4a4d      	ldr	r2, [pc, #308]	; (8000948 <main+0x258>)
 8000812:	f240 1171 	movw	r1, #369	; 0x171
 8000816:	484b      	ldr	r0, [pc, #300]	; (8000944 <main+0x254>)
 8000818:	f002 fede 	bl	80035d8 <__assert_func>
      return *terminal_node.next;
 800081c:	4b3e      	ldr	r3, [pc, #248]	; (8000918 <main+0x228>)
 800081e:	689b      	ldr	r3, [r3, #8]
	  		  if(buttons[pressed_buttons_i.front()]->fallingEdge())
 8000820:	689a      	ldr	r2, [r3, #8]
 8000822:	4b3f      	ldr	r3, [pc, #252]	; (8000920 <main+0x230>)
 8000824:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000828:	f7ff fdcb 	bl	80003c2 <_ZNK13GpioInElement11fallingEdgeEv>
 800082c:	2800      	cmp	r0, #0
 800082e:	d056      	beq.n	80008de <main+0x1ee>
 8000830:	4c39      	ldr	r4, [pc, #228]	; (8000918 <main+0x228>)
 8000832:	68a3      	ldr	r3, [r4, #8]
	  			  sendStates(PUTM_CAN::scrollStates::scroll_1, PUTM_CAN::scrollStates::scroll_1, state);
 8000834:	7a1a      	ldrb	r2, [r3, #8]
 8000836:	2100      	movs	r1, #0
 8000838:	4608      	mov	r0, r1
 800083a:	f7ff fe97 	bl	800056c <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE>
      if (this->p_node_pool != ETL_NULLPTR)
 800083e:	6822      	ldr	r2, [r4, #0]
 8000840:	b15a      	cbz	r2, 800085a <main+0x16a>
      return (terminal_node.next == &terminal_node);
 8000842:	4623      	mov	r3, r4
 8000844:	68a1      	ldr	r1, [r4, #8]
        if (!empty())
 8000846:	3304      	adds	r3, #4
 8000848:	4299      	cmp	r1, r3
 800084a:	d006      	beq.n	800085a <main+0x16a>
      return pool_is_shared;
 800084c:	7c25      	ldrb	r5, [r4, #16]
          if (etl::is_trivially_destructible<T>::value && !has_shared_pool())
 800084e:	bb4d      	cbnz	r5, 80008a4 <main+0x1b4>
      items_allocated = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	6093      	str	r3, [r2, #8]
      items_initialised = 0;
 8000854:	60d3      	str	r3, [r2, #12]
      p_next = p_buffer;
 8000856:	6813      	ldr	r3, [r2, #0]
 8000858:	6053      	str	r3, [r2, #4]
      left.next      = &right;
 800085a:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <main+0x228>)
 800085c:	1d1a      	adds	r2, r3, #4
 800085e:	609a      	str	r2, [r3, #8]
      right.previous = &left;
 8000860:	605a      	str	r2, [r3, #4]
	  			  mission = Mission::Waiting;
 8000862:	4b2e      	ldr	r3, [pc, #184]	; (800091c <main+0x22c>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
	  			  break;
 8000868:	e76e      	b.n	8000748 <main+0x58>
    //*************************************************************************
    /// Destroy a data_node_t.
    //*************************************************************************
    void destroy_data_node(data_node_t& node)
    {
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 800086a:	4b31      	ldr	r3, [pc, #196]	; (8000930 <main+0x240>)
 800086c:	4a37      	ldr	r2, [pc, #220]	; (800094c <main+0x25c>)
 800086e:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8000872:	4831      	ldr	r0, [pc, #196]	; (8000938 <main+0x248>)
 8000874:	f002 feb0 	bl	80035d8 <__assert_func>
    //*************************************************************************
    bool is_item_in_pool(const char* p) const
    {
      // Within the range of the buffer?
      intptr_t distance = p - p_buffer;
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000878:	2000      	movs	r0, #0

      // Modulus and division can be slow on some architectures, so only do this in debug.
#if ETL_IS_DEBUG_BUILD
      // Is the address on a valid object boundary?
      bool is_valid_address = ((distance % Item_Size) == 0);
 800087a:	691c      	ldr	r4, [r3, #16]
 800087c:	fbb2 fcf4 	udiv	ip, r2, r4
 8000880:	fb04 221c 	mls	r2, r4, ip, r2
#else
      bool is_valid_address = true;
#endif

      return is_within_range && is_valid_address;
 8000884:	b120      	cbz	r0, 8000890 <main+0x1a0>
 8000886:	b122      	cbz	r2, 8000892 <main+0x1a2>
 8000888:	2000      	movs	r0, #0
 800088a:	e002      	b.n	8000892 <main+0x1a2>
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 800088c:	4628      	mov	r0, r5
 800088e:	e7f4      	b.n	800087a <main+0x18a>
      return is_within_range && is_valid_address;
 8000890:	2000      	movs	r0, #0
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 8000892:	b1d0      	cbz	r0, 80008ca <main+0x1da>
      if (p_next != ETL_NULLPTR)
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	b1fa      	cbz	r2, 80008d8 <main+0x1e8>
        *(uintptr_t*)p_value = reinterpret_cast<uintptr_t>(p_next);
 8000898:	600a      	str	r2, [r1, #0]
      p_next = p_value;
 800089a:	6059      	str	r1, [r3, #4]
      --items_allocated;
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	3a01      	subs	r2, #1
 80008a0:	609a      	str	r2, [r3, #8]
              p_first = p_first->next;                                // Move to the next node.
 80008a2:	6849      	ldr	r1, [r1, #4]
            while (p_first != p_last)
 80008a4:	4b20      	ldr	r3, [pc, #128]	; (8000928 <main+0x238>)
 80008a6:	4299      	cmp	r1, r3
 80008a8:	d0d7      	beq.n	800085a <main+0x16a>
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 80008aa:	3b04      	subs	r3, #4
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0db      	beq.n	800086a <main+0x17a>
      intptr_t distance = p - p_buffer;
 80008b2:	681a      	ldr	r2, [r3, #0]
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 80008b4:	1a8a      	subs	r2, r1, r2
 80008b6:	d4df      	bmi.n	8000878 <main+0x188>
 80008b8:	6958      	ldr	r0, [r3, #20]
 80008ba:	691c      	ldr	r4, [r3, #16]
 80008bc:	3801      	subs	r0, #1
 80008be:	fb04 f000 	mul.w	r0, r4, r0
 80008c2:	4282      	cmp	r2, r0
 80008c4:	dde2      	ble.n	800088c <main+0x19c>
 80008c6:	2000      	movs	r0, #0
 80008c8:	e7d7      	b.n	800087a <main+0x18a>
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <main+0x260>)
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <main+0x264>)
 80008ce:	f240 117d 	movw	r1, #381	; 0x17d
 80008d2:	481c      	ldr	r0, [pc, #112]	; (8000944 <main+0x254>)
 80008d4:	f002 fe80 	bl	80035d8 <__assert_func>
        *((uintptr_t*)p_value) = 0;
 80008d8:	2200      	movs	r2, #0
 80008da:	600a      	str	r2, [r1, #0]
 80008dc:	e7dd      	b.n	800089a <main+0x1aa>
	  		  for (size_t i = 0; i < buttons.size(); i++)
 80008de:	2400      	movs	r4, #0
 80008e0:	e03b      	b.n	800095a <main+0x26a>
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <main+0x240>)
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <main+0x244>)
 80008e6:	f240 31e1 	movw	r1, #993	; 0x3e1
 80008ea:	4813      	ldr	r0, [pc, #76]	; (8000938 <main+0x248>)
 80008ec:	f002 fe74 	bl	80035d8 <__assert_func>
        ETL_ASSERT(false, ETL_ERROR(etl::pool_element_size));
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <main+0x24c>)
 80008f2:	4a13      	ldr	r2, [pc, #76]	; (8000940 <main+0x250>)
 80008f4:	2175      	movs	r1, #117	; 0x75
 80008f6:	4813      	ldr	r0, [pc, #76]	; (8000944 <main+0x254>)
 80008f8:	f002 fe6e 	bl	80035d8 <__assert_func>
          p_next = ETL_NULLPTR;
 80008fc:	2100      	movs	r1, #0
 80008fe:	6059      	str	r1, [r3, #4]
 8000900:	e062      	b.n	80009c8 <main+0x2d8>
        ETL_ASSERT(false, ETL_ERROR(pool_no_allocation));
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <main+0x24c>)
 8000904:	4a10      	ldr	r2, [pc, #64]	; (8000948 <main+0x258>)
 8000906:	f240 1171 	movw	r1, #369	; 0x171
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <main+0x254>)
 800090c:	f002 fe64 	bl	80035d8 <__assert_func>
 8000910:	200002a0 	.word	0x200002a0
 8000914:	20000240 	.word	0x20000240
 8000918:	2000025c 	.word	0x2000025c
 800091c:	20000258 	.word	0x20000258
 8000920:	08004848 	.word	0x08004848
 8000924:	08004858 	.word	0x08004858
 8000928:	20000260 	.word	0x20000260
 800092c:	080004f9 	.word	0x080004f9
 8000930:	08004714 	.word	0x08004714
 8000934:	08004730 	.word	0x08004730
 8000938:	08004790 	.word	0x08004790
 800093c:	08004684 	.word	0x08004684
 8000940:	0800468c 	.word	0x0800468c
 8000944:	080046d8 	.word	0x080046d8
 8000948:	080046f0 	.word	0x080046f0
 800094c:	080047a8 	.word	0x080047a8
 8000950:	08004804 	.word	0x08004804
 8000954:	08004820 	.word	0x08004820
 8000958:	3401      	adds	r4, #1
 800095a:	2c03      	cmp	r4, #3
 800095c:	f63f aef4 	bhi.w	8000748 <main+0x58>
      return *terminal_node.next;
 8000960:	4b5a      	ldr	r3, [pc, #360]	; (8000acc <main+0x3dc>)
 8000962:	689b      	ldr	r3, [r3, #8]
	  			  if(i == pressed_buttons_i.front()) continue;
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	42a3      	cmp	r3, r4
 8000968:	d0f6      	beq.n	8000958 <main+0x268>
				  if(buttons[i]->risingEdge())
 800096a:	4b59      	ldr	r3, [pc, #356]	; (8000ad0 <main+0x3e0>)
 800096c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000970:	f7ff fd22 	bl	80003b8 <_ZNK13GpioInElement10risingEdgeEv>
 8000974:	2800      	cmp	r0, #0
 8000976:	d0ef      	beq.n	8000958 <main+0x268>
					  mission = Mission::SecondPressDetected;
 8000978:	4b56      	ldr	r3, [pc, #344]	; (8000ad4 <main+0x3e4>)
 800097a:	2202      	movs	r2, #2
 800097c:	701a      	strb	r2, [r3, #0]
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 800097e:	4b53      	ldr	r3, [pc, #332]	; (8000acc <main+0x3dc>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0ad      	beq.n	80008e2 <main+0x1f2>
      data_node_t* (etl::ipool::*func)() = &etl::ipool::allocate<data_node_t>;
 8000986:	4a54      	ldr	r2, [pc, #336]	; (8000ad8 <main+0x3e8>)
 8000988:	9200      	str	r2, [sp, #0]
 800098a:	2200      	movs	r2, #0
 800098c:	9201      	str	r2, [sp, #4]
      if (sizeof(T) > Item_Size)
 800098e:	691a      	ldr	r2, [r3, #16]
 8000990:	2a0b      	cmp	r2, #11
 8000992:	d9ad      	bls.n	80008f0 <main+0x200>
      if (items_allocated < Max_Size)
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	6959      	ldr	r1, [r3, #20]
 8000998:	428a      	cmp	r2, r1
 800099a:	d2b2      	bcs.n	8000902 <main+0x212>
        if (items_initialised < Max_Size)
 800099c:	68da      	ldr	r2, [r3, #12]
 800099e:	4291      	cmp	r1, r2
 80009a0:	d909      	bls.n	80009b6 <main+0x2c6>
          char* p = p_buffer + (items_initialised * Item_Size);
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	691d      	ldr	r5, [r3, #16]
 80009a6:	fb05 f202 	mul.w	r2, r5, r2
 80009aa:	1881      	adds	r1, r0, r2
          char* np = p + Item_Size;
 80009ac:	4429      	add	r1, r5
          *reinterpret_cast<char**>(p) = np;
 80009ae:	5081      	str	r1, [r0, r2]
          ++items_initialised;
 80009b0:	68da      	ldr	r2, [r3, #12]
 80009b2:	3201      	adds	r2, #1
 80009b4:	60da      	str	r2, [r3, #12]
        p_value = p_next;
 80009b6:	685a      	ldr	r2, [r3, #4]
        ++items_allocated;
 80009b8:	6899      	ldr	r1, [r3, #8]
 80009ba:	3101      	adds	r1, #1
 80009bc:	6099      	str	r1, [r3, #8]
        if (items_allocated < Max_Size)
 80009be:	6958      	ldr	r0, [r3, #20]
 80009c0:	4281      	cmp	r1, r0
 80009c2:	d29b      	bcs.n	80008fc <main+0x20c>
          p_next = *reinterpret_cast<char**>(p_next);
 80009c4:	6811      	ldr	r1, [r2, #0]
 80009c6:	6059      	str	r1, [r3, #4]
      ::new (&(p_data_node->value)) T(etl::forward<Args>(args)...);
 80009c8:	6094      	str	r4, [r2, #8]
      join(*position.previous, node);
 80009ca:	4b40      	ldr	r3, [pc, #256]	; (8000acc <main+0x3dc>)
 80009cc:	4619      	mov	r1, r3
 80009ce:	f851 0f04 	ldr.w	r0, [r1, #4]!
      left.next      = &right;
 80009d2:	6042      	str	r2, [r0, #4]
      right.previous = &left;
 80009d4:	6010      	str	r0, [r2, #0]
      left.next      = &right;
 80009d6:	6051      	str	r1, [r2, #4]
      right.previous = &left;
 80009d8:	605a      	str	r2, [r3, #4]
      return *terminal_node.next;
 80009da:	689b      	ldr	r3, [r3, #8]
		  			  size_t state_1 = pressed_buttons_i.front();
 80009dc:	689b      	ldr	r3, [r3, #8]
		  			  size_t state_2 = pressed_buttons_i.back();
 80009de:	6891      	ldr	r1, [r2, #8]
		  			  size_t state = state_1 + state_2 + 4;
 80009e0:	1858      	adds	r0, r3, r1
 80009e2:	1d02      	adds	r2, r0, #4
		  			  if(state >= 7 && state_1 != 0 && state_2 != 0) state += 1;
 80009e4:	2a06      	cmp	r2, #6
 80009e6:	d902      	bls.n	80009ee <main+0x2fe>
 80009e8:	b10b      	cbz	r3, 80009ee <main+0x2fe>
 80009ea:	b101      	cbz	r1, 80009ee <main+0x2fe>
 80009ec:	1d42      	adds	r2, r0, #5
		  			  sendStates(PUTM_CAN::scrollStates::scroll_1, PUTM_CAN::scrollStates::scroll_1, PUTM_CAN::buttonStates(state));
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	2100      	movs	r1, #0
 80009f2:	4608      	mov	r0, r1
 80009f4:	f7ff fdba 	bl	800056c <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE>
					  break;
 80009f8:	e6a6      	b.n	8000748 <main+0x58>
 80009fa:	4b34      	ldr	r3, [pc, #208]	; (8000acc <main+0x3dc>)
 80009fc:	689b      	ldr	r3, [r3, #8]
			  if(!buttons[pressed_buttons_i.front()]->isActive() && !buttons[pressed_buttons_i.back()]->isActive())
 80009fe:	689a      	ldr	r2, [r3, #8]
 8000a00:	4b33      	ldr	r3, [pc, #204]	; (8000ad0 <main+0x3e0>)
 8000a02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000a06:	f7ff fcd5 	bl	80003b4 <_ZNK13GpioInElement8isActiveEv>
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	f47f ae9c 	bne.w	8000748 <main+0x58>
      return *terminal_node.previous;
 8000a10:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <main+0x3dc>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	689a      	ldr	r2, [r3, #8]
 8000a16:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <main+0x3e0>)
 8000a18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000a1c:	f7ff fcca 	bl	80003b4 <_ZNK13GpioInElement8isActiveEv>
 8000a20:	4604      	mov	r4, r0
 8000a22:	2800      	cmp	r0, #0
 8000a24:	f47f ae90 	bne.w	8000748 <main+0x58>
      if (this->p_node_pool != ETL_NULLPTR)
 8000a28:	4b28      	ldr	r3, [pc, #160]	; (8000acc <main+0x3dc>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	b15a      	cbz	r2, 8000a46 <main+0x356>
      return (terminal_node.next == &terminal_node);
 8000a2e:	6899      	ldr	r1, [r3, #8]
        if (!empty())
 8000a30:	3304      	adds	r3, #4
 8000a32:	4299      	cmp	r1, r3
 8000a34:	d007      	beq.n	8000a46 <main+0x356>
      return pool_is_shared;
 8000a36:	3b04      	subs	r3, #4
 8000a38:	7c1e      	ldrb	r6, [r3, #16]
          if (etl::is_trivially_destructible<T>::value && !has_shared_pool())
 8000a3a:	bb4e      	cbnz	r6, 8000a90 <main+0x3a0>
      items_allocated = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	6093      	str	r3, [r2, #8]
      items_initialised = 0;
 8000a40:	60d3      	str	r3, [r2, #12]
      p_next = p_buffer;
 8000a42:	6813      	ldr	r3, [r2, #0]
 8000a44:	6053      	str	r3, [r2, #4]
      left.next      = &right;
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <main+0x3dc>)
 8000a48:	1d1a      	adds	r2, r3, #4
 8000a4a:	609a      	str	r2, [r3, #8]
      right.previous = &left;
 8000a4c:	605a      	str	r2, [r3, #4]
	  			  mission = Mission::Waiting;
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <main+0x3e4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	e678      	b.n	8000748 <main+0x58>
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <main+0x3ec>)
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <main+0x3f0>)
 8000a5a:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8000a5e:	4821      	ldr	r0, [pc, #132]	; (8000ae4 <main+0x3f4>)
 8000a60:	f002 fdba 	bl	80035d8 <__assert_func>
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000a64:	4620      	mov	r0, r4
      bool is_valid_address = ((distance % Item_Size) == 0);
 8000a66:	691d      	ldr	r5, [r3, #16]
 8000a68:	fbb2 fef5 	udiv	lr, r2, r5
 8000a6c:	fb05 221e 	mls	r2, r5, lr, r2
      return is_within_range && is_valid_address;
 8000a70:	b120      	cbz	r0, 8000a7c <main+0x38c>
 8000a72:	b122      	cbz	r2, 8000a7e <main+0x38e>
 8000a74:	4620      	mov	r0, r4
 8000a76:	e002      	b.n	8000a7e <main+0x38e>
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e7f4      	b.n	8000a66 <main+0x376>
      return is_within_range && is_valid_address;
 8000a7c:	4620      	mov	r0, r4
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 8000a7e:	b1d0      	cbz	r0, 8000ab6 <main+0x3c6>
      if (p_next != ETL_NULLPTR)
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	b1fa      	cbz	r2, 8000ac4 <main+0x3d4>
        *(uintptr_t*)p_value = reinterpret_cast<uintptr_t>(p_next);
 8000a84:	600a      	str	r2, [r1, #0]
      p_next = p_value;
 8000a86:	6059      	str	r1, [r3, #4]
      --items_allocated;
 8000a88:	689a      	ldr	r2, [r3, #8]
 8000a8a:	3a01      	subs	r2, #1
 8000a8c:	609a      	str	r2, [r3, #8]
              p_first = p_first->next;                                // Move to the next node.
 8000a8e:	6849      	ldr	r1, [r1, #4]
            while (p_first != p_last)
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <main+0x3f8>)
 8000a92:	4299      	cmp	r1, r3
 8000a94:	d0d7      	beq.n	8000a46 <main+0x356>
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 8000a96:	3b04      	subs	r3, #4
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0db      	beq.n	8000a56 <main+0x366>
      intptr_t distance = p - p_buffer;
 8000a9e:	681a      	ldr	r2, [r3, #0]
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000aa0:	1a8a      	subs	r2, r1, r2
 8000aa2:	d4df      	bmi.n	8000a64 <main+0x374>
 8000aa4:	6958      	ldr	r0, [r3, #20]
 8000aa6:	691d      	ldr	r5, [r3, #16]
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	fb05 f000 	mul.w	r0, r5, r0
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	dde2      	ble.n	8000a78 <main+0x388>
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	e7d7      	b.n	8000a66 <main+0x376>
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <main+0x3fc>)
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <main+0x400>)
 8000aba:	f240 117d 	movw	r1, #381	; 0x17d
 8000abe:	480d      	ldr	r0, [pc, #52]	; (8000af4 <main+0x404>)
 8000ac0:	f002 fd8a 	bl	80035d8 <__assert_func>
        *((uintptr_t*)p_value) = 0;
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	600a      	str	r2, [r1, #0]
 8000ac8:	e7dd      	b.n	8000a86 <main+0x396>
 8000aca:	bf00      	nop
 8000acc:	2000025c 	.word	0x2000025c
 8000ad0:	08004848 	.word	0x08004848
 8000ad4:	20000258 	.word	0x20000258
 8000ad8:	080004f9 	.word	0x080004f9
 8000adc:	08004714 	.word	0x08004714
 8000ae0:	080047a8 	.word	0x080047a8
 8000ae4:	08004790 	.word	0x08004790
 8000ae8:	20000260 	.word	0x20000260
 8000aec:	08004804 	.word	0x08004804
 8000af0:	08004820 	.word	0x08004820
 8000af4:	080046d8 	.word	0x080046d8

08000af8 <_ZN3etl5ilistIjE10initialiseEv>:
      if (this->p_node_pool != ETL_NULLPTR)
 8000af8:	6803      	ldr	r3, [r0, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d04a      	beq.n	8000b94 <_ZN3etl5ilistIjE10initialiseEv+0x9c>
      return (terminal_node.next == &terminal_node);
 8000afe:	6881      	ldr	r1, [r0, #8]
 8000b00:	1d02      	adds	r2, r0, #4
        if (!empty())
 8000b02:	428a      	cmp	r2, r1
 8000b04:	d046      	beq.n	8000b94 <_ZN3etl5ilistIjE10initialiseEv+0x9c>
    void initialise()
 8000b06:	b570      	push	{r4, r5, r6, lr}
      return pool_is_shared;
 8000b08:	7c05      	ldrb	r5, [r0, #16]
          if (etl::is_trivially_destructible<T>::value && !has_shared_pool())
 8000b0a:	b945      	cbnz	r5, 8000b1e <_ZN3etl5ilistIjE10initialiseEv+0x26>
      items_allocated = 0;
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
      items_initialised = 0;
 8000b10:	60da      	str	r2, [r3, #12]
      p_next = p_buffer;
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
      join(terminal_node, terminal_node);
 8000b16:	1d03      	adds	r3, r0, #4
      left.next      = &right;
 8000b18:	6083      	str	r3, [r0, #8]
      right.previous = &left;
 8000b1a:	6043      	str	r3, [r0, #4]
    }
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}
            node_t* p_last = &terminal_node;
 8000b1e:	f100 0c04 	add.w	ip, r0, #4
 8000b22:	e01c      	b.n	8000b5e <_ZN3etl5ilistIjE10initialiseEv+0x66>
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <_ZN3etl5ilistIjE10initialiseEv+0xa4>)
 8000b26:	4a1e      	ldr	r2, [pc, #120]	; (8000ba0 <_ZN3etl5ilistIjE10initialiseEv+0xa8>)
 8000b28:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8000b2c:	481d      	ldr	r0, [pc, #116]	; (8000ba4 <_ZN3etl5ilistIjE10initialiseEv+0xac>)
 8000b2e:	f002 fd53 	bl	80035d8 <__assert_func>
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000b32:	2400      	movs	r4, #0
      bool is_valid_address = ((distance % Item_Size) == 0);
 8000b34:	691e      	ldr	r6, [r3, #16]
 8000b36:	fbb2 fef6 	udiv	lr, r2, r6
 8000b3a:	fb06 221e 	mls	r2, r6, lr, r2
      return is_within_range && is_valid_address;
 8000b3e:	b124      	cbz	r4, 8000b4a <_ZN3etl5ilistIjE10initialiseEv+0x52>
 8000b40:	b122      	cbz	r2, 8000b4c <_ZN3etl5ilistIjE10initialiseEv+0x54>
 8000b42:	2400      	movs	r4, #0
 8000b44:	e002      	b.n	8000b4c <_ZN3etl5ilistIjE10initialiseEv+0x54>
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000b46:	462c      	mov	r4, r5
 8000b48:	e7f4      	b.n	8000b34 <_ZN3etl5ilistIjE10initialiseEv+0x3c>
      return is_within_range && is_valid_address;
 8000b4a:	2400      	movs	r4, #0
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 8000b4c:	b1c4      	cbz	r4, 8000b80 <_ZN3etl5ilistIjE10initialiseEv+0x88>
      if (p_next != ETL_NULLPTR)
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	b1ea      	cbz	r2, 8000b8e <_ZN3etl5ilistIjE10initialiseEv+0x96>
        *(uintptr_t*)p_value = reinterpret_cast<uintptr_t>(p_next);
 8000b52:	600a      	str	r2, [r1, #0]
      p_next = p_value;
 8000b54:	6059      	str	r1, [r3, #4]
      --items_allocated;
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	3a01      	subs	r2, #1
 8000b5a:	609a      	str	r2, [r3, #8]
              p_first = p_first->next;                                // Move to the next node.
 8000b5c:	6849      	ldr	r1, [r1, #4]
            while (p_first != p_last)
 8000b5e:	4561      	cmp	r1, ip
 8000b60:	d0d9      	beq.n	8000b16 <_ZN3etl5ilistIjE10initialiseEv+0x1e>
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 8000b62:	6803      	ldr	r3, [r0, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d0dd      	beq.n	8000b24 <_ZN3etl5ilistIjE10initialiseEv+0x2c>
      intptr_t distance = p - p_buffer;
 8000b68:	681a      	ldr	r2, [r3, #0]
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000b6a:	1a8a      	subs	r2, r1, r2
 8000b6c:	d4e1      	bmi.n	8000b32 <_ZN3etl5ilistIjE10initialiseEv+0x3a>
 8000b6e:	695c      	ldr	r4, [r3, #20]
 8000b70:	3c01      	subs	r4, #1
 8000b72:	691e      	ldr	r6, [r3, #16]
 8000b74:	fb06 f404 	mul.w	r4, r6, r4
 8000b78:	42a2      	cmp	r2, r4
 8000b7a:	dde4      	ble.n	8000b46 <_ZN3etl5ilistIjE10initialiseEv+0x4e>
 8000b7c:	2400      	movs	r4, #0
 8000b7e:	e7d9      	b.n	8000b34 <_ZN3etl5ilistIjE10initialiseEv+0x3c>
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <_ZN3etl5ilistIjE10initialiseEv+0xb0>)
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <_ZN3etl5ilistIjE10initialiseEv+0xb4>)
 8000b84:	f240 117d 	movw	r1, #381	; 0x17d
 8000b88:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <_ZN3etl5ilistIjE10initialiseEv+0xb8>)
 8000b8a:	f002 fd25 	bl	80035d8 <__assert_func>
        *((uintptr_t*)p_value) = 0;
 8000b8e:	2200      	movs	r2, #0
 8000b90:	600a      	str	r2, [r1, #0]
 8000b92:	e7df      	b.n	8000b54 <_ZN3etl5ilistIjE10initialiseEv+0x5c>
      join(terminal_node, terminal_node);
 8000b94:	1d03      	adds	r3, r0, #4
      left.next      = &right;
 8000b96:	6083      	str	r3, [r0, #8]
      right.previous = &left;
 8000b98:	6043      	str	r3, [r0, #4]
 8000b9a:	4770      	bx	lr
 8000b9c:	08004714 	.word	0x08004714
 8000ba0:	080047a8 	.word	0x080047a8
 8000ba4:	08004790 	.word	0x08004790
 8000ba8:	08004804 	.word	0x08004804
 8000bac:	08004820 	.word	0x08004820
 8000bb0:	080046d8 	.word	0x080046d8

08000bb4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bb8:	4604      	mov	r4, r0
 8000bba:	460d      	mov	r5, r1
 8000bbc:	2801      	cmp	r0, #1
 8000bbe:	d007      	beq.n	8000bd0 <_Z41__static_initialization_and_destruction_0ii+0x1c>
} controls_states;
 8000bc0:	b924      	cbnz	r4, 8000bcc <_Z41__static_initialization_and_destruction_0ii+0x18>
 8000bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bc6:	429d      	cmp	r5, r3
 8000bc8:	f000 80cb 	beq.w	8000d62 <_Z41__static_initialization_and_destruction_0ii+0x1ae>
}
 8000bcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bd4:	4299      	cmp	r1, r3
 8000bd6:	d1f3      	bne.n	8000bc0 <_Z41__static_initialization_and_destruction_0ii+0xc>
const GpioInElement sw1_1(SW1_1_GPIO_Port, SW1_1_Pin, config.rotary_inverted);
 8000bd8:	4f82      	ldr	r7, [pc, #520]	; (8000de4 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000be0:	4639      	mov	r1, r7
 8000be2:	4881      	ldr	r0, [pc, #516]	; (8000de8 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8000be4:	f7ff fbd8 	bl	8000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw1_2(SW1_2_GPIO_Port, SW1_2_Pin, config.rotary_inverted);
 8000be8:	2300      	movs	r3, #0
 8000bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bee:	4639      	mov	r1, r7
 8000bf0:	487e      	ldr	r0, [pc, #504]	; (8000dec <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8000bf2:	f7ff fbd1 	bl	8000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw1_3(SW1_3_GPIO_Port, SW1_3_Pin, config.rotary_inverted);
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	487c      	ldr	r0, [pc, #496]	; (8000df0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8000c00:	f7ff fbca 	bl	8000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw1_4(SW1_4_GPIO_Port, SW1_4_Pin, config.rotary_inverted);
 8000c04:	2300      	movs	r3, #0
 8000c06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c0a:	4639      	mov	r1, r7
 8000c0c:	4879      	ldr	r0, [pc, #484]	; (8000df4 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8000c0e:	f7ff fbc3 	bl	8000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw2_1(SW2_1_GPIO_Port, SW2_1_Pin, config.rotary_inverted);
 8000c12:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8000e58 <_Z41__static_initialization_and_destruction_0ii+0x2a4>
 8000c16:	2300      	movs	r3, #0
 8000c18:	2240      	movs	r2, #64	; 0x40
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	4876      	ldr	r0, [pc, #472]	; (8000df8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8000c1e:	f7ff fbbb 	bl	8000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw2_2(SW2_2_GPIO_Port, SW2_2_Pin, config.rotary_inverted);
 8000c22:	2300      	movs	r3, #0
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	4641      	mov	r1, r8
 8000c28:	4874      	ldr	r0, [pc, #464]	; (8000dfc <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8000c2a:	f7ff fbb5 	bl	8000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw2_3(SW2_3_GPIO_Port, SW2_3_Pin, config.rotary_inverted);
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c34:	4641      	mov	r1, r8
 8000c36:	4872      	ldr	r0, [pc, #456]	; (8000e00 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8000c38:	f7ff fbae 	bl	8000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw2_4(SW2_4_GPIO_Port, SW2_4_Pin, config.rotary_inverted);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c42:	4641      	mov	r1, r8
 8000c44:	486f      	ldr	r0, [pc, #444]	; (8000e04 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8000c46:	f7ff fba7 	bl	8000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw3(SW3_GPIO_Port, SW3_Pin, config.buttons_inverted);
 8000c4a:	4e6f      	ldr	r6, [pc, #444]	; (8000e08 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c52:	4641      	mov	r1, r8
 8000c54:	4630      	mov	r0, r6
 8000c56:	f7ff fb9f 	bl	8000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw4(SW4_GPIO_Port, SW4_Pin, config.buttons_inverted);
 8000c5a:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8000e54 <_Z41__static_initialization_and_destruction_0ii+0x2a0>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c64:	4641      	mov	r1, r8
 8000c66:	4658      	mov	r0, fp
 8000c68:	f7ff fb96 	bl	8000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw6(SW6_GPIO_Port, SW6_Pin, config.buttons_inverted);
 8000c6c:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8000e50 <_Z41__static_initialization_and_destruction_0ii+0x29c>
 8000c70:	2300      	movs	r3, #0
 8000c72:	2204      	movs	r2, #4
 8000c74:	4965      	ldr	r1, [pc, #404]	; (8000e0c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8000c76:	4650      	mov	r0, sl
 8000c78:	f7ff fb8e 	bl	8000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw7(SW7_GPIO_Port, SW7_Pin, config.buttons_inverted);
 8000c7c:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8000e4c <_Z41__static_initialization_and_destruction_0ii+0x298>
 8000c80:	2300      	movs	r3, #0
 8000c82:	2202      	movs	r2, #2
 8000c84:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000c88:	4648      	mov	r0, r9
 8000c8a:	f7ff fb85 	bl	8000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw8(SW8_GPIO_Port, SW8_Pin, config.buttons_inverted);
 8000c8e:	2300      	movs	r3, #0
 8000c90:	2204      	movs	r2, #4
 8000c92:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000c96:	485e      	ldr	r0, [pc, #376]	; (8000e10 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8000c98:	f7ff fb7e 	bl	8000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw9(SW9_GPIO_Port, SW9_Pin, config.buttons_inverted);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000ca6:	485b      	ldr	r0, [pc, #364]	; (8000e14 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8000ca8:	f7ff fb76 	bl	8000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw10(SW10_GPIO_Port, SW10_Pin, config.buttons_inverted);
 8000cac:	2300      	movs	r3, #0
 8000cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000cb6:	4858      	ldr	r0, [pc, #352]	; (8000e18 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8000cb8:	f7ff fb6e 	bl	8000398 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioOutElement debug_led_1(ControlLed1_GPIO_Port, ControlLed1_Pin, config.leds_inverted);
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	4639      	mov	r1, r7
 8000cc2:	4856      	ldr	r0, [pc, #344]	; (8000e1c <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8000cc4:	f7ff fb5e 	bl	8000384 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
const GpioOutElement debug_led_2(ControlLed2_GPIO_Port, ControlLed2_Pin, config.leds_inverted);
 8000cc8:	2301      	movs	r3, #1
 8000cca:	2240      	movs	r2, #64	; 0x40
 8000ccc:	4639      	mov	r1, r7
 8000cce:	4854      	ldr	r0, [pc, #336]	; (8000e20 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8000cd0:	f7ff fb58 	bl	8000384 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
const GpioOutElement debug_led_3(ControlLed3_GPIO_Port, ControlLed3_Pin, config.leds_inverted);
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	4639      	mov	r1, r7
 8000cda:	4852      	ldr	r0, [pc, #328]	; (8000e24 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8000cdc:	f7ff fb52 	bl	8000384 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
const GpioOutElement debug_led_4(ControlLed4_GPIO_Port, ControlLed4_Pin, config.leds_inverted);
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	2210      	movs	r2, #16
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	4850      	ldr	r0, [pc, #320]	; (8000e28 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8000ce8:	f7ff fb4c 	bl	8000384 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
        pool_is_shared(pool_is_shared_)
 8000cec:	4b4f      	ldr	r3, [pc, #316]	; (8000e2c <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8000cee:	f103 0214 	add.w	r2, r3, #20
 8000cf2:	601a      	str	r2, [r3, #0]
          next(ETL_NULLPTR)
 8000cf4:	2700      	movs	r7, #0
 8000cf6:	605f      	str	r7, [r3, #4]
 8000cf8:	609f      	str	r7, [r3, #8]
        pool_is_shared(pool_is_shared_)
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	741f      	strb	r7, [r3, #16]
      left.next      = &right;
 8000d00:	1d19      	adds	r1, r3, #4
 8000d02:	6099      	str	r1, [r3, #8]
      right.previous = &left;
 8000d04:	6059      	str	r1, [r3, #4]
      Max_Size(max_size_)
 8000d06:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8000d0a:	6159      	str	r1, [r3, #20]
 8000d0c:	6199      	str	r1, [r3, #24]
 8000d0e:	61df      	str	r7, [r3, #28]
 8000d10:	621f      	str	r7, [r3, #32]
 8000d12:	210c      	movs	r1, #12
 8000d14:	6259      	str	r1, [r3, #36]	; 0x24
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
Rotary left_rotary(rot1_arr);
 8000d18:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8000e5c <_Z41__static_initialization_and_destruction_0ii+0x2a8>
 8000d1c:	4944      	ldr	r1, [pc, #272]	; (8000e30 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8000d1e:	4640      	mov	r0, r8
 8000d20:	f000 f8ac 	bl	8000e7c <_ZN6RotaryC1ERKSt5arrayIPK13GpioInElementLj4EE>
Rotary right_rotary(rot2_arr);
 8000d24:	4943      	ldr	r1, [pc, #268]	; (8000e34 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8000d26:	4844      	ldr	r0, [pc, #272]	; (8000e38 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8000d28:	f000 f8a8 	bl	8000e7c <_ZN6RotaryC1ERKSt5arrayIPK13GpioInElementLj4EE>
{
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	f7ff fb4d 	bl	80003cc <_ZNK13GpioInElement24getStateConstRefForDebugEv>
 8000d32:	4e42      	ldr	r6, [pc, #264]	; (8000e3c <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8000d34:	6030      	str	r0, [r6, #0]
 8000d36:	4658      	mov	r0, fp
 8000d38:	f7ff fb48 	bl	80003cc <_ZNK13GpioInElement24getStateConstRefForDebugEv>
 8000d3c:	6070      	str	r0, [r6, #4]
 8000d3e:	4650      	mov	r0, sl
 8000d40:	f7ff fb44 	bl	80003cc <_ZNK13GpioInElement24getStateConstRefForDebugEv>
 8000d44:	60b0      	str	r0, [r6, #8]
 8000d46:	4648      	mov	r0, r9
 8000d48:	f7ff fb40 	bl	80003cc <_ZNK13GpioInElement24getStateConstRefForDebugEv>
 8000d4c:	60f0      	str	r0, [r6, #12]
 8000d4e:	4640      	mov	r0, r8
 8000d50:	f000 f8ea 	bl	8000f28 <_ZNK6Rotary27getRotationConstRefForDebugEv>
 8000d54:	6130      	str	r0, [r6, #16]
 8000d56:	4838      	ldr	r0, [pc, #224]	; (8000e38 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8000d58:	f000 f8e6 	bl	8000f28 <_ZNK6Rotary27getRotationConstRefForDebugEv>
 8000d5c:	6170      	str	r0, [r6, #20]
 8000d5e:	7637      	strb	r7, [r6, #24]
 8000d60:	e72e      	b.n	8000bc0 <_Z41__static_initialization_and_destruction_0ii+0xc>
    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~list()
    {
      this->initialise();
 8000d62:	4832      	ldr	r0, [pc, #200]	; (8000e2c <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8000d64:	f7ff fec8 	bl	8000af8 <_ZN3etl5ilistIjE10initialiseEv>
		~GpioOutElement() { };
 8000d68:	492f      	ldr	r1, [pc, #188]	; (8000e28 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8000d6a:	4a35      	ldr	r2, [pc, #212]	; (8000e40 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8000d6c:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000d6e:	4b35      	ldr	r3, [pc, #212]	; (8000e44 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8000d70:	600b      	str	r3, [r1, #0]
		~GpioOutElement() { };
 8000d72:	492c      	ldr	r1, [pc, #176]	; (8000e24 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8000d74:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000d76:	600b      	str	r3, [r1, #0]
		~GpioOutElement() { };
 8000d78:	4929      	ldr	r1, [pc, #164]	; (8000e20 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8000d7a:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000d7c:	600b      	str	r3, [r1, #0]
		~GpioOutElement() { };
 8000d7e:	4927      	ldr	r1, [pc, #156]	; (8000e1c <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8000d80:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000d82:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8000d84:	4924      	ldr	r1, [pc, #144]	; (8000e18 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8000d86:	4a30      	ldr	r2, [pc, #192]	; (8000e48 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8000d88:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000d8a:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8000d8c:	4921      	ldr	r1, [pc, #132]	; (8000e14 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8000d8e:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000d90:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8000d92:	491f      	ldr	r1, [pc, #124]	; (8000e10 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8000d94:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000d96:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8000d98:	492c      	ldr	r1, [pc, #176]	; (8000e4c <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8000d9a:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000d9c:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8000d9e:	492c      	ldr	r1, [pc, #176]	; (8000e50 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8000da0:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000da2:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8000da4:	492b      	ldr	r1, [pc, #172]	; (8000e54 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8000da6:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000da8:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8000daa:	4917      	ldr	r1, [pc, #92]	; (8000e08 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8000dac:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000dae:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8000db0:	4914      	ldr	r1, [pc, #80]	; (8000e04 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8000db2:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000db4:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8000db6:	4912      	ldr	r1, [pc, #72]	; (8000e00 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8000db8:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000dba:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8000dbc:	490f      	ldr	r1, [pc, #60]	; (8000dfc <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8000dbe:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000dc0:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8000dc2:	490d      	ldr	r1, [pc, #52]	; (8000df8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8000dc4:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000dc6:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8000dc8:	490a      	ldr	r1, [pc, #40]	; (8000df4 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8000dca:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000dcc:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8000dce:	4908      	ldr	r1, [pc, #32]	; (8000df0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8000dd0:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000dd2:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8000dd4:	4905      	ldr	r1, [pc, #20]	; (8000dec <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8000dd6:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000dd8:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8000dda:	4903      	ldr	r1, [pc, #12]	; (8000de8 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8000ddc:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8000dde:	600b      	str	r3, [r1, #0]
}
 8000de0:	e6f4      	b.n	8000bcc <_Z41__static_initialization_and_destruction_0ii+0x18>
 8000de2:	bf00      	nop
 8000de4:	48000400 	.word	0x48000400
 8000de8:	2000015c 	.word	0x2000015c
 8000dec:	20000170 	.word	0x20000170
 8000df0:	20000184 	.word	0x20000184
 8000df4:	20000198 	.word	0x20000198
 8000df8:	200001ac 	.word	0x200001ac
 8000dfc:	200001c0 	.word	0x200001c0
 8000e00:	200001d4 	.word	0x200001d4
 8000e04:	200001e8 	.word	0x200001e8
 8000e08:	200000d0 	.word	0x200000d0
 8000e0c:	48000c00 	.word	0x48000c00
 8000e10:	20000120 	.word	0x20000120
 8000e14:	20000134 	.word	0x20000134
 8000e18:	20000148 	.word	0x20000148
 8000e1c:	20000090 	.word	0x20000090
 8000e20:	200000a0 	.word	0x200000a0
 8000e24:	200000b0 	.word	0x200000b0
 8000e28:	200000c0 	.word	0x200000c0
 8000e2c:	2000025c 	.word	0x2000025c
 8000e30:	08004858 	.word	0x08004858
 8000e34:	08004868 	.word	0x08004868
 8000e38:	200002a0 	.word	0x200002a0
 8000e3c:	200001fc 	.word	0x200001fc
 8000e40:	08004664 	.word	0x08004664
 8000e44:	08004650 	.word	0x08004650
 8000e48:	08004678 	.word	0x08004678
 8000e4c:	2000010c 	.word	0x2000010c
 8000e50:	200000f8 	.word	0x200000f8
 8000e54:	200000e4 	.word	0x200000e4
 8000e58:	48000800 	.word	0x48000800
 8000e5c:	20000240 	.word	0x20000240

08000e60 <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 8000e60:	b508      	push	{r3, lr}
 8000e62:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e66:	2001      	movs	r0, #1
 8000e68:	f7ff fea4 	bl	8000bb4 <_Z41__static_initialization_and_destruction_0ii>
 8000e6c:	bd08      	pop	{r3, pc}

08000e6e <_GLOBAL__sub_D__ZN8PUTM_CAN3canE>:
 8000e6e:	b508      	push	{r3, lr}
 8000e70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff fe9d 	bl	8000bb4 <_Z41__static_initialization_and_destruction_0ii>
 8000e7a:	bd08      	pop	{r3, pc}

08000e7c <_ZN6RotaryC1ERKSt5arrayIPK13GpioInElementLj4EE>:
 *      Author: pile
 */

#include "rotary.hpp"

Rotary::Rotary(std::array < GpioInElement const* , rotary_pin_count > const &in) : in(in) { }
 8000e7c:	b500      	push	{lr}
 8000e7e:	4684      	mov	ip, r0
 8000e80:	f100 0e04 	add.w	lr, r0, #4
 8000e84:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8000e86:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8cc 3014 	str.w	r3, [ip, #20]
 8000e90:	4660      	mov	r0, ip
 8000e92:	f85d fb04 	ldr.w	pc, [sp], #4

08000e96 <_ZNK6Rotary6handleEv>:

void Rotary::handle() const
{
 8000e96:	b570      	push	{r4, r5, r6, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	4605      	mov	r5, r0
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
 8000e9c:	1d04      	adds	r4, r0, #4
      { return const_iterator(data() + _Nm); }
 8000e9e:	f100 0614 	add.w	r6, r0, #20
 8000ea2:	e004      	b.n	8000eae <_ZNK6Rotary6handleEv+0x18>
	for(auto ptr : in) ptr->handle();
 8000ea4:	f854 0b04 	ldr.w	r0, [r4], #4
 8000ea8:	6803      	ldr	r3, [r0, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4798      	blx	r3
 8000eae:	42b4      	cmp	r4, r6
 8000eb0:	d1f8      	bne.n	8000ea4 <_ZNK6Rotary6handleEv+0xe>

	auto ret = RotationDirection::None;

	std::array< bool, rotary_pin_count > curr_states;
	for(size_t i = 0; i < rotary_pin_count; i++) curr_states[i] = in[i]->isActive();
 8000eb2:	2400      	movs	r4, #0
 8000eb4:	e00a      	b.n	8000ecc <_ZNK6Rotary6handleEv+0x36>
 8000eb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8000eba:	6858      	ldr	r0, [r3, #4]
 8000ebc:	f7ff fa7a 	bl	80003b4 <_ZNK13GpioInElement8isActiveEv>
 8000ec0:	f104 0308 	add.w	r3, r4, #8
 8000ec4:	446b      	add	r3, sp
 8000ec6:	f803 0c04 	strb.w	r0, [r3, #-4]
 8000eca:	3401      	adds	r4, #1
 8000ecc:	2c03      	cmp	r4, #3
 8000ece:	d9f2      	bls.n	8000eb6 <_ZNK6Rotary6handleEv+0x20>

	for(int i = 0; i < int(rotary_pin_count); i++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	e004      	b.n	8000ede <_ZNK6Rotary6handleEv+0x48>
	{
		int im = i == 0 ? rotary_pin_count - 1 : i - 1;
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	e007      	b.n	8000ee8 <_ZNK6Rotary6handleEv+0x52>
		int ip = i == rotary_pin_count - 1 ? 0 : i + 1;
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e008      	b.n	8000eee <_ZNK6Rotary6handleEv+0x58>
	for(int i = 0; i < int(rotary_pin_count); i++)
 8000edc:	3301      	adds	r3, #1
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	dc17      	bgt.n	8000f12 <_ZNK6Rotary6handleEv+0x7c>
		int im = i == 0 ? rotary_pin_count - 1 : i - 1;
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f6      	beq.n	8000ed4 <_ZNK6Rotary6handleEv+0x3e>
 8000ee6:	1e58      	subs	r0, r3, #1
		int ip = i == rotary_pin_count - 1 ? 0 : i + 1;
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d0f5      	beq.n	8000ed8 <_ZNK6Rotary6handleEv+0x42>
 8000eec:	1c59      	adds	r1, r3, #1

		if(curr_states[i] && prev_states[ip])
 8000eee:	f103 0208 	add.w	r2, r3, #8
 8000ef2:	446a      	add	r2, sp
 8000ef4:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 8000ef8:	b112      	cbz	r2, 8000f00 <_ZNK6Rotary6handleEv+0x6a>
 8000efa:	4429      	add	r1, r5
 8000efc:	7d09      	ldrb	r1, [r1, #20]
 8000efe:	b971      	cbnz	r1, 8000f1e <_ZNK6Rotary6handleEv+0x88>
		{
			ret = RotationDirection::Forward;
			break;
		}
		if(curr_states[i] && prev_states[im])
 8000f00:	2a00      	cmp	r2, #0
 8000f02:	d0eb      	beq.n	8000edc <_ZNK6Rotary6handleEv+0x46>
 8000f04:	4428      	add	r0, r5
 8000f06:	7d02      	ldrb	r2, [r0, #20]
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	d0e7      	beq.n	8000edc <_ZNK6Rotary6handleEv+0x46>
		{
			ret = RotationDirection::Backwards;
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	e000      	b.n	8000f14 <_ZNK6Rotary6handleEv+0x7e>
	auto ret = RotationDirection::None;
 8000f12:	2200      	movs	r2, #0
			break;
		}
	}

	this->prev_states = curr_states;
 8000f14:	9b01      	ldr	r3, [sp, #4]
 8000f16:	616b      	str	r3, [r5, #20]
	this->rotation = ret;
 8000f18:	702a      	strb	r2, [r5, #0]
}
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd70      	pop	{r4, r5, r6, pc}
			ret = RotationDirection::Forward;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	e7f8      	b.n	8000f14 <_ZNK6Rotary6handleEv+0x7e>

08000f22 <_ZN6Rotary11getRotationEv>:

RotationDirection Rotary::getRotation()
{
	return this->rotation;
}
 8000f22:	f990 0000 	ldrsb.w	r0, [r0]
 8000f26:	4770      	bx	lr

08000f28 <_ZNK6Rotary27getRotationConstRefForDebugEv>:

RotationDirection const& Rotary::getRotationConstRefForDebug() const
{
	return this->rotation;
}
 8000f28:	4770      	bx	lr
	...

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_MspInit+0x44>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <HAL_MspInit+0x44>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_MspInit+0x44>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_MspInit+0x44>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <HAL_MspInit+0x44>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f54:	6593      	str	r3, [r2, #88]	; 0x58
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_MspInit+0x44>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000

08000f74 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <HAL_CAN_MspInit+0x80>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d129      	bne.n	8000fea <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_CAN_MspInit+0x84>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9a:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <HAL_CAN_MspInit+0x84>)
 8000f9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_CAN_MspInit+0x84>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_CAN_MspInit+0x84>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a11      	ldr	r2, [pc, #68]	; (8000ff8 <HAL_CAN_MspInit+0x84>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_CAN_MspInit+0x84>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fd8:	2309      	movs	r3, #9
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f000 fe13 	bl	8001c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40006400 	.word	0x40006400
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	; 0x30
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800100a:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HAL_InitTick+0xc8>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100e:	4a2d      	ldr	r2, [pc, #180]	; (80010c4 <HAL_InitTick+0xc8>)
 8001010:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001014:	6613      	str	r3, [r2, #96]	; 0x60
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_InitTick+0xc8>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001022:	f107 020c 	add.w	r2, r7, #12
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f001 ff0b 	bl	8002e48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001032:	f001 fef3 	bl	8002e1c <HAL_RCC_GetPCLK2Freq>
 8001036:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103a:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <HAL_InitTick+0xcc>)
 800103c:	fba2 2303 	umull	r2, r3, r2, r3
 8001040:	0c9b      	lsrs	r3, r3, #18
 8001042:	3b01      	subs	r3, #1
 8001044:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_InitTick+0xd0>)
 8001048:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <HAL_InitTick+0xd4>)
 800104a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <HAL_InitTick+0xd0>)
 800104e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001052:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001054:	4a1d      	ldr	r2, [pc, #116]	; (80010cc <HAL_InitTick+0xd0>)
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <HAL_InitTick+0xd0>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <HAL_InitTick+0xd0>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_InitTick+0xd0>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800106c:	4817      	ldr	r0, [pc, #92]	; (80010cc <HAL_InitTick+0xd0>)
 800106e:	f001 ffdd 	bl	800302c <HAL_TIM_Base_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001078:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800107c:	2b00      	cmp	r3, #0
 800107e:	d11b      	bne.n	80010b8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001080:	4812      	ldr	r0, [pc, #72]	; (80010cc <HAL_InitTick+0xd0>)
 8001082:	f002 f835 	bl	80030f0 <HAL_TIM_Base_Start_IT>
 8001086:	4603      	mov	r3, r0
 8001088:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800108c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001090:	2b00      	cmp	r3, #0
 8001092:	d111      	bne.n	80010b8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001094:	2019      	movs	r0, #25
 8001096:	f000 fdad 	bl	8001bf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d808      	bhi.n	80010b2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	2019      	movs	r0, #25
 80010a6:	f000 fd89 	bl	8001bbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <HAL_InitTick+0xd8>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	e002      	b.n	80010b8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3730      	adds	r7, #48	; 0x30
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000
 80010c8:	431bde83 	.word	0x431bde83
 80010cc:	200002b8 	.word	0x200002b8
 80010d0:	40012c00 	.word	0x40012c00
 80010d4:	20000004 	.word	0x20000004

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INIT2_Pin);
 8001132:	2020      	movs	r0, #32
 8001134:	f000 ff48 	bl	8001fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001142:	f002 f845 	bl	80031d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200002b8 	.word	0x200002b8

08001150 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	return 1;
 8001154:	2301      	movs	r3, #1
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_kill>:

int _kill(int pid, int sig)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800116a:	f002 fa53 	bl	8003614 <__errno>
 800116e:	4603      	mov	r3, r0
 8001170:	2216      	movs	r2, #22
 8001172:	601a      	str	r2, [r3, #0]
	return -1;
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_exit>:

void _exit (int status)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ffe7 	bl	8001160 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001192:	e7fe      	b.n	8001192 <_exit+0x12>

08001194 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e00a      	b.n	80011bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011a6:	f3af 8000 	nop.w
 80011aa:	4601      	mov	r1, r0
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	60ba      	str	r2, [r7, #8]
 80011b2:	b2ca      	uxtb	r2, r1
 80011b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbf0      	blt.n	80011a6 <_read+0x12>
	}

return len;
 80011c4:	687b      	ldr	r3, [r7, #4]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e009      	b.n	80011f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	60ba      	str	r2, [r7, #8]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbf1      	blt.n	80011e0 <_write+0x12>
	}
	return len;
 80011fc:	687b      	ldr	r3, [r7, #4]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_close>:

int _close(int file)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	return -1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122e:	605a      	str	r2, [r3, #4]
	return 0;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <_isatty>:

int _isatty(int file)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
	return 1;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	return 0;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001278:	4a14      	ldr	r2, [pc, #80]	; (80012cc <_sbrk+0x5c>)
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <_sbrk+0x60>)
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <_sbrk+0x64>)
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <_sbrk+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	429a      	cmp	r2, r3
 800129e:	d207      	bcs.n	80012b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a0:	f002 f9b8 	bl	8003614 <__errno>
 80012a4:	4603      	mov	r3, r0
 80012a6:	220c      	movs	r2, #12
 80012a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	e009      	b.n	80012c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <_sbrk+0x64>)
 80012c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20050000 	.word	0x20050000
 80012d0:	00000400 	.word	0x00000400
 80012d4:	20000304 	.word	0x20000304
 80012d8:	20000320 	.word	0x20000320

080012dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <SystemInit+0x5c>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e6:	4a14      	ldr	r2, [pc, #80]	; (8001338 <SystemInit+0x5c>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <SystemInit+0x60>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a11      	ldr	r2, [pc, #68]	; (800133c <SystemInit+0x60>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <SystemInit+0x60>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <SystemInit+0x60>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a0d      	ldr	r2, [pc, #52]	; (800133c <SystemInit+0x60>)
 8001308:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800130c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001310:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <SystemInit+0x60>)
 8001314:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001318:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <SystemInit+0x60>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a07      	ldr	r2, [pc, #28]	; (800133c <SystemInit+0x60>)
 8001320:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001324:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <SystemInit+0x60>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00
 800133c:	40021000 	.word	0x40021000

08001340 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001378 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001344:	f7ff ffca 	bl	80012dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001348:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800134a:	e003      	b.n	8001354 <LoopCopyDataInit>

0800134c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800134e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001350:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001352:	3104      	adds	r1, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001354:	480a      	ldr	r0, [pc, #40]	; (8001380 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001358:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800135a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800135c:	d3f6      	bcc.n	800134c <CopyDataInit>
	ldr	r2, =_sbss
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001360:	e002      	b.n	8001368 <LoopFillZerobss>

08001362 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001362:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001364:	f842 3b04 	str.w	r3, [r2], #4

08001368 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <LoopForever+0x16>)
	cmp	r2, r3
 800136a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800136c:	d3f9      	bcc.n	8001362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136e:	f002 f969 	bl	8003644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001372:	f7ff f9bd 	bl	80006f0 <main>

08001376 <LoopForever>:

LoopForever:
    b LoopForever
 8001376:	e7fe      	b.n	8001376 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001378:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 800137c:	080049bc 	.word	0x080049bc
	ldr	r0, =_sdata
 8001380:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001384:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001388:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800138c:	2000031c 	.word	0x2000031c

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>

08001392 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f000 fc02 	bl	8001ba6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a2:	200f      	movs	r0, #15
 80013a4:	f7ff fe2a 	bl	8000ffc <HAL_InitTick>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	e001      	b.n	80013b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013b4:	f7ff fdba 	bl	8000f2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	20000308 	.word	0x20000308

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000308 	.word	0x20000308

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_Delay+0x44>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffde 	bl	80013ec <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008

0800144c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e0ed      	b.n	800163a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fd82 	bl	8000f74 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0201 	orr.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001480:	f7ff ffb4 	bl	80013ec <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001486:	e012      	b.n	80014ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001488:	f7ff ffb0 	bl	80013ec <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b0a      	cmp	r3, #10
 8001494:	d90b      	bls.n	80014ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2205      	movs	r2, #5
 80014a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e0c5      	b.n	800163a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0e5      	beq.n	8001488 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0202 	bic.w	r2, r2, #2
 80014ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014cc:	f7ff ff8e 	bl	80013ec <HAL_GetTick>
 80014d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014d2:	e012      	b.n	80014fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014d4:	f7ff ff8a 	bl	80013ec <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b0a      	cmp	r3, #10
 80014e0:	d90b      	bls.n	80014fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2205      	movs	r2, #5
 80014f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e09f      	b.n	800163a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e5      	bne.n	80014d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7e1b      	ldrb	r3, [r3, #24]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d108      	bne.n	8001522 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e007      	b.n	8001532 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7e5b      	ldrb	r3, [r3, #25]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d108      	bne.n	800154c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e007      	b.n	800155c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800155a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7e9b      	ldrb	r3, [r3, #26]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d108      	bne.n	8001576 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0220 	orr.w	r2, r2, #32
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	e007      	b.n	8001586 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0220 	bic.w	r2, r2, #32
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7edb      	ldrb	r3, [r3, #27]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d108      	bne.n	80015a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0210 	bic.w	r2, r2, #16
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e007      	b.n	80015b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0210 	orr.w	r2, r2, #16
 80015ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7f1b      	ldrb	r3, [r3, #28]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d108      	bne.n	80015ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0208 	orr.w	r2, r2, #8
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e007      	b.n	80015da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0208 	bic.w	r2, r2, #8
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7f5b      	ldrb	r3, [r3, #29]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d108      	bne.n	80015f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0204 	orr.w	r2, r2, #4
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e007      	b.n	8001604 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0204 	bic.w	r2, r2, #4
 8001602:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	ea42 0103 	orr.w	r1, r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001642:	b480      	push	{r7}
 8001644:	b087      	sub	sp, #28
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001658:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800165a:	7cfb      	ldrb	r3, [r7, #19]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d003      	beq.n	8001668 <HAL_CAN_ConfigFilter+0x26>
 8001660:	7cfb      	ldrb	r3, [r7, #19]
 8001662:	2b02      	cmp	r3, #2
 8001664:	f040 80aa 	bne.w	80017bc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800166e:	f043 0201 	orr.w	r2, r3, #1
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	f003 031f 	and.w	r3, r3, #31
 8001680:	2201      	movs	r2, #1
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	43db      	mvns	r3, r3
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d123      	bne.n	80016ea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	401a      	ands	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3248      	adds	r2, #72	; 0x48
 80016ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016e0:	6979      	ldr	r1, [r7, #20]
 80016e2:	3348      	adds	r3, #72	; 0x48
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	440b      	add	r3, r1
 80016e8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d122      	bne.n	8001738 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001712:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3248      	adds	r2, #72	; 0x48
 8001718:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800172c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800172e:	6979      	ldr	r1, [r7, #20]
 8001730:	3348      	adds	r3, #72	; 0x48
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d109      	bne.n	8001754 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	43db      	mvns	r3, r3
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001752:	e007      	b.n	8001764 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	431a      	orrs	r2, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d109      	bne.n	8001780 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	43db      	mvns	r3, r3
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800177e:	e007      	b.n	8001790 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	431a      	orrs	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d107      	bne.n	80017a8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	431a      	orrs	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017ae:	f023 0201 	bic.w	r2, r3, #1
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	e006      	b.n	80017ca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
  }
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	371c      	adds	r7, #28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d12e      	bne.n	8001848 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2202      	movs	r2, #2
 80017ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0201 	bic.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001802:	f7ff fdf3 	bl	80013ec <HAL_GetTick>
 8001806:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001808:	e012      	b.n	8001830 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800180a:	f7ff fdef 	bl	80013ec <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b0a      	cmp	r3, #10
 8001816:	d90b      	bls.n	8001830 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2205      	movs	r2, #5
 8001828:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e012      	b.n	8001856 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1e5      	bne.n	800180a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	e006      	b.n	8001856 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
  }
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800185e:	b480      	push	{r7}
 8001860:	b089      	sub	sp, #36	; 0x24
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001872:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800187c:	7ffb      	ldrb	r3, [r7, #31]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d003      	beq.n	800188a <HAL_CAN_AddTxMessage+0x2c>
 8001882:	7ffb      	ldrb	r3, [r7, #31]
 8001884:	2b02      	cmp	r3, #2
 8001886:	f040 80ad 	bne.w	80019e4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10a      	bne.n	80018aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 8095 	beq.w	80019d4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	0e1b      	lsrs	r3, r3, #24
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80018b4:	2201      	movs	r2, #1
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	409a      	lsls	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10d      	bne.n	80018e2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018d0:	68f9      	ldr	r1, [r7, #12]
 80018d2:	6809      	ldr	r1, [r1, #0]
 80018d4:	431a      	orrs	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3318      	adds	r3, #24
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	440b      	add	r3, r1
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	e00f      	b.n	8001902 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018ec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018f2:	68f9      	ldr	r1, [r7, #12]
 80018f4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80018f6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3318      	adds	r3, #24
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	440b      	add	r3, r1
 8001900:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6819      	ldr	r1, [r3, #0]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3318      	adds	r3, #24
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	440b      	add	r3, r1
 8001912:	3304      	adds	r3, #4
 8001914:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	7d1b      	ldrb	r3, [r3, #20]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d111      	bne.n	8001942 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3318      	adds	r3, #24
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	4413      	add	r3, r2
 800192a:	3304      	adds	r3, #4
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	6811      	ldr	r1, [r2, #0]
 8001932:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3318      	adds	r3, #24
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	440b      	add	r3, r1
 800193e:	3304      	adds	r3, #4
 8001940:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3307      	adds	r3, #7
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	061a      	lsls	r2, r3, #24
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3306      	adds	r3, #6
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	041b      	lsls	r3, r3, #16
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3305      	adds	r3, #5
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	4313      	orrs	r3, r2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	3204      	adds	r2, #4
 8001962:	7812      	ldrb	r2, [r2, #0]
 8001964:	4610      	mov	r0, r2
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	6811      	ldr	r1, [r2, #0]
 800196a:	ea43 0200 	orr.w	r2, r3, r0
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	440b      	add	r3, r1
 8001974:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001978:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3303      	adds	r3, #3
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	061a      	lsls	r2, r3, #24
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3302      	adds	r3, #2
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	041b      	lsls	r3, r3, #16
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3301      	adds	r3, #1
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	4313      	orrs	r3, r2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	7812      	ldrb	r2, [r2, #0]
 800199a:	4610      	mov	r0, r2
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	6811      	ldr	r1, [r2, #0]
 80019a0:	ea43 0200 	orr.w	r2, r3, r0
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	440b      	add	r3, r1
 80019aa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80019ae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3318      	adds	r3, #24
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	4413      	add	r3, r2
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	6811      	ldr	r1, [r2, #0]
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3318      	adds	r3, #24
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	440b      	add	r3, r1
 80019ce:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e00e      	b.n	80019f2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e006      	b.n	80019f2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
  }
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	; 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d002      	beq.n	8001a1c <HAL_CAN_ActivateNotification+0x1e>
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d109      	bne.n	8001a30 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6959      	ldr	r1, [r3, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e006      	b.n	8001a3e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
  }
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <__NVIC_EnableIRQ+0x38>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	; (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
         );
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ff4c 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bce:	f7ff ff61 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001bd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	68b9      	ldr	r1, [r7, #8]
 8001bd8:	6978      	ldr	r0, [r7, #20]
 8001bda:	f7ff ffb1 	bl	8001b40 <NVIC_EncodePriority>
 8001bde:	4602      	mov	r2, r0
 8001be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be4:	4611      	mov	r1, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff80 	bl	8001aec <__NVIC_SetPriority>
}
 8001bec:	bf00      	nop
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff54 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1e:	e166      	b.n	8001eee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2101      	movs	r1, #1
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 8158 	beq.w	8001ee8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d005      	beq.n	8001c50 <HAL_GPIO_Init+0x40>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d130      	bne.n	8001cb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c86:	2201      	movs	r2, #1
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	f003 0201 	and.w	r2, r3, #1
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d017      	beq.n	8001cee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	2203      	movs	r2, #3
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d123      	bne.n	8001d42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	08da      	lsrs	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3208      	adds	r2, #8
 8001d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	220f      	movs	r2, #15
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	08da      	lsrs	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3208      	adds	r2, #8
 8001d3c:	6939      	ldr	r1, [r7, #16]
 8001d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0203 	and.w	r2, r3, #3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80b2 	beq.w	8001ee8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d84:	4b61      	ldr	r3, [pc, #388]	; (8001f0c <HAL_GPIO_Init+0x2fc>)
 8001d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d88:	4a60      	ldr	r2, [pc, #384]	; (8001f0c <HAL_GPIO_Init+0x2fc>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d90:	4b5e      	ldr	r3, [pc, #376]	; (8001f0c <HAL_GPIO_Init+0x2fc>)
 8001d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d9c:	4a5c      	ldr	r2, [pc, #368]	; (8001f10 <HAL_GPIO_Init+0x300>)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	3302      	adds	r3, #2
 8001da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	220f      	movs	r2, #15
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dc6:	d02b      	beq.n	8001e20 <HAL_GPIO_Init+0x210>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_GPIO_Init+0x304>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d025      	beq.n	8001e1c <HAL_GPIO_Init+0x20c>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a51      	ldr	r2, [pc, #324]	; (8001f18 <HAL_GPIO_Init+0x308>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d01f      	beq.n	8001e18 <HAL_GPIO_Init+0x208>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a50      	ldr	r2, [pc, #320]	; (8001f1c <HAL_GPIO_Init+0x30c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d019      	beq.n	8001e14 <HAL_GPIO_Init+0x204>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a4f      	ldr	r2, [pc, #316]	; (8001f20 <HAL_GPIO_Init+0x310>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <HAL_GPIO_Init+0x200>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a4e      	ldr	r2, [pc, #312]	; (8001f24 <HAL_GPIO_Init+0x314>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d00d      	beq.n	8001e0c <HAL_GPIO_Init+0x1fc>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a4d      	ldr	r2, [pc, #308]	; (8001f28 <HAL_GPIO_Init+0x318>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d007      	beq.n	8001e08 <HAL_GPIO_Init+0x1f8>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a4c      	ldr	r2, [pc, #304]	; (8001f2c <HAL_GPIO_Init+0x31c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d101      	bne.n	8001e04 <HAL_GPIO_Init+0x1f4>
 8001e00:	2307      	movs	r3, #7
 8001e02:	e00e      	b.n	8001e22 <HAL_GPIO_Init+0x212>
 8001e04:	2308      	movs	r3, #8
 8001e06:	e00c      	b.n	8001e22 <HAL_GPIO_Init+0x212>
 8001e08:	2306      	movs	r3, #6
 8001e0a:	e00a      	b.n	8001e22 <HAL_GPIO_Init+0x212>
 8001e0c:	2305      	movs	r3, #5
 8001e0e:	e008      	b.n	8001e22 <HAL_GPIO_Init+0x212>
 8001e10:	2304      	movs	r3, #4
 8001e12:	e006      	b.n	8001e22 <HAL_GPIO_Init+0x212>
 8001e14:	2303      	movs	r3, #3
 8001e16:	e004      	b.n	8001e22 <HAL_GPIO_Init+0x212>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e002      	b.n	8001e22 <HAL_GPIO_Init+0x212>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_GPIO_Init+0x212>
 8001e20:	2300      	movs	r3, #0
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	f002 0203 	and.w	r2, r2, #3
 8001e28:	0092      	lsls	r2, r2, #2
 8001e2a:	4093      	lsls	r3, r2
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e32:	4937      	ldr	r1, [pc, #220]	; (8001f10 <HAL_GPIO_Init+0x300>)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e40:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <HAL_GPIO_Init+0x320>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e64:	4a32      	ldr	r2, [pc, #200]	; (8001f30 <HAL_GPIO_Init+0x320>)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e6a:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <HAL_GPIO_Init+0x320>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e8e:	4a28      	ldr	r2, [pc, #160]	; (8001f30 <HAL_GPIO_Init+0x320>)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e94:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <HAL_GPIO_Init+0x320>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001eb8:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_GPIO_Init+0x320>)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <HAL_GPIO_Init+0x320>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ee2:	4a13      	ldr	r2, [pc, #76]	; (8001f30 <HAL_GPIO_Init+0x320>)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3301      	adds	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f47f ae91 	bne.w	8001c20 <HAL_GPIO_Init+0x10>
  }
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	371c      	adds	r7, #28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40010000 	.word	0x40010000
 8001f14:	48000400 	.word	0x48000400
 8001f18:	48000800 	.word	0x48000800
 8001f1c:	48000c00 	.word	0x48000c00
 8001f20:	48001000 	.word	0x48001000
 8001f24:	48001400 	.word	0x48001400
 8001f28:	48001800 	.word	0x48001800
 8001f2c:	48001c00 	.word	0x48001c00
 8001f30:	40010400 	.word	0x40010400

08001f34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e001      	b.n	8001f56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
 8001f70:	4613      	mov	r3, r2
 8001f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4013      	ands	r3, r2
 8001fac:	041a      	lsls	r2, r3, #16
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43d9      	mvns	r1, r3
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	400b      	ands	r3, r1
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	619a      	str	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d006      	beq.n	8001fec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fde:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fabe 	bl	8000568 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40010400 	.word	0x40010400

08001ff8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002008:	d102      	bne.n	8002010 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800200a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200e:	e00b      	b.n	8002028 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800201e:	d102      	bne.n	8002026 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002024:	e000      	b.n	8002028 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002026:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40007000 	.word	0x40007000

08002038 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d141      	bne.n	80020ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002046:	4b4b      	ldr	r3, [pc, #300]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002052:	d131      	bne.n	80020b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002054:	4b47      	ldr	r3, [pc, #284]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800205a:	4a46      	ldr	r2, [pc, #280]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002060:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002064:	4b43      	ldr	r3, [pc, #268]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800206c:	4a41      	ldr	r2, [pc, #260]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002072:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002074:	4b40      	ldr	r3, [pc, #256]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2232      	movs	r2, #50	; 0x32
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	4a3f      	ldr	r2, [pc, #252]	; (800217c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	0c9b      	lsrs	r3, r3, #18
 8002086:	3301      	adds	r3, #1
 8002088:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800208a:	e002      	b.n	8002092 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3b01      	subs	r3, #1
 8002090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002092:	4b38      	ldr	r3, [pc, #224]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209e:	d102      	bne.n	80020a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f2      	bne.n	800208c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020a6:	4b33      	ldr	r3, [pc, #204]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b2:	d158      	bne.n	8002166 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e057      	b.n	8002168 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020b8:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020be:	4a2d      	ldr	r2, [pc, #180]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020c8:	e04d      	b.n	8002166 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d0:	d141      	bne.n	8002156 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020de:	d131      	bne.n	8002144 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020e6:	4a23      	ldr	r2, [pc, #140]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f0:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020f8:	4a1e      	ldr	r2, [pc, #120]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2232      	movs	r2, #50	; 0x32
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	4a1c      	ldr	r2, [pc, #112]	; (800217c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800210c:	fba2 2303 	umull	r2, r3, r2, r3
 8002110:	0c9b      	lsrs	r3, r3, #18
 8002112:	3301      	adds	r3, #1
 8002114:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002116:	e002      	b.n	800211e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	3b01      	subs	r3, #1
 800211c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212a:	d102      	bne.n	8002132 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f2      	bne.n	8002118 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800213e:	d112      	bne.n	8002166 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e011      	b.n	8002168 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002154:	e007      	b.n	8002166 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800215e:	4a05      	ldr	r2, [pc, #20]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002160:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002164:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	40007000 	.word	0x40007000
 8002178:	20000000 	.word	0x20000000
 800217c:	431bde83 	.word	0x431bde83

08002180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d102      	bne.n	8002194 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	f000 bc68 	b.w	8002a64 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002194:	4b97      	ldr	r3, [pc, #604]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800219e:	4b95      	ldr	r3, [pc, #596]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80e6 	beq.w	8002382 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <HAL_RCC_OscConfig+0x4c>
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	f040 808d 	bne.w	80022de <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	f040 8089 	bne.w	80022de <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021cc:	4b89      	ldr	r3, [pc, #548]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d006      	beq.n	80021e6 <HAL_RCC_OscConfig+0x66>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	f000 bc3f 	b.w	8002a64 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ea:	4b82      	ldr	r3, [pc, #520]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <HAL_RCC_OscConfig+0x80>
 80021f6:	4b7f      	ldr	r3, [pc, #508]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fe:	e005      	b.n	800220c <HAL_RCC_OscConfig+0x8c>
 8002200:	4b7c      	ldr	r3, [pc, #496]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800220c:	4293      	cmp	r3, r2
 800220e:	d224      	bcs.n	800225a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fe49 	bl	8002eac <RCC_SetFlashLatencyFromMSIRange>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	f000 bc1f 	b.w	8002a64 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002226:	4b73      	ldr	r3, [pc, #460]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a72      	ldr	r2, [pc, #456]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 800222c:	f043 0308 	orr.w	r3, r3, #8
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b70      	ldr	r3, [pc, #448]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	496d      	ldr	r1, [pc, #436]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002244:	4b6b      	ldr	r3, [pc, #428]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	4968      	ldr	r1, [pc, #416]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
 8002258:	e025      	b.n	80022a6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800225a:	4b66      	ldr	r3, [pc, #408]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a65      	ldr	r2, [pc, #404]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002260:	f043 0308 	orr.w	r3, r3, #8
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b63      	ldr	r3, [pc, #396]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	4960      	ldr	r1, [pc, #384]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002278:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	495b      	ldr	r1, [pc, #364]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	4618      	mov	r0, r3
 8002298:	f000 fe08 	bl	8002eac <RCC_SetFlashLatencyFromMSIRange>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e3de      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022a6:	f000 fd21 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 80022aa:	4602      	mov	r2, r0
 80022ac:	4b51      	ldr	r3, [pc, #324]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	4950      	ldr	r1, [pc, #320]	; (80023f8 <HAL_RCC_OscConfig+0x278>)
 80022b8:	5ccb      	ldrb	r3, [r1, r3]
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	fa22 f303 	lsr.w	r3, r2, r3
 80022c2:	4a4e      	ldr	r2, [pc, #312]	; (80023fc <HAL_RCC_OscConfig+0x27c>)
 80022c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022c6:	4b4e      	ldr	r3, [pc, #312]	; (8002400 <HAL_RCC_OscConfig+0x280>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fe96 	bl	8000ffc <HAL_InitTick>
 80022d0:	4603      	mov	r3, r0
 80022d2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d052      	beq.n	8002380 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80022da:	7dfb      	ldrb	r3, [r7, #23]
 80022dc:	e3c2      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d032      	beq.n	800234c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022e6:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a42      	ldr	r2, [pc, #264]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022f2:	f7ff f87b 	bl	80013ec <HAL_GetTick>
 80022f6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022fa:	f7ff f877 	bl	80013ec <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e3ab      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800230c:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002318:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a35      	ldr	r2, [pc, #212]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 800231e:	f043 0308 	orr.w	r3, r3, #8
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	4930      	ldr	r1, [pc, #192]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002336:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	492b      	ldr	r1, [pc, #172]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]
 800234a:	e01a      	b.n	8002382 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800234c:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a28      	ldr	r2, [pc, #160]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002352:	f023 0301 	bic.w	r3, r3, #1
 8002356:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002358:	f7ff f848 	bl	80013ec <HAL_GetTick>
 800235c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002360:	f7ff f844 	bl	80013ec <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e378      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x1e0>
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002380:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d073      	beq.n	8002476 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	2b08      	cmp	r3, #8
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_OscConfig+0x220>
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	d10e      	bne.n	80023b8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d10b      	bne.n	80023b8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d063      	beq.n	8002474 <HAL_RCC_OscConfig+0x2f4>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d15f      	bne.n	8002474 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e355      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c0:	d106      	bne.n	80023d0 <HAL_RCC_OscConfig+0x250>
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a0b      	ldr	r2, [pc, #44]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e025      	b.n	800241c <HAL_RCC_OscConfig+0x29c>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d8:	d114      	bne.n	8002404 <HAL_RCC_OscConfig+0x284>
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80023e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a02      	ldr	r2, [pc, #8]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e013      	b.n	800241c <HAL_RCC_OscConfig+0x29c>
 80023f4:	40021000 	.word	0x40021000
 80023f8:	08004890 	.word	0x08004890
 80023fc:	20000000 	.word	0x20000000
 8002400:	20000004 	.word	0x20000004
 8002404:	4b8f      	ldr	r3, [pc, #572]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a8e      	ldr	r2, [pc, #568]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b8c      	ldr	r3, [pc, #560]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a8b      	ldr	r2, [pc, #556]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d013      	beq.n	800244c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe ffe2 	bl	80013ec <HAL_GetTick>
 8002428:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7fe ffde 	bl	80013ec <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e312      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243e:	4b81      	ldr	r3, [pc, #516]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x2ac>
 800244a:	e014      	b.n	8002476 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7fe ffce 	bl	80013ec <HAL_GetTick>
 8002450:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002454:	f7fe ffca 	bl	80013ec <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e2fe      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002466:	4b77      	ldr	r3, [pc, #476]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x2d4>
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d060      	beq.n	8002544 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	2b04      	cmp	r3, #4
 8002486:	d005      	beq.n	8002494 <HAL_RCC_OscConfig+0x314>
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	2b0c      	cmp	r3, #12
 800248c:	d119      	bne.n	80024c2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d116      	bne.n	80024c2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002494:	4b6b      	ldr	r3, [pc, #428]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_OscConfig+0x32c>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e2db      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ac:	4b65      	ldr	r3, [pc, #404]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	061b      	lsls	r3, r3, #24
 80024ba:	4962      	ldr	r1, [pc, #392]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c0:	e040      	b.n	8002544 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d023      	beq.n	8002512 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ca:	4b5e      	ldr	r3, [pc, #376]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a5d      	ldr	r2, [pc, #372]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7fe ff89 	bl	80013ec <HAL_GetTick>
 80024da:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024de:	f7fe ff85 	bl	80013ec <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e2b9      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f0:	4b54      	ldr	r3, [pc, #336]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b51      	ldr	r3, [pc, #324]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	494e      	ldr	r1, [pc, #312]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
 8002510:	e018      	b.n	8002544 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002512:	4b4c      	ldr	r3, [pc, #304]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a4b      	ldr	r2, [pc, #300]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800251c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7fe ff65 	bl	80013ec <HAL_GetTick>
 8002522:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002526:	f7fe ff61 	bl	80013ec <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e295      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002538:	4b42      	ldr	r3, [pc, #264]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f0      	bne.n	8002526 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8082 	beq.w	8002656 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d05f      	beq.n	800261a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800255a:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002560:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	429a      	cmp	r2, r3
 800256e:	d037      	beq.n	80025e0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d006      	beq.n	8002588 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e26d      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01b      	beq.n	80025ca <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002592:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002598:	4a2a      	ldr	r2, [pc, #168]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025a2:	f7fe ff23 	bl	80013ec <HAL_GetTick>
 80025a6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025aa:	f7fe ff1f 	bl	80013ec <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b11      	cmp	r3, #17
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e253      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025bc:	4b21      	ldr	r3, [pc, #132]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ef      	bne.n	80025aa <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d0:	f023 0210 	bic.w	r2, r3, #16
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	491a      	ldr	r1, [pc, #104]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e6:	4a17      	ldr	r2, [pc, #92]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7fe fefc 	bl	80013ec <HAL_GetTick>
 80025f4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f8:	f7fe fef8 	bl	80013ec <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b11      	cmp	r3, #17
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e22c      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ef      	beq.n	80025f8 <HAL_RCC_OscConfig+0x478>
 8002618:	e01d      	b.n	8002656 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002620:	4a08      	ldr	r2, [pc, #32]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7fe fedf 	bl	80013ec <HAL_GetTick>
 800262e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002632:	f7fe fedb 	bl	80013ec <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b11      	cmp	r3, #17
 800263e:	d903      	bls.n	8002648 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e20f      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
 8002644:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002648:	4b83      	ldr	r3, [pc, #524]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 800264a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ed      	bne.n	8002632 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80bd 	beq.w	80027de <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800266a:	4b7b      	ldr	r3, [pc, #492]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10e      	bne.n	8002694 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	4b78      	ldr	r3, [pc, #480]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	4a77      	ldr	r2, [pc, #476]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	6593      	str	r3, [r2, #88]	; 0x58
 8002682:	4b75      	ldr	r3, [pc, #468]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800268e:	2301      	movs	r3, #1
 8002690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002694:	4b71      	ldr	r3, [pc, #452]	; (800285c <HAL_RCC_OscConfig+0x6dc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d118      	bne.n	80026d2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a0:	4b6e      	ldr	r3, [pc, #440]	; (800285c <HAL_RCC_OscConfig+0x6dc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a6d      	ldr	r2, [pc, #436]	; (800285c <HAL_RCC_OscConfig+0x6dc>)
 80026a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ac:	f7fe fe9e 	bl	80013ec <HAL_GetTick>
 80026b0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b4:	f7fe fe9a 	bl	80013ec <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1ce      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c6:	4b65      	ldr	r3, [pc, #404]	; (800285c <HAL_RCC_OscConfig+0x6dc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d02c      	beq.n	8002738 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80026de:	4b5e      	ldr	r3, [pc, #376]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f0:	4959      	ldr	r1, [pc, #356]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d010      	beq.n	8002726 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002704:	4b54      	ldr	r3, [pc, #336]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	4a53      	ldr	r2, [pc, #332]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 800270c:	f043 0304 	orr.w	r3, r3, #4
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002714:	4b50      	ldr	r3, [pc, #320]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	4a4f      	ldr	r2, [pc, #316]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002724:	e018      	b.n	8002758 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002726:	4b4c      	ldr	r3, [pc, #304]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272c:	4a4a      	ldr	r2, [pc, #296]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002736:	e00f      	b.n	8002758 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002738:	4b47      	ldr	r3, [pc, #284]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273e:	4a46      	ldr	r2, [pc, #280]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002748:	4b43      	ldr	r3, [pc, #268]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274e:	4a42      	ldr	r2, [pc, #264]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d016      	beq.n	800278e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7fe fe44 	bl	80013ec <HAL_GetTick>
 8002764:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002766:	e00a      	b.n	800277e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7fe fe40 	bl	80013ec <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	; 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e172      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277e:	4b36      	ldr	r3, [pc, #216]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 8002780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0ed      	beq.n	8002768 <HAL_RCC_OscConfig+0x5e8>
 800278c:	e01d      	b.n	80027ca <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278e:	f7fe fe2d 	bl	80013ec <HAL_GetTick>
 8002792:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002794:	e00a      	b.n	80027ac <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002796:	f7fe fe29 	bl	80013ec <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e15b      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1ed      	bne.n	8002796 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80027ba:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c0:	4a25      	ldr	r2, [pc, #148]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 80027c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d2:	4b21      	ldr	r3, [pc, #132]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	4a20      	ldr	r2, [pc, #128]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 80027d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d041      	beq.n	800286e <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01c      	beq.n	800282c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027f2:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 80027f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027f8:	4a17      	ldr	r2, [pc, #92]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7fe fdf3 	bl	80013ec <HAL_GetTick>
 8002806:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800280a:	f7fe fdef 	bl	80013ec <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e123      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800281c:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 800281e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0ef      	beq.n	800280a <HAL_RCC_OscConfig+0x68a>
 800282a:	e020      	b.n	800286e <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 800282e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002832:	4a09      	ldr	r2, [pc, #36]	; (8002858 <HAL_RCC_OscConfig+0x6d8>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283c:	f7fe fdd6 	bl	80013ec <HAL_GetTick>
 8002840:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002842:	e00d      	b.n	8002860 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002844:	f7fe fdd2 	bl	80013ec <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d906      	bls.n	8002860 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e106      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002860:	4b82      	ldr	r3, [pc, #520]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 8002862:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1ea      	bne.n	8002844 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80f5 	beq.w	8002a62 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	2b02      	cmp	r3, #2
 800287e:	f040 80cb 	bne.w	8002a18 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002882:	4b7a      	ldr	r3, [pc, #488]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f003 0203 	and.w	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	429a      	cmp	r2, r3
 8002894:	d12c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a0:	3b01      	subs	r3, #1
 80028a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d123      	bne.n	80028f0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d11b      	bne.n	80028f0 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d113      	bne.n	80028f0 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	3b01      	subs	r3, #1
 80028d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d109      	bne.n	80028f0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	3b01      	subs	r3, #1
 80028ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d06d      	beq.n	80029cc <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d068      	beq.n	80029c8 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028f6:	4b5d      	ldr	r3, [pc, #372]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d105      	bne.n	800290e <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002902:	4b5a      	ldr	r3, [pc, #360]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e0a8      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002912:	4b56      	ldr	r3, [pc, #344]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a55      	ldr	r2, [pc, #340]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 8002918:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800291c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800291e:	f7fe fd65 	bl	80013ec <HAL_GetTick>
 8002922:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002926:	f7fe fd61 	bl	80013ec <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e095      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002938:	4b4c      	ldr	r3, [pc, #304]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002944:	4b49      	ldr	r3, [pc, #292]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	4b49      	ldr	r3, [pc, #292]	; (8002a70 <HAL_RCC_OscConfig+0x8f0>)
 800294a:	4013      	ands	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002954:	3a01      	subs	r2, #1
 8002956:	0112      	lsls	r2, r2, #4
 8002958:	4311      	orrs	r1, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800295e:	0212      	lsls	r2, r2, #8
 8002960:	4311      	orrs	r1, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002966:	0852      	lsrs	r2, r2, #1
 8002968:	3a01      	subs	r2, #1
 800296a:	0552      	lsls	r2, r2, #21
 800296c:	4311      	orrs	r1, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002972:	0852      	lsrs	r2, r2, #1
 8002974:	3a01      	subs	r2, #1
 8002976:	0652      	lsls	r2, r2, #25
 8002978:	4311      	orrs	r1, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800297e:	06d2      	lsls	r2, r2, #27
 8002980:	430a      	orrs	r2, r1
 8002982:	493a      	ldr	r1, [pc, #232]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 8002984:	4313      	orrs	r3, r2
 8002986:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002988:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a37      	ldr	r2, [pc, #220]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 800298e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002992:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002994:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4a34      	ldr	r2, [pc, #208]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 800299a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029a0:	f7fe fd24 	bl	80013ec <HAL_GetTick>
 80029a4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a8:	f7fe fd20 	bl	80013ec <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e054      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ba:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029c6:	e04c      	b.n	8002a62 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e04b      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029cc:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d144      	bne.n	8002a62 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029d8:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a23      	ldr	r2, [pc, #140]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 80029de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029e4:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4a20      	ldr	r2, [pc, #128]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 80029ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029f0:	f7fe fcfc 	bl	80013ec <HAL_GetTick>
 80029f4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f8:	f7fe fcf8 	bl	80013ec <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e02c      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a0a:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x878>
 8002a16:	e024      	b.n	8002a62 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d01f      	beq.n	8002a5e <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 8002a24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fcdf 	bl	80013ec <HAL_GetTick>
 8002a2e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe fcdb 	bl	80013ec <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e00f      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	4905      	ldr	r1, [pc, #20]	; (8002a6c <HAL_RCC_OscConfig+0x8ec>)
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <HAL_RCC_OscConfig+0x8f4>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60cb      	str	r3, [r1, #12]
 8002a5c:	e001      	b.n	8002a62 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3728      	adds	r7, #40	; 0x28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	019d800c 	.word	0x019d800c
 8002a74:	feeefffc 	.word	0xfeeefffc

08002a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e11d      	b.n	8002ccc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a90:	4b90      	ldr	r3, [pc, #576]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d910      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b8d      	ldr	r3, [pc, #564]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 020f 	bic.w	r2, r3, #15
 8002aa6:	498b      	ldr	r1, [pc, #556]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aae:	4b89      	ldr	r3, [pc, #548]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e105      	b.n	8002ccc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d010      	beq.n	8002aee <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	4b81      	ldr	r3, [pc, #516]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d908      	bls.n	8002aee <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002adc:	4b7e      	ldr	r3, [pc, #504]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	497b      	ldr	r1, [pc, #492]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d079      	beq.n	8002bee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d11e      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b02:	4b75      	ldr	r3, [pc, #468]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0dc      	b.n	8002ccc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002b12:	f000 fa25 	bl	8002f60 <RCC_GetSysClockFreqFromPLLSource>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4a70      	ldr	r2, [pc, #448]	; (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d946      	bls.n	8002bac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002b1e:	4b6e      	ldr	r3, [pc, #440]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d140      	bne.n	8002bac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b2a:	4b6b      	ldr	r3, [pc, #428]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b32:	4a69      	ldr	r2, [pc, #420]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	e035      	b.n	8002bac <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b48:	4b63      	ldr	r3, [pc, #396]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d115      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0b9      	b.n	8002ccc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d107      	bne.n	8002b70 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b60:	4b5d      	ldr	r3, [pc, #372]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d109      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0ad      	b.n	8002ccc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0a5      	b.n	8002ccc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002b80:	f000 f8b4 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4a55      	ldr	r2, [pc, #340]	; (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d90f      	bls.n	8002bac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002b8c:	4b52      	ldr	r3, [pc, #328]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d109      	bne.n	8002bac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b98:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ba0:	4a4d      	ldr	r2, [pc, #308]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bac:	4b4a      	ldr	r3, [pc, #296]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f023 0203 	bic.w	r2, r3, #3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4947      	ldr	r1, [pc, #284]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bbe:	f7fe fc15 	bl	80013ec <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc6:	f7fe fc11 	bl	80013ec <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e077      	b.n	8002ccc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bdc:	4b3e      	ldr	r3, [pc, #248]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 020c 	and.w	r2, r3, #12
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d1eb      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d105      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002bf4:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	4a37      	ldr	r2, [pc, #220]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bfe:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d010      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d208      	bcs.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1c:	4b2e      	ldr	r3, [pc, #184]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	492b      	ldr	r1, [pc, #172]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2e:	4b29      	ldr	r3, [pc, #164]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d210      	bcs.n	8002c5e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3c:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 020f 	bic.w	r2, r3, #15
 8002c44:	4923      	ldr	r1, [pc, #140]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4c:	4b21      	ldr	r3, [pc, #132]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e036      	b.n	8002ccc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4918      	ldr	r1, [pc, #96]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c88:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4910      	ldr	r1, [pc, #64]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c9c:	f000 f826 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	490c      	ldr	r1, [pc, #48]	; (8002ce0 <HAL_RCC_ClockConfig+0x268>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <HAL_RCC_ClockConfig+0x26c>)
 8002cba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_RCC_ClockConfig+0x270>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe f99b 	bl	8000ffc <HAL_InitTick>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	73fb      	strb	r3, [r7, #15]

  return status;
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40022000 	.word	0x40022000
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	04c4b400 	.word	0x04c4b400
 8002ce0:	08004890 	.word	0x08004890
 8002ce4:	20000000 	.word	0x20000000
 8002ce8:	20000004 	.word	0x20000004

08002cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cfa:	4b3e      	ldr	r3, [pc, #248]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d04:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0x34>
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d121      	bne.n	8002d5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d11e      	bne.n	8002d5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d20:	4b34      	ldr	r3, [pc, #208]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d2c:	4b31      	ldr	r3, [pc, #196]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d32:	0a1b      	lsrs	r3, r3, #8
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	e005      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d48:	4a2b      	ldr	r2, [pc, #172]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d102      	bne.n	8002d6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d64:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	e004      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d70:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d134      	bne.n	8002de4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d7a:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d003      	beq.n	8002d92 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d003      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0xac>
 8002d90:	e005      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d92:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d94:	617b      	str	r3, [r7, #20]
      break;
 8002d96:	e005      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d9a:	617b      	str	r3, [r7, #20]
      break;
 8002d9c:	e002      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	617b      	str	r3, [r7, #20]
      break;
 8002da2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	3301      	adds	r3, #1
 8002db0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	fb03 f202 	mul.w	r2, r3, r2
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	0e5b      	lsrs	r3, r3, #25
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002de4:	69bb      	ldr	r3, [r7, #24]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3724      	adds	r7, #36	; 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	080048a8 	.word	0x080048a8
 8002dfc:	00f42400 	.word	0x00f42400
 8002e00:	007a1200 	.word	0x007a1200

08002e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000000 	.word	0x20000000

08002e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e20:	f7ff fff0 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	0adb      	lsrs	r3, r3, #11
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	4904      	ldr	r1, [pc, #16]	; (8002e44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e32:	5ccb      	ldrb	r3, [r1, r3]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	080048a0 	.word	0x080048a0

08002e48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	220f      	movs	r2, #15
 8002e56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0203 	and.w	r2, r3, #3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	08db      	lsrs	r3, r3, #3
 8002e82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HAL_RCC_GetClockConfig+0x60>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 020f 	and.w	r2, r3, #15
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	601a      	str	r2, [r3, #0]
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40022000 	.word	0x40022000

08002eac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ec4:	f7ff f898 	bl	8001ff8 <HAL_PWREx_GetVoltageRange>
 8002ec8:	6178      	str	r0, [r7, #20]
 8002eca:	e014      	b.n	8002ef6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ecc:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	4a21      	ldr	r2, [pc, #132]	; (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed8:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ee4:	f7ff f888 	bl	8001ff8 <HAL_PWREx_GetVoltageRange>
 8002ee8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eea:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	4a1a      	ldr	r2, [pc, #104]	; (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002efc:	d10b      	bne.n	8002f16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b80      	cmp	r3, #128	; 0x80
 8002f02:	d913      	bls.n	8002f2c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2ba0      	cmp	r3, #160	; 0xa0
 8002f08:	d902      	bls.n	8002f10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	e00d      	b.n	8002f2c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f10:	2301      	movs	r3, #1
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	e00a      	b.n	8002f2c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b7f      	cmp	r3, #127	; 0x7f
 8002f1a:	d902      	bls.n	8002f22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	e004      	b.n	8002f2c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b70      	cmp	r3, #112	; 0x70
 8002f26:	d101      	bne.n	8002f2c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f28:	2301      	movs	r3, #1
 8002f2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f023 020f 	bic.w	r2, r3, #15
 8002f34:	4909      	ldr	r1, [pc, #36]	; (8002f5c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f3c:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d001      	beq.n	8002f4e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40022000 	.word	0x40022000

08002f60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f66:	4b2d      	ldr	r3, [pc, #180]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d00b      	beq.n	8002f8e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d825      	bhi.n	8002fc8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d008      	beq.n	8002f94 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d11f      	bne.n	8002fc8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f8a:	613b      	str	r3, [r7, #16]
    break;
 8002f8c:	e01f      	b.n	8002fce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002f8e:	4b25      	ldr	r3, [pc, #148]	; (8003024 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002f90:	613b      	str	r3, [r7, #16]
    break;
 8002f92:	e01c      	b.n	8002fce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f94:	4b21      	ldr	r3, [pc, #132]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d107      	bne.n	8002fb0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fa0:	4b1e      	ldr	r3, [pc, #120]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	e005      	b.n	8002fbc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002fbc:	4a1a      	ldr	r2, [pc, #104]	; (8003028 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc4:	613b      	str	r3, [r7, #16]
    break;
 8002fc6:	e002      	b.n	8002fce <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	613b      	str	r3, [r7, #16]
    break;
 8002fcc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	3301      	adds	r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	0a1b      	lsrs	r3, r3, #8
 8002fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	fb03 f202 	mul.w	r2, r3, r2
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	0e5b      	lsrs	r3, r3, #25
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	3301      	adds	r3, #1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800300e:	683b      	ldr	r3, [r7, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	40021000 	.word	0x40021000
 8003020:	00f42400 	.word	0x00f42400
 8003024:	007a1200 	.word	0x007a1200
 8003028:	080048a8 	.word	0x080048a8

0800302c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e049      	b.n	80030d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f841 	bl	80030da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f000 f9f8 	bl	8003460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d001      	beq.n	8003108 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e04f      	b.n	80031a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a23      	ldr	r2, [pc, #140]	; (80031b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d01d      	beq.n	8003166 <HAL_TIM_Base_Start_IT+0x76>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003132:	d018      	beq.n	8003166 <HAL_TIM_Base_Start_IT+0x76>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1f      	ldr	r2, [pc, #124]	; (80031b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <HAL_TIM_Base_Start_IT+0x76>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <HAL_TIM_Base_Start_IT+0xcc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00e      	beq.n	8003166 <HAL_TIM_Base_Start_IT+0x76>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1c      	ldr	r2, [pc, #112]	; (80031c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d009      	beq.n	8003166 <HAL_TIM_Base_Start_IT+0x76>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d004      	beq.n	8003166 <HAL_TIM_Base_Start_IT+0x76>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a19      	ldr	r2, [pc, #100]	; (80031c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d115      	bne.n	8003192 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	4b17      	ldr	r3, [pc, #92]	; (80031cc <HAL_TIM_Base_Start_IT+0xdc>)
 800316e:	4013      	ands	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b06      	cmp	r3, #6
 8003176:	d015      	beq.n	80031a4 <HAL_TIM_Base_Start_IT+0xb4>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317e:	d011      	beq.n	80031a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003190:	e008      	b.n	80031a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	e000      	b.n	80031a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800
 80031c0:	40000c00 	.word	0x40000c00
 80031c4:	40013400 	.word	0x40013400
 80031c8:	40014000 	.word	0x40014000
 80031cc:	00010007 	.word	0x00010007

080031d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d122      	bne.n	800322c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d11b      	bne.n	800322c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0202 	mvn.w	r2, #2
 80031fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f905 	bl	8003422 <HAL_TIM_IC_CaptureCallback>
 8003218:	e005      	b.n	8003226 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f8f7 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f908 	bl	8003436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b04      	cmp	r3, #4
 8003238:	d122      	bne.n	8003280 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b04      	cmp	r3, #4
 8003246:	d11b      	bne.n	8003280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0204 	mvn.w	r2, #4
 8003250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2202      	movs	r2, #2
 8003256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8db 	bl	8003422 <HAL_TIM_IC_CaptureCallback>
 800326c:	e005      	b.n	800327a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f8cd 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f8de 	bl	8003436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b08      	cmp	r3, #8
 800328c:	d122      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b08      	cmp	r3, #8
 800329a:	d11b      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0208 	mvn.w	r2, #8
 80032a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2204      	movs	r2, #4
 80032aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8b1 	bl	8003422 <HAL_TIM_IC_CaptureCallback>
 80032c0:	e005      	b.n	80032ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f8a3 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f8b4 	bl	8003436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b10      	cmp	r3, #16
 80032e0:	d122      	bne.n	8003328 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b10      	cmp	r3, #16
 80032ee:	d11b      	bne.n	8003328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0210 	mvn.w	r2, #16
 80032f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2208      	movs	r2, #8
 80032fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f887 	bl	8003422 <HAL_TIM_IC_CaptureCallback>
 8003314:	e005      	b.n	8003322 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f879 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f88a 	bl	8003436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b01      	cmp	r3, #1
 8003334:	d10e      	bne.n	8003354 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d107      	bne.n	8003354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0201 	mvn.w	r2, #1
 800334c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fd f93a 	bl	80005c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335e:	2b80      	cmp	r3, #128	; 0x80
 8003360:	d10e      	bne.n	8003380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336c:	2b80      	cmp	r3, #128	; 0x80
 800336e:	d107      	bne.n	8003380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f914 	bl	80035a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338e:	d10e      	bne.n	80033ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	2b80      	cmp	r3, #128	; 0x80
 800339c:	d107      	bne.n	80033ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f907 	bl	80035bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b40      	cmp	r3, #64	; 0x40
 80033ba:	d10e      	bne.n	80033da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b40      	cmp	r3, #64	; 0x40
 80033c8:	d107      	bne.n	80033da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f838 	bl	800344a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d10e      	bne.n	8003406 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d107      	bne.n	8003406 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f06f 0220 	mvn.w	r2, #32
 80033fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f8c7 	bl	8003594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a40      	ldr	r2, [pc, #256]	; (8003574 <TIM_Base_SetConfig+0x114>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d013      	beq.n	80034a0 <TIM_Base_SetConfig+0x40>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347e:	d00f      	beq.n	80034a0 <TIM_Base_SetConfig+0x40>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a3d      	ldr	r2, [pc, #244]	; (8003578 <TIM_Base_SetConfig+0x118>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00b      	beq.n	80034a0 <TIM_Base_SetConfig+0x40>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a3c      	ldr	r2, [pc, #240]	; (800357c <TIM_Base_SetConfig+0x11c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d007      	beq.n	80034a0 <TIM_Base_SetConfig+0x40>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a3b      	ldr	r2, [pc, #236]	; (8003580 <TIM_Base_SetConfig+0x120>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d003      	beq.n	80034a0 <TIM_Base_SetConfig+0x40>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a3a      	ldr	r2, [pc, #232]	; (8003584 <TIM_Base_SetConfig+0x124>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d108      	bne.n	80034b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a2f      	ldr	r2, [pc, #188]	; (8003574 <TIM_Base_SetConfig+0x114>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01f      	beq.n	80034fa <TIM_Base_SetConfig+0x9a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c0:	d01b      	beq.n	80034fa <TIM_Base_SetConfig+0x9a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a2c      	ldr	r2, [pc, #176]	; (8003578 <TIM_Base_SetConfig+0x118>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d017      	beq.n	80034fa <TIM_Base_SetConfig+0x9a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a2b      	ldr	r2, [pc, #172]	; (800357c <TIM_Base_SetConfig+0x11c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <TIM_Base_SetConfig+0x9a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <TIM_Base_SetConfig+0x120>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00f      	beq.n	80034fa <TIM_Base_SetConfig+0x9a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a29      	ldr	r2, [pc, #164]	; (8003584 <TIM_Base_SetConfig+0x124>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00b      	beq.n	80034fa <TIM_Base_SetConfig+0x9a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a28      	ldr	r2, [pc, #160]	; (8003588 <TIM_Base_SetConfig+0x128>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <TIM_Base_SetConfig+0x9a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a27      	ldr	r2, [pc, #156]	; (800358c <TIM_Base_SetConfig+0x12c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <TIM_Base_SetConfig+0x9a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a26      	ldr	r2, [pc, #152]	; (8003590 <TIM_Base_SetConfig+0x130>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d108      	bne.n	800350c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a10      	ldr	r2, [pc, #64]	; (8003574 <TIM_Base_SetConfig+0x114>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00f      	beq.n	8003558 <TIM_Base_SetConfig+0xf8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a12      	ldr	r2, [pc, #72]	; (8003584 <TIM_Base_SetConfig+0x124>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00b      	beq.n	8003558 <TIM_Base_SetConfig+0xf8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a11      	ldr	r2, [pc, #68]	; (8003588 <TIM_Base_SetConfig+0x128>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d007      	beq.n	8003558 <TIM_Base_SetConfig+0xf8>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a10      	ldr	r2, [pc, #64]	; (800358c <TIM_Base_SetConfig+0x12c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d003      	beq.n	8003558 <TIM_Base_SetConfig+0xf8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a0f      	ldr	r2, [pc, #60]	; (8003590 <TIM_Base_SetConfig+0x130>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d103      	bne.n	8003560 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	615a      	str	r2, [r3, #20]
}
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800
 8003580:	40000c00 	.word	0x40000c00
 8003584:	40013400 	.word	0x40013400
 8003588:	40014000 	.word	0x40014000
 800358c:	40014400 	.word	0x40014400
 8003590:	40014800 	.word	0x40014800

08003594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <_ZdlPvj>:
 80035d0:	f000 b800 	b.w	80035d4 <_ZdlPv>

080035d4 <_ZdlPv>:
 80035d4:	f000 b85a 	b.w	800368c <free>

080035d8 <__assert_func>:
 80035d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80035da:	4614      	mov	r4, r2
 80035dc:	461a      	mov	r2, r3
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <__assert_func+0x2c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4605      	mov	r5, r0
 80035e4:	68d8      	ldr	r0, [r3, #12]
 80035e6:	b14c      	cbz	r4, 80035fc <__assert_func+0x24>
 80035e8:	4b07      	ldr	r3, [pc, #28]	; (8003608 <__assert_func+0x30>)
 80035ea:	9100      	str	r1, [sp, #0]
 80035ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80035f0:	4906      	ldr	r1, [pc, #24]	; (800360c <__assert_func+0x34>)
 80035f2:	462b      	mov	r3, r5
 80035f4:	f000 f814 	bl	8003620 <fiprintf>
 80035f8:	f000 fcf6 	bl	8003fe8 <abort>
 80035fc:	4b04      	ldr	r3, [pc, #16]	; (8003610 <__assert_func+0x38>)
 80035fe:	461c      	mov	r4, r3
 8003600:	e7f3      	b.n	80035ea <__assert_func+0x12>
 8003602:	bf00      	nop
 8003604:	2000000c 	.word	0x2000000c
 8003608:	080048d8 	.word	0x080048d8
 800360c:	080048e5 	.word	0x080048e5
 8003610:	08004913 	.word	0x08004913

08003614 <__errno>:
 8003614:	4b01      	ldr	r3, [pc, #4]	; (800361c <__errno+0x8>)
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	2000000c 	.word	0x2000000c

08003620 <fiprintf>:
 8003620:	b40e      	push	{r1, r2, r3}
 8003622:	b503      	push	{r0, r1, lr}
 8003624:	4601      	mov	r1, r0
 8003626:	ab03      	add	r3, sp, #12
 8003628:	4805      	ldr	r0, [pc, #20]	; (8003640 <fiprintf+0x20>)
 800362a:	f853 2b04 	ldr.w	r2, [r3], #4
 800362e:	6800      	ldr	r0, [r0, #0]
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	f000 f945 	bl	80038c0 <_vfiprintf_r>
 8003636:	b002      	add	sp, #8
 8003638:	f85d eb04 	ldr.w	lr, [sp], #4
 800363c:	b003      	add	sp, #12
 800363e:	4770      	bx	lr
 8003640:	2000000c 	.word	0x2000000c

08003644 <__libc_init_array>:
 8003644:	b570      	push	{r4, r5, r6, lr}
 8003646:	4d0d      	ldr	r5, [pc, #52]	; (800367c <__libc_init_array+0x38>)
 8003648:	4c0d      	ldr	r4, [pc, #52]	; (8003680 <__libc_init_array+0x3c>)
 800364a:	1b64      	subs	r4, r4, r5
 800364c:	10a4      	asrs	r4, r4, #2
 800364e:	2600      	movs	r6, #0
 8003650:	42a6      	cmp	r6, r4
 8003652:	d109      	bne.n	8003668 <__libc_init_array+0x24>
 8003654:	4d0b      	ldr	r5, [pc, #44]	; (8003684 <__libc_init_array+0x40>)
 8003656:	4c0c      	ldr	r4, [pc, #48]	; (8003688 <__libc_init_array+0x44>)
 8003658:	f000 ffea 	bl	8004630 <_init>
 800365c:	1b64      	subs	r4, r4, r5
 800365e:	10a4      	asrs	r4, r4, #2
 8003660:	2600      	movs	r6, #0
 8003662:	42a6      	cmp	r6, r4
 8003664:	d105      	bne.n	8003672 <__libc_init_array+0x2e>
 8003666:	bd70      	pop	{r4, r5, r6, pc}
 8003668:	f855 3b04 	ldr.w	r3, [r5], #4
 800366c:	4798      	blx	r3
 800366e:	3601      	adds	r6, #1
 8003670:	e7ee      	b.n	8003650 <__libc_init_array+0xc>
 8003672:	f855 3b04 	ldr.w	r3, [r5], #4
 8003676:	4798      	blx	r3
 8003678:	3601      	adds	r6, #1
 800367a:	e7f2      	b.n	8003662 <__libc_init_array+0x1e>
 800367c:	080049ac 	.word	0x080049ac
 8003680:	080049ac 	.word	0x080049ac
 8003684:	080049ac 	.word	0x080049ac
 8003688:	080049b4 	.word	0x080049b4

0800368c <free>:
 800368c:	4b02      	ldr	r3, [pc, #8]	; (8003698 <free+0xc>)
 800368e:	4601      	mov	r1, r0
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	f000 b80b 	b.w	80036ac <_free_r>
 8003696:	bf00      	nop
 8003698:	2000000c 	.word	0x2000000c

0800369c <memset>:
 800369c:	4402      	add	r2, r0
 800369e:	4603      	mov	r3, r0
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d100      	bne.n	80036a6 <memset+0xa>
 80036a4:	4770      	bx	lr
 80036a6:	f803 1b01 	strb.w	r1, [r3], #1
 80036aa:	e7f9      	b.n	80036a0 <memset+0x4>

080036ac <_free_r>:
 80036ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036ae:	2900      	cmp	r1, #0
 80036b0:	d044      	beq.n	800373c <_free_r+0x90>
 80036b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036b6:	9001      	str	r0, [sp, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f1a1 0404 	sub.w	r4, r1, #4
 80036be:	bfb8      	it	lt
 80036c0:	18e4      	addlt	r4, r4, r3
 80036c2:	f000 feb9 	bl	8004438 <__malloc_lock>
 80036c6:	4a1e      	ldr	r2, [pc, #120]	; (8003740 <_free_r+0x94>)
 80036c8:	9801      	ldr	r0, [sp, #4]
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	b933      	cbnz	r3, 80036dc <_free_r+0x30>
 80036ce:	6063      	str	r3, [r4, #4]
 80036d0:	6014      	str	r4, [r2, #0]
 80036d2:	b003      	add	sp, #12
 80036d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036d8:	f000 beb4 	b.w	8004444 <__malloc_unlock>
 80036dc:	42a3      	cmp	r3, r4
 80036de:	d908      	bls.n	80036f2 <_free_r+0x46>
 80036e0:	6825      	ldr	r5, [r4, #0]
 80036e2:	1961      	adds	r1, r4, r5
 80036e4:	428b      	cmp	r3, r1
 80036e6:	bf01      	itttt	eq
 80036e8:	6819      	ldreq	r1, [r3, #0]
 80036ea:	685b      	ldreq	r3, [r3, #4]
 80036ec:	1949      	addeq	r1, r1, r5
 80036ee:	6021      	streq	r1, [r4, #0]
 80036f0:	e7ed      	b.n	80036ce <_free_r+0x22>
 80036f2:	461a      	mov	r2, r3
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	b10b      	cbz	r3, 80036fc <_free_r+0x50>
 80036f8:	42a3      	cmp	r3, r4
 80036fa:	d9fa      	bls.n	80036f2 <_free_r+0x46>
 80036fc:	6811      	ldr	r1, [r2, #0]
 80036fe:	1855      	adds	r5, r2, r1
 8003700:	42a5      	cmp	r5, r4
 8003702:	d10b      	bne.n	800371c <_free_r+0x70>
 8003704:	6824      	ldr	r4, [r4, #0]
 8003706:	4421      	add	r1, r4
 8003708:	1854      	adds	r4, r2, r1
 800370a:	42a3      	cmp	r3, r4
 800370c:	6011      	str	r1, [r2, #0]
 800370e:	d1e0      	bne.n	80036d2 <_free_r+0x26>
 8003710:	681c      	ldr	r4, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	6053      	str	r3, [r2, #4]
 8003716:	4421      	add	r1, r4
 8003718:	6011      	str	r1, [r2, #0]
 800371a:	e7da      	b.n	80036d2 <_free_r+0x26>
 800371c:	d902      	bls.n	8003724 <_free_r+0x78>
 800371e:	230c      	movs	r3, #12
 8003720:	6003      	str	r3, [r0, #0]
 8003722:	e7d6      	b.n	80036d2 <_free_r+0x26>
 8003724:	6825      	ldr	r5, [r4, #0]
 8003726:	1961      	adds	r1, r4, r5
 8003728:	428b      	cmp	r3, r1
 800372a:	bf04      	itt	eq
 800372c:	6819      	ldreq	r1, [r3, #0]
 800372e:	685b      	ldreq	r3, [r3, #4]
 8003730:	6063      	str	r3, [r4, #4]
 8003732:	bf04      	itt	eq
 8003734:	1949      	addeq	r1, r1, r5
 8003736:	6021      	streq	r1, [r4, #0]
 8003738:	6054      	str	r4, [r2, #4]
 800373a:	e7ca      	b.n	80036d2 <_free_r+0x26>
 800373c:	b003      	add	sp, #12
 800373e:	bd30      	pop	{r4, r5, pc}
 8003740:	2000030c 	.word	0x2000030c

08003744 <sbrk_aligned>:
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	4e0e      	ldr	r6, [pc, #56]	; (8003780 <sbrk_aligned+0x3c>)
 8003748:	460c      	mov	r4, r1
 800374a:	6831      	ldr	r1, [r6, #0]
 800374c:	4605      	mov	r5, r0
 800374e:	b911      	cbnz	r1, 8003756 <sbrk_aligned+0x12>
 8003750:	f000 fb7a 	bl	8003e48 <_sbrk_r>
 8003754:	6030      	str	r0, [r6, #0]
 8003756:	4621      	mov	r1, r4
 8003758:	4628      	mov	r0, r5
 800375a:	f000 fb75 	bl	8003e48 <_sbrk_r>
 800375e:	1c43      	adds	r3, r0, #1
 8003760:	d00a      	beq.n	8003778 <sbrk_aligned+0x34>
 8003762:	1cc4      	adds	r4, r0, #3
 8003764:	f024 0403 	bic.w	r4, r4, #3
 8003768:	42a0      	cmp	r0, r4
 800376a:	d007      	beq.n	800377c <sbrk_aligned+0x38>
 800376c:	1a21      	subs	r1, r4, r0
 800376e:	4628      	mov	r0, r5
 8003770:	f000 fb6a 	bl	8003e48 <_sbrk_r>
 8003774:	3001      	adds	r0, #1
 8003776:	d101      	bne.n	800377c <sbrk_aligned+0x38>
 8003778:	f04f 34ff 	mov.w	r4, #4294967295
 800377c:	4620      	mov	r0, r4
 800377e:	bd70      	pop	{r4, r5, r6, pc}
 8003780:	20000310 	.word	0x20000310

08003784 <_malloc_r>:
 8003784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003788:	1ccd      	adds	r5, r1, #3
 800378a:	f025 0503 	bic.w	r5, r5, #3
 800378e:	3508      	adds	r5, #8
 8003790:	2d0c      	cmp	r5, #12
 8003792:	bf38      	it	cc
 8003794:	250c      	movcc	r5, #12
 8003796:	2d00      	cmp	r5, #0
 8003798:	4607      	mov	r7, r0
 800379a:	db01      	blt.n	80037a0 <_malloc_r+0x1c>
 800379c:	42a9      	cmp	r1, r5
 800379e:	d905      	bls.n	80037ac <_malloc_r+0x28>
 80037a0:	230c      	movs	r3, #12
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	2600      	movs	r6, #0
 80037a6:	4630      	mov	r0, r6
 80037a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037ac:	4e2e      	ldr	r6, [pc, #184]	; (8003868 <_malloc_r+0xe4>)
 80037ae:	f000 fe43 	bl	8004438 <__malloc_lock>
 80037b2:	6833      	ldr	r3, [r6, #0]
 80037b4:	461c      	mov	r4, r3
 80037b6:	bb34      	cbnz	r4, 8003806 <_malloc_r+0x82>
 80037b8:	4629      	mov	r1, r5
 80037ba:	4638      	mov	r0, r7
 80037bc:	f7ff ffc2 	bl	8003744 <sbrk_aligned>
 80037c0:	1c43      	adds	r3, r0, #1
 80037c2:	4604      	mov	r4, r0
 80037c4:	d14d      	bne.n	8003862 <_malloc_r+0xde>
 80037c6:	6834      	ldr	r4, [r6, #0]
 80037c8:	4626      	mov	r6, r4
 80037ca:	2e00      	cmp	r6, #0
 80037cc:	d140      	bne.n	8003850 <_malloc_r+0xcc>
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	4631      	mov	r1, r6
 80037d2:	4638      	mov	r0, r7
 80037d4:	eb04 0803 	add.w	r8, r4, r3
 80037d8:	f000 fb36 	bl	8003e48 <_sbrk_r>
 80037dc:	4580      	cmp	r8, r0
 80037de:	d13a      	bne.n	8003856 <_malloc_r+0xd2>
 80037e0:	6821      	ldr	r1, [r4, #0]
 80037e2:	3503      	adds	r5, #3
 80037e4:	1a6d      	subs	r5, r5, r1
 80037e6:	f025 0503 	bic.w	r5, r5, #3
 80037ea:	3508      	adds	r5, #8
 80037ec:	2d0c      	cmp	r5, #12
 80037ee:	bf38      	it	cc
 80037f0:	250c      	movcc	r5, #12
 80037f2:	4629      	mov	r1, r5
 80037f4:	4638      	mov	r0, r7
 80037f6:	f7ff ffa5 	bl	8003744 <sbrk_aligned>
 80037fa:	3001      	adds	r0, #1
 80037fc:	d02b      	beq.n	8003856 <_malloc_r+0xd2>
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	442b      	add	r3, r5
 8003802:	6023      	str	r3, [r4, #0]
 8003804:	e00e      	b.n	8003824 <_malloc_r+0xa0>
 8003806:	6822      	ldr	r2, [r4, #0]
 8003808:	1b52      	subs	r2, r2, r5
 800380a:	d41e      	bmi.n	800384a <_malloc_r+0xc6>
 800380c:	2a0b      	cmp	r2, #11
 800380e:	d916      	bls.n	800383e <_malloc_r+0xba>
 8003810:	1961      	adds	r1, r4, r5
 8003812:	42a3      	cmp	r3, r4
 8003814:	6025      	str	r5, [r4, #0]
 8003816:	bf18      	it	ne
 8003818:	6059      	strne	r1, [r3, #4]
 800381a:	6863      	ldr	r3, [r4, #4]
 800381c:	bf08      	it	eq
 800381e:	6031      	streq	r1, [r6, #0]
 8003820:	5162      	str	r2, [r4, r5]
 8003822:	604b      	str	r3, [r1, #4]
 8003824:	4638      	mov	r0, r7
 8003826:	f104 060b 	add.w	r6, r4, #11
 800382a:	f000 fe0b 	bl	8004444 <__malloc_unlock>
 800382e:	f026 0607 	bic.w	r6, r6, #7
 8003832:	1d23      	adds	r3, r4, #4
 8003834:	1af2      	subs	r2, r6, r3
 8003836:	d0b6      	beq.n	80037a6 <_malloc_r+0x22>
 8003838:	1b9b      	subs	r3, r3, r6
 800383a:	50a3      	str	r3, [r4, r2]
 800383c:	e7b3      	b.n	80037a6 <_malloc_r+0x22>
 800383e:	6862      	ldr	r2, [r4, #4]
 8003840:	42a3      	cmp	r3, r4
 8003842:	bf0c      	ite	eq
 8003844:	6032      	streq	r2, [r6, #0]
 8003846:	605a      	strne	r2, [r3, #4]
 8003848:	e7ec      	b.n	8003824 <_malloc_r+0xa0>
 800384a:	4623      	mov	r3, r4
 800384c:	6864      	ldr	r4, [r4, #4]
 800384e:	e7b2      	b.n	80037b6 <_malloc_r+0x32>
 8003850:	4634      	mov	r4, r6
 8003852:	6876      	ldr	r6, [r6, #4]
 8003854:	e7b9      	b.n	80037ca <_malloc_r+0x46>
 8003856:	230c      	movs	r3, #12
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	4638      	mov	r0, r7
 800385c:	f000 fdf2 	bl	8004444 <__malloc_unlock>
 8003860:	e7a1      	b.n	80037a6 <_malloc_r+0x22>
 8003862:	6025      	str	r5, [r4, #0]
 8003864:	e7de      	b.n	8003824 <_malloc_r+0xa0>
 8003866:	bf00      	nop
 8003868:	2000030c 	.word	0x2000030c

0800386c <__sfputc_r>:
 800386c:	6893      	ldr	r3, [r2, #8]
 800386e:	3b01      	subs	r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	b410      	push	{r4}
 8003874:	6093      	str	r3, [r2, #8]
 8003876:	da08      	bge.n	800388a <__sfputc_r+0x1e>
 8003878:	6994      	ldr	r4, [r2, #24]
 800387a:	42a3      	cmp	r3, r4
 800387c:	db01      	blt.n	8003882 <__sfputc_r+0x16>
 800387e:	290a      	cmp	r1, #10
 8003880:	d103      	bne.n	800388a <__sfputc_r+0x1e>
 8003882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003886:	f000 baef 	b.w	8003e68 <__swbuf_r>
 800388a:	6813      	ldr	r3, [r2, #0]
 800388c:	1c58      	adds	r0, r3, #1
 800388e:	6010      	str	r0, [r2, #0]
 8003890:	7019      	strb	r1, [r3, #0]
 8003892:	4608      	mov	r0, r1
 8003894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003898:	4770      	bx	lr

0800389a <__sfputs_r>:
 800389a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389c:	4606      	mov	r6, r0
 800389e:	460f      	mov	r7, r1
 80038a0:	4614      	mov	r4, r2
 80038a2:	18d5      	adds	r5, r2, r3
 80038a4:	42ac      	cmp	r4, r5
 80038a6:	d101      	bne.n	80038ac <__sfputs_r+0x12>
 80038a8:	2000      	movs	r0, #0
 80038aa:	e007      	b.n	80038bc <__sfputs_r+0x22>
 80038ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038b0:	463a      	mov	r2, r7
 80038b2:	4630      	mov	r0, r6
 80038b4:	f7ff ffda 	bl	800386c <__sfputc_r>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d1f3      	bne.n	80038a4 <__sfputs_r+0xa>
 80038bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038c0 <_vfiprintf_r>:
 80038c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c4:	460d      	mov	r5, r1
 80038c6:	b09d      	sub	sp, #116	; 0x74
 80038c8:	4614      	mov	r4, r2
 80038ca:	4698      	mov	r8, r3
 80038cc:	4606      	mov	r6, r0
 80038ce:	b118      	cbz	r0, 80038d8 <_vfiprintf_r+0x18>
 80038d0:	6983      	ldr	r3, [r0, #24]
 80038d2:	b90b      	cbnz	r3, 80038d8 <_vfiprintf_r+0x18>
 80038d4:	f000 fcaa 	bl	800422c <__sinit>
 80038d8:	4b89      	ldr	r3, [pc, #548]	; (8003b00 <_vfiprintf_r+0x240>)
 80038da:	429d      	cmp	r5, r3
 80038dc:	d11b      	bne.n	8003916 <_vfiprintf_r+0x56>
 80038de:	6875      	ldr	r5, [r6, #4]
 80038e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038e2:	07d9      	lsls	r1, r3, #31
 80038e4:	d405      	bmi.n	80038f2 <_vfiprintf_r+0x32>
 80038e6:	89ab      	ldrh	r3, [r5, #12]
 80038e8:	059a      	lsls	r2, r3, #22
 80038ea:	d402      	bmi.n	80038f2 <_vfiprintf_r+0x32>
 80038ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038ee:	f000 fd3b 	bl	8004368 <__retarget_lock_acquire_recursive>
 80038f2:	89ab      	ldrh	r3, [r5, #12]
 80038f4:	071b      	lsls	r3, r3, #28
 80038f6:	d501      	bpl.n	80038fc <_vfiprintf_r+0x3c>
 80038f8:	692b      	ldr	r3, [r5, #16]
 80038fa:	b9eb      	cbnz	r3, 8003938 <_vfiprintf_r+0x78>
 80038fc:	4629      	mov	r1, r5
 80038fe:	4630      	mov	r0, r6
 8003900:	f000 fb04 	bl	8003f0c <__swsetup_r>
 8003904:	b1c0      	cbz	r0, 8003938 <_vfiprintf_r+0x78>
 8003906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003908:	07dc      	lsls	r4, r3, #31
 800390a:	d50e      	bpl.n	800392a <_vfiprintf_r+0x6a>
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
 8003910:	b01d      	add	sp, #116	; 0x74
 8003912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003916:	4b7b      	ldr	r3, [pc, #492]	; (8003b04 <_vfiprintf_r+0x244>)
 8003918:	429d      	cmp	r5, r3
 800391a:	d101      	bne.n	8003920 <_vfiprintf_r+0x60>
 800391c:	68b5      	ldr	r5, [r6, #8]
 800391e:	e7df      	b.n	80038e0 <_vfiprintf_r+0x20>
 8003920:	4b79      	ldr	r3, [pc, #484]	; (8003b08 <_vfiprintf_r+0x248>)
 8003922:	429d      	cmp	r5, r3
 8003924:	bf08      	it	eq
 8003926:	68f5      	ldreq	r5, [r6, #12]
 8003928:	e7da      	b.n	80038e0 <_vfiprintf_r+0x20>
 800392a:	89ab      	ldrh	r3, [r5, #12]
 800392c:	0598      	lsls	r0, r3, #22
 800392e:	d4ed      	bmi.n	800390c <_vfiprintf_r+0x4c>
 8003930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003932:	f000 fd1a 	bl	800436a <__retarget_lock_release_recursive>
 8003936:	e7e9      	b.n	800390c <_vfiprintf_r+0x4c>
 8003938:	2300      	movs	r3, #0
 800393a:	9309      	str	r3, [sp, #36]	; 0x24
 800393c:	2320      	movs	r3, #32
 800393e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003942:	f8cd 800c 	str.w	r8, [sp, #12]
 8003946:	2330      	movs	r3, #48	; 0x30
 8003948:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b0c <_vfiprintf_r+0x24c>
 800394c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003950:	f04f 0901 	mov.w	r9, #1
 8003954:	4623      	mov	r3, r4
 8003956:	469a      	mov	sl, r3
 8003958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800395c:	b10a      	cbz	r2, 8003962 <_vfiprintf_r+0xa2>
 800395e:	2a25      	cmp	r2, #37	; 0x25
 8003960:	d1f9      	bne.n	8003956 <_vfiprintf_r+0x96>
 8003962:	ebba 0b04 	subs.w	fp, sl, r4
 8003966:	d00b      	beq.n	8003980 <_vfiprintf_r+0xc0>
 8003968:	465b      	mov	r3, fp
 800396a:	4622      	mov	r2, r4
 800396c:	4629      	mov	r1, r5
 800396e:	4630      	mov	r0, r6
 8003970:	f7ff ff93 	bl	800389a <__sfputs_r>
 8003974:	3001      	adds	r0, #1
 8003976:	f000 80aa 	beq.w	8003ace <_vfiprintf_r+0x20e>
 800397a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800397c:	445a      	add	r2, fp
 800397e:	9209      	str	r2, [sp, #36]	; 0x24
 8003980:	f89a 3000 	ldrb.w	r3, [sl]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 80a2 	beq.w	8003ace <_vfiprintf_r+0x20e>
 800398a:	2300      	movs	r3, #0
 800398c:	f04f 32ff 	mov.w	r2, #4294967295
 8003990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003994:	f10a 0a01 	add.w	sl, sl, #1
 8003998:	9304      	str	r3, [sp, #16]
 800399a:	9307      	str	r3, [sp, #28]
 800399c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039a0:	931a      	str	r3, [sp, #104]	; 0x68
 80039a2:	4654      	mov	r4, sl
 80039a4:	2205      	movs	r2, #5
 80039a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039aa:	4858      	ldr	r0, [pc, #352]	; (8003b0c <_vfiprintf_r+0x24c>)
 80039ac:	f7fc fc28 	bl	8000200 <memchr>
 80039b0:	9a04      	ldr	r2, [sp, #16]
 80039b2:	b9d8      	cbnz	r0, 80039ec <_vfiprintf_r+0x12c>
 80039b4:	06d1      	lsls	r1, r2, #27
 80039b6:	bf44      	itt	mi
 80039b8:	2320      	movmi	r3, #32
 80039ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039be:	0713      	lsls	r3, r2, #28
 80039c0:	bf44      	itt	mi
 80039c2:	232b      	movmi	r3, #43	; 0x2b
 80039c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039c8:	f89a 3000 	ldrb.w	r3, [sl]
 80039cc:	2b2a      	cmp	r3, #42	; 0x2a
 80039ce:	d015      	beq.n	80039fc <_vfiprintf_r+0x13c>
 80039d0:	9a07      	ldr	r2, [sp, #28]
 80039d2:	4654      	mov	r4, sl
 80039d4:	2000      	movs	r0, #0
 80039d6:	f04f 0c0a 	mov.w	ip, #10
 80039da:	4621      	mov	r1, r4
 80039dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039e0:	3b30      	subs	r3, #48	; 0x30
 80039e2:	2b09      	cmp	r3, #9
 80039e4:	d94e      	bls.n	8003a84 <_vfiprintf_r+0x1c4>
 80039e6:	b1b0      	cbz	r0, 8003a16 <_vfiprintf_r+0x156>
 80039e8:	9207      	str	r2, [sp, #28]
 80039ea:	e014      	b.n	8003a16 <_vfiprintf_r+0x156>
 80039ec:	eba0 0308 	sub.w	r3, r0, r8
 80039f0:	fa09 f303 	lsl.w	r3, r9, r3
 80039f4:	4313      	orrs	r3, r2
 80039f6:	9304      	str	r3, [sp, #16]
 80039f8:	46a2      	mov	sl, r4
 80039fa:	e7d2      	b.n	80039a2 <_vfiprintf_r+0xe2>
 80039fc:	9b03      	ldr	r3, [sp, #12]
 80039fe:	1d19      	adds	r1, r3, #4
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	9103      	str	r1, [sp, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bfbb      	ittet	lt
 8003a08:	425b      	neglt	r3, r3
 8003a0a:	f042 0202 	orrlt.w	r2, r2, #2
 8003a0e:	9307      	strge	r3, [sp, #28]
 8003a10:	9307      	strlt	r3, [sp, #28]
 8003a12:	bfb8      	it	lt
 8003a14:	9204      	strlt	r2, [sp, #16]
 8003a16:	7823      	ldrb	r3, [r4, #0]
 8003a18:	2b2e      	cmp	r3, #46	; 0x2e
 8003a1a:	d10c      	bne.n	8003a36 <_vfiprintf_r+0x176>
 8003a1c:	7863      	ldrb	r3, [r4, #1]
 8003a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a20:	d135      	bne.n	8003a8e <_vfiprintf_r+0x1ce>
 8003a22:	9b03      	ldr	r3, [sp, #12]
 8003a24:	1d1a      	adds	r2, r3, #4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	9203      	str	r2, [sp, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bfb8      	it	lt
 8003a2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a32:	3402      	adds	r4, #2
 8003a34:	9305      	str	r3, [sp, #20]
 8003a36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b1c <_vfiprintf_r+0x25c>
 8003a3a:	7821      	ldrb	r1, [r4, #0]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	4650      	mov	r0, sl
 8003a40:	f7fc fbde 	bl	8000200 <memchr>
 8003a44:	b140      	cbz	r0, 8003a58 <_vfiprintf_r+0x198>
 8003a46:	2340      	movs	r3, #64	; 0x40
 8003a48:	eba0 000a 	sub.w	r0, r0, sl
 8003a4c:	fa03 f000 	lsl.w	r0, r3, r0
 8003a50:	9b04      	ldr	r3, [sp, #16]
 8003a52:	4303      	orrs	r3, r0
 8003a54:	3401      	adds	r4, #1
 8003a56:	9304      	str	r3, [sp, #16]
 8003a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a5c:	482c      	ldr	r0, [pc, #176]	; (8003b10 <_vfiprintf_r+0x250>)
 8003a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a62:	2206      	movs	r2, #6
 8003a64:	f7fc fbcc 	bl	8000200 <memchr>
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d03f      	beq.n	8003aec <_vfiprintf_r+0x22c>
 8003a6c:	4b29      	ldr	r3, [pc, #164]	; (8003b14 <_vfiprintf_r+0x254>)
 8003a6e:	bb1b      	cbnz	r3, 8003ab8 <_vfiprintf_r+0x1f8>
 8003a70:	9b03      	ldr	r3, [sp, #12]
 8003a72:	3307      	adds	r3, #7
 8003a74:	f023 0307 	bic.w	r3, r3, #7
 8003a78:	3308      	adds	r3, #8
 8003a7a:	9303      	str	r3, [sp, #12]
 8003a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a7e:	443b      	add	r3, r7
 8003a80:	9309      	str	r3, [sp, #36]	; 0x24
 8003a82:	e767      	b.n	8003954 <_vfiprintf_r+0x94>
 8003a84:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a88:	460c      	mov	r4, r1
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	e7a5      	b.n	80039da <_vfiprintf_r+0x11a>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	3401      	adds	r4, #1
 8003a92:	9305      	str	r3, [sp, #20]
 8003a94:	4619      	mov	r1, r3
 8003a96:	f04f 0c0a 	mov.w	ip, #10
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003aa0:	3a30      	subs	r2, #48	; 0x30
 8003aa2:	2a09      	cmp	r2, #9
 8003aa4:	d903      	bls.n	8003aae <_vfiprintf_r+0x1ee>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0c5      	beq.n	8003a36 <_vfiprintf_r+0x176>
 8003aaa:	9105      	str	r1, [sp, #20]
 8003aac:	e7c3      	b.n	8003a36 <_vfiprintf_r+0x176>
 8003aae:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e7f0      	b.n	8003a9a <_vfiprintf_r+0x1da>
 8003ab8:	ab03      	add	r3, sp, #12
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	462a      	mov	r2, r5
 8003abe:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <_vfiprintf_r+0x258>)
 8003ac0:	a904      	add	r1, sp, #16
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f3af 8000 	nop.w
 8003ac8:	4607      	mov	r7, r0
 8003aca:	1c78      	adds	r0, r7, #1
 8003acc:	d1d6      	bne.n	8003a7c <_vfiprintf_r+0x1bc>
 8003ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ad0:	07d9      	lsls	r1, r3, #31
 8003ad2:	d405      	bmi.n	8003ae0 <_vfiprintf_r+0x220>
 8003ad4:	89ab      	ldrh	r3, [r5, #12]
 8003ad6:	059a      	lsls	r2, r3, #22
 8003ad8:	d402      	bmi.n	8003ae0 <_vfiprintf_r+0x220>
 8003ada:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003adc:	f000 fc45 	bl	800436a <__retarget_lock_release_recursive>
 8003ae0:	89ab      	ldrh	r3, [r5, #12]
 8003ae2:	065b      	lsls	r3, r3, #25
 8003ae4:	f53f af12 	bmi.w	800390c <_vfiprintf_r+0x4c>
 8003ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aea:	e711      	b.n	8003910 <_vfiprintf_r+0x50>
 8003aec:	ab03      	add	r3, sp, #12
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	462a      	mov	r2, r5
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <_vfiprintf_r+0x258>)
 8003af4:	a904      	add	r1, sp, #16
 8003af6:	4630      	mov	r0, r6
 8003af8:	f000 f880 	bl	8003bfc <_printf_i>
 8003afc:	e7e4      	b.n	8003ac8 <_vfiprintf_r+0x208>
 8003afe:	bf00      	nop
 8003b00:	0800496c 	.word	0x0800496c
 8003b04:	0800498c 	.word	0x0800498c
 8003b08:	0800494c 	.word	0x0800494c
 8003b0c:	08004918 	.word	0x08004918
 8003b10:	08004922 	.word	0x08004922
 8003b14:	00000000 	.word	0x00000000
 8003b18:	0800389b 	.word	0x0800389b
 8003b1c:	0800491e 	.word	0x0800491e

08003b20 <_printf_common>:
 8003b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b24:	4616      	mov	r6, r2
 8003b26:	4699      	mov	r9, r3
 8003b28:	688a      	ldr	r2, [r1, #8]
 8003b2a:	690b      	ldr	r3, [r1, #16]
 8003b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b30:	4293      	cmp	r3, r2
 8003b32:	bfb8      	it	lt
 8003b34:	4613      	movlt	r3, r2
 8003b36:	6033      	str	r3, [r6, #0]
 8003b38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b3c:	4607      	mov	r7, r0
 8003b3e:	460c      	mov	r4, r1
 8003b40:	b10a      	cbz	r2, 8003b46 <_printf_common+0x26>
 8003b42:	3301      	adds	r3, #1
 8003b44:	6033      	str	r3, [r6, #0]
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	0699      	lsls	r1, r3, #26
 8003b4a:	bf42      	ittt	mi
 8003b4c:	6833      	ldrmi	r3, [r6, #0]
 8003b4e:	3302      	addmi	r3, #2
 8003b50:	6033      	strmi	r3, [r6, #0]
 8003b52:	6825      	ldr	r5, [r4, #0]
 8003b54:	f015 0506 	ands.w	r5, r5, #6
 8003b58:	d106      	bne.n	8003b68 <_printf_common+0x48>
 8003b5a:	f104 0a19 	add.w	sl, r4, #25
 8003b5e:	68e3      	ldr	r3, [r4, #12]
 8003b60:	6832      	ldr	r2, [r6, #0]
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	42ab      	cmp	r3, r5
 8003b66:	dc26      	bgt.n	8003bb6 <_printf_common+0x96>
 8003b68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b6c:	1e13      	subs	r3, r2, #0
 8003b6e:	6822      	ldr	r2, [r4, #0]
 8003b70:	bf18      	it	ne
 8003b72:	2301      	movne	r3, #1
 8003b74:	0692      	lsls	r2, r2, #26
 8003b76:	d42b      	bmi.n	8003bd0 <_printf_common+0xb0>
 8003b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	4638      	mov	r0, r7
 8003b80:	47c0      	blx	r8
 8003b82:	3001      	adds	r0, #1
 8003b84:	d01e      	beq.n	8003bc4 <_printf_common+0xa4>
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	68e5      	ldr	r5, [r4, #12]
 8003b8a:	6832      	ldr	r2, [r6, #0]
 8003b8c:	f003 0306 	and.w	r3, r3, #6
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	bf08      	it	eq
 8003b94:	1aad      	subeq	r5, r5, r2
 8003b96:	68a3      	ldr	r3, [r4, #8]
 8003b98:	6922      	ldr	r2, [r4, #16]
 8003b9a:	bf0c      	ite	eq
 8003b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ba0:	2500      	movne	r5, #0
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	bfc4      	itt	gt
 8003ba6:	1a9b      	subgt	r3, r3, r2
 8003ba8:	18ed      	addgt	r5, r5, r3
 8003baa:	2600      	movs	r6, #0
 8003bac:	341a      	adds	r4, #26
 8003bae:	42b5      	cmp	r5, r6
 8003bb0:	d11a      	bne.n	8003be8 <_printf_common+0xc8>
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	e008      	b.n	8003bc8 <_printf_common+0xa8>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	4652      	mov	r2, sl
 8003bba:	4649      	mov	r1, r9
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	47c0      	blx	r8
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d103      	bne.n	8003bcc <_printf_common+0xac>
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bcc:	3501      	adds	r5, #1
 8003bce:	e7c6      	b.n	8003b5e <_printf_common+0x3e>
 8003bd0:	18e1      	adds	r1, r4, r3
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	2030      	movs	r0, #48	; 0x30
 8003bd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bda:	4422      	add	r2, r4
 8003bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003be0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003be4:	3302      	adds	r3, #2
 8003be6:	e7c7      	b.n	8003b78 <_printf_common+0x58>
 8003be8:	2301      	movs	r3, #1
 8003bea:	4622      	mov	r2, r4
 8003bec:	4649      	mov	r1, r9
 8003bee:	4638      	mov	r0, r7
 8003bf0:	47c0      	blx	r8
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d0e6      	beq.n	8003bc4 <_printf_common+0xa4>
 8003bf6:	3601      	adds	r6, #1
 8003bf8:	e7d9      	b.n	8003bae <_printf_common+0x8e>
	...

08003bfc <_printf_i>:
 8003bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c00:	7e0f      	ldrb	r7, [r1, #24]
 8003c02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c04:	2f78      	cmp	r7, #120	; 0x78
 8003c06:	4691      	mov	r9, r2
 8003c08:	4680      	mov	r8, r0
 8003c0a:	460c      	mov	r4, r1
 8003c0c:	469a      	mov	sl, r3
 8003c0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c12:	d807      	bhi.n	8003c24 <_printf_i+0x28>
 8003c14:	2f62      	cmp	r7, #98	; 0x62
 8003c16:	d80a      	bhi.n	8003c2e <_printf_i+0x32>
 8003c18:	2f00      	cmp	r7, #0
 8003c1a:	f000 80d8 	beq.w	8003dce <_printf_i+0x1d2>
 8003c1e:	2f58      	cmp	r7, #88	; 0x58
 8003c20:	f000 80a3 	beq.w	8003d6a <_printf_i+0x16e>
 8003c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c2c:	e03a      	b.n	8003ca4 <_printf_i+0xa8>
 8003c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c32:	2b15      	cmp	r3, #21
 8003c34:	d8f6      	bhi.n	8003c24 <_printf_i+0x28>
 8003c36:	a101      	add	r1, pc, #4	; (adr r1, 8003c3c <_printf_i+0x40>)
 8003c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c3c:	08003c95 	.word	0x08003c95
 8003c40:	08003ca9 	.word	0x08003ca9
 8003c44:	08003c25 	.word	0x08003c25
 8003c48:	08003c25 	.word	0x08003c25
 8003c4c:	08003c25 	.word	0x08003c25
 8003c50:	08003c25 	.word	0x08003c25
 8003c54:	08003ca9 	.word	0x08003ca9
 8003c58:	08003c25 	.word	0x08003c25
 8003c5c:	08003c25 	.word	0x08003c25
 8003c60:	08003c25 	.word	0x08003c25
 8003c64:	08003c25 	.word	0x08003c25
 8003c68:	08003db5 	.word	0x08003db5
 8003c6c:	08003cd9 	.word	0x08003cd9
 8003c70:	08003d97 	.word	0x08003d97
 8003c74:	08003c25 	.word	0x08003c25
 8003c78:	08003c25 	.word	0x08003c25
 8003c7c:	08003dd7 	.word	0x08003dd7
 8003c80:	08003c25 	.word	0x08003c25
 8003c84:	08003cd9 	.word	0x08003cd9
 8003c88:	08003c25 	.word	0x08003c25
 8003c8c:	08003c25 	.word	0x08003c25
 8003c90:	08003d9f 	.word	0x08003d9f
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	1d1a      	adds	r2, r3, #4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	602a      	str	r2, [r5, #0]
 8003c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0a3      	b.n	8003df0 <_printf_i+0x1f4>
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	6829      	ldr	r1, [r5, #0]
 8003cac:	0606      	lsls	r6, r0, #24
 8003cae:	f101 0304 	add.w	r3, r1, #4
 8003cb2:	d50a      	bpl.n	8003cca <_printf_i+0xce>
 8003cb4:	680e      	ldr	r6, [r1, #0]
 8003cb6:	602b      	str	r3, [r5, #0]
 8003cb8:	2e00      	cmp	r6, #0
 8003cba:	da03      	bge.n	8003cc4 <_printf_i+0xc8>
 8003cbc:	232d      	movs	r3, #45	; 0x2d
 8003cbe:	4276      	negs	r6, r6
 8003cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cc4:	485e      	ldr	r0, [pc, #376]	; (8003e40 <_printf_i+0x244>)
 8003cc6:	230a      	movs	r3, #10
 8003cc8:	e019      	b.n	8003cfe <_printf_i+0x102>
 8003cca:	680e      	ldr	r6, [r1, #0]
 8003ccc:	602b      	str	r3, [r5, #0]
 8003cce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cd2:	bf18      	it	ne
 8003cd4:	b236      	sxthne	r6, r6
 8003cd6:	e7ef      	b.n	8003cb8 <_printf_i+0xbc>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	6820      	ldr	r0, [r4, #0]
 8003cdc:	1d19      	adds	r1, r3, #4
 8003cde:	6029      	str	r1, [r5, #0]
 8003ce0:	0601      	lsls	r1, r0, #24
 8003ce2:	d501      	bpl.n	8003ce8 <_printf_i+0xec>
 8003ce4:	681e      	ldr	r6, [r3, #0]
 8003ce6:	e002      	b.n	8003cee <_printf_i+0xf2>
 8003ce8:	0646      	lsls	r6, r0, #25
 8003cea:	d5fb      	bpl.n	8003ce4 <_printf_i+0xe8>
 8003cec:	881e      	ldrh	r6, [r3, #0]
 8003cee:	4854      	ldr	r0, [pc, #336]	; (8003e40 <_printf_i+0x244>)
 8003cf0:	2f6f      	cmp	r7, #111	; 0x6f
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2308      	moveq	r3, #8
 8003cf6:	230a      	movne	r3, #10
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cfe:	6865      	ldr	r5, [r4, #4]
 8003d00:	60a5      	str	r5, [r4, #8]
 8003d02:	2d00      	cmp	r5, #0
 8003d04:	bfa2      	ittt	ge
 8003d06:	6821      	ldrge	r1, [r4, #0]
 8003d08:	f021 0104 	bicge.w	r1, r1, #4
 8003d0c:	6021      	strge	r1, [r4, #0]
 8003d0e:	b90e      	cbnz	r6, 8003d14 <_printf_i+0x118>
 8003d10:	2d00      	cmp	r5, #0
 8003d12:	d04d      	beq.n	8003db0 <_printf_i+0x1b4>
 8003d14:	4615      	mov	r5, r2
 8003d16:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d1a:	fb03 6711 	mls	r7, r3, r1, r6
 8003d1e:	5dc7      	ldrb	r7, [r0, r7]
 8003d20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d24:	4637      	mov	r7, r6
 8003d26:	42bb      	cmp	r3, r7
 8003d28:	460e      	mov	r6, r1
 8003d2a:	d9f4      	bls.n	8003d16 <_printf_i+0x11a>
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d10b      	bne.n	8003d48 <_printf_i+0x14c>
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	07de      	lsls	r6, r3, #31
 8003d34:	d508      	bpl.n	8003d48 <_printf_i+0x14c>
 8003d36:	6923      	ldr	r3, [r4, #16]
 8003d38:	6861      	ldr	r1, [r4, #4]
 8003d3a:	4299      	cmp	r1, r3
 8003d3c:	bfde      	ittt	le
 8003d3e:	2330      	movle	r3, #48	; 0x30
 8003d40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d48:	1b52      	subs	r2, r2, r5
 8003d4a:	6122      	str	r2, [r4, #16]
 8003d4c:	f8cd a000 	str.w	sl, [sp]
 8003d50:	464b      	mov	r3, r9
 8003d52:	aa03      	add	r2, sp, #12
 8003d54:	4621      	mov	r1, r4
 8003d56:	4640      	mov	r0, r8
 8003d58:	f7ff fee2 	bl	8003b20 <_printf_common>
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	d14c      	bne.n	8003dfa <_printf_i+0x1fe>
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
 8003d64:	b004      	add	sp, #16
 8003d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d6a:	4835      	ldr	r0, [pc, #212]	; (8003e40 <_printf_i+0x244>)
 8003d6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d70:	6829      	ldr	r1, [r5, #0]
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d78:	6029      	str	r1, [r5, #0]
 8003d7a:	061d      	lsls	r5, r3, #24
 8003d7c:	d514      	bpl.n	8003da8 <_printf_i+0x1ac>
 8003d7e:	07df      	lsls	r7, r3, #31
 8003d80:	bf44      	itt	mi
 8003d82:	f043 0320 	orrmi.w	r3, r3, #32
 8003d86:	6023      	strmi	r3, [r4, #0]
 8003d88:	b91e      	cbnz	r6, 8003d92 <_printf_i+0x196>
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	f023 0320 	bic.w	r3, r3, #32
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	2310      	movs	r3, #16
 8003d94:	e7b0      	b.n	8003cf8 <_printf_i+0xfc>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	f043 0320 	orr.w	r3, r3, #32
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	2378      	movs	r3, #120	; 0x78
 8003da0:	4828      	ldr	r0, [pc, #160]	; (8003e44 <_printf_i+0x248>)
 8003da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003da6:	e7e3      	b.n	8003d70 <_printf_i+0x174>
 8003da8:	0659      	lsls	r1, r3, #25
 8003daa:	bf48      	it	mi
 8003dac:	b2b6      	uxthmi	r6, r6
 8003dae:	e7e6      	b.n	8003d7e <_printf_i+0x182>
 8003db0:	4615      	mov	r5, r2
 8003db2:	e7bb      	b.n	8003d2c <_printf_i+0x130>
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	6826      	ldr	r6, [r4, #0]
 8003db8:	6961      	ldr	r1, [r4, #20]
 8003dba:	1d18      	adds	r0, r3, #4
 8003dbc:	6028      	str	r0, [r5, #0]
 8003dbe:	0635      	lsls	r5, r6, #24
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	d501      	bpl.n	8003dc8 <_printf_i+0x1cc>
 8003dc4:	6019      	str	r1, [r3, #0]
 8003dc6:	e002      	b.n	8003dce <_printf_i+0x1d2>
 8003dc8:	0670      	lsls	r0, r6, #25
 8003dca:	d5fb      	bpl.n	8003dc4 <_printf_i+0x1c8>
 8003dcc:	8019      	strh	r1, [r3, #0]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	6123      	str	r3, [r4, #16]
 8003dd2:	4615      	mov	r5, r2
 8003dd4:	e7ba      	b.n	8003d4c <_printf_i+0x150>
 8003dd6:	682b      	ldr	r3, [r5, #0]
 8003dd8:	1d1a      	adds	r2, r3, #4
 8003dda:	602a      	str	r2, [r5, #0]
 8003ddc:	681d      	ldr	r5, [r3, #0]
 8003dde:	6862      	ldr	r2, [r4, #4]
 8003de0:	2100      	movs	r1, #0
 8003de2:	4628      	mov	r0, r5
 8003de4:	f7fc fa0c 	bl	8000200 <memchr>
 8003de8:	b108      	cbz	r0, 8003dee <_printf_i+0x1f2>
 8003dea:	1b40      	subs	r0, r0, r5
 8003dec:	6060      	str	r0, [r4, #4]
 8003dee:	6863      	ldr	r3, [r4, #4]
 8003df0:	6123      	str	r3, [r4, #16]
 8003df2:	2300      	movs	r3, #0
 8003df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003df8:	e7a8      	b.n	8003d4c <_printf_i+0x150>
 8003dfa:	6923      	ldr	r3, [r4, #16]
 8003dfc:	462a      	mov	r2, r5
 8003dfe:	4649      	mov	r1, r9
 8003e00:	4640      	mov	r0, r8
 8003e02:	47d0      	blx	sl
 8003e04:	3001      	adds	r0, #1
 8003e06:	d0ab      	beq.n	8003d60 <_printf_i+0x164>
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	079b      	lsls	r3, r3, #30
 8003e0c:	d413      	bmi.n	8003e36 <_printf_i+0x23a>
 8003e0e:	68e0      	ldr	r0, [r4, #12]
 8003e10:	9b03      	ldr	r3, [sp, #12]
 8003e12:	4298      	cmp	r0, r3
 8003e14:	bfb8      	it	lt
 8003e16:	4618      	movlt	r0, r3
 8003e18:	e7a4      	b.n	8003d64 <_printf_i+0x168>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	4632      	mov	r2, r6
 8003e1e:	4649      	mov	r1, r9
 8003e20:	4640      	mov	r0, r8
 8003e22:	47d0      	blx	sl
 8003e24:	3001      	adds	r0, #1
 8003e26:	d09b      	beq.n	8003d60 <_printf_i+0x164>
 8003e28:	3501      	adds	r5, #1
 8003e2a:	68e3      	ldr	r3, [r4, #12]
 8003e2c:	9903      	ldr	r1, [sp, #12]
 8003e2e:	1a5b      	subs	r3, r3, r1
 8003e30:	42ab      	cmp	r3, r5
 8003e32:	dcf2      	bgt.n	8003e1a <_printf_i+0x21e>
 8003e34:	e7eb      	b.n	8003e0e <_printf_i+0x212>
 8003e36:	2500      	movs	r5, #0
 8003e38:	f104 0619 	add.w	r6, r4, #25
 8003e3c:	e7f5      	b.n	8003e2a <_printf_i+0x22e>
 8003e3e:	bf00      	nop
 8003e40:	08004929 	.word	0x08004929
 8003e44:	0800493a 	.word	0x0800493a

08003e48 <_sbrk_r>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4d06      	ldr	r5, [pc, #24]	; (8003e64 <_sbrk_r+0x1c>)
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	4604      	mov	r4, r0
 8003e50:	4608      	mov	r0, r1
 8003e52:	602b      	str	r3, [r5, #0]
 8003e54:	f7fd fa0c 	bl	8001270 <_sbrk>
 8003e58:	1c43      	adds	r3, r0, #1
 8003e5a:	d102      	bne.n	8003e62 <_sbrk_r+0x1a>
 8003e5c:	682b      	ldr	r3, [r5, #0]
 8003e5e:	b103      	cbz	r3, 8003e62 <_sbrk_r+0x1a>
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	bd38      	pop	{r3, r4, r5, pc}
 8003e64:	20000318 	.word	0x20000318

08003e68 <__swbuf_r>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	460e      	mov	r6, r1
 8003e6c:	4614      	mov	r4, r2
 8003e6e:	4605      	mov	r5, r0
 8003e70:	b118      	cbz	r0, 8003e7a <__swbuf_r+0x12>
 8003e72:	6983      	ldr	r3, [r0, #24]
 8003e74:	b90b      	cbnz	r3, 8003e7a <__swbuf_r+0x12>
 8003e76:	f000 f9d9 	bl	800422c <__sinit>
 8003e7a:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <__swbuf_r+0x98>)
 8003e7c:	429c      	cmp	r4, r3
 8003e7e:	d12b      	bne.n	8003ed8 <__swbuf_r+0x70>
 8003e80:	686c      	ldr	r4, [r5, #4]
 8003e82:	69a3      	ldr	r3, [r4, #24]
 8003e84:	60a3      	str	r3, [r4, #8]
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	071a      	lsls	r2, r3, #28
 8003e8a:	d52f      	bpl.n	8003eec <__swbuf_r+0x84>
 8003e8c:	6923      	ldr	r3, [r4, #16]
 8003e8e:	b36b      	cbz	r3, 8003eec <__swbuf_r+0x84>
 8003e90:	6923      	ldr	r3, [r4, #16]
 8003e92:	6820      	ldr	r0, [r4, #0]
 8003e94:	1ac0      	subs	r0, r0, r3
 8003e96:	6963      	ldr	r3, [r4, #20]
 8003e98:	b2f6      	uxtb	r6, r6
 8003e9a:	4283      	cmp	r3, r0
 8003e9c:	4637      	mov	r7, r6
 8003e9e:	dc04      	bgt.n	8003eaa <__swbuf_r+0x42>
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f000 f92e 	bl	8004104 <_fflush_r>
 8003ea8:	bb30      	cbnz	r0, 8003ef8 <__swbuf_r+0x90>
 8003eaa:	68a3      	ldr	r3, [r4, #8]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	60a3      	str	r3, [r4, #8]
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	6022      	str	r2, [r4, #0]
 8003eb6:	701e      	strb	r6, [r3, #0]
 8003eb8:	6963      	ldr	r3, [r4, #20]
 8003eba:	3001      	adds	r0, #1
 8003ebc:	4283      	cmp	r3, r0
 8003ebe:	d004      	beq.n	8003eca <__swbuf_r+0x62>
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	07db      	lsls	r3, r3, #31
 8003ec4:	d506      	bpl.n	8003ed4 <__swbuf_r+0x6c>
 8003ec6:	2e0a      	cmp	r6, #10
 8003ec8:	d104      	bne.n	8003ed4 <__swbuf_r+0x6c>
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f000 f919 	bl	8004104 <_fflush_r>
 8003ed2:	b988      	cbnz	r0, 8003ef8 <__swbuf_r+0x90>
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <__swbuf_r+0x9c>)
 8003eda:	429c      	cmp	r4, r3
 8003edc:	d101      	bne.n	8003ee2 <__swbuf_r+0x7a>
 8003ede:	68ac      	ldr	r4, [r5, #8]
 8003ee0:	e7cf      	b.n	8003e82 <__swbuf_r+0x1a>
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <__swbuf_r+0xa0>)
 8003ee4:	429c      	cmp	r4, r3
 8003ee6:	bf08      	it	eq
 8003ee8:	68ec      	ldreq	r4, [r5, #12]
 8003eea:	e7ca      	b.n	8003e82 <__swbuf_r+0x1a>
 8003eec:	4621      	mov	r1, r4
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f000 f80c 	bl	8003f0c <__swsetup_r>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d0cb      	beq.n	8003e90 <__swbuf_r+0x28>
 8003ef8:	f04f 37ff 	mov.w	r7, #4294967295
 8003efc:	e7ea      	b.n	8003ed4 <__swbuf_r+0x6c>
 8003efe:	bf00      	nop
 8003f00:	0800496c 	.word	0x0800496c
 8003f04:	0800498c 	.word	0x0800498c
 8003f08:	0800494c 	.word	0x0800494c

08003f0c <__swsetup_r>:
 8003f0c:	4b32      	ldr	r3, [pc, #200]	; (8003fd8 <__swsetup_r+0xcc>)
 8003f0e:	b570      	push	{r4, r5, r6, lr}
 8003f10:	681d      	ldr	r5, [r3, #0]
 8003f12:	4606      	mov	r6, r0
 8003f14:	460c      	mov	r4, r1
 8003f16:	b125      	cbz	r5, 8003f22 <__swsetup_r+0x16>
 8003f18:	69ab      	ldr	r3, [r5, #24]
 8003f1a:	b913      	cbnz	r3, 8003f22 <__swsetup_r+0x16>
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	f000 f985 	bl	800422c <__sinit>
 8003f22:	4b2e      	ldr	r3, [pc, #184]	; (8003fdc <__swsetup_r+0xd0>)
 8003f24:	429c      	cmp	r4, r3
 8003f26:	d10f      	bne.n	8003f48 <__swsetup_r+0x3c>
 8003f28:	686c      	ldr	r4, [r5, #4]
 8003f2a:	89a3      	ldrh	r3, [r4, #12]
 8003f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f30:	0719      	lsls	r1, r3, #28
 8003f32:	d42c      	bmi.n	8003f8e <__swsetup_r+0x82>
 8003f34:	06dd      	lsls	r5, r3, #27
 8003f36:	d411      	bmi.n	8003f5c <__swsetup_r+0x50>
 8003f38:	2309      	movs	r3, #9
 8003f3a:	6033      	str	r3, [r6, #0]
 8003f3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f40:	81a3      	strh	r3, [r4, #12]
 8003f42:	f04f 30ff 	mov.w	r0, #4294967295
 8003f46:	e03e      	b.n	8003fc6 <__swsetup_r+0xba>
 8003f48:	4b25      	ldr	r3, [pc, #148]	; (8003fe0 <__swsetup_r+0xd4>)
 8003f4a:	429c      	cmp	r4, r3
 8003f4c:	d101      	bne.n	8003f52 <__swsetup_r+0x46>
 8003f4e:	68ac      	ldr	r4, [r5, #8]
 8003f50:	e7eb      	b.n	8003f2a <__swsetup_r+0x1e>
 8003f52:	4b24      	ldr	r3, [pc, #144]	; (8003fe4 <__swsetup_r+0xd8>)
 8003f54:	429c      	cmp	r4, r3
 8003f56:	bf08      	it	eq
 8003f58:	68ec      	ldreq	r4, [r5, #12]
 8003f5a:	e7e6      	b.n	8003f2a <__swsetup_r+0x1e>
 8003f5c:	0758      	lsls	r0, r3, #29
 8003f5e:	d512      	bpl.n	8003f86 <__swsetup_r+0x7a>
 8003f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f62:	b141      	cbz	r1, 8003f76 <__swsetup_r+0x6a>
 8003f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f68:	4299      	cmp	r1, r3
 8003f6a:	d002      	beq.n	8003f72 <__swsetup_r+0x66>
 8003f6c:	4630      	mov	r0, r6
 8003f6e:	f7ff fb9d 	bl	80036ac <_free_r>
 8003f72:	2300      	movs	r3, #0
 8003f74:	6363      	str	r3, [r4, #52]	; 0x34
 8003f76:	89a3      	ldrh	r3, [r4, #12]
 8003f78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	6063      	str	r3, [r4, #4]
 8003f82:	6923      	ldr	r3, [r4, #16]
 8003f84:	6023      	str	r3, [r4, #0]
 8003f86:	89a3      	ldrh	r3, [r4, #12]
 8003f88:	f043 0308 	orr.w	r3, r3, #8
 8003f8c:	81a3      	strh	r3, [r4, #12]
 8003f8e:	6923      	ldr	r3, [r4, #16]
 8003f90:	b94b      	cbnz	r3, 8003fa6 <__swsetup_r+0x9a>
 8003f92:	89a3      	ldrh	r3, [r4, #12]
 8003f94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9c:	d003      	beq.n	8003fa6 <__swsetup_r+0x9a>
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	4630      	mov	r0, r6
 8003fa2:	f000 fa09 	bl	80043b8 <__smakebuf_r>
 8003fa6:	89a0      	ldrh	r0, [r4, #12]
 8003fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fac:	f010 0301 	ands.w	r3, r0, #1
 8003fb0:	d00a      	beq.n	8003fc8 <__swsetup_r+0xbc>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60a3      	str	r3, [r4, #8]
 8003fb6:	6963      	ldr	r3, [r4, #20]
 8003fb8:	425b      	negs	r3, r3
 8003fba:	61a3      	str	r3, [r4, #24]
 8003fbc:	6923      	ldr	r3, [r4, #16]
 8003fbe:	b943      	cbnz	r3, 8003fd2 <__swsetup_r+0xc6>
 8003fc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fc4:	d1ba      	bne.n	8003f3c <__swsetup_r+0x30>
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}
 8003fc8:	0781      	lsls	r1, r0, #30
 8003fca:	bf58      	it	pl
 8003fcc:	6963      	ldrpl	r3, [r4, #20]
 8003fce:	60a3      	str	r3, [r4, #8]
 8003fd0:	e7f4      	b.n	8003fbc <__swsetup_r+0xb0>
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	e7f7      	b.n	8003fc6 <__swsetup_r+0xba>
 8003fd6:	bf00      	nop
 8003fd8:	2000000c 	.word	0x2000000c
 8003fdc:	0800496c 	.word	0x0800496c
 8003fe0:	0800498c 	.word	0x0800498c
 8003fe4:	0800494c 	.word	0x0800494c

08003fe8 <abort>:
 8003fe8:	b508      	push	{r3, lr}
 8003fea:	2006      	movs	r0, #6
 8003fec:	f000 fa58 	bl	80044a0 <raise>
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	f7fd f8c5 	bl	8001180 <_exit>
	...

08003ff8 <__sflush_r>:
 8003ff8:	898a      	ldrh	r2, [r1, #12]
 8003ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffe:	4605      	mov	r5, r0
 8004000:	0710      	lsls	r0, r2, #28
 8004002:	460c      	mov	r4, r1
 8004004:	d458      	bmi.n	80040b8 <__sflush_r+0xc0>
 8004006:	684b      	ldr	r3, [r1, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	dc05      	bgt.n	8004018 <__sflush_r+0x20>
 800400c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	dc02      	bgt.n	8004018 <__sflush_r+0x20>
 8004012:	2000      	movs	r0, #0
 8004014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800401a:	2e00      	cmp	r6, #0
 800401c:	d0f9      	beq.n	8004012 <__sflush_r+0x1a>
 800401e:	2300      	movs	r3, #0
 8004020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004024:	682f      	ldr	r7, [r5, #0]
 8004026:	602b      	str	r3, [r5, #0]
 8004028:	d032      	beq.n	8004090 <__sflush_r+0x98>
 800402a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	075a      	lsls	r2, r3, #29
 8004030:	d505      	bpl.n	800403e <__sflush_r+0x46>
 8004032:	6863      	ldr	r3, [r4, #4]
 8004034:	1ac0      	subs	r0, r0, r3
 8004036:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004038:	b10b      	cbz	r3, 800403e <__sflush_r+0x46>
 800403a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800403c:	1ac0      	subs	r0, r0, r3
 800403e:	2300      	movs	r3, #0
 8004040:	4602      	mov	r2, r0
 8004042:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004044:	6a21      	ldr	r1, [r4, #32]
 8004046:	4628      	mov	r0, r5
 8004048:	47b0      	blx	r6
 800404a:	1c43      	adds	r3, r0, #1
 800404c:	89a3      	ldrh	r3, [r4, #12]
 800404e:	d106      	bne.n	800405e <__sflush_r+0x66>
 8004050:	6829      	ldr	r1, [r5, #0]
 8004052:	291d      	cmp	r1, #29
 8004054:	d82c      	bhi.n	80040b0 <__sflush_r+0xb8>
 8004056:	4a2a      	ldr	r2, [pc, #168]	; (8004100 <__sflush_r+0x108>)
 8004058:	40ca      	lsrs	r2, r1
 800405a:	07d6      	lsls	r6, r2, #31
 800405c:	d528      	bpl.n	80040b0 <__sflush_r+0xb8>
 800405e:	2200      	movs	r2, #0
 8004060:	6062      	str	r2, [r4, #4]
 8004062:	04d9      	lsls	r1, r3, #19
 8004064:	6922      	ldr	r2, [r4, #16]
 8004066:	6022      	str	r2, [r4, #0]
 8004068:	d504      	bpl.n	8004074 <__sflush_r+0x7c>
 800406a:	1c42      	adds	r2, r0, #1
 800406c:	d101      	bne.n	8004072 <__sflush_r+0x7a>
 800406e:	682b      	ldr	r3, [r5, #0]
 8004070:	b903      	cbnz	r3, 8004074 <__sflush_r+0x7c>
 8004072:	6560      	str	r0, [r4, #84]	; 0x54
 8004074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004076:	602f      	str	r7, [r5, #0]
 8004078:	2900      	cmp	r1, #0
 800407a:	d0ca      	beq.n	8004012 <__sflush_r+0x1a>
 800407c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004080:	4299      	cmp	r1, r3
 8004082:	d002      	beq.n	800408a <__sflush_r+0x92>
 8004084:	4628      	mov	r0, r5
 8004086:	f7ff fb11 	bl	80036ac <_free_r>
 800408a:	2000      	movs	r0, #0
 800408c:	6360      	str	r0, [r4, #52]	; 0x34
 800408e:	e7c1      	b.n	8004014 <__sflush_r+0x1c>
 8004090:	6a21      	ldr	r1, [r4, #32]
 8004092:	2301      	movs	r3, #1
 8004094:	4628      	mov	r0, r5
 8004096:	47b0      	blx	r6
 8004098:	1c41      	adds	r1, r0, #1
 800409a:	d1c7      	bne.n	800402c <__sflush_r+0x34>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0c4      	beq.n	800402c <__sflush_r+0x34>
 80040a2:	2b1d      	cmp	r3, #29
 80040a4:	d001      	beq.n	80040aa <__sflush_r+0xb2>
 80040a6:	2b16      	cmp	r3, #22
 80040a8:	d101      	bne.n	80040ae <__sflush_r+0xb6>
 80040aa:	602f      	str	r7, [r5, #0]
 80040ac:	e7b1      	b.n	8004012 <__sflush_r+0x1a>
 80040ae:	89a3      	ldrh	r3, [r4, #12]
 80040b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b4:	81a3      	strh	r3, [r4, #12]
 80040b6:	e7ad      	b.n	8004014 <__sflush_r+0x1c>
 80040b8:	690f      	ldr	r7, [r1, #16]
 80040ba:	2f00      	cmp	r7, #0
 80040bc:	d0a9      	beq.n	8004012 <__sflush_r+0x1a>
 80040be:	0793      	lsls	r3, r2, #30
 80040c0:	680e      	ldr	r6, [r1, #0]
 80040c2:	bf08      	it	eq
 80040c4:	694b      	ldreq	r3, [r1, #20]
 80040c6:	600f      	str	r7, [r1, #0]
 80040c8:	bf18      	it	ne
 80040ca:	2300      	movne	r3, #0
 80040cc:	eba6 0807 	sub.w	r8, r6, r7
 80040d0:	608b      	str	r3, [r1, #8]
 80040d2:	f1b8 0f00 	cmp.w	r8, #0
 80040d6:	dd9c      	ble.n	8004012 <__sflush_r+0x1a>
 80040d8:	6a21      	ldr	r1, [r4, #32]
 80040da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040dc:	4643      	mov	r3, r8
 80040de:	463a      	mov	r2, r7
 80040e0:	4628      	mov	r0, r5
 80040e2:	47b0      	blx	r6
 80040e4:	2800      	cmp	r0, #0
 80040e6:	dc06      	bgt.n	80040f6 <__sflush_r+0xfe>
 80040e8:	89a3      	ldrh	r3, [r4, #12]
 80040ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ee:	81a3      	strh	r3, [r4, #12]
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295
 80040f4:	e78e      	b.n	8004014 <__sflush_r+0x1c>
 80040f6:	4407      	add	r7, r0
 80040f8:	eba8 0800 	sub.w	r8, r8, r0
 80040fc:	e7e9      	b.n	80040d2 <__sflush_r+0xda>
 80040fe:	bf00      	nop
 8004100:	20400001 	.word	0x20400001

08004104 <_fflush_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	690b      	ldr	r3, [r1, #16]
 8004108:	4605      	mov	r5, r0
 800410a:	460c      	mov	r4, r1
 800410c:	b913      	cbnz	r3, 8004114 <_fflush_r+0x10>
 800410e:	2500      	movs	r5, #0
 8004110:	4628      	mov	r0, r5
 8004112:	bd38      	pop	{r3, r4, r5, pc}
 8004114:	b118      	cbz	r0, 800411e <_fflush_r+0x1a>
 8004116:	6983      	ldr	r3, [r0, #24]
 8004118:	b90b      	cbnz	r3, 800411e <_fflush_r+0x1a>
 800411a:	f000 f887 	bl	800422c <__sinit>
 800411e:	4b14      	ldr	r3, [pc, #80]	; (8004170 <_fflush_r+0x6c>)
 8004120:	429c      	cmp	r4, r3
 8004122:	d11b      	bne.n	800415c <_fflush_r+0x58>
 8004124:	686c      	ldr	r4, [r5, #4]
 8004126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0ef      	beq.n	800410e <_fflush_r+0xa>
 800412e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004130:	07d0      	lsls	r0, r2, #31
 8004132:	d404      	bmi.n	800413e <_fflush_r+0x3a>
 8004134:	0599      	lsls	r1, r3, #22
 8004136:	d402      	bmi.n	800413e <_fflush_r+0x3a>
 8004138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800413a:	f000 f915 	bl	8004368 <__retarget_lock_acquire_recursive>
 800413e:	4628      	mov	r0, r5
 8004140:	4621      	mov	r1, r4
 8004142:	f7ff ff59 	bl	8003ff8 <__sflush_r>
 8004146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004148:	07da      	lsls	r2, r3, #31
 800414a:	4605      	mov	r5, r0
 800414c:	d4e0      	bmi.n	8004110 <_fflush_r+0xc>
 800414e:	89a3      	ldrh	r3, [r4, #12]
 8004150:	059b      	lsls	r3, r3, #22
 8004152:	d4dd      	bmi.n	8004110 <_fflush_r+0xc>
 8004154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004156:	f000 f908 	bl	800436a <__retarget_lock_release_recursive>
 800415a:	e7d9      	b.n	8004110 <_fflush_r+0xc>
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <_fflush_r+0x70>)
 800415e:	429c      	cmp	r4, r3
 8004160:	d101      	bne.n	8004166 <_fflush_r+0x62>
 8004162:	68ac      	ldr	r4, [r5, #8]
 8004164:	e7df      	b.n	8004126 <_fflush_r+0x22>
 8004166:	4b04      	ldr	r3, [pc, #16]	; (8004178 <_fflush_r+0x74>)
 8004168:	429c      	cmp	r4, r3
 800416a:	bf08      	it	eq
 800416c:	68ec      	ldreq	r4, [r5, #12]
 800416e:	e7da      	b.n	8004126 <_fflush_r+0x22>
 8004170:	0800496c 	.word	0x0800496c
 8004174:	0800498c 	.word	0x0800498c
 8004178:	0800494c 	.word	0x0800494c

0800417c <std>:
 800417c:	2300      	movs	r3, #0
 800417e:	b510      	push	{r4, lr}
 8004180:	4604      	mov	r4, r0
 8004182:	e9c0 3300 	strd	r3, r3, [r0]
 8004186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800418a:	6083      	str	r3, [r0, #8]
 800418c:	8181      	strh	r1, [r0, #12]
 800418e:	6643      	str	r3, [r0, #100]	; 0x64
 8004190:	81c2      	strh	r2, [r0, #14]
 8004192:	6183      	str	r3, [r0, #24]
 8004194:	4619      	mov	r1, r3
 8004196:	2208      	movs	r2, #8
 8004198:	305c      	adds	r0, #92	; 0x5c
 800419a:	f7ff fa7f 	bl	800369c <memset>
 800419e:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <std+0x38>)
 80041a0:	6263      	str	r3, [r4, #36]	; 0x24
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <std+0x3c>)
 80041a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <std+0x40>)
 80041a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <std+0x44>)
 80041ac:	6224      	str	r4, [r4, #32]
 80041ae:	6323      	str	r3, [r4, #48]	; 0x30
 80041b0:	bd10      	pop	{r4, pc}
 80041b2:	bf00      	nop
 80041b4:	080044d9 	.word	0x080044d9
 80041b8:	080044fb 	.word	0x080044fb
 80041bc:	08004533 	.word	0x08004533
 80041c0:	08004557 	.word	0x08004557

080041c4 <_cleanup_r>:
 80041c4:	4901      	ldr	r1, [pc, #4]	; (80041cc <_cleanup_r+0x8>)
 80041c6:	f000 b8af 	b.w	8004328 <_fwalk_reent>
 80041ca:	bf00      	nop
 80041cc:	08004105 	.word	0x08004105

080041d0 <__sfmoreglue>:
 80041d0:	b570      	push	{r4, r5, r6, lr}
 80041d2:	2268      	movs	r2, #104	; 0x68
 80041d4:	1e4d      	subs	r5, r1, #1
 80041d6:	4355      	muls	r5, r2
 80041d8:	460e      	mov	r6, r1
 80041da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041de:	f7ff fad1 	bl	8003784 <_malloc_r>
 80041e2:	4604      	mov	r4, r0
 80041e4:	b140      	cbz	r0, 80041f8 <__sfmoreglue+0x28>
 80041e6:	2100      	movs	r1, #0
 80041e8:	e9c0 1600 	strd	r1, r6, [r0]
 80041ec:	300c      	adds	r0, #12
 80041ee:	60a0      	str	r0, [r4, #8]
 80041f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041f4:	f7ff fa52 	bl	800369c <memset>
 80041f8:	4620      	mov	r0, r4
 80041fa:	bd70      	pop	{r4, r5, r6, pc}

080041fc <__sfp_lock_acquire>:
 80041fc:	4801      	ldr	r0, [pc, #4]	; (8004204 <__sfp_lock_acquire+0x8>)
 80041fe:	f000 b8b3 	b.w	8004368 <__retarget_lock_acquire_recursive>
 8004202:	bf00      	nop
 8004204:	20000315 	.word	0x20000315

08004208 <__sfp_lock_release>:
 8004208:	4801      	ldr	r0, [pc, #4]	; (8004210 <__sfp_lock_release+0x8>)
 800420a:	f000 b8ae 	b.w	800436a <__retarget_lock_release_recursive>
 800420e:	bf00      	nop
 8004210:	20000315 	.word	0x20000315

08004214 <__sinit_lock_acquire>:
 8004214:	4801      	ldr	r0, [pc, #4]	; (800421c <__sinit_lock_acquire+0x8>)
 8004216:	f000 b8a7 	b.w	8004368 <__retarget_lock_acquire_recursive>
 800421a:	bf00      	nop
 800421c:	20000316 	.word	0x20000316

08004220 <__sinit_lock_release>:
 8004220:	4801      	ldr	r0, [pc, #4]	; (8004228 <__sinit_lock_release+0x8>)
 8004222:	f000 b8a2 	b.w	800436a <__retarget_lock_release_recursive>
 8004226:	bf00      	nop
 8004228:	20000316 	.word	0x20000316

0800422c <__sinit>:
 800422c:	b510      	push	{r4, lr}
 800422e:	4604      	mov	r4, r0
 8004230:	f7ff fff0 	bl	8004214 <__sinit_lock_acquire>
 8004234:	69a3      	ldr	r3, [r4, #24]
 8004236:	b11b      	cbz	r3, 8004240 <__sinit+0x14>
 8004238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800423c:	f7ff bff0 	b.w	8004220 <__sinit_lock_release>
 8004240:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004244:	6523      	str	r3, [r4, #80]	; 0x50
 8004246:	4b13      	ldr	r3, [pc, #76]	; (8004294 <__sinit+0x68>)
 8004248:	4a13      	ldr	r2, [pc, #76]	; (8004298 <__sinit+0x6c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	62a2      	str	r2, [r4, #40]	; 0x28
 800424e:	42a3      	cmp	r3, r4
 8004250:	bf04      	itt	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	61a3      	streq	r3, [r4, #24]
 8004256:	4620      	mov	r0, r4
 8004258:	f000 f820 	bl	800429c <__sfp>
 800425c:	6060      	str	r0, [r4, #4]
 800425e:	4620      	mov	r0, r4
 8004260:	f000 f81c 	bl	800429c <__sfp>
 8004264:	60a0      	str	r0, [r4, #8]
 8004266:	4620      	mov	r0, r4
 8004268:	f000 f818 	bl	800429c <__sfp>
 800426c:	2200      	movs	r2, #0
 800426e:	60e0      	str	r0, [r4, #12]
 8004270:	2104      	movs	r1, #4
 8004272:	6860      	ldr	r0, [r4, #4]
 8004274:	f7ff ff82 	bl	800417c <std>
 8004278:	68a0      	ldr	r0, [r4, #8]
 800427a:	2201      	movs	r2, #1
 800427c:	2109      	movs	r1, #9
 800427e:	f7ff ff7d 	bl	800417c <std>
 8004282:	68e0      	ldr	r0, [r4, #12]
 8004284:	2202      	movs	r2, #2
 8004286:	2112      	movs	r1, #18
 8004288:	f7ff ff78 	bl	800417c <std>
 800428c:	2301      	movs	r3, #1
 800428e:	61a3      	str	r3, [r4, #24]
 8004290:	e7d2      	b.n	8004238 <__sinit+0xc>
 8004292:	bf00      	nop
 8004294:	08004914 	.word	0x08004914
 8004298:	080041c5 	.word	0x080041c5

0800429c <__sfp>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	4607      	mov	r7, r0
 80042a0:	f7ff ffac 	bl	80041fc <__sfp_lock_acquire>
 80042a4:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <__sfp+0x84>)
 80042a6:	681e      	ldr	r6, [r3, #0]
 80042a8:	69b3      	ldr	r3, [r6, #24]
 80042aa:	b913      	cbnz	r3, 80042b2 <__sfp+0x16>
 80042ac:	4630      	mov	r0, r6
 80042ae:	f7ff ffbd 	bl	800422c <__sinit>
 80042b2:	3648      	adds	r6, #72	; 0x48
 80042b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	d503      	bpl.n	80042c4 <__sfp+0x28>
 80042bc:	6833      	ldr	r3, [r6, #0]
 80042be:	b30b      	cbz	r3, 8004304 <__sfp+0x68>
 80042c0:	6836      	ldr	r6, [r6, #0]
 80042c2:	e7f7      	b.n	80042b4 <__sfp+0x18>
 80042c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80042c8:	b9d5      	cbnz	r5, 8004300 <__sfp+0x64>
 80042ca:	4b16      	ldr	r3, [pc, #88]	; (8004324 <__sfp+0x88>)
 80042cc:	60e3      	str	r3, [r4, #12]
 80042ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042d2:	6665      	str	r5, [r4, #100]	; 0x64
 80042d4:	f000 f847 	bl	8004366 <__retarget_lock_init_recursive>
 80042d8:	f7ff ff96 	bl	8004208 <__sfp_lock_release>
 80042dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80042e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80042e4:	6025      	str	r5, [r4, #0]
 80042e6:	61a5      	str	r5, [r4, #24]
 80042e8:	2208      	movs	r2, #8
 80042ea:	4629      	mov	r1, r5
 80042ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042f0:	f7ff f9d4 	bl	800369c <memset>
 80042f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80042f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80042fc:	4620      	mov	r0, r4
 80042fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004300:	3468      	adds	r4, #104	; 0x68
 8004302:	e7d9      	b.n	80042b8 <__sfp+0x1c>
 8004304:	2104      	movs	r1, #4
 8004306:	4638      	mov	r0, r7
 8004308:	f7ff ff62 	bl	80041d0 <__sfmoreglue>
 800430c:	4604      	mov	r4, r0
 800430e:	6030      	str	r0, [r6, #0]
 8004310:	2800      	cmp	r0, #0
 8004312:	d1d5      	bne.n	80042c0 <__sfp+0x24>
 8004314:	f7ff ff78 	bl	8004208 <__sfp_lock_release>
 8004318:	230c      	movs	r3, #12
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	e7ee      	b.n	80042fc <__sfp+0x60>
 800431e:	bf00      	nop
 8004320:	08004914 	.word	0x08004914
 8004324:	ffff0001 	.word	0xffff0001

08004328 <_fwalk_reent>:
 8004328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800432c:	4606      	mov	r6, r0
 800432e:	4688      	mov	r8, r1
 8004330:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004334:	2700      	movs	r7, #0
 8004336:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800433a:	f1b9 0901 	subs.w	r9, r9, #1
 800433e:	d505      	bpl.n	800434c <_fwalk_reent+0x24>
 8004340:	6824      	ldr	r4, [r4, #0]
 8004342:	2c00      	cmp	r4, #0
 8004344:	d1f7      	bne.n	8004336 <_fwalk_reent+0xe>
 8004346:	4638      	mov	r0, r7
 8004348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800434c:	89ab      	ldrh	r3, [r5, #12]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d907      	bls.n	8004362 <_fwalk_reent+0x3a>
 8004352:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004356:	3301      	adds	r3, #1
 8004358:	d003      	beq.n	8004362 <_fwalk_reent+0x3a>
 800435a:	4629      	mov	r1, r5
 800435c:	4630      	mov	r0, r6
 800435e:	47c0      	blx	r8
 8004360:	4307      	orrs	r7, r0
 8004362:	3568      	adds	r5, #104	; 0x68
 8004364:	e7e9      	b.n	800433a <_fwalk_reent+0x12>

08004366 <__retarget_lock_init_recursive>:
 8004366:	4770      	bx	lr

08004368 <__retarget_lock_acquire_recursive>:
 8004368:	4770      	bx	lr

0800436a <__retarget_lock_release_recursive>:
 800436a:	4770      	bx	lr

0800436c <__swhatbuf_r>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	460e      	mov	r6, r1
 8004370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004374:	2900      	cmp	r1, #0
 8004376:	b096      	sub	sp, #88	; 0x58
 8004378:	4614      	mov	r4, r2
 800437a:	461d      	mov	r5, r3
 800437c:	da08      	bge.n	8004390 <__swhatbuf_r+0x24>
 800437e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	602a      	str	r2, [r5, #0]
 8004386:	061a      	lsls	r2, r3, #24
 8004388:	d410      	bmi.n	80043ac <__swhatbuf_r+0x40>
 800438a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800438e:	e00e      	b.n	80043ae <__swhatbuf_r+0x42>
 8004390:	466a      	mov	r2, sp
 8004392:	f000 f907 	bl	80045a4 <_fstat_r>
 8004396:	2800      	cmp	r0, #0
 8004398:	dbf1      	blt.n	800437e <__swhatbuf_r+0x12>
 800439a:	9a01      	ldr	r2, [sp, #4]
 800439c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80043a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80043a4:	425a      	negs	r2, r3
 80043a6:	415a      	adcs	r2, r3
 80043a8:	602a      	str	r2, [r5, #0]
 80043aa:	e7ee      	b.n	800438a <__swhatbuf_r+0x1e>
 80043ac:	2340      	movs	r3, #64	; 0x40
 80043ae:	2000      	movs	r0, #0
 80043b0:	6023      	str	r3, [r4, #0]
 80043b2:	b016      	add	sp, #88	; 0x58
 80043b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080043b8 <__smakebuf_r>:
 80043b8:	898b      	ldrh	r3, [r1, #12]
 80043ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043bc:	079d      	lsls	r5, r3, #30
 80043be:	4606      	mov	r6, r0
 80043c0:	460c      	mov	r4, r1
 80043c2:	d507      	bpl.n	80043d4 <__smakebuf_r+0x1c>
 80043c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80043c8:	6023      	str	r3, [r4, #0]
 80043ca:	6123      	str	r3, [r4, #16]
 80043cc:	2301      	movs	r3, #1
 80043ce:	6163      	str	r3, [r4, #20]
 80043d0:	b002      	add	sp, #8
 80043d2:	bd70      	pop	{r4, r5, r6, pc}
 80043d4:	ab01      	add	r3, sp, #4
 80043d6:	466a      	mov	r2, sp
 80043d8:	f7ff ffc8 	bl	800436c <__swhatbuf_r>
 80043dc:	9900      	ldr	r1, [sp, #0]
 80043de:	4605      	mov	r5, r0
 80043e0:	4630      	mov	r0, r6
 80043e2:	f7ff f9cf 	bl	8003784 <_malloc_r>
 80043e6:	b948      	cbnz	r0, 80043fc <__smakebuf_r+0x44>
 80043e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ec:	059a      	lsls	r2, r3, #22
 80043ee:	d4ef      	bmi.n	80043d0 <__smakebuf_r+0x18>
 80043f0:	f023 0303 	bic.w	r3, r3, #3
 80043f4:	f043 0302 	orr.w	r3, r3, #2
 80043f8:	81a3      	strh	r3, [r4, #12]
 80043fa:	e7e3      	b.n	80043c4 <__smakebuf_r+0xc>
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <__smakebuf_r+0x7c>)
 80043fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	6020      	str	r0, [r4, #0]
 8004404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004408:	81a3      	strh	r3, [r4, #12]
 800440a:	9b00      	ldr	r3, [sp, #0]
 800440c:	6163      	str	r3, [r4, #20]
 800440e:	9b01      	ldr	r3, [sp, #4]
 8004410:	6120      	str	r0, [r4, #16]
 8004412:	b15b      	cbz	r3, 800442c <__smakebuf_r+0x74>
 8004414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004418:	4630      	mov	r0, r6
 800441a:	f000 f8d5 	bl	80045c8 <_isatty_r>
 800441e:	b128      	cbz	r0, 800442c <__smakebuf_r+0x74>
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	81a3      	strh	r3, [r4, #12]
 800442c:	89a0      	ldrh	r0, [r4, #12]
 800442e:	4305      	orrs	r5, r0
 8004430:	81a5      	strh	r5, [r4, #12]
 8004432:	e7cd      	b.n	80043d0 <__smakebuf_r+0x18>
 8004434:	080041c5 	.word	0x080041c5

08004438 <__malloc_lock>:
 8004438:	4801      	ldr	r0, [pc, #4]	; (8004440 <__malloc_lock+0x8>)
 800443a:	f7ff bf95 	b.w	8004368 <__retarget_lock_acquire_recursive>
 800443e:	bf00      	nop
 8004440:	20000314 	.word	0x20000314

08004444 <__malloc_unlock>:
 8004444:	4801      	ldr	r0, [pc, #4]	; (800444c <__malloc_unlock+0x8>)
 8004446:	f7ff bf90 	b.w	800436a <__retarget_lock_release_recursive>
 800444a:	bf00      	nop
 800444c:	20000314 	.word	0x20000314

08004450 <_raise_r>:
 8004450:	291f      	cmp	r1, #31
 8004452:	b538      	push	{r3, r4, r5, lr}
 8004454:	4604      	mov	r4, r0
 8004456:	460d      	mov	r5, r1
 8004458:	d904      	bls.n	8004464 <_raise_r+0x14>
 800445a:	2316      	movs	r3, #22
 800445c:	6003      	str	r3, [r0, #0]
 800445e:	f04f 30ff 	mov.w	r0, #4294967295
 8004462:	bd38      	pop	{r3, r4, r5, pc}
 8004464:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004466:	b112      	cbz	r2, 800446e <_raise_r+0x1e>
 8004468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800446c:	b94b      	cbnz	r3, 8004482 <_raise_r+0x32>
 800446e:	4620      	mov	r0, r4
 8004470:	f000 f830 	bl	80044d4 <_getpid_r>
 8004474:	462a      	mov	r2, r5
 8004476:	4601      	mov	r1, r0
 8004478:	4620      	mov	r0, r4
 800447a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800447e:	f000 b817 	b.w	80044b0 <_kill_r>
 8004482:	2b01      	cmp	r3, #1
 8004484:	d00a      	beq.n	800449c <_raise_r+0x4c>
 8004486:	1c59      	adds	r1, r3, #1
 8004488:	d103      	bne.n	8004492 <_raise_r+0x42>
 800448a:	2316      	movs	r3, #22
 800448c:	6003      	str	r3, [r0, #0]
 800448e:	2001      	movs	r0, #1
 8004490:	e7e7      	b.n	8004462 <_raise_r+0x12>
 8004492:	2400      	movs	r4, #0
 8004494:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004498:	4628      	mov	r0, r5
 800449a:	4798      	blx	r3
 800449c:	2000      	movs	r0, #0
 800449e:	e7e0      	b.n	8004462 <_raise_r+0x12>

080044a0 <raise>:
 80044a0:	4b02      	ldr	r3, [pc, #8]	; (80044ac <raise+0xc>)
 80044a2:	4601      	mov	r1, r0
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	f7ff bfd3 	b.w	8004450 <_raise_r>
 80044aa:	bf00      	nop
 80044ac:	2000000c 	.word	0x2000000c

080044b0 <_kill_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4d07      	ldr	r5, [pc, #28]	; (80044d0 <_kill_r+0x20>)
 80044b4:	2300      	movs	r3, #0
 80044b6:	4604      	mov	r4, r0
 80044b8:	4608      	mov	r0, r1
 80044ba:	4611      	mov	r1, r2
 80044bc:	602b      	str	r3, [r5, #0]
 80044be:	f7fc fe4f 	bl	8001160 <_kill>
 80044c2:	1c43      	adds	r3, r0, #1
 80044c4:	d102      	bne.n	80044cc <_kill_r+0x1c>
 80044c6:	682b      	ldr	r3, [r5, #0]
 80044c8:	b103      	cbz	r3, 80044cc <_kill_r+0x1c>
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	bd38      	pop	{r3, r4, r5, pc}
 80044ce:	bf00      	nop
 80044d0:	20000318 	.word	0x20000318

080044d4 <_getpid_r>:
 80044d4:	f7fc be3c 	b.w	8001150 <_getpid>

080044d8 <__sread>:
 80044d8:	b510      	push	{r4, lr}
 80044da:	460c      	mov	r4, r1
 80044dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e0:	f000 f894 	bl	800460c <_read_r>
 80044e4:	2800      	cmp	r0, #0
 80044e6:	bfab      	itete	ge
 80044e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044ea:	89a3      	ldrhlt	r3, [r4, #12]
 80044ec:	181b      	addge	r3, r3, r0
 80044ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044f2:	bfac      	ite	ge
 80044f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80044f6:	81a3      	strhlt	r3, [r4, #12]
 80044f8:	bd10      	pop	{r4, pc}

080044fa <__swrite>:
 80044fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044fe:	461f      	mov	r7, r3
 8004500:	898b      	ldrh	r3, [r1, #12]
 8004502:	05db      	lsls	r3, r3, #23
 8004504:	4605      	mov	r5, r0
 8004506:	460c      	mov	r4, r1
 8004508:	4616      	mov	r6, r2
 800450a:	d505      	bpl.n	8004518 <__swrite+0x1e>
 800450c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004510:	2302      	movs	r3, #2
 8004512:	2200      	movs	r2, #0
 8004514:	f000 f868 	bl	80045e8 <_lseek_r>
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800451e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004522:	81a3      	strh	r3, [r4, #12]
 8004524:	4632      	mov	r2, r6
 8004526:	463b      	mov	r3, r7
 8004528:	4628      	mov	r0, r5
 800452a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800452e:	f000 b817 	b.w	8004560 <_write_r>

08004532 <__sseek>:
 8004532:	b510      	push	{r4, lr}
 8004534:	460c      	mov	r4, r1
 8004536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800453a:	f000 f855 	bl	80045e8 <_lseek_r>
 800453e:	1c43      	adds	r3, r0, #1
 8004540:	89a3      	ldrh	r3, [r4, #12]
 8004542:	bf15      	itete	ne
 8004544:	6560      	strne	r0, [r4, #84]	; 0x54
 8004546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800454a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800454e:	81a3      	strheq	r3, [r4, #12]
 8004550:	bf18      	it	ne
 8004552:	81a3      	strhne	r3, [r4, #12]
 8004554:	bd10      	pop	{r4, pc}

08004556 <__sclose>:
 8004556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800455a:	f000 b813 	b.w	8004584 <_close_r>
	...

08004560 <_write_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	4d07      	ldr	r5, [pc, #28]	; (8004580 <_write_r+0x20>)
 8004564:	4604      	mov	r4, r0
 8004566:	4608      	mov	r0, r1
 8004568:	4611      	mov	r1, r2
 800456a:	2200      	movs	r2, #0
 800456c:	602a      	str	r2, [r5, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	f7fc fe2d 	bl	80011ce <_write>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d102      	bne.n	800457e <_write_r+0x1e>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	b103      	cbz	r3, 800457e <_write_r+0x1e>
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	bd38      	pop	{r3, r4, r5, pc}
 8004580:	20000318 	.word	0x20000318

08004584 <_close_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	4d06      	ldr	r5, [pc, #24]	; (80045a0 <_close_r+0x1c>)
 8004588:	2300      	movs	r3, #0
 800458a:	4604      	mov	r4, r0
 800458c:	4608      	mov	r0, r1
 800458e:	602b      	str	r3, [r5, #0]
 8004590:	f7fc fe39 	bl	8001206 <_close>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_close_r+0x1a>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_close_r+0x1a>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	20000318 	.word	0x20000318

080045a4 <_fstat_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4d07      	ldr	r5, [pc, #28]	; (80045c4 <_fstat_r+0x20>)
 80045a8:	2300      	movs	r3, #0
 80045aa:	4604      	mov	r4, r0
 80045ac:	4608      	mov	r0, r1
 80045ae:	4611      	mov	r1, r2
 80045b0:	602b      	str	r3, [r5, #0]
 80045b2:	f7fc fe34 	bl	800121e <_fstat>
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	d102      	bne.n	80045c0 <_fstat_r+0x1c>
 80045ba:	682b      	ldr	r3, [r5, #0]
 80045bc:	b103      	cbz	r3, 80045c0 <_fstat_r+0x1c>
 80045be:	6023      	str	r3, [r4, #0]
 80045c0:	bd38      	pop	{r3, r4, r5, pc}
 80045c2:	bf00      	nop
 80045c4:	20000318 	.word	0x20000318

080045c8 <_isatty_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4d06      	ldr	r5, [pc, #24]	; (80045e4 <_isatty_r+0x1c>)
 80045cc:	2300      	movs	r3, #0
 80045ce:	4604      	mov	r4, r0
 80045d0:	4608      	mov	r0, r1
 80045d2:	602b      	str	r3, [r5, #0]
 80045d4:	f7fc fe33 	bl	800123e <_isatty>
 80045d8:	1c43      	adds	r3, r0, #1
 80045da:	d102      	bne.n	80045e2 <_isatty_r+0x1a>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	b103      	cbz	r3, 80045e2 <_isatty_r+0x1a>
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
 80045e4:	20000318 	.word	0x20000318

080045e8 <_lseek_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4d07      	ldr	r5, [pc, #28]	; (8004608 <_lseek_r+0x20>)
 80045ec:	4604      	mov	r4, r0
 80045ee:	4608      	mov	r0, r1
 80045f0:	4611      	mov	r1, r2
 80045f2:	2200      	movs	r2, #0
 80045f4:	602a      	str	r2, [r5, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f7fc fe2c 	bl	8001254 <_lseek>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_lseek_r+0x1e>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_lseek_r+0x1e>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	20000318 	.word	0x20000318

0800460c <_read_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4d07      	ldr	r5, [pc, #28]	; (800462c <_read_r+0x20>)
 8004610:	4604      	mov	r4, r0
 8004612:	4608      	mov	r0, r1
 8004614:	4611      	mov	r1, r2
 8004616:	2200      	movs	r2, #0
 8004618:	602a      	str	r2, [r5, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	f7fc fdba 	bl	8001194 <_read>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d102      	bne.n	800462a <_read_r+0x1e>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	b103      	cbz	r3, 800462a <_read_r+0x1e>
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	bd38      	pop	{r3, r4, r5, pc}
 800462c:	20000318 	.word	0x20000318

08004630 <_init>:
 8004630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004632:	bf00      	nop
 8004634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004636:	bc08      	pop	{r3}
 8004638:	469e      	mov	lr, r3
 800463a:	4770      	bx	lr

0800463c <_fini>:
 800463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463e:	bf00      	nop
 8004640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004642:	bc08      	pop	{r3}
 8004644:	469e      	mov	lr, r3
 8004646:	4770      	bx	lr
