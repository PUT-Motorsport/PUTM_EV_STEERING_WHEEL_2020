
kiera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005510  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080056cc  080056cc  000156cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005744  08005744  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005744  08005744  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005744  08005744  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005748  08005748  00015748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800574c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000000c  08005758  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08005758  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001982e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c85  00000000  00000000  0003986a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000046e  00000000  00000000  0003c4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  0003c960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012d8  00000000  00000000  0003dd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030854  00000000  00000000  0003efe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f71  00000000  00000000  0006f834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012bae5  00000000  00000000  000847a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b028a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005138  00000000  00000000  001b02dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080056b4 	.word	0x080056b4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080056b4 	.word	0x080056b4

080001fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80001fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000200:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000202:	2400      	movs	r4, #0
 8000204:	9405      	str	r4, [sp, #20]
 8000206:	9406      	str	r4, [sp, #24]
 8000208:	9407      	str	r4, [sp, #28]
 800020a:	9408      	str	r4, [sp, #32]
 800020c:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800020e:	4b46      	ldr	r3, [pc, #280]	; (8000328 <_ZL12MX_GPIO_Initv+0x12c>)
 8000210:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000212:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000216:	64da      	str	r2, [r3, #76]	; 0x4c
 8000218:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800021a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800021e:	9200      	str	r2, [sp, #0]
 8000220:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000224:	f042 0201 	orr.w	r2, r2, #1
 8000228:	64da      	str	r2, [r3, #76]	; 0x4c
 800022a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800022c:	f002 0201 	and.w	r2, r2, #1
 8000230:	9201      	str	r2, [sp, #4]
 8000232:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000236:	f042 0204 	orr.w	r2, r2, #4
 800023a:	64da      	str	r2, [r3, #76]	; 0x4c
 800023c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800023e:	f002 0204 	and.w	r2, r2, #4
 8000242:	9202      	str	r2, [sp, #8]
 8000244:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000248:	f042 0208 	orr.w	r2, r2, #8
 800024c:	64da      	str	r2, [r3, #76]	; 0x4c
 800024e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000250:	f002 0208 	and.w	r2, r2, #8
 8000254:	9203      	str	r2, [sp, #12]
 8000256:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025a:	f042 0202 	orr.w	r2, r2, #2
 800025e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000262:	f003 0302 	and.w	r3, r3, #2
 8000266:	9304      	str	r3, [sp, #16]
 8000268:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin, GPIO_PIN_RESET);
 800026a:	4d30      	ldr	r5, [pc, #192]	; (800032c <_ZL12MX_GPIO_Initv+0x130>)
 800026c:	4622      	mov	r2, r4
 800026e:	21f0      	movs	r1, #240	; 0xf0
 8000270:	4628      	mov	r0, r5
 8000272:	f003 f969 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000276:	26f0      	movs	r6, #240	; 0xf0
 8000278:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800027a:	2302      	movs	r3, #2
 800027c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000280:	2303      	movs	r3, #3
 8000282:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000284:	2305      	movs	r3, #5
 8000286:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000288:	a905      	add	r1, sp, #20
 800028a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028e:	f002 ffc9 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000292:	2330      	movs	r3, #48	; 0x30
 8000294:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000296:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800029a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800029e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8000334 <_ZL12MX_GPIO_Initv+0x138>
 80002a2:	a905      	add	r1, sp, #20
 80002a4:	4640      	mov	r0, r8
 80002a6:	f002 ffbd 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW3_Pin SW4_Pin SW5_Pin */
  GPIO_InitStruct.Pin = SW3_Pin|SW4_Pin|SW5_Pin;
 80002aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80002ae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002b0:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80002b4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002b8:	a905      	add	r1, sp, #20
 80002ba:	4640      	mov	r0, r8
 80002bc:	f002 ffb2 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW6_Pin */
  GPIO_InitStruct.Pin = SW6_Pin;
 80002c0:	2304      	movs	r3, #4
 80002c2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002c4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SW6_GPIO_Port, &GPIO_InitStruct);
 80002c8:	a905      	add	r1, sp, #20
 80002ca:	4819      	ldr	r0, [pc, #100]	; (8000330 <_ZL12MX_GPIO_Initv+0x134>)
 80002cc:	f002 ffaa 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pins : ControlLed4_Pin ControlLed3_Pin ControlLed2_Pin ControlLed1_Pin */
  GPIO_InitStruct.Pin = ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin;
 80002d0:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	2301      	movs	r3, #1
 80002d4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002da:	a905      	add	r1, sp, #20
 80002dc:	4628      	mov	r0, r5
 80002de:	f002 ffa1 	bl	8003224 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80002e2:	4622      	mov	r2, r4
 80002e4:	4621      	mov	r1, r4
 80002e6:	2008      	movs	r0, #8
 80002e8:	f002 fd00 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80002ec:	2008      	movs	r0, #8
 80002ee:	f002 fd19 	bl	8002d24 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80002f2:	4622      	mov	r2, r4
 80002f4:	4621      	mov	r1, r4
 80002f6:	200a      	movs	r0, #10
 80002f8:	f002 fcf8 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80002fc:	200a      	movs	r0, #10
 80002fe:	f002 fd11 	bl	8002d24 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000302:	4622      	mov	r2, r4
 8000304:	4621      	mov	r1, r4
 8000306:	2017      	movs	r0, #23
 8000308:	f002 fcf0 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800030c:	2017      	movs	r0, #23
 800030e:	f002 fd09 	bl	8002d24 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000312:	4622      	mov	r2, r4
 8000314:	4621      	mov	r1, r4
 8000316:	2028      	movs	r0, #40	; 0x28
 8000318:	f002 fce8 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800031c:	2028      	movs	r0, #40	; 0x28
 800031e:	f002 fd01 	bl	8002d24 <HAL_NVIC_EnableIRQ>

}
 8000322:	b00a      	add	sp, #40	; 0x28
 8000324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000328:	40021000 	.word	0x40021000
 800032c:	48000400 	.word	0x48000400
 8000330:	48000c00 	.word	0x48000c00
 8000334:	48000800 	.word	0x48000800

08000338 <_ZL11MX_DMA_Initv>:
{
 8000338:	b500      	push	{lr}
 800033a:	b085      	sub	sp, #20
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800033c:	4b17      	ldr	r3, [pc, #92]	; (800039c <_ZL11MX_DMA_Initv+0x64>)
 800033e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000340:	f042 0204 	orr.w	r2, r2, #4
 8000344:	649a      	str	r2, [r3, #72]	; 0x48
 8000346:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000348:	f002 0204 	and.w	r2, r2, #4
 800034c:	9201      	str	r2, [sp, #4]
 800034e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000350:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000352:	f042 0201 	orr.w	r2, r2, #1
 8000356:	649a      	str	r2, [r3, #72]	; 0x48
 8000358:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800035a:	f002 0201 	and.w	r2, r2, #1
 800035e:	9202      	str	r2, [sp, #8]
 8000360:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000364:	f042 0202 	orr.w	r2, r2, #2
 8000368:	649a      	str	r2, [r3, #72]	; 0x48
 800036a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800036c:	f003 0302 	and.w	r3, r3, #2
 8000370:	9303      	str	r3, [sp, #12]
 8000372:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000374:	2200      	movs	r2, #0
 8000376:	4611      	mov	r1, r2
 8000378:	2010      	movs	r0, #16
 800037a:	f002 fcb7 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800037e:	2010      	movs	r0, #16
 8000380:	f002 fcd0 	bl	8002d24 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8000384:	2200      	movs	r2, #0
 8000386:	4611      	mov	r1, r2
 8000388:	2045      	movs	r0, #69	; 0x45
 800038a:	f002 fcaf 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 800038e:	2045      	movs	r0, #69	; 0x45
 8000390:	f002 fcc8 	bl	8002d24 <HAL_NVIC_EnableIRQ>
}
 8000394:	b005      	add	sp, #20
 8000396:	f85d fb04 	ldr.w	pc, [sp], #4
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000

080003a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003a0:	b510      	push	{r4, lr}
 80003a2:	4604      	mov	r4, r0
	timer = HAL_GetTick();
 80003a4:	f000 fd9c 	bl	8000ee0 <HAL_GetTick>
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <HAL_GPIO_EXTI_Callback+0x44>)
 80003aa:	6018      	str	r0, [r3, #0]

	if (GPIO_Pin == SW3_Pin)
 80003ac:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80003b0:	d00b      	beq.n	80003ca <HAL_GPIO_EXTI_Callback+0x2a>
	{
		sw3_pressed = 1;
//		HAL_GPIO_TogglePin(ControlLed4_GPIO_Port, ControlLed4_Pin);
	} else if (GPIO_Pin == SW4_Pin)
 80003b2:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 80003b6:	d00c      	beq.n	80003d2 <HAL_GPIO_EXTI_Callback+0x32>
	{
		sw4_pressed = 1;
//		HAL_GPIO_TogglePin(ControlLed3_GPIO_Port, ControlLed3_Pin);
	} else if (GPIO_Pin == SW5_Pin)
 80003b8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80003bc:	d00d      	beq.n	80003da <HAL_GPIO_EXTI_Callback+0x3a>
	{
		sw5_pressed = 1;
//		HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
	} else if (GPIO_Pin == SW6_Pin)
 80003be:	2c04      	cmp	r4, #4
 80003c0:	d106      	bne.n	80003d0 <HAL_GPIO_EXTI_Callback+0x30>
	{
		sw6_pressed = 1;
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <HAL_GPIO_EXTI_Callback+0x48>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	701a      	strb	r2, [r3, #0]
//		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
	}
}
 80003c8:	e002      	b.n	80003d0 <HAL_GPIO_EXTI_Callback+0x30>
		sw3_pressed = 1;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <HAL_GPIO_EXTI_Callback+0x4c>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	701a      	strb	r2, [r3, #0]
}
 80003d0:	bd10      	pop	{r4, pc}
		sw4_pressed = 1;
 80003d2:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <HAL_GPIO_EXTI_Callback+0x50>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	701a      	strb	r2, [r3, #0]
 80003d8:	e7fa      	b.n	80003d0 <HAL_GPIO_EXTI_Callback+0x30>
		sw5_pressed = 1;
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <HAL_GPIO_EXTI_Callback+0x54>)
 80003dc:	2201      	movs	r2, #1
 80003de:	701a      	strb	r2, [r3, #0]
 80003e0:	e7f6      	b.n	80003d0 <HAL_GPIO_EXTI_Callback+0x30>
 80003e2:	bf00      	nop
 80003e4:	2000021c 	.word	0x2000021c
 80003e8:	2000021b 	.word	0x2000021b
 80003ec:	20000218 	.word	0x20000218
 80003f0:	20000219 	.word	0x20000219
 80003f4:	2000021a 	.word	0x2000021a

080003f8 <heartbeat>:

void heartbeat()
{
 80003f8:	b510      	push	{r4, lr}
 80003fa:	b08a      	sub	sp, #40	; 0x28

	PUTM_CAN::Steering_Wheel_main pcb_alive{0, PUTM_CAN::Steering_Wheel_states::OK};
 80003fc:	2300      	movs	r3, #0
 80003fe:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8000402:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  CAN_TxHeaderTypeDef header;
  uint8_t buff[max_dlc_size];

  constexpr Can_tx_message(const T &data,
                           const CAN_TxHeaderTypeDef &message_header)
      : header{message_header} {
 8000406:	f10d 0c04 	add.w	ip, sp, #4
 800040a:	4c0b      	ldr	r4, [pc, #44]	; (8000438 <heartbeat+0x40>)
 800040c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800040e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000412:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000416:	e88c 0003 	stmia.w	ip, {r0, r1}
    static_assert(std::is_standard_layout<T>(), "Object must by C like struct");
    static_assert(std::is_trivially_copyable<T>(),
                  "Object must by C like struct");
    static_assert(sizeof(T) <= max_dlc_size,
                  "Object size must be less than 8bytes");
    std::memcpy(this->buff, &data, sizeof(T));
 800041a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800041c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000420:	0c1b      	lsrs	r3, r3, #16
 8000422:	f88d 301e 	strb.w	r3, [sp, #30]
  }

  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
    static uint32_t TxMailbox(0);
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <heartbeat+0x44>)
 8000428:	aa07      	add	r2, sp, #28
 800042a:	a901      	add	r1, sp, #4
 800042c:	4804      	ldr	r0, [pc, #16]	; (8000440 <heartbeat+0x48>)
 800042e:	f002 faae 	bl	800298e <HAL_CAN_AddTxMessage>

	auto steering_wheel_heartbeat = PUTM_CAN::Can_tx_message<PUTM_CAN::Steering_Wheel_main>
	(pcb_alive, PUTM_CAN::can_tx_header_STEERING_WHEEL_MAIN);

 	steering_wheel_heartbeat.send(hcan1);
}
 8000432:	b00a      	add	sp, #40	; 0x28
 8000434:	bd10      	pop	{r4, pc}
 8000436:	bf00      	nop
 8000438:	080056cc 	.word	0x080056cc
 800043c:	2000002c 	.word	0x2000002c
 8000440:	20000100 	.word	0x20000100

08000444 <wait_for_second_button>:

void wait_for_second_button()
{
 8000444:	b510      	push	{r4, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
	HAL_Delay(100);
 8000448:	2064      	movs	r0, #100	; 0x64
 800044a:	f000 fd55 	bl	8000ef8 <HAL_Delay>
	PUTM_CAN::Steering_Wheel_event button_pressed{};
 800044e:	2300      	movs	r3, #0
 8000450:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8000454:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

	if (sw3_pressed && sw4_pressed)
 8000458:	4b39      	ldr	r3, [pc, #228]	; (8000540 <wait_for_second_button+0xfc>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	b1eb      	cbz	r3, 800049a <wait_for_second_button+0x56>
 800045e:	4a39      	ldr	r2, [pc, #228]	; (8000544 <wait_for_second_button+0x100>)
 8000460:	7812      	ldrb	r2, [r2, #0]
 8000462:	b1d2      	cbz	r2, 800049a <wait_for_second_button+0x56>
	{
		button_pressed.button = PUTM_CAN::buttonStates::button1_2;
 8000464:	2305      	movs	r3, #5
 8000466:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      : header{message_header} {
 800046a:	f10d 0c04 	add.w	ip, sp, #4
 800046e:	4c36      	ldr	r4, [pc, #216]	; (8000548 <wait_for_second_button+0x104>)
 8000470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000472:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000476:	e894 0003 	ldmia.w	r4, {r0, r1}
 800047a:	e88c 0003 	stmia.w	ip, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 800047e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000480:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000484:	0c1b      	lsrs	r3, r3, #16
 8000486:	f88d 301e 	strb.w	r3, [sp, #30]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 800048a:	4b30      	ldr	r3, [pc, #192]	; (800054c <wait_for_second_button+0x108>)
 800048c:	aa07      	add	r2, sp, #28
 800048e:	a901      	add	r1, sp, #4
 8000490:	482f      	ldr	r0, [pc, #188]	; (8000550 <wait_for_second_button+0x10c>)
 8000492:	f002 fa7c 	bl	800298e <HAL_CAN_AddTxMessage>
	auto steering_wheel_frame = PUTM_CAN::Can_tx_message<PUTM_CAN::Steering_Wheel_event>
	(button_pressed, PUTM_CAN::can_tx_header_STEERING_WHEEL_EVENT);

	if (steering_wheel_frame.send(hcan1));

}
 8000496:	b00a      	add	sp, #40	; 0x28
 8000498:	bd10      	pop	{r4, pc}
	} else if (sw3_pressed && sw5_pressed)
 800049a:	b133      	cbz	r3, 80004aa <wait_for_second_button+0x66>
 800049c:	4a2d      	ldr	r2, [pc, #180]	; (8000554 <wait_for_second_button+0x110>)
 800049e:	7812      	ldrb	r2, [r2, #0]
 80004a0:	b11a      	cbz	r2, 80004aa <wait_for_second_button+0x66>
		button_pressed.button = PUTM_CAN::buttonStates::button1_3;
 80004a2:	2306      	movs	r3, #6
 80004a4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80004a8:	e7df      	b.n	800046a <wait_for_second_button+0x26>
	} else if (sw3_pressed && sw6_pressed)
 80004aa:	b113      	cbz	r3, 80004b2 <wait_for_second_button+0x6e>
 80004ac:	4a2a      	ldr	r2, [pc, #168]	; (8000558 <wait_for_second_button+0x114>)
 80004ae:	7812      	ldrb	r2, [r2, #0]
 80004b0:	b96a      	cbnz	r2, 80004ce <wait_for_second_button+0x8a>
	} else if (sw4_pressed && sw5_pressed)
 80004b2:	4a24      	ldr	r2, [pc, #144]	; (8000544 <wait_for_second_button+0x100>)
 80004b4:	7812      	ldrb	r2, [r2, #0]
 80004b6:	b112      	cbz	r2, 80004be <wait_for_second_button+0x7a>
 80004b8:	4926      	ldr	r1, [pc, #152]	; (8000554 <wait_for_second_button+0x110>)
 80004ba:	7809      	ldrb	r1, [r1, #0]
 80004bc:	b979      	cbnz	r1, 80004de <wait_for_second_button+0x9a>
	} else if (sw4_pressed && sw6_pressed)
 80004be:	b1b2      	cbz	r2, 80004ee <wait_for_second_button+0xaa>
 80004c0:	4925      	ldr	r1, [pc, #148]	; (8000558 <wait_for_second_button+0x114>)
 80004c2:	7809      	ldrb	r1, [r1, #0]
 80004c4:	b199      	cbz	r1, 80004ee <wait_for_second_button+0xaa>
		button_pressed.button = PUTM_CAN::buttonStates::button2_4;
 80004c6:	2309      	movs	r3, #9
 80004c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80004cc:	e7cd      	b.n	800046a <wait_for_second_button+0x26>
		button_pressed.button = PUTM_CAN::buttonStates::button1_4;
 80004ce:	2307      	movs	r3, #7
 80004d0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		HAL_GPIO_TogglePin(ControlLed4_GPIO_Port, ControlLed4_Pin);
 80004d4:	2110      	movs	r1, #16
 80004d6:	4821      	ldr	r0, [pc, #132]	; (800055c <wait_for_second_button+0x118>)
 80004d8:	f003 f84e 	bl	8003578 <HAL_GPIO_TogglePin>
 80004dc:	e7c5      	b.n	800046a <wait_for_second_button+0x26>
		button_pressed.button = PUTM_CAN::buttonStates::button2_3;
 80004de:	2308      	movs	r3, #8
 80004e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	481d      	ldr	r0, [pc, #116]	; (800055c <wait_for_second_button+0x118>)
 80004e8:	f003 f846 	bl	8003578 <HAL_GPIO_TogglePin>
 80004ec:	e7bd      	b.n	800046a <wait_for_second_button+0x26>
	} else if (sw5_pressed && sw6_pressed)
 80004ee:	4919      	ldr	r1, [pc, #100]	; (8000554 <wait_for_second_button+0x110>)
 80004f0:	7809      	ldrb	r1, [r1, #0]
 80004f2:	b131      	cbz	r1, 8000502 <wait_for_second_button+0xbe>
 80004f4:	4818      	ldr	r0, [pc, #96]	; (8000558 <wait_for_second_button+0x114>)
 80004f6:	7800      	ldrb	r0, [r0, #0]
 80004f8:	b118      	cbz	r0, 8000502 <wait_for_second_button+0xbe>
		button_pressed.button = PUTM_CAN::buttonStates::button3_4;
 80004fa:	230a      	movs	r3, #10
 80004fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000500:	e7b3      	b.n	800046a <wait_for_second_button+0x26>
	} else if (sw3_pressed) {
 8000502:	b11b      	cbz	r3, 800050c <wait_for_second_button+0xc8>
		button_pressed.button = PUTM_CAN::buttonStates::button1;
 8000504:	2301      	movs	r3, #1
 8000506:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800050a:	e7ae      	b.n	800046a <wait_for_second_button+0x26>
	} else if (sw4_pressed) {
 800050c:	b942      	cbnz	r2, 8000520 <wait_for_second_button+0xdc>
	} else if (sw5_pressed) {
 800050e:	b979      	cbnz	r1, 8000530 <wait_for_second_button+0xec>
	} else if (sw6_pressed) {
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <wait_for_second_button+0x114>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0a8      	beq.n	800046a <wait_for_second_button+0x26>
		button_pressed.button = PUTM_CAN::buttonStates::button4;
 8000518:	2304      	movs	r3, #4
 800051a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800051e:	e7a4      	b.n	800046a <wait_for_second_button+0x26>
		button_pressed.button = PUTM_CAN::buttonStates::button2;
 8000520:	2302      	movs	r3, #2
 8000522:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	480c      	ldr	r0, [pc, #48]	; (800055c <wait_for_second_button+0x118>)
 800052a:	f003 f825 	bl	8003578 <HAL_GPIO_TogglePin>
 800052e:	e79c      	b.n	800046a <wait_for_second_button+0x26>
		button_pressed.button = PUTM_CAN::buttonStates::button3;
 8000530:	2303      	movs	r3, #3
 8000532:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	4808      	ldr	r0, [pc, #32]	; (800055c <wait_for_second_button+0x118>)
 800053a:	f003 f81d 	bl	8003578 <HAL_GPIO_TogglePin>
 800053e:	e794      	b.n	800046a <wait_for_second_button+0x26>
 8000540:	20000218 	.word	0x20000218
 8000544:	20000219 	.word	0x20000219
 8000548:	080056e4 	.word	0x080056e4
 800054c:	20000028 	.word	0x20000028
 8000550:	20000100 	.word	0x20000100
 8000554:	2000021a 	.word	0x2000021a
 8000558:	2000021b 	.word	0x2000021b
 800055c:	48000400 	.word	0x48000400

08000560 <choose_left_scroll_state>:

void choose_left_scroll_state()
{
 8000560:	b510      	push	{r4, lr}
	float average_adc = 0;

	//	  calculate average adc
	for (int i = 0; i < 10; i++) {
 8000562:	2300      	movs	r3, #0
	float average_adc = 0;
 8000564:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8000660 <choose_left_scroll_state+0x100>
 8000568:	e009      	b.n	800057e <choose_left_scroll_state+0x1e>
		average_adc = average_adc + left_adc_reading[i];
 800056a:	4a3e      	ldr	r2, [pc, #248]	; (8000664 <choose_left_scroll_state+0x104>)
 800056c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000570:	ee07 2a90 	vmov	s15, r2
 8000574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000578:	ee37 7a27 	vadd.f32	s14, s14, s15
	for (int i = 0; i < 10; i++) {
 800057c:	3301      	adds	r3, #1
 800057e:	2b09      	cmp	r3, #9
 8000580:	ddf3      	ble.n	800056a <choose_left_scroll_state+0xa>
	}

	average_adc = average_adc / 10;
 8000582:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000586:	eec7 7a26 	vdiv.f32	s15, s14, s13

	int lss = 0; // Left Scroll State

	if (1110 < average_adc && average_adc < 1115)
 800058a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8000668 <choose_left_scroll_state+0x108>
 800058e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000596:	dd06      	ble.n	80005a6 <choose_left_scroll_state+0x46>
 8000598:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800066c <choose_left_scroll_state+0x10c>
 800059c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005a4:	d42b      	bmi.n	80005fe <choose_left_scroll_state+0x9e>
	{
		lss = 1;
	} else if (3129 < average_adc && average_adc < 3133)
 80005a6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000670 <choose_left_scroll_state+0x110>
 80005aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b2:	dd06      	ble.n	80005c2 <choose_left_scroll_state+0x62>
 80005b4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000674 <choose_left_scroll_state+0x114>
 80005b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c0:	d429      	bmi.n	8000616 <choose_left_scroll_state+0xb6>
	{
		lss = 2;
	} else if (3715 < average_adc && average_adc < 3721)
 80005c2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000678 <choose_left_scroll_state+0x118>
 80005c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ce:	dd06      	ble.n	80005de <choose_left_scroll_state+0x7e>
 80005d0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800067c <choose_left_scroll_state+0x11c>
 80005d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005dc:	d41d      	bmi.n	800061a <choose_left_scroll_state+0xba>
	{
		lss = 3;
	} else if (3970 < average_adc && average_adc < 3975)
 80005de:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000680 <choose_left_scroll_state+0x120>
 80005e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ea:	dd18      	ble.n	800061e <choose_left_scroll_state+0xbe>
 80005ec:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000684 <choose_left_scroll_state+0x124>
 80005f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005f8:	d413      	bmi.n	8000622 <choose_left_scroll_state+0xc2>
	int lss = 0; // Left Scroll State
 80005fa:	2400      	movs	r4, #0
 80005fc:	e000      	b.n	8000600 <choose_left_scroll_state+0xa0>
		lss = 1;
 80005fe:	2401      	movs	r4, #1
	{
		lss = 4;
	}


	if (lss != left_last_state)
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <choose_left_scroll_state+0x128>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	42a3      	cmp	r3, r4
 8000606:	d014      	beq.n	8000632 <choose_left_scroll_state+0xd2>
	{
		switch (lss)
 8000608:	1e63      	subs	r3, r4, #1
 800060a:	2b03      	cmp	r3, #3
 800060c:	d811      	bhi.n	8000632 <choose_left_scroll_state+0xd2>
 800060e:	e8df f003 	tbb	[pc, r3]
 8000612:	110a      	.short	0x110a
 8000614:	1f18      	.short	0x1f18
		lss = 2;
 8000616:	2402      	movs	r4, #2
 8000618:	e7f2      	b.n	8000600 <choose_left_scroll_state+0xa0>
		lss = 3;
 800061a:	2403      	movs	r4, #3
 800061c:	e7f0      	b.n	8000600 <choose_left_scroll_state+0xa0>
	int lss = 0; // Left Scroll State
 800061e:	2400      	movs	r4, #0
 8000620:	e7ee      	b.n	8000600 <choose_left_scroll_state+0xa0>
		lss = 4;
 8000622:	2404      	movs	r4, #4
 8000624:	e7ec      	b.n	8000600 <choose_left_scroll_state+0xa0>
		{
		case 1:
			HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	4818      	ldr	r0, [pc, #96]	; (800068c <choose_left_scroll_state+0x12c>)
 800062a:	f002 ffa5 	bl	8003578 <HAL_GPIO_TogglePin>
//			HAL_Delay(200);
			left_last_state = lss;
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <choose_left_scroll_state+0x128>)
 8000630:	601c      	str	r4, [r3, #0]
//			HAL_Delay(200);
			left_last_state = lss;
			break;
		}
	}
}
 8000632:	bd10      	pop	{r4, pc}
			HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	4815      	ldr	r0, [pc, #84]	; (800068c <choose_left_scroll_state+0x12c>)
 8000638:	f002 ff9e 	bl	8003578 <HAL_GPIO_TogglePin>
			left_last_state = lss;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <choose_left_scroll_state+0x128>)
 800063e:	601c      	str	r4, [r3, #0]
			break;
 8000640:	e7f7      	b.n	8000632 <choose_left_scroll_state+0xd2>
			HAL_GPIO_TogglePin(ControlLed3_GPIO_Port, ControlLed3_Pin);
 8000642:	2120      	movs	r1, #32
 8000644:	4811      	ldr	r0, [pc, #68]	; (800068c <choose_left_scroll_state+0x12c>)
 8000646:	f002 ff97 	bl	8003578 <HAL_GPIO_TogglePin>
			left_last_state = lss;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <choose_left_scroll_state+0x128>)
 800064c:	601c      	str	r4, [r3, #0]
			break;
 800064e:	e7f0      	b.n	8000632 <choose_left_scroll_state+0xd2>
			HAL_GPIO_TogglePin(ControlLed4_GPIO_Port, ControlLed4_Pin);
 8000650:	2110      	movs	r1, #16
 8000652:	480e      	ldr	r0, [pc, #56]	; (800068c <choose_left_scroll_state+0x12c>)
 8000654:	f002 ff90 	bl	8003578 <HAL_GPIO_TogglePin>
			left_last_state = lss;
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <choose_left_scroll_state+0x128>)
 800065a:	601c      	str	r4, [r3, #0]
}
 800065c:	e7e9      	b.n	8000632 <choose_left_scroll_state+0xd2>
 800065e:	bf00      	nop
 8000660:	00000000 	.word	0x00000000
 8000664:	200001ec 	.word	0x200001ec
 8000668:	448ac000 	.word	0x448ac000
 800066c:	448b6000 	.word	0x448b6000
 8000670:	45439000 	.word	0x45439000
 8000674:	4543d000 	.word	0x4543d000
 8000678:	45683000 	.word	0x45683000
 800067c:	45689000 	.word	0x45689000
 8000680:	45782000 	.word	0x45782000
 8000684:	45787000 	.word	0x45787000
 8000688:	20000200 	.word	0x20000200
 800068c:	48000400 	.word	0x48000400

08000690 <reset_flags>:
	}
}

void reset_flags()
{
	sw3_pressed = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <reset_flags+0x14>)
 8000694:	7013      	strb	r3, [r2, #0]
	sw4_pressed = 0;
 8000696:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <reset_flags+0x18>)
 8000698:	7013      	strb	r3, [r2, #0]
	sw5_pressed = 0;
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <reset_flags+0x1c>)
 800069c:	7013      	strb	r3, [r2, #0]
	sw6_pressed = 0;
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <reset_flags+0x20>)
 80006a0:	7013      	strb	r3, [r2, #0]
}
 80006a2:	4770      	bx	lr
 80006a4:	20000218 	.word	0x20000218
 80006a8:	20000219 	.word	0x20000219
 80006ac:	2000021a 	.word	0x2000021a
 80006b0:	2000021b 	.word	0x2000021b

080006b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006b6:	6802      	ldr	r2, [r0, #0]
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d000      	beq.n	80006c0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006be:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80006c0:	f000 fbfa 	bl	8000eb8 <HAL_IncTick>
}
 80006c4:	e7fb      	b.n	80006be <HAL_TIM_PeriodElapsedCallback+0xa>
 80006c6:	bf00      	nop
 80006c8:	40012c00 	.word	0x40012c00

080006cc <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ce:	e7fe      	b.n	80006ce <Error_Handler+0x2>

080006d0 <_ZL12MX_CAN1_Initv>:
{
 80006d0:	b508      	push	{r3, lr}
  hcan1.Instance = CAN1;
 80006d2:	480c      	ldr	r0, [pc, #48]	; (8000704 <_ZL12MX_CAN1_Initv+0x34>)
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <_ZL12MX_CAN1_Initv+0x38>)
 80006d6:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 26;
 80006d8:	231a      	movs	r3, #26
 80006da:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006dc:	2300      	movs	r3, #0
 80006de:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006e0:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80006e2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80006e6:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006e8:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006ea:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ec:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006ee:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006f0:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006f2:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006f4:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006f6:	f001 ff41 	bl	800257c <HAL_CAN_Init>
 80006fa:	b900      	cbnz	r0, 80006fe <_ZL12MX_CAN1_Initv+0x2e>
}
 80006fc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006fe:	f7ff ffe5 	bl	80006cc <Error_Handler>
 8000702:	bf00      	nop
 8000704:	20000100 	.word	0x20000100
 8000708:	40006400 	.word	0x40006400

0800070c <_ZL12MX_ADC1_Initv>:
{
 800070c:	b500      	push	{lr}
 800070e:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8000710:	2300      	movs	r3, #0
 8000712:	9307      	str	r3, [sp, #28]
 8000714:	9308      	str	r3, [sp, #32]
 8000716:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	9302      	str	r3, [sp, #8]
 800071c:	9303      	str	r3, [sp, #12]
 800071e:	9304      	str	r3, [sp, #16]
 8000720:	9305      	str	r3, [sp, #20]
 8000722:	9306      	str	r3, [sp, #24]
  hadc1.Instance = ADC1;
 8000724:	481d      	ldr	r0, [pc, #116]	; (800079c <_ZL12MX_ADC1_Initv+0x90>)
 8000726:	4a1e      	ldr	r2, [pc, #120]	; (80007a0 <_ZL12MX_ADC1_Initv+0x94>)
 8000728:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 800072a:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 800072e:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000730:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000732:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000734:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000736:	2204      	movs	r2, #4
 8000738:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800073a:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800073c:	2201      	movs	r2, #1
 800073e:	7642      	strb	r2, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000740:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000742:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000746:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000748:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800074a:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800074e:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000750:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000754:	f000 fddc 	bl	8001310 <HAL_ADC_Init>
 8000758:	b9d0      	cbnz	r0, 8000790 <_ZL12MX_ADC1_Initv+0x84>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800075a:	2300      	movs	r3, #0
 800075c:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800075e:	a907      	add	r1, sp, #28
 8000760:	480e      	ldr	r0, [pc, #56]	; (800079c <_ZL12MX_ADC1_Initv+0x90>)
 8000762:	f001 fe67 	bl	8002434 <HAL_ADCEx_MultiModeConfigChannel>
 8000766:	b9a8      	cbnz	r0, 8000794 <_ZL12MX_ADC1_Initv+0x88>
  sConfig.Channel = ADC_CHANNEL_6;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <_ZL12MX_ADC1_Initv+0x98>)
 800076a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076c:	2306      	movs	r3, #6
 800076e:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000770:	2307      	movs	r3, #7
 8000772:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000774:	237f      	movs	r3, #127	; 0x7f
 8000776:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000778:	2304      	movs	r3, #4
 800077a:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000780:	a901      	add	r1, sp, #4
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <_ZL12MX_ADC1_Initv+0x90>)
 8000784:	f001 f91a 	bl	80019bc <HAL_ADC_ConfigChannel>
 8000788:	b930      	cbnz	r0, 8000798 <_ZL12MX_ADC1_Initv+0x8c>
}
 800078a:	b00b      	add	sp, #44	; 0x2c
 800078c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000790:	f7ff ff9c 	bl	80006cc <Error_Handler>
    Error_Handler();
 8000794:	f7ff ff9a 	bl	80006cc <Error_Handler>
    Error_Handler();
 8000798:	f7ff ff98 	bl	80006cc <Error_Handler>
 800079c:	20000030 	.word	0x20000030
 80007a0:	50040000 	.word	0x50040000
 80007a4:	19200040 	.word	0x19200040

080007a8 <_ZL12MX_ADC2_Initv>:
{
 80007a8:	b500      	push	{lr}
 80007aa:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ac:	2300      	movs	r3, #0
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	9302      	str	r3, [sp, #8]
 80007b4:	9303      	str	r3, [sp, #12]
 80007b6:	9304      	str	r3, [sp, #16]
 80007b8:	9305      	str	r3, [sp, #20]
  hadc2.Instance = ADC2;
 80007ba:	4819      	ldr	r0, [pc, #100]	; (8000820 <_ZL12MX_ADC2_Initv+0x78>)
 80007bc:	4a19      	ldr	r2, [pc, #100]	; (8000824 <_ZL12MX_ADC2_Initv+0x7c>)
 80007be:	6002      	str	r2, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 80007c0:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 80007c4:	6042      	str	r2, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007c6:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c8:	60c3      	str	r3, [r0, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ca:	6103      	str	r3, [r0, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007cc:	2204      	movs	r2, #4
 80007ce:	6142      	str	r2, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007d0:	7603      	strb	r3, [r0, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007d2:	2201      	movs	r2, #1
 80007d4:	7642      	strb	r2, [r0, #25]
  hadc2.Init.NbrOfConversion = 1;
 80007d6:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007d8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007dc:	6283      	str	r3, [r0, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007de:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80007e0:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e4:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80007e6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007ea:	f000 fd91 	bl	8001310 <HAL_ADC_Init>
 80007ee:	b990      	cbnz	r0, 8000816 <_ZL12MX_ADC2_Initv+0x6e>
  sConfig.Channel = ADC_CHANNEL_7;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <_ZL12MX_ADC2_Initv+0x80>)
 80007f2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f4:	2306      	movs	r3, #6
 80007f6:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007f8:	2300      	movs	r3, #0
 80007fa:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80007fc:	4a0b      	ldr	r2, [pc, #44]	; (800082c <_ZL12MX_ADC2_Initv+0x84>)
 80007fe:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000800:	2204      	movs	r2, #4
 8000802:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 8000804:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000806:	4669      	mov	r1, sp
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <_ZL12MX_ADC2_Initv+0x78>)
 800080a:	f001 f8d7 	bl	80019bc <HAL_ADC_ConfigChannel>
 800080e:	b920      	cbnz	r0, 800081a <_ZL12MX_ADC2_Initv+0x72>
}
 8000810:	b007      	add	sp, #28
 8000812:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000816:	f7ff ff59 	bl	80006cc <Error_Handler>
    Error_Handler();
 800081a:	f7ff ff57 	bl	80006cc <Error_Handler>
 800081e:	bf00      	nop
 8000820:	20000098 	.word	0x20000098
 8000824:	50040100 	.word	0x50040100
 8000828:	1d500080 	.word	0x1d500080
 800082c:	407f0000 	.word	0x407f0000

08000830 <_Z18SystemClock_Configv>:
{
 8000830:	b500      	push	{lr}
 8000832:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000834:	2248      	movs	r2, #72	; 0x48
 8000836:	2100      	movs	r1, #0
 8000838:	a806      	add	r0, sp, #24
 800083a:	f004 ff33 	bl	80056a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083e:	2000      	movs	r0, #0
 8000840:	9001      	str	r0, [sp, #4]
 8000842:	9002      	str	r0, [sp, #8]
 8000844:	9003      	str	r0, [sp, #12]
 8000846:	9004      	str	r0, [sp, #16]
 8000848:	9005      	str	r0, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800084a:	f002 fee7 	bl	800361c <HAL_PWREx_ControlVoltageScaling>
 800084e:	bb20      	cbnz	r0, 800089a <_Z18SystemClock_Configv+0x6a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000850:	2310      	movs	r3, #16
 8000852:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000854:	2201      	movs	r2, #1
 8000856:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800085c:	2360      	movs	r3, #96	; 0x60
 800085e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000860:	2302      	movs	r3, #2
 8000862:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000864:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000866:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000868:	223c      	movs	r2, #60	; 0x3c
 800086a:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086c:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800086e:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000870:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	a806      	add	r0, sp, #24
 8000874:	f002 ff76 	bl	8003764 <HAL_RCC_OscConfig>
 8000878:	b988      	cbnz	r0, 800089e <_Z18SystemClock_Configv+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	230f      	movs	r3, #15
 800087c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	2303      	movs	r3, #3
 8000880:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000886:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000888:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800088a:	2105      	movs	r1, #5
 800088c:	a801      	add	r0, sp, #4
 800088e:	f003 fbe5 	bl	800405c <HAL_RCC_ClockConfig>
 8000892:	b930      	cbnz	r0, 80008a2 <_Z18SystemClock_Configv+0x72>
}
 8000894:	b019      	add	sp, #100	; 0x64
 8000896:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800089a:	f7ff ff17 	bl	80006cc <Error_Handler>
    Error_Handler();
 800089e:	f7ff ff15 	bl	80006cc <Error_Handler>
    Error_Handler();
 80008a2:	f7ff ff13 	bl	80006cc <Error_Handler>

080008a6 <_Z24PeriphCommonClock_Configv>:
{
 80008a6:	b500      	push	{lr}
 80008a8:	b0a7      	sub	sp, #156	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008aa:	2298      	movs	r2, #152	; 0x98
 80008ac:	2100      	movs	r1, #0
 80008ae:	4668      	mov	r0, sp
 80008b0:	f004 fef8 	bl	80056a4 <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008b8:	9300      	str	r3, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008be:	9320      	str	r3, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008c0:	2301      	movs	r3, #1
 80008c2:	9301      	str	r3, [sp, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008c4:	9302      	str	r3, [sp, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80008c6:	2310      	movs	r3, #16
 80008c8:	9303      	str	r3, [sp, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	9304      	str	r3, [sp, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008ce:	9305      	str	r3, [sp, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008d0:	9306      	str	r3, [sp, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008d6:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	4668      	mov	r0, sp
 80008da:	f003 fe99 	bl	8004610 <HAL_RCCEx_PeriphCLKConfig>
 80008de:	b910      	cbnz	r0, 80008e6 <_Z24PeriphCommonClock_Configv+0x40>
}
 80008e0:	b027      	add	sp, #156	; 0x9c
 80008e2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80008e6:	f7ff fef1 	bl	80006cc <Error_Handler>
	...

080008ec <main>:
{
 80008ec:	b530      	push	{r4, r5, lr}
 80008ee:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80008f0:	f000 fac9 	bl	8000e86 <HAL_Init>
  SystemClock_Config();
 80008f4:	f7ff ff9c 	bl	8000830 <_Z18SystemClock_Configv>
  PeriphCommonClock_Config();
 80008f8:	f7ff ffd5 	bl	80008a6 <_Z24PeriphCommonClock_Configv>
  MX_GPIO_Init();
 80008fc:	f7ff fc7e 	bl	80001fc <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 8000900:	f7ff fee6 	bl	80006d0 <_ZL12MX_CAN1_Initv>
  MX_DMA_Init();
 8000904:	f7ff fd18 	bl	8000338 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8000908:	f7ff ff00 	bl	800070c <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 800090c:	f7ff ff4c 	bl	80007a8 <_ZL12MX_ADC2_Initv>
    HAL_ADC_Start_IT(&hadc1);
 8000910:	4824      	ldr	r0, [pc, #144]	; (80009a4 <main+0xb8>)
 8000912:	f000 fe4f 	bl	80015b4 <HAL_ADC_Start_IT>
  sFilterConfig.FilterBank = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	9305      	str	r3, [sp, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800091a:	9306      	str	r3, [sp, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800091c:	2201      	movs	r2, #1
 800091e:	9207      	str	r2, [sp, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000920:	9300      	str	r3, [sp, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000922:	9301      	str	r3, [sp, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000924:	9302      	str	r3, [sp, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000926:	9303      	str	r3, [sp, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000928:	9304      	str	r3, [sp, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800092a:	9208      	str	r2, [sp, #32]
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 800092c:	4669      	mov	r1, sp
 800092e:	481e      	ldr	r0, [pc, #120]	; (80009a8 <main+0xbc>)
 8000930:	f001 ff1f 	bl	8002772 <HAL_CAN_ConfigFilter>
 8000934:	b108      	cbz	r0, 800093a <main+0x4e>
		Error_Handler();
 8000936:	f7ff fec9 	bl	80006cc <Error_Handler>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800093a:	481b      	ldr	r0, [pc, #108]	; (80009a8 <main+0xbc>)
 800093c:	f001 ffe3 	bl	8002906 <HAL_CAN_Start>
 8000940:	b108      	cbz	r0, 8000946 <main+0x5a>
		Error_Handler();
 8000942:	f7ff fec3 	bl	80006cc <Error_Handler>
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 8000946:	2103      	movs	r1, #3
 8000948:	4817      	ldr	r0, [pc, #92]	; (80009a8 <main+0xbc>)
 800094a:	f002 f8f0 	bl	8002b2e <HAL_CAN_ActivateNotification>
 800094e:	b108      	cbz	r0, 8000954 <main+0x68>
		Error_Handler();
 8000950:	f7ff febc 	bl	80006cc <Error_Handler>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)left_adc_reading, 10);
 8000954:	4c13      	ldr	r4, [pc, #76]	; (80009a4 <main+0xb8>)
 8000956:	220a      	movs	r2, #10
 8000958:	4914      	ldr	r1, [pc, #80]	; (80009ac <main+0xc0>)
 800095a:	4620      	mov	r0, r4
 800095c:	f000 ff5c 	bl	8001818 <HAL_ADC_Start_DMA>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000960:	2102      	movs	r1, #2
 8000962:	4811      	ldr	r0, [pc, #68]	; (80009a8 <main+0xbc>)
 8000964:	f002 f8e3 	bl	8002b2e <HAL_CAN_ActivateNotification>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)right_adc_reading, 10);
 8000968:	220a      	movs	r2, #10
 800096a:	4911      	ldr	r1, [pc, #68]	; (80009b0 <main+0xc4>)
 800096c:	4620      	mov	r0, r4
 800096e:	f000 ff53 	bl	8001818 <HAL_ADC_Start_DMA>
  uint32_t timer = HAL_GetTick();
 8000972:	f000 fab5 	bl	8000ee0 <HAL_GetTick>
 8000976:	4605      	mov	r5, r0
	  i++;
 8000978:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <main+0xc8>)
 800097a:	6813      	ldr	r3, [r2, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	6013      	str	r3, [r2, #0]
	  choose_left_scroll_state();
 8000980:	f7ff fdee 	bl	8000560 <choose_left_scroll_state>
	  wait_for_second_button();
 8000984:	f7ff fd5e 	bl	8000444 <wait_for_second_button>
	  reset_flags();
 8000988:	f7ff fe82 	bl	8000690 <reset_flags>
	  if (timer + 500 < HAL_GetTick())
 800098c:	f505 74fa 	add.w	r4, r5, #500	; 0x1f4
 8000990:	f000 faa6 	bl	8000ee0 <HAL_GetTick>
 8000994:	4284      	cmp	r4, r0
 8000996:	d2ef      	bcs.n	8000978 <main+0x8c>
		  heartbeat();
 8000998:	f7ff fd2e 	bl	80003f8 <heartbeat>
		  timer = HAL_GetTick();
 800099c:	f000 faa0 	bl	8000ee0 <HAL_GetTick>
 80009a0:	4605      	mov	r5, r0
 80009a2:	e7e9      	b.n	8000978 <main+0x8c>
 80009a4:	20000030 	.word	0x20000030
 80009a8:	20000100 	.word	0x20000100
 80009ac:	200001ec 	.word	0x200001ec
 80009b0:	20000204 	.word	0x20000204
 80009b4:	200001e8 	.word	0x200001e8

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x44>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c2:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <HAL_MspInit+0x44>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_MspInit+0x44>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_MspInit+0x44>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_MspInit+0x44>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6593      	str	r3, [r2, #88]	; 0x58
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_MspInit+0x44>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	; 0x30
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a5f      	ldr	r2, [pc, #380]	; (8000b9c <HAL_ADC_MspInit+0x19c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d159      	bne.n	8000ad6 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000a22:	4b5f      	ldr	r3, [pc, #380]	; (8000ba0 <HAL_ADC_MspInit+0x1a0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	4a5d      	ldr	r2, [pc, #372]	; (8000ba0 <HAL_ADC_MspInit+0x1a0>)
 8000a2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000a2c:	4b5c      	ldr	r3, [pc, #368]	; (8000ba0 <HAL_ADC_MspInit+0x1a0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d10b      	bne.n	8000a4c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000a34:	4b5b      	ldr	r3, [pc, #364]	; (8000ba4 <HAL_ADC_MspInit+0x1a4>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a38:	4a5a      	ldr	r2, [pc, #360]	; (8000ba4 <HAL_ADC_MspInit+0x1a4>)
 8000a3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a40:	4b58      	ldr	r3, [pc, #352]	; (8000ba4 <HAL_ADC_MspInit+0x1a4>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a48:	61bb      	str	r3, [r7, #24]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b55      	ldr	r3, [pc, #340]	; (8000ba4 <HAL_ADC_MspInit+0x1a4>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a50:	4a54      	ldr	r2, [pc, #336]	; (8000ba4 <HAL_ADC_MspInit+0x1a4>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a58:	4b52      	ldr	r3, [pc, #328]	; (8000ba4 <HAL_ADC_MspInit+0x1a4>)
 8000a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = SW1_Pin;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a68:	230b      	movs	r3, #11
 8000a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f002 fbd3 	bl	8003224 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel6;
 8000a7e:	4b4a      	ldr	r3, [pc, #296]	; (8000ba8 <HAL_ADC_MspInit+0x1a8>)
 8000a80:	4a4a      	ldr	r2, [pc, #296]	; (8000bac <HAL_ADC_MspInit+0x1ac>)
 8000a82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a84:	4b48      	ldr	r3, [pc, #288]	; (8000ba8 <HAL_ADC_MspInit+0x1a8>)
 8000a86:	2205      	movs	r2, #5
 8000a88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a8a:	4b47      	ldr	r3, [pc, #284]	; (8000ba8 <HAL_ADC_MspInit+0x1a8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a90:	4b45      	ldr	r3, [pc, #276]	; (8000ba8 <HAL_ADC_MspInit+0x1a8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a96:	4b44      	ldr	r3, [pc, #272]	; (8000ba8 <HAL_ADC_MspInit+0x1a8>)
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a9c:	4b42      	ldr	r3, [pc, #264]	; (8000ba8 <HAL_ADC_MspInit+0x1a8>)
 8000a9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aa2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aa4:	4b40      	ldr	r3, [pc, #256]	; (8000ba8 <HAL_ADC_MspInit+0x1a8>)
 8000aa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aaa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000aac:	4b3e      	ldr	r3, [pc, #248]	; (8000ba8 <HAL_ADC_MspInit+0x1a8>)
 8000aae:	2220      	movs	r2, #32
 8000ab0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ab2:	4b3d      	ldr	r3, [pc, #244]	; (8000ba8 <HAL_ADC_MspInit+0x1a8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ab8:	483b      	ldr	r0, [pc, #236]	; (8000ba8 <HAL_ADC_MspInit+0x1a8>)
 8000aba:	f002 f941 	bl	8002d40 <HAL_DMA_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000ac4:	f7ff fe02 	bl	80006cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a37      	ldr	r2, [pc, #220]	; (8000ba8 <HAL_ADC_MspInit+0x1a8>)
 8000acc:	651a      	str	r2, [r3, #80]	; 0x50
 8000ace:	4a36      	ldr	r2, [pc, #216]	; (8000ba8 <HAL_ADC_MspInit+0x1a8>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ad4:	e05d      	b.n	8000b92 <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a35      	ldr	r2, [pc, #212]	; (8000bb0 <HAL_ADC_MspInit+0x1b0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d158      	bne.n	8000b92 <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000ae0:	4b2f      	ldr	r3, [pc, #188]	; (8000ba0 <HAL_ADC_MspInit+0x1a0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	4a2e      	ldr	r2, [pc, #184]	; (8000ba0 <HAL_ADC_MspInit+0x1a0>)
 8000ae8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000aea:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <HAL_ADC_MspInit+0x1a0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d10b      	bne.n	8000b0a <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <HAL_ADC_MspInit+0x1a4>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	4a2b      	ldr	r2, [pc, #172]	; (8000ba4 <HAL_ADC_MspInit+0x1a4>)
 8000af8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <HAL_ADC_MspInit+0x1a4>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <HAL_ADC_MspInit+0x1a4>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	4a25      	ldr	r2, [pc, #148]	; (8000ba4 <HAL_ADC_MspInit+0x1a4>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <HAL_ADC_MspInit+0x1a4>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SW2_Pin|GPIO_PIN_3;
 8000b22:	230c      	movs	r3, #12
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b26:	230b      	movs	r3, #11
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f002 fb74 	bl	8003224 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel7;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <HAL_ADC_MspInit+0x1b4>)
 8000b3e:	4a1e      	ldr	r2, [pc, #120]	; (8000bb8 <HAL_ADC_MspInit+0x1b8>)
 8000b40:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <HAL_ADC_MspInit+0x1b4>)
 8000b44:	2206      	movs	r2, #6
 8000b46:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <HAL_ADC_MspInit+0x1b4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_ADC_MspInit+0x1b4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <HAL_ADC_MspInit+0x1b4>)
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_ADC_MspInit+0x1b4>)
 8000b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b60:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_ADC_MspInit+0x1b4>)
 8000b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b68:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_ADC_MspInit+0x1b4>)
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000b70:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_ADC_MspInit+0x1b4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000b76:	480f      	ldr	r0, [pc, #60]	; (8000bb4 <HAL_ADC_MspInit+0x1b4>)
 8000b78:	f002 f8e2 	bl	8002d40 <HAL_DMA_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_ADC_MspInit+0x186>
      Error_Handler();
 8000b82:	f7ff fda3 	bl	80006cc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_ADC_MspInit+0x1b4>)
 8000b8a:	651a      	str	r2, [r3, #80]	; 0x50
 8000b8c:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <HAL_ADC_MspInit+0x1b4>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000b92:	bf00      	nop
 8000b94:	3730      	adds	r7, #48	; 0x30
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	50040000 	.word	0x50040000
 8000ba0:	20000220 	.word	0x20000220
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	20000128 	.word	0x20000128
 8000bac:	4002006c 	.word	0x4002006c
 8000bb0:	50040100 	.word	0x50040100
 8000bb4:	20000188 	.word	0x20000188
 8000bb8:	40020480 	.word	0x40020480

08000bbc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a18      	ldr	r2, [pc, #96]	; (8000c3c <HAL_CAN_MspInit+0x80>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d129      	bne.n	8000c32 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_CAN_MspInit+0x84>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <HAL_CAN_MspInit+0x84>)
 8000be4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000be8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_CAN_MspInit+0x84>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_CAN_MspInit+0x84>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <HAL_CAN_MspInit+0x84>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_CAN_MspInit+0x84>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c20:	2309      	movs	r3, #9
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	f002 faf9 	bl	8003224 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40006400 	.word	0x40006400
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	2019      	movs	r0, #25
 8000c5a:	f002 f847 	bl	8002cec <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c5e:	2019      	movs	r0, #25
 8000c60:	f002 f860 	bl	8002d24 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_InitTick+0x9c>)
 8000c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c68:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <HAL_InitTick+0x9c>)
 8000c6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c6e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_InitTick+0x9c>)
 8000c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c7c:	f107 0210 	add.w	r2, r7, #16
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 fbd0 	bl	800442c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c8c:	f003 fbb8 	bl	8004400 <HAL_RCC_GetPCLK2Freq>
 8000c90:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c94:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <HAL_InitTick+0xa0>)
 8000c96:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9a:	0c9b      	lsrs	r3, r3, #18
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_InitTick+0xa4>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <HAL_InitTick+0xa8>)
 8000ca4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_InitTick+0xa4>)
 8000ca8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_InitTick+0xa4>)
 8000cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_InitTick+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_InitTick+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cc0:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <HAL_InitTick+0xa4>)
 8000cc2:	f004 f9f9 	bl	80050b8 <HAL_TIM_Base_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d104      	bne.n	8000cd6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ccc:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <HAL_InitTick+0xa4>)
 8000cce:	f004 fa55 	bl	800517c <HAL_TIM_Base_Start_IT>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3730      	adds	r7, #48	; 0x30
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	431bde83 	.word	0x431bde83
 8000ce8:	20000224 	.word	0x20000224
 8000cec:	40012c00 	.word	0x40012c00

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <MemManage_Handler+0x4>

08000d02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW6_Pin);
 8000d4a:	2004      	movs	r0, #4
 8000d4c:	f002 fc2e 	bl	80035ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000d58:	2010      	movs	r0, #16
 8000d5a:	f002 fc27 	bl	80035ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <DMA1_Channel6_IRQHandler+0x10>)
 8000d6a:	f002 f90c 	bl	8002f86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000128 	.word	0x20000128

08000d78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000d7c:	2020      	movs	r0, #32
 8000d7e:	f002 fc15 	bl	80035ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d8e:	f004 fa65 	bl	800525c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000224 	.word	0x20000224

08000d9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 8000da0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000da4:	f002 fc02 	bl	80035ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW4_Pin);
 8000da8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000dac:	f002 fbfe 	bl	80035ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW5_Pin);
 8000db0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000db4:	f002 fbfa 	bl	80035ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <DMA2_Channel7_IRQHandler+0x10>)
 8000dc2:	f002 f8e0 	bl	8002f86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000188 	.word	0x20000188

08000dd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <SystemInit+0x5c>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <SystemInit+0x5c>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <SystemInit+0x60>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <SystemInit+0x60>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <SystemInit+0x60>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <SystemInit+0x60>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <SystemInit+0x60>)
 8000dfc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e00:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <SystemInit+0x60>)
 8000e08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e0c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <SystemInit+0x60>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <SystemInit+0x60>)
 8000e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <SystemInit+0x60>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00
 8000e30:	40021000 	.word	0x40021000

08000e34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e38:	f7ff ffca 	bl	8000dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e3e:	e003      	b.n	8000e48 <LoopCopyDataInit>

08000e40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e46:	3104      	adds	r1, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e48:	480a      	ldr	r0, [pc, #40]	; (8000e74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e50:	d3f6      	bcc.n	8000e40 <CopyDataInit>
	ldr	r2, =_sbss
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e54:	e002      	b.n	8000e5c <LoopFillZerobss>

08000e56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e58:	f842 3b04 	str.w	r3, [r2], #4

08000e5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <LoopForever+0x16>)
	cmp	r2, r3
 8000e5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e60:	d3f9      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e62:	f004 fbfb 	bl	800565c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e66:	f7ff fd41 	bl	80008ec <main>

08000e6a <LoopForever>:

LoopForever:
    b LoopForever
 8000e6a:	e7fe      	b.n	8000e6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e6c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000e70:	0800574c 	.word	0x0800574c
	ldr	r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e78:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000e7c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000e80:	20000274 	.word	0x20000274

08000e84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_2_IRQHandler>

08000e86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f001 ff20 	bl	8002cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e96:	200f      	movs	r0, #15
 8000e98:	f7ff fed4 	bl	8000c44 <HAL_InitTick>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	71fb      	strb	r3, [r7, #7]
 8000ea6:	e001      	b.n	8000eac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea8:	f7ff fd86 	bl	80009b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eac:	79fb      	ldrb	r3, [r7, #7]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000270 	.word	0x20000270

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000270 	.word	0x20000270

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff ffee 	bl	8000ee0 <HAL_GetTick>
 8000f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f10:	d005      	beq.n	8000f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_Delay+0x44>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f1e:	bf00      	nop
 8000f20:	f7ff ffde 	bl	8000ee0 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d8f7      	bhi.n	8000f20 <HAL_Delay+0x28>
  {
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008

08000f40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	431a      	orrs	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	609a      	str	r2, [r3, #8]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3360      	adds	r3, #96	; 0x60
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <LL_ADC_SetOffset+0x44>)
 8000fca:	4013      	ands	r3, r2
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fe0:	bf00      	nop
 8000fe2:	371c      	adds	r7, #28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	03fff000 	.word	0x03fff000

08000ff0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3360      	adds	r3, #96	; 0x60
 8000ffe:	461a      	mov	r2, r3
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3360      	adds	r3, #96	; 0x60
 800102c:	461a      	mov	r2, r3
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	431a      	orrs	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001046:	bf00      	nop
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	615a      	str	r2, [r3, #20]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800109e:	b480      	push	{r7}
 80010a0:	b087      	sub	sp, #28
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3330      	adds	r3, #48	; 0x30
 80010ae:	461a      	mov	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	4413      	add	r3, r2
 80010bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f003 031f 	and.w	r3, r3, #31
 80010c8:	211f      	movs	r1, #31
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	401a      	ands	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	0e9b      	lsrs	r3, r3, #26
 80010d6:	f003 011f 	and.w	r1, r3, #31
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	f003 031f 	and.w	r3, r3, #31
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	431a      	orrs	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010ea:	bf00      	nop
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b087      	sub	sp, #28
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3314      	adds	r3, #20
 8001106:	461a      	mov	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	0e5b      	lsrs	r3, r3, #25
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	4413      	add	r3, r2
 8001114:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	0d1b      	lsrs	r3, r3, #20
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	2107      	movs	r1, #7
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	401a      	ands	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	0d1b      	lsrs	r3, r3, #20
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	431a      	orrs	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001140:	bf00      	nop
 8001142:	371c      	adds	r7, #28
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001164:	43db      	mvns	r3, r3
 8001166:	401a      	ands	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0318 	and.w	r3, r3, #24
 800116e:	4908      	ldr	r1, [pc, #32]	; (8001190 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001170:	40d9      	lsrs	r1, r3
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	400b      	ands	r3, r1
 8001176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800117a:	431a      	orrs	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	0007ffff 	.word	0x0007ffff

08001194 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 031f 	and.w	r3, r3, #31
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6093      	str	r3, [r2, #8]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011e8:	d101      	bne.n	80011ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800120c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001210:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001234:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001238:	d101      	bne.n	800123e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800125c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001260:	f043 0201 	orr.w	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b01      	cmp	r3, #1
 8001286:	d101      	bne.n	800128c <LL_ADC_IsEnabled+0x18>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <LL_ADC_IsEnabled+0x1a>
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012ae:	f043 0204 	orr.w	r2, r3, #4
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d101      	bne.n	80012da <LL_ADC_REG_IsConversionOngoing+0x18>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	d101      	bne.n	8001300 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e134      	b.n	8001594 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001334:	2b00      	cmp	r3, #0
 8001336:	d109      	bne.n	800134c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff fb61 	bl	8000a00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff3f 	bl	80011d4 <LL_ADC_IsDeepPowerDownEnabled>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d004      	beq.n	8001366 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff25 	bl	80011b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff5a 	bl	8001224 <LL_ADC_IsInternalRegulatorEnabled>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d115      	bne.n	80013a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff3e 	bl	80011fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001380:	4b86      	ldr	r3, [pc, #536]	; (800159c <HAL_ADC_Init+0x28c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	099b      	lsrs	r3, r3, #6
 8001386:	4a86      	ldr	r2, [pc, #536]	; (80015a0 <HAL_ADC_Init+0x290>)
 8001388:	fba2 2303 	umull	r2, r3, r2, r3
 800138c:	099b      	lsrs	r3, r3, #6
 800138e:	3301      	adds	r3, #1
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001394:	e002      	b.n	800139c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	3b01      	subs	r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f9      	bne.n	8001396 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff3c 	bl	8001224 <LL_ADC_IsInternalRegulatorEnabled>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10d      	bne.n	80013ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	f043 0210 	orr.w	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c2:	f043 0201 	orr.w	r2, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff75 	bl	80012c2 <LL_ADC_REG_IsConversionOngoing>
 80013d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f040 80cd 	bne.w	8001582 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f040 80c9 	bne.w	8001582 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013f8:	f043 0202 	orr.w	r2, r3, #2
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff35 	bl	8001274 <LL_ADC_IsEnabled>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d110      	bne.n	8001432 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001410:	4864      	ldr	r0, [pc, #400]	; (80015a4 <HAL_ADC_Init+0x294>)
 8001412:	f7ff ff2f 	bl	8001274 <LL_ADC_IsEnabled>
 8001416:	4604      	mov	r4, r0
 8001418:	4863      	ldr	r0, [pc, #396]	; (80015a8 <HAL_ADC_Init+0x298>)
 800141a:	f7ff ff2b 	bl	8001274 <LL_ADC_IsEnabled>
 800141e:	4603      	mov	r3, r0
 8001420:	4323      	orrs	r3, r4
 8001422:	2b00      	cmp	r3, #0
 8001424:	d105      	bne.n	8001432 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4619      	mov	r1, r3
 800142c:	485f      	ldr	r0, [pc, #380]	; (80015ac <HAL_ADC_Init+0x29c>)
 800142e:	f7ff fd87 	bl	8000f40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7e5b      	ldrb	r3, [r3, #25]
 8001436:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800143c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001442:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001448:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001450:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3020 	ldrb.w	r3, [r3, #32]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d106      	bne.n	800146e <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	3b01      	subs	r3, #1
 8001466:	045b      	lsls	r3, r3, #17
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001472:	2b00      	cmp	r3, #0
 8001474:	d009      	beq.n	800148a <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001482:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <HAL_ADC_Init+0x2a0>)
 8001492:	4013      	ands	r3, r2
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	69b9      	ldr	r1, [r7, #24]
 800149a:	430b      	orrs	r3, r1
 800149c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff0d 	bl	80012c2 <LL_ADC_REG_IsConversionOngoing>
 80014a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff1a 	bl	80012e8 <LL_ADC_INJ_IsConversionOngoing>
 80014b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d140      	bne.n	800153e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d13d      	bne.n	800153e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7e1b      	ldrb	r3, [r3, #24]
 80014ca:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014cc:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014d4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014e4:	f023 0306 	bic.w	r3, r3, #6
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	69b9      	ldr	r1, [r7, #24]
 80014ee:	430b      	orrs	r3, r1
 80014f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d118      	bne.n	800152e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001506:	f023 0304 	bic.w	r3, r3, #4
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001512:	4311      	orrs	r1, r2
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001518:	4311      	orrs	r1, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800151e:	430a      	orrs	r2, r1
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	611a      	str	r2, [r3, #16]
 800152c:	e007      	b.n	800153e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0201 	bic.w	r2, r2, #1
 800153c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d10c      	bne.n	8001560 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	f023 010f 	bic.w	r1, r3, #15
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	1e5a      	subs	r2, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	631a      	str	r2, [r3, #48]	; 0x30
 800155e:	e007      	b.n	8001570 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 020f 	bic.w	r2, r2, #15
 800156e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	f023 0303 	bic.w	r3, r3, #3
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	659a      	str	r2, [r3, #88]	; 0x58
 8001580:	e007      	b.n	8001592 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	f043 0210 	orr.w	r2, r3, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001592:	7ffb      	ldrb	r3, [r7, #31]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3724      	adds	r7, #36	; 0x24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd90      	pop	{r4, r7, pc}
 800159c:	20000000 	.word	0x20000000
 80015a0:	053e2d63 	.word	0x053e2d63
 80015a4:	50040000 	.word	0x50040000
 80015a8:	50040100 	.word	0x50040100
 80015ac:	50040300 	.word	0x50040300
 80015b0:	fff0c007 	.word	0xfff0c007

080015b4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015bc:	4893      	ldr	r0, [pc, #588]	; (800180c <HAL_ADC_Start_IT+0x258>)
 80015be:	f7ff fde9 	bl	8001194 <LL_ADC_GetMultimode>
 80015c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fe7a 	bl	80012c2 <LL_ADC_REG_IsConversionOngoing>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f040 8111 	bne.w	80017f8 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_ADC_Start_IT+0x30>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e10e      	b.n	8001802 <HAL_ADC_Start_IT+0x24e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 fde1 	bl	80021b4 <ADC_Enable>
 80015f2:	4603      	mov	r3, r0
 80015f4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f040 80f8 	bne.w	80017ee <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a7e      	ldr	r2, [pc, #504]	; (8001810 <HAL_ADC_Start_IT+0x25c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d002      	beq.n	8001622 <HAL_ADC_Start_IT+0x6e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	e000      	b.n	8001624 <HAL_ADC_Start_IT+0x70>
 8001622:	4b7c      	ldr	r3, [pc, #496]	; (8001814 <HAL_ADC_Start_IT+0x260>)
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	4293      	cmp	r3, r2
 800162a:	d002      	beq.n	8001632 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d105      	bne.n	800163e <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164e:	f023 0206 	bic.w	r2, r3, #6
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	65da      	str	r2, [r3, #92]	; 0x5c
 8001656:	e002      	b.n	800165e <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	221c      	movs	r2, #28
 8001664:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 021c 	bic.w	r2, r2, #28
 800167c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	2b08      	cmp	r3, #8
 8001684:	d108      	bne.n	8001698 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0208 	orr.w	r2, r2, #8
 8001694:	605a      	str	r2, [r3, #4]
          break;
 8001696:	e008      	b.n	80016aa <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0204 	orr.w	r2, r2, #4
 80016a6:	605a      	str	r2, [r3, #4]
          break;
 80016a8:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d107      	bne.n	80016c2 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0210 	orr.w	r2, r2, #16
 80016c0:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a52      	ldr	r2, [pc, #328]	; (8001810 <HAL_ADC_Start_IT+0x25c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d002      	beq.n	80016d2 <HAL_ADC_Start_IT+0x11e>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	e000      	b.n	80016d4 <HAL_ADC_Start_IT+0x120>
 80016d2:	4b50      	ldr	r3, [pc, #320]	; (8001814 <HAL_ADC_Start_IT+0x260>)
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	4293      	cmp	r3, r2
 80016da:	d008      	beq.n	80016ee <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d002      	beq.n	80016ee <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	2b09      	cmp	r3, #9
 80016ec:	d13b      	bne.n	8001766 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d02d      	beq.n	8001758 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001704:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	2b08      	cmp	r3, #8
 8001712:	d110      	bne.n	8001736 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0220 	bic.w	r2, r2, #32
 8001722:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001732:	605a      	str	r2, [r3, #4]
              break;
 8001734:	e011      	b.n	800175a <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001744:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0220 	orr.w	r2, r2, #32
 8001754:	605a      	str	r2, [r3, #4]
              break;
 8001756:	e000      	b.n	800175a <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8001758:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fd9b 	bl	800129a <LL_ADC_REG_StartConversion>
 8001764:	e04c      	b.n	8001800 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a26      	ldr	r2, [pc, #152]	; (8001810 <HAL_ADC_Start_IT+0x25c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d002      	beq.n	8001782 <HAL_ADC_Start_IT+0x1ce>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	e000      	b.n	8001784 <HAL_ADC_Start_IT+0x1d0>
 8001782:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_ADC_Start_IT+0x260>)
 8001784:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d035      	beq.n	80017fe <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800179a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	659a      	str	r2, [r3, #88]	; 0x58
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d110      	bne.n	80017cc <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0220 	bic.w	r2, r2, #32
 80017b8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017c8:	605a      	str	r2, [r3, #4]
              break;
 80017ca:	e019      	b.n	8001800 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017da:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0220 	orr.w	r2, r2, #32
 80017ea:	605a      	str	r2, [r3, #4]
              break;
 80017ec:	e008      	b.n	8001800 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80017f6:	e003      	b.n	8001800 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017f8:	2302      	movs	r3, #2
 80017fa:	75fb      	strb	r3, [r7, #23]
 80017fc:	e000      	b.n	8001800 <HAL_ADC_Start_IT+0x24c>
        }
 80017fe:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001800:	7dfb      	ldrb	r3, [r7, #23]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	50040300 	.word	0x50040300
 8001810:	50040100 	.word	0x50040100
 8001814:	50040000 	.word	0x50040000

08001818 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001824:	4850      	ldr	r0, [pc, #320]	; (8001968 <HAL_ADC_Start_DMA+0x150>)
 8001826:	f7ff fcb5 	bl	8001194 <LL_ADC_GetMultimode>
 800182a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fd46 	bl	80012c2 <LL_ADC_REG_IsConversionOngoing>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	f040 808e 	bne.w	800195a <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_ADC_Start_DMA+0x34>
 8001848:	2302      	movs	r3, #2
 800184a:	e089      	b.n	8001960 <HAL_ADC_Start_DMA+0x148>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d002      	beq.n	8001866 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b09      	cmp	r3, #9
 8001864:	d172      	bne.n	800194c <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fca4 	bl	80021b4 <ADC_Enable>
 800186c:	4603      	mov	r3, r0
 800186e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d165      	bne.n	8001942 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a37      	ldr	r2, [pc, #220]	; (800196c <HAL_ADC_Start_DMA+0x154>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d002      	beq.n	800189a <HAL_ADC_Start_DMA+0x82>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	e000      	b.n	800189c <HAL_ADC_Start_DMA+0x84>
 800189a:	4b35      	ldr	r3, [pc, #212]	; (8001970 <HAL_ADC_Start_DMA+0x158>)
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d002      	beq.n	80018aa <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d105      	bne.n	80018b6 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d006      	beq.n	80018d0 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c6:	f023 0206 	bic.w	r2, r3, #6
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80018ce:	e002      	b.n	80018d6 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018da:	4a26      	ldr	r2, [pc, #152]	; (8001974 <HAL_ADC_Start_DMA+0x15c>)
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e2:	4a25      	ldr	r2, [pc, #148]	; (8001978 <HAL_ADC_Start_DMA+0x160>)
 80018e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ea:	4a24      	ldr	r2, [pc, #144]	; (800197c <HAL_ADC_Start_DMA+0x164>)
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	221c      	movs	r2, #28
 80018f4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 0210 	orr.w	r2, r2, #16
 800190c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0201 	orr.w	r2, r2, #1
 800191c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3340      	adds	r3, #64	; 0x40
 8001928:	4619      	mov	r1, r3
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f001 faaf 	bl	8002e90 <HAL_DMA_Start_IT>
 8001932:	4603      	mov	r3, r0
 8001934:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fcad 	bl	800129a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001940:	e00d      	b.n	800195e <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 800194a:	e008      	b.n	800195e <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001958:	e001      	b.n	800195e <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800195a:	2302      	movs	r3, #2
 800195c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800195e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	50040300 	.word	0x50040300
 800196c:	50040100 	.word	0x50040100
 8001970:	50040000 	.word	0x50040000
 8001974:	080022c1 	.word	0x080022c1
 8001978:	08002399 	.word	0x08002399
 800197c:	080023b5 	.word	0x080023b5

08001980 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b0b6      	sub	sp, #216	; 0xd8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d101      	bne.n	80019de <HAL_ADC_ConfigChannel+0x22>
 80019da:	2302      	movs	r3, #2
 80019dc:	e3d5      	b.n	800218a <HAL_ADC_ConfigChannel+0x7ce>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fc69 	bl	80012c2 <LL_ADC_REG_IsConversionOngoing>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 83ba 	bne.w	800216c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d824      	bhi.n	8001a4a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	3b02      	subs	r3, #2
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d81b      	bhi.n	8001a42 <HAL_ADC_ConfigChannel+0x86>
 8001a0a:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <HAL_ADC_ConfigChannel+0x54>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001a21 	.word	0x08001a21
 8001a14:	08001a29 	.word	0x08001a29
 8001a18:	08001a31 	.word	0x08001a31
 8001a1c:	08001a39 	.word	0x08001a39
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	220c      	movs	r2, #12
 8001a24:	605a      	str	r2, [r3, #4]
          break;
 8001a26:	e011      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2212      	movs	r2, #18
 8001a2c:	605a      	str	r2, [r3, #4]
          break;
 8001a2e:	e00d      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2218      	movs	r2, #24
 8001a34:	605a      	str	r2, [r3, #4]
          break;
 8001a36:	e009      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a3e:	605a      	str	r2, [r3, #4]
          break;
 8001a40:	e004      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2206      	movs	r2, #6
 8001a46:	605a      	str	r2, [r3, #4]
          break;
 8001a48:	e000      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a4a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	6859      	ldr	r1, [r3, #4]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	f7ff fb20 	bl	800109e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fc2d 	bl	80012c2 <LL_ADC_REG_IsConversionOngoing>
 8001a68:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fc39 	bl	80012e8 <LL_ADC_INJ_IsConversionOngoing>
 8001a76:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 81c1 	bne.w	8001e06 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f040 81bc 	bne.w	8001e06 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a96:	d10f      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff fb27 	bl	80010f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff face 	bl	8001052 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ab6:	e00e      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6819      	ldr	r1, [r3, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	f7ff fb16 	bl	80010f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fabe 	bl	8001052 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	08db      	lsrs	r3, r3, #3
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d00a      	beq.n	8001b0e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	6919      	ldr	r1, [r3, #16]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b08:	f7ff fa4e 	bl	8000fa8 <LL_ADC_SetOffset>
 8001b0c:	e17b      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fa6b 	bl	8000ff0 <LL_ADC_GetOffsetChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10a      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x17e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fa60 	bl	8000ff0 <LL_ADC_GetOffsetChannel>
 8001b30:	4603      	mov	r3, r0
 8001b32:	0e9b      	lsrs	r3, r3, #26
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	e01e      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x1bc>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fa55 	bl	8000ff0 <LL_ADC_GetOffsetChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001b68:	2320      	movs	r3, #32
 8001b6a:	e004      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001b6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x1d4>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	0e9b      	lsrs	r3, r3, #26
 8001b8a:	f003 031f 	and.w	r3, r3, #31
 8001b8e:	e018      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x206>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001bac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	e004      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001bb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d106      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fa24 	bl	800101c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fa08 	bl	8000ff0 <LL_ADC_GetOffsetChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10a      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x244>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff f9fd 	bl	8000ff0 <LL_ADC_GetOffsetChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	0e9b      	lsrs	r3, r3, #26
 8001bfa:	f003 021f 	and.w	r2, r3, #31
 8001bfe:	e01e      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x282>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2101      	movs	r1, #1
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f9f2 	bl	8000ff0 <LL_ADC_GetOffsetChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	e004      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001c32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x29a>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0e9b      	lsrs	r3, r3, #26
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	e018      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x2cc>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	e004      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001c7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d106      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2200      	movs	r2, #0
 8001c92:	2101      	movs	r1, #1
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff f9c1 	bl	800101c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff f9a5 	bl	8000ff0 <LL_ADC_GetOffsetChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10a      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x30a>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff f99a 	bl	8000ff0 <LL_ADC_GetOffsetChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	0e9b      	lsrs	r3, r3, #26
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	e01e      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x348>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2102      	movs	r1, #2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f98f 	bl	8000ff0 <LL_ADC_GetOffsetChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ce8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001cec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	e004      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001cf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d105      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x360>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	0e9b      	lsrs	r3, r3, #26
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	e016      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x38e>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001d3c:	2320      	movs	r3, #32
 8001d3e:	e004      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d106      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2200      	movs	r2, #0
 8001d54:	2102      	movs	r1, #2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f960 	bl	800101c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2103      	movs	r1, #3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff f944 	bl	8000ff0 <LL_ADC_GetOffsetChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10a      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x3cc>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2103      	movs	r1, #3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff f939 	bl	8000ff0 <LL_ADC_GetOffsetChannel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	0e9b      	lsrs	r3, r3, #26
 8001d82:	f003 021f 	and.w	r2, r3, #31
 8001d86:	e017      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x3fc>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2103      	movs	r1, #3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff f92e 	bl	8000ff0 <LL_ADC_GetOffsetChannel>
 8001d94:	4603      	mov	r3, r0
 8001d96:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001da0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001da2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001daa:	2320      	movs	r3, #32
 8001dac:	e003      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001dae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x414>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	0e9b      	lsrs	r3, r3, #26
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	e011      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x438>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001de0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001de8:	2320      	movs	r3, #32
 8001dea:	e003      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d106      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2103      	movs	r1, #3
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f90b 	bl	800101c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fa32 	bl	8001274 <LL_ADC_IsEnabled>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 8140 	bne.w	8002098 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	461a      	mov	r2, r3
 8001e26:	f7ff f991 	bl	800114c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	4a8f      	ldr	r2, [pc, #572]	; (800206c <HAL_ADC_ConfigChannel+0x6b0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	f040 8131 	bne.w	8002098 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10b      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x4a2>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	0e9b      	lsrs	r3, r3, #26
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	2b09      	cmp	r3, #9
 8001e54:	bf94      	ite	ls
 8001e56:	2301      	movls	r3, #1
 8001e58:	2300      	movhi	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	e019      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x4d6>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e6e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001e76:	2320      	movs	r3, #32
 8001e78:	e003      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	3301      	adds	r3, #1
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	2b09      	cmp	r3, #9
 8001e8a:	bf94      	ite	ls
 8001e8c:	2301      	movls	r3, #1
 8001e8e:	2300      	movhi	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d079      	beq.n	8001f8a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d107      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x4f6>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	0e9b      	lsrs	r3, r3, #26
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	069b      	lsls	r3, r3, #26
 8001eac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eb0:	e015      	b.n	8001ede <HAL_ADC_ConfigChannel+0x522>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ec2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001eca:	2320      	movs	r3, #32
 8001ecc:	e003      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	069b      	lsls	r3, r3, #26
 8001eda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x542>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	0e9b      	lsrs	r3, r3, #26
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	e017      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x572>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001f16:	2320      	movs	r3, #32
 8001f18:	e003      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	3301      	adds	r3, #1
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	ea42 0103 	orr.w	r1, r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10a      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x598>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	0e9b      	lsrs	r3, r3, #26
 8001f44:	3301      	adds	r3, #1
 8001f46:	f003 021f 	and.w	r2, r3, #31
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	051b      	lsls	r3, r3, #20
 8001f52:	e018      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x5ca>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	e003      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f003 021f 	and.w	r2, r3, #31
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f86:	430b      	orrs	r3, r1
 8001f88:	e081      	b.n	800208e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d107      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x5ea>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	0e9b      	lsrs	r3, r3, #26
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	069b      	lsls	r3, r3, #26
 8001fa0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fa4:	e015      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x616>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001fbe:	2320      	movs	r3, #32
 8001fc0:	e003      	b.n	8001fca <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	069b      	lsls	r3, r3, #26
 8001fce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d109      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x636>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	0e9b      	lsrs	r3, r3, #26
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f003 031f 	and.w	r3, r3, #31
 8001fea:	2101      	movs	r1, #1
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	e017      	b.n	8002022 <HAL_ADC_ConfigChannel+0x666>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	61fb      	str	r3, [r7, #28]
  return result;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800200a:	2320      	movs	r3, #32
 800200c:	e003      	b.n	8002016 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	3301      	adds	r3, #1
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	ea42 0103 	orr.w	r1, r2, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10d      	bne.n	800204e <HAL_ADC_ConfigChannel+0x692>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	0e9b      	lsrs	r3, r3, #26
 8002038:	3301      	adds	r3, #1
 800203a:	f003 021f 	and.w	r2, r3, #31
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	3b1e      	subs	r3, #30
 8002046:	051b      	lsls	r3, r3, #20
 8002048:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800204c:	e01e      	b.n	800208c <HAL_ADC_ConfigChannel+0x6d0>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	613b      	str	r3, [r7, #16]
  return result;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d104      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002066:	2320      	movs	r3, #32
 8002068:	e006      	b.n	8002078 <HAL_ADC_ConfigChannel+0x6bc>
 800206a:	bf00      	nop
 800206c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	3301      	adds	r3, #1
 800207a:	f003 021f 	and.w	r2, r3, #31
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	3b1e      	subs	r3, #30
 8002086:	051b      	lsls	r3, r3, #20
 8002088:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800208c:	430b      	orrs	r3, r1
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	6892      	ldr	r2, [r2, #8]
 8002092:	4619      	mov	r1, r3
 8002094:	f7ff f82f 	bl	80010f6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <HAL_ADC_ConfigChannel+0x7d8>)
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d06c      	beq.n	800217e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020a4:	483c      	ldr	r0, [pc, #240]	; (8002198 <HAL_ADC_ConfigChannel+0x7dc>)
 80020a6:	f7fe ff71 	bl	8000f8c <LL_ADC_GetCommonPathInternalCh>
 80020aa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a3a      	ldr	r2, [pc, #232]	; (800219c <HAL_ADC_ConfigChannel+0x7e0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d127      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d121      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a35      	ldr	r2, [pc, #212]	; (80021a0 <HAL_ADC_ConfigChannel+0x7e4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d157      	bne.n	800217e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020d6:	4619      	mov	r1, r3
 80020d8:	482f      	ldr	r0, [pc, #188]	; (8002198 <HAL_ADC_ConfigChannel+0x7dc>)
 80020da:	f7fe ff44 	bl	8000f66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020de:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <HAL_ADC_ConfigChannel+0x7e8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	099b      	lsrs	r3, r3, #6
 80020e4:	4a30      	ldr	r2, [pc, #192]	; (80021a8 <HAL_ADC_ConfigChannel+0x7ec>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	099b      	lsrs	r3, r3, #6
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020f8:	e002      	b.n	8002100 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f9      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002106:	e03a      	b.n	800217e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a27      	ldr	r2, [pc, #156]	; (80021ac <HAL_ADC_ConfigChannel+0x7f0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d113      	bne.n	800213a <HAL_ADC_ConfigChannel+0x77e>
 8002112:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10d      	bne.n	800213a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1f      	ldr	r2, [pc, #124]	; (80021a0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d12a      	bne.n	800217e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002128:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800212c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002130:	4619      	mov	r1, r3
 8002132:	4819      	ldr	r0, [pc, #100]	; (8002198 <HAL_ADC_ConfigChannel+0x7dc>)
 8002134:	f7fe ff17 	bl	8000f66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002138:	e021      	b.n	800217e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d11c      	bne.n	800217e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d116      	bne.n	800217e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d111      	bne.n	800217e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800215a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800215e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002162:	4619      	mov	r1, r3
 8002164:	480c      	ldr	r0, [pc, #48]	; (8002198 <HAL_ADC_ConfigChannel+0x7dc>)
 8002166:	f7fe fefe 	bl	8000f66 <LL_ADC_SetCommonPathInternalCh>
 800216a:	e008      	b.n	800217e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	f043 0220 	orr.w	r2, r3, #32
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002186:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800218a:	4618      	mov	r0, r3
 800218c:	37d8      	adds	r7, #216	; 0xd8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	80080000 	.word	0x80080000
 8002198:	50040300 	.word	0x50040300
 800219c:	c7520000 	.word	0xc7520000
 80021a0:	50040000 	.word	0x50040000
 80021a4:	20000000 	.word	0x20000000
 80021a8:	053e2d63 	.word	0x053e2d63
 80021ac:	cb840000 	.word	0xcb840000
 80021b0:	80000001 	.word	0x80000001

080021b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff f855 	bl	8001274 <LL_ADC_IsEnabled>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d169      	bne.n	80022a4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <ADC_Enable+0xfc>)
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	f043 0210 	orr.w	r2, r3, #16
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	f043 0201 	orr.w	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e055      	b.n	80022a6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff f824 	bl	800124c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002204:	482b      	ldr	r0, [pc, #172]	; (80022b4 <ADC_Enable+0x100>)
 8002206:	f7fe fec1 	bl	8000f8c <LL_ADC_GetCommonPathInternalCh>
 800220a:	4603      	mov	r3, r0
 800220c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d013      	beq.n	800223c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002214:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <ADC_Enable+0x104>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	4a28      	ldr	r2, [pc, #160]	; (80022bc <ADC_Enable+0x108>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800222e:	e002      	b.n	8002236 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3b01      	subs	r3, #1
 8002234:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f9      	bne.n	8002230 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800223c:	f7fe fe50 	bl	8000ee0 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002242:	e028      	b.n	8002296 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff f813 	bl	8001274 <LL_ADC_IsEnabled>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d104      	bne.n	800225e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe fff7 	bl	800124c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800225e:	f7fe fe3f 	bl	8000ee0 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d914      	bls.n	8002296 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d00d      	beq.n	8002296 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	f043 0210 	orr.w	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e007      	b.n	80022a6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d1cf      	bne.n	8002244 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	8000003f 	.word	0x8000003f
 80022b4:	50040300 	.word	0x50040300
 80022b8:	20000000 	.word	0x20000000
 80022bc:	053e2d63 	.word	0x053e2d63

080022c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d14b      	bne.n	8002372 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d021      	beq.n	8002338 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe febd 	bl	8001078 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d032      	beq.n	800236a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d12b      	bne.n	800236a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d11f      	bne.n	800236a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	f043 0201 	orr.w	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	659a      	str	r2, [r3, #88]	; 0x58
 8002336:	e018      	b.n	800236a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d111      	bne.n	800236a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	f043 0201 	orr.w	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7ff fb08 	bl	8001980 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002370:	e00e      	b.n	8002390 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7ff fb12 	bl	80019a8 <HAL_ADC_ErrorCallback>
}
 8002384:	e004      	b.n	8002390 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f7ff faf4 	bl	8001994 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d2:	f043 0204 	orr.w	r2, r3, #4
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f7ff fae4 	bl	80019a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <LL_ADC_IsEnabled>:
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <LL_ADC_IsEnabled+0x18>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <LL_ADC_IsEnabled+0x1a>
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <LL_ADC_REG_IsConversionOngoing>:
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b04      	cmp	r3, #4
 8002420:	d101      	bne.n	8002426 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b0a1      	sub	sp, #132	; 0x84
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800244e:	2302      	movs	r3, #2
 8002450:	e089      	b.n	8002566 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800245a:	2300      	movs	r3, #0
 800245c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800245e:	2300      	movs	r3, #0
 8002460:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a42      	ldr	r2, [pc, #264]	; (8002570 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d102      	bne.n	8002472 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800246c:	4b41      	ldr	r3, [pc, #260]	; (8002574 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	e001      	b.n	8002476 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	f043 0220 	orr.w	r2, r3, #32
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e068      	b.n	8002566 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ffb9 	bl	800240e <LL_ADC_REG_IsConversionOngoing>
 800249c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ffb3 	bl	800240e <LL_ADC_REG_IsConversionOngoing>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d14a      	bne.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80024ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d147      	bne.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80024b4:	4b30      	ldr	r3, [pc, #192]	; (8002578 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80024b6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d027      	beq.n	8002510 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80024c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024d2:	035b      	lsls	r3, r3, #13
 80024d4:	430b      	orrs	r3, r1
 80024d6:	431a      	orrs	r2, r3
 80024d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024dc:	4824      	ldr	r0, [pc, #144]	; (8002570 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80024de:	f7ff ff83 	bl	80023e8 <LL_ADC_IsEnabled>
 80024e2:	4604      	mov	r4, r0
 80024e4:	4823      	ldr	r0, [pc, #140]	; (8002574 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024e6:	f7ff ff7f 	bl	80023e8 <LL_ADC_IsEnabled>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4323      	orrs	r3, r4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d132      	bne.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024fa:	f023 030f 	bic.w	r3, r3, #15
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	6811      	ldr	r1, [r2, #0]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	6892      	ldr	r2, [r2, #8]
 8002506:	430a      	orrs	r2, r1
 8002508:	431a      	orrs	r2, r3
 800250a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800250c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800250e:	e023      	b.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800251a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800251c:	4814      	ldr	r0, [pc, #80]	; (8002570 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800251e:	f7ff ff63 	bl	80023e8 <LL_ADC_IsEnabled>
 8002522:	4604      	mov	r4, r0
 8002524:	4813      	ldr	r0, [pc, #76]	; (8002574 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002526:	f7ff ff5f 	bl	80023e8 <LL_ADC_IsEnabled>
 800252a:	4603      	mov	r3, r0
 800252c:	4323      	orrs	r3, r4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d112      	bne.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800253a:	f023 030f 	bic.w	r3, r3, #15
 800253e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002540:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002542:	e009      	b.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	f043 0220 	orr.w	r2, r3, #32
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002556:	e000      	b.n	800255a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002558:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002562:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002566:	4618      	mov	r0, r3
 8002568:	3784      	adds	r7, #132	; 0x84
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}
 800256e:	bf00      	nop
 8002570:	50040000 	.word	0x50040000
 8002574:	50040100 	.word	0x50040100
 8002578:	50040300 	.word	0x50040300

0800257c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e0ed      	b.n	800276a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe fb0e 	bl	8000bbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025b0:	f7fe fc96 	bl	8000ee0 <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025b6:	e012      	b.n	80025de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025b8:	f7fe fc92 	bl	8000ee0 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b0a      	cmp	r3, #10
 80025c4:	d90b      	bls.n	80025de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2205      	movs	r2, #5
 80025d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e0c5      	b.n	800276a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0e5      	beq.n	80025b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0202 	bic.w	r2, r2, #2
 80025fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025fc:	f7fe fc70 	bl	8000ee0 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002602:	e012      	b.n	800262a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002604:	f7fe fc6c 	bl	8000ee0 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b0a      	cmp	r3, #10
 8002610:	d90b      	bls.n	800262a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2205      	movs	r2, #5
 8002622:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e09f      	b.n	800276a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e5      	bne.n	8002604 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7e1b      	ldrb	r3, [r3, #24]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d108      	bne.n	8002652 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e007      	b.n	8002662 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7e5b      	ldrb	r3, [r3, #25]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d108      	bne.n	800267c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e007      	b.n	800268c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800268a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7e9b      	ldrb	r3, [r3, #26]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d108      	bne.n	80026a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0220 	orr.w	r2, r2, #32
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e007      	b.n	80026b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0220 	bic.w	r2, r2, #32
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	7edb      	ldrb	r3, [r3, #27]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0210 	bic.w	r2, r2, #16
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e007      	b.n	80026e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0210 	orr.w	r2, r2, #16
 80026de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	7f1b      	ldrb	r3, [r3, #28]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d108      	bne.n	80026fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0208 	orr.w	r2, r2, #8
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e007      	b.n	800270a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0208 	bic.w	r2, r2, #8
 8002708:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7f5b      	ldrb	r3, [r3, #29]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d108      	bne.n	8002724 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0204 	orr.w	r2, r2, #4
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e007      	b.n	8002734 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0204 	bic.w	r2, r2, #4
 8002732:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	ea42 0103 	orr.w	r1, r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	1e5a      	subs	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002772:	b480      	push	{r7}
 8002774:	b087      	sub	sp, #28
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002788:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d003      	beq.n	8002798 <HAL_CAN_ConfigFilter+0x26>
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	2b02      	cmp	r3, #2
 8002794:	f040 80aa 	bne.w	80028ec <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2201      	movs	r2, #1
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	401a      	ands	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d123      	bne.n	800281a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	43db      	mvns	r3, r3
 80027dc:	401a      	ands	r2, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	3248      	adds	r2, #72	; 0x48
 80027fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800280e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002810:	6979      	ldr	r1, [r7, #20]
 8002812:	3348      	adds	r3, #72	; 0x48
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	440b      	add	r3, r1
 8002818:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d122      	bne.n	8002868 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	431a      	orrs	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002842:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	3248      	adds	r2, #72	; 0x48
 8002848:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800285c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800285e:	6979      	ldr	r1, [r7, #20]
 8002860:	3348      	adds	r3, #72	; 0x48
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	440b      	add	r3, r1
 8002866:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	43db      	mvns	r3, r3
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002882:	e007      	b.n	8002894 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	431a      	orrs	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d109      	bne.n	80028b0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	401a      	ands	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80028ae:	e007      	b.n	80028c0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	431a      	orrs	r2, r3
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d107      	bne.n	80028d8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028de:	f023 0201 	bic.w	r2, r3, #1
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	e006      	b.n	80028fa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d12e      	bne.n	8002978 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2202      	movs	r2, #2
 800291e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0201 	bic.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002932:	f7fe fad5 	bl	8000ee0 <HAL_GetTick>
 8002936:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002938:	e012      	b.n	8002960 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800293a:	f7fe fad1 	bl	8000ee0 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b0a      	cmp	r3, #10
 8002946:	d90b      	bls.n	8002960 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2205      	movs	r2, #5
 8002958:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e012      	b.n	8002986 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e5      	bne.n	800293a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e006      	b.n	8002986 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
  }
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800298e:	b480      	push	{r7}
 8002990:	b089      	sub	sp, #36	; 0x24
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029ac:	7ffb      	ldrb	r3, [r7, #31]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d003      	beq.n	80029ba <HAL_CAN_AddTxMessage+0x2c>
 80029b2:	7ffb      	ldrb	r3, [r7, #31]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	f040 80ad 	bne.w	8002b14 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d105      	bne.n	80029da <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8095 	beq.w	8002b04 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	0e1b      	lsrs	r3, r3, #24
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029e4:	2201      	movs	r2, #1
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	409a      	lsls	r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10d      	bne.n	8002a12 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a00:	68f9      	ldr	r1, [r7, #12]
 8002a02:	6809      	ldr	r1, [r1, #0]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3318      	adds	r3, #24
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	440b      	add	r3, r1
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	e00f      	b.n	8002a32 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a1c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a22:	68f9      	ldr	r1, [r7, #12]
 8002a24:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a26:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3318      	adds	r3, #24
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	440b      	add	r3, r1
 8002a30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	3318      	adds	r3, #24
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	440b      	add	r3, r1
 8002a42:	3304      	adds	r3, #4
 8002a44:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	7d1b      	ldrb	r3, [r3, #20]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d111      	bne.n	8002a72 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3318      	adds	r3, #24
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	4413      	add	r3, r2
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	6811      	ldr	r1, [r2, #0]
 8002a62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3318      	adds	r3, #24
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3304      	adds	r3, #4
 8002a70:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3307      	adds	r3, #7
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	061a      	lsls	r2, r3, #24
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3306      	adds	r3, #6
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3305      	adds	r3, #5
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	3204      	adds	r2, #4
 8002a92:	7812      	ldrb	r2, [r2, #0]
 8002a94:	4610      	mov	r0, r2
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	6811      	ldr	r1, [r2, #0]
 8002a9a:	ea43 0200 	orr.w	r2, r3, r0
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002aa8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3303      	adds	r3, #3
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	061a      	lsls	r2, r3, #24
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	041b      	lsls	r3, r3, #16
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	7812      	ldrb	r2, [r2, #0]
 8002aca:	4610      	mov	r0, r2
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	6811      	ldr	r1, [r2, #0]
 8002ad0:	ea43 0200 	orr.w	r2, r3, r0
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	440b      	add	r3, r1
 8002ada:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002ade:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	3318      	adds	r3, #24
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	4413      	add	r3, r2
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	6811      	ldr	r1, [r2, #0]
 8002af2:	f043 0201 	orr.w	r2, r3, #1
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3318      	adds	r3, #24
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	440b      	add	r3, r1
 8002afe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e00e      	b.n	8002b22 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e006      	b.n	8002b22 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3724      	adds	r7, #36	; 0x24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d002      	beq.n	8002b4c <HAL_CAN_ActivateNotification+0x1e>
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d109      	bne.n	8002b60 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6959      	ldr	r1, [r3, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e006      	b.n	8002b6e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
  }
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bae:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	60d3      	str	r3, [r2, #12]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <__NVIC_GetPriorityGrouping+0x18>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	f003 0307 	and.w	r3, r3, #7
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	db0b      	blt.n	8002c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	4907      	ldr	r1, [pc, #28]	; (8002c18 <__NVIC_EnableIRQ+0x38>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2001      	movs	r0, #1
 8002c02:	fa00 f202 	lsl.w	r2, r0, r2
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000e100 	.word	0xe000e100

08002c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db0a      	blt.n	8002c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	490c      	ldr	r1, [pc, #48]	; (8002c68 <__NVIC_SetPriority+0x4c>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c44:	e00a      	b.n	8002c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4908      	ldr	r1, [pc, #32]	; (8002c6c <__NVIC_SetPriority+0x50>)
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3b04      	subs	r3, #4
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	440b      	add	r3, r1
 8002c5a:	761a      	strb	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000e100 	.word	0xe000e100
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f1c3 0307 	rsb	r3, r3, #7
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	bf28      	it	cs
 8002c8e:	2304      	movcs	r3, #4
 8002c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3304      	adds	r3, #4
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d902      	bls.n	8002ca0 <NVIC_EncodePriority+0x30>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3b03      	subs	r3, #3
 8002c9e:	e000      	b.n	8002ca2 <NVIC_EncodePriority+0x32>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	4313      	orrs	r3, r2
         );
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	; 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff ff4c 	bl	8002b7c <__NVIC_SetPriorityGrouping>
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cfe:	f7ff ff61 	bl	8002bc4 <__NVIC_GetPriorityGrouping>
 8002d02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	6978      	ldr	r0, [r7, #20]
 8002d0a:	f7ff ffb1 	bl	8002c70 <NVIC_EncodePriority>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff80 	bl	8002c1c <__NVIC_SetPriority>
}
 8002d1c:	bf00      	nop
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ff54 	bl	8002be0 <__NVIC_EnableIRQ>
}
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e08d      	b.n	8002e6e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <HAL_DMA_Init+0x138>)
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d80f      	bhi.n	8002d7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b45      	ldr	r3, [pc, #276]	; (8002e7c <HAL_DMA_Init+0x13c>)
 8002d66:	4413      	add	r3, r2
 8002d68:	4a45      	ldr	r2, [pc, #276]	; (8002e80 <HAL_DMA_Init+0x140>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	009a      	lsls	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a42      	ldr	r2, [pc, #264]	; (8002e84 <HAL_DMA_Init+0x144>)
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40
 8002d7c:	e00e      	b.n	8002d9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	4b40      	ldr	r3, [pc, #256]	; (8002e88 <HAL_DMA_Init+0x148>)
 8002d86:	4413      	add	r3, r2
 8002d88:	4a3d      	ldr	r2, [pc, #244]	; (8002e80 <HAL_DMA_Init+0x140>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	009a      	lsls	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a3c      	ldr	r2, [pc, #240]	; (8002e8c <HAL_DMA_Init+0x14c>)
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f9b6 	bl	8003160 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dfc:	d102      	bne.n	8002e04 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e18:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d010      	beq.n	8002e44 <HAL_DMA_Init+0x104>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d80c      	bhi.n	8002e44 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f9d6 	bl	80031dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	e008      	b.n	8002e56 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40020407 	.word	0x40020407
 8002e7c:	bffdfff8 	.word	0xbffdfff8
 8002e80:	cccccccd 	.word	0xcccccccd
 8002e84:	40020000 	.word	0x40020000
 8002e88:	bffdfbf8 	.word	0xbffdfbf8
 8002e8c:	40020400 	.word	0x40020400

08002e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_DMA_Start_IT+0x20>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e066      	b.n	8002f7e <HAL_DMA_Start_IT+0xee>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d155      	bne.n	8002f70 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f8fb 	bl	80030e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 020e 	orr.w	r2, r2, #14
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e00f      	b.n	8002f28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0204 	bic.w	r2, r2, #4
 8002f16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 020a 	orr.w	r2, r2, #10
 8002f26:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f44:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f5c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e005      	b.n	8002f7c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	f003 031c 	and.w	r3, r3, #28
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d026      	beq.n	8003000 <HAL_DMA_IRQHandler+0x7a>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d021      	beq.n	8003000 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d107      	bne.n	8002fda <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0204 	bic.w	r2, r2, #4
 8002fd8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	f003 021c 	and.w	r2, r3, #28
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	2104      	movs	r1, #4
 8002fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fec:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d071      	beq.n	80030da <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002ffe:	e06c      	b.n	80030da <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f003 031c 	and.w	r3, r3, #28
 8003008:	2202      	movs	r2, #2
 800300a:	409a      	lsls	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d02e      	beq.n	8003072 <HAL_DMA_IRQHandler+0xec>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d029      	beq.n	8003072 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10b      	bne.n	8003044 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 020a 	bic.w	r2, r2, #10
 800303a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	f003 021c 	and.w	r2, r3, #28
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	2102      	movs	r1, #2
 8003052:	fa01 f202 	lsl.w	r2, r1, r2
 8003056:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d038      	beq.n	80030da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003070:	e033      	b.n	80030da <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f003 031c 	and.w	r3, r3, #28
 800307a:	2208      	movs	r2, #8
 800307c:	409a      	lsls	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d02a      	beq.n	80030dc <HAL_DMA_IRQHandler+0x156>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d025      	beq.n	80030dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 020e 	bic.w	r2, r2, #14
 800309e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	f003 021c 	and.w	r2, r3, #28
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	2101      	movs	r1, #1
 80030ae:	fa01 f202 	lsl.w	r2, r1, r2
 80030b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d004      	beq.n	80030dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030da:	bf00      	nop
 80030dc:	bf00      	nop
}
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030fa:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003100:	2b00      	cmp	r3, #0
 8003102:	d004      	beq.n	800310e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800310c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f003 021c 	and.w	r2, r3, #28
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	2101      	movs	r1, #1
 800311c:	fa01 f202 	lsl.w	r2, r1, r2
 8003120:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b10      	cmp	r3, #16
 8003130:	d108      	bne.n	8003144 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003142:	e007      	b.n	8003154 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	60da      	str	r2, [r3, #12]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003170:	429a      	cmp	r2, r3
 8003172:	d80a      	bhi.n	800318a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003180:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6493      	str	r3, [r2, #72]	; 0x48
 8003188:	e007      	b.n	800319a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	009a      	lsls	r2, r3, #2
 8003192:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003194:	4413      	add	r3, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	3b08      	subs	r3, #8
 80031a2:	4a0c      	ldr	r2, [pc, #48]	; (80031d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80031b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2201      	movs	r2, #1
 80031ba:	409a      	lsls	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	40020407 	.word	0x40020407
 80031d0:	4002081c 	.word	0x4002081c
 80031d4:	cccccccd 	.word	0xcccccccd
 80031d8:	40020880 	.word	0x40020880

080031dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4b0b      	ldr	r3, [pc, #44]	; (800321c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	461a      	mov	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a08      	ldr	r2, [pc, #32]	; (8003220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80031fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3b01      	subs	r3, #1
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2201      	movs	r2, #1
 800320a:	409a      	lsls	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003210:	bf00      	nop
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	1000823f 	.word	0x1000823f
 8003220:	40020940 	.word	0x40020940

08003224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003232:	e166      	b.n	8003502 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	2101      	movs	r1, #1
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	4013      	ands	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8158 	beq.w	80034fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d005      	beq.n	8003264 <HAL_GPIO_Init+0x40>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d130      	bne.n	80032c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800329a:	2201      	movs	r2, #1
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	f003 0201 	and.w	r2, r3, #1
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d017      	beq.n	8003302 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	2203      	movs	r2, #3
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d123      	bne.n	8003356 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	08da      	lsrs	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3208      	adds	r2, #8
 8003316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800331a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	220f      	movs	r2, #15
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	08da      	lsrs	r2, r3, #3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3208      	adds	r2, #8
 8003350:	6939      	ldr	r1, [r7, #16]
 8003352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	2203      	movs	r2, #3
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0203 	and.w	r2, r3, #3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 80b2 	beq.w	80034fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003398:	4b61      	ldr	r3, [pc, #388]	; (8003520 <HAL_GPIO_Init+0x2fc>)
 800339a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339c:	4a60      	ldr	r2, [pc, #384]	; (8003520 <HAL_GPIO_Init+0x2fc>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6613      	str	r3, [r2, #96]	; 0x60
 80033a4:	4b5e      	ldr	r3, [pc, #376]	; (8003520 <HAL_GPIO_Init+0x2fc>)
 80033a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033b0:	4a5c      	ldr	r2, [pc, #368]	; (8003524 <HAL_GPIO_Init+0x300>)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	089b      	lsrs	r3, r3, #2
 80033b6:	3302      	adds	r3, #2
 80033b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	220f      	movs	r2, #15
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033da:	d02b      	beq.n	8003434 <HAL_GPIO_Init+0x210>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a52      	ldr	r2, [pc, #328]	; (8003528 <HAL_GPIO_Init+0x304>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d025      	beq.n	8003430 <HAL_GPIO_Init+0x20c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a51      	ldr	r2, [pc, #324]	; (800352c <HAL_GPIO_Init+0x308>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d01f      	beq.n	800342c <HAL_GPIO_Init+0x208>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a50      	ldr	r2, [pc, #320]	; (8003530 <HAL_GPIO_Init+0x30c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d019      	beq.n	8003428 <HAL_GPIO_Init+0x204>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a4f      	ldr	r2, [pc, #316]	; (8003534 <HAL_GPIO_Init+0x310>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d013      	beq.n	8003424 <HAL_GPIO_Init+0x200>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a4e      	ldr	r2, [pc, #312]	; (8003538 <HAL_GPIO_Init+0x314>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00d      	beq.n	8003420 <HAL_GPIO_Init+0x1fc>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a4d      	ldr	r2, [pc, #308]	; (800353c <HAL_GPIO_Init+0x318>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d007      	beq.n	800341c <HAL_GPIO_Init+0x1f8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a4c      	ldr	r2, [pc, #304]	; (8003540 <HAL_GPIO_Init+0x31c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d101      	bne.n	8003418 <HAL_GPIO_Init+0x1f4>
 8003414:	2307      	movs	r3, #7
 8003416:	e00e      	b.n	8003436 <HAL_GPIO_Init+0x212>
 8003418:	2308      	movs	r3, #8
 800341a:	e00c      	b.n	8003436 <HAL_GPIO_Init+0x212>
 800341c:	2306      	movs	r3, #6
 800341e:	e00a      	b.n	8003436 <HAL_GPIO_Init+0x212>
 8003420:	2305      	movs	r3, #5
 8003422:	e008      	b.n	8003436 <HAL_GPIO_Init+0x212>
 8003424:	2304      	movs	r3, #4
 8003426:	e006      	b.n	8003436 <HAL_GPIO_Init+0x212>
 8003428:	2303      	movs	r3, #3
 800342a:	e004      	b.n	8003436 <HAL_GPIO_Init+0x212>
 800342c:	2302      	movs	r3, #2
 800342e:	e002      	b.n	8003436 <HAL_GPIO_Init+0x212>
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <HAL_GPIO_Init+0x212>
 8003434:	2300      	movs	r3, #0
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	f002 0203 	and.w	r2, r2, #3
 800343c:	0092      	lsls	r2, r2, #2
 800343e:	4093      	lsls	r3, r2
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003446:	4937      	ldr	r1, [pc, #220]	; (8003524 <HAL_GPIO_Init+0x300>)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	3302      	adds	r3, #2
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003454:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <HAL_GPIO_Init+0x320>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	43db      	mvns	r3, r3
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003478:	4a32      	ldr	r2, [pc, #200]	; (8003544 <HAL_GPIO_Init+0x320>)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800347e:	4b31      	ldr	r3, [pc, #196]	; (8003544 <HAL_GPIO_Init+0x320>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	43db      	mvns	r3, r3
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4013      	ands	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034a2:	4a28      	ldr	r2, [pc, #160]	; (8003544 <HAL_GPIO_Init+0x320>)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034a8:	4b26      	ldr	r3, [pc, #152]	; (8003544 <HAL_GPIO_Init+0x320>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	43db      	mvns	r3, r3
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4013      	ands	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034cc:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_GPIO_Init+0x320>)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034d2:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <HAL_GPIO_Init+0x320>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	43db      	mvns	r3, r3
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4013      	ands	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034f6:	4a13      	ldr	r2, [pc, #76]	; (8003544 <HAL_GPIO_Init+0x320>)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	3301      	adds	r3, #1
 8003500:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	fa22 f303 	lsr.w	r3, r2, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	f47f ae91 	bne.w	8003234 <HAL_GPIO_Init+0x10>
  }
}
 8003512:	bf00      	nop
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40021000 	.word	0x40021000
 8003524:	40010000 	.word	0x40010000
 8003528:	48000400 	.word	0x48000400
 800352c:	48000800 	.word	0x48000800
 8003530:	48000c00 	.word	0x48000c00
 8003534:	48001000 	.word	0x48001000
 8003538:	48001400 	.word	0x48001400
 800353c:	48001800 	.word	0x48001800
 8003540:	48001c00 	.word	0x48001c00
 8003544:	40010400 	.word	0x40010400

08003548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	807b      	strh	r3, [r7, #2]
 8003554:	4613      	mov	r3, r2
 8003556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003558:	787b      	ldrb	r3, [r7, #1]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800355e:	887a      	ldrh	r2, [r7, #2]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003564:	e002      	b.n	800356c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800358a:	887a      	ldrh	r2, [r7, #2]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4013      	ands	r3, r2
 8003590:	041a      	lsls	r2, r3, #16
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	43d9      	mvns	r1, r3
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	400b      	ands	r3, r1
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	619a      	str	r2, [r3, #24]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d006      	beq.n	80035d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035c2:	4a05      	ldr	r2, [pc, #20]	; (80035d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fc fee8 	bl	80003a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40010400 	.word	0x40010400

080035dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <HAL_PWREx_GetVoltageRange+0x3c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ec:	d102      	bne.n	80035f4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80035ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035f2:	e00b      	b.n	800360c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80035f4:	4b08      	ldr	r3, [pc, #32]	; (8003618 <HAL_PWREx_GetVoltageRange+0x3c>)
 80035f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003602:	d102      	bne.n	800360a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003608:	e000      	b.n	800360c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800360a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800360c:	4618      	mov	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40007000 	.word	0x40007000

0800361c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d141      	bne.n	80036ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800362a:	4b4b      	ldr	r3, [pc, #300]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	d131      	bne.n	800369c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003638:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800363e:	4a46      	ldr	r2, [pc, #280]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003644:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003648:	4b43      	ldr	r3, [pc, #268]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003650:	4a41      	ldr	r2, [pc, #260]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003656:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003658:	4b40      	ldr	r3, [pc, #256]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2232      	movs	r2, #50	; 0x32
 800365e:	fb02 f303 	mul.w	r3, r2, r3
 8003662:	4a3f      	ldr	r2, [pc, #252]	; (8003760 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	0c9b      	lsrs	r3, r3, #18
 800366a:	3301      	adds	r3, #1
 800366c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800366e:	e002      	b.n	8003676 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3b01      	subs	r3, #1
 8003674:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003676:	4b38      	ldr	r3, [pc, #224]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003682:	d102      	bne.n	800368a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f2      	bne.n	8003670 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800368a:	4b33      	ldr	r3, [pc, #204]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003696:	d158      	bne.n	800374a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e057      	b.n	800374c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800369c:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a2:	4a2d      	ldr	r2, [pc, #180]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036ac:	e04d      	b.n	800374a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b4:	d141      	bne.n	800373a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036b6:	4b28      	ldr	r3, [pc, #160]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c2:	d131      	bne.n	8003728 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036c4:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ca:	4a23      	ldr	r2, [pc, #140]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036d4:	4b20      	ldr	r3, [pc, #128]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036dc:	4a1e      	ldr	r2, [pc, #120]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80036e4:	4b1d      	ldr	r3, [pc, #116]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2232      	movs	r2, #50	; 0x32
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
 80036ee:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036f0:	fba2 2303 	umull	r2, r3, r2, r3
 80036f4:	0c9b      	lsrs	r3, r3, #18
 80036f6:	3301      	adds	r3, #1
 80036f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036fa:	e002      	b.n	8003702 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3b01      	subs	r3, #1
 8003700:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370e:	d102      	bne.n	8003716 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f2      	bne.n	80036fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003716:	4b10      	ldr	r3, [pc, #64]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003722:	d112      	bne.n	800374a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e011      	b.n	800374c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003738:	e007      	b.n	800374a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800373a:	4b07      	ldr	r3, [pc, #28]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003742:	4a05      	ldr	r2, [pc, #20]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003744:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003748:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	40007000 	.word	0x40007000
 800375c:	20000000 	.word	0x20000000
 8003760:	431bde83 	.word	0x431bde83

08003764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d102      	bne.n	8003778 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f000 bc68 	b.w	8004048 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003778:	4b97      	ldr	r3, [pc, #604]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003782:	4b95      	ldr	r3, [pc, #596]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 80e6 	beq.w	8003966 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d007      	beq.n	80037b0 <HAL_RCC_OscConfig+0x4c>
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	f040 808d 	bne.w	80038c2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	f040 8089 	bne.w	80038c2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037b0:	4b89      	ldr	r3, [pc, #548]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d006      	beq.n	80037ca <HAL_RCC_OscConfig+0x66>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f000 bc3f 	b.w	8004048 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ce:	4b82      	ldr	r3, [pc, #520]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d004      	beq.n	80037e4 <HAL_RCC_OscConfig+0x80>
 80037da:	4b7f      	ldr	r3, [pc, #508]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e2:	e005      	b.n	80037f0 <HAL_RCC_OscConfig+0x8c>
 80037e4:	4b7c      	ldr	r3, [pc, #496]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80037e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d224      	bcs.n	800383e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fe49 	bl	8004490 <RCC_SetFlashLatencyFromMSIRange>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	f000 bc1f 	b.w	8004048 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800380a:	4b73      	ldr	r3, [pc, #460]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a72      	ldr	r2, [pc, #456]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 8003810:	f043 0308 	orr.w	r3, r3, #8
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4b70      	ldr	r3, [pc, #448]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	496d      	ldr	r1, [pc, #436]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 8003824:	4313      	orrs	r3, r2
 8003826:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003828:	4b6b      	ldr	r3, [pc, #428]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	4968      	ldr	r1, [pc, #416]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
 800383c:	e025      	b.n	800388a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800383e:	4b66      	ldr	r3, [pc, #408]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a65      	ldr	r2, [pc, #404]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 8003844:	f043 0308 	orr.w	r3, r3, #8
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	4b63      	ldr	r3, [pc, #396]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	4960      	ldr	r1, [pc, #384]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800385c:	4b5e      	ldr	r3, [pc, #376]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	495b      	ldr	r1, [pc, #364]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fe08 	bl	8004490 <RCC_SetFlashLatencyFromMSIRange>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e3de      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800388a:	f000 fd21 	bl	80042d0 <HAL_RCC_GetSysClockFreq>
 800388e:	4602      	mov	r2, r0
 8003890:	4b51      	ldr	r3, [pc, #324]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	4950      	ldr	r1, [pc, #320]	; (80039dc <HAL_RCC_OscConfig+0x278>)
 800389c:	5ccb      	ldrb	r3, [r1, r3]
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	fa22 f303 	lsr.w	r3, r2, r3
 80038a6:	4a4e      	ldr	r2, [pc, #312]	; (80039e0 <HAL_RCC_OscConfig+0x27c>)
 80038a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038aa:	4b4e      	ldr	r3, [pc, #312]	; (80039e4 <HAL_RCC_OscConfig+0x280>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fd f9c8 	bl	8000c44 <HAL_InitTick>
 80038b4:	4603      	mov	r3, r0
 80038b6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d052      	beq.n	8003964 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	e3c2      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d032      	beq.n	8003930 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ca:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a42      	ldr	r2, [pc, #264]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038d6:	f7fd fb03 	bl	8000ee0 <HAL_GetTick>
 80038da:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038de:	f7fd faff 	bl	8000ee0 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e3ab      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038f0:	4b39      	ldr	r3, [pc, #228]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038fc:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a35      	ldr	r2, [pc, #212]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 8003902:	f043 0308 	orr.w	r3, r3, #8
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b33      	ldr	r3, [pc, #204]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	4930      	ldr	r1, [pc, #192]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800391a:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	492b      	ldr	r1, [pc, #172]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 800392a:	4313      	orrs	r3, r2
 800392c:	604b      	str	r3, [r1, #4]
 800392e:	e01a      	b.n	8003966 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003930:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800393c:	f7fd fad0 	bl	8000ee0 <HAL_GetTick>
 8003940:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003944:	f7fd facc 	bl	8000ee0 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e378      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003956:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x1e0>
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003964:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d073      	beq.n	8003a5a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d005      	beq.n	8003984 <HAL_RCC_OscConfig+0x220>
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d10e      	bne.n	800399c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d10b      	bne.n	800399c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003984:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d063      	beq.n	8003a58 <HAL_RCC_OscConfig+0x2f4>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d15f      	bne.n	8003a58 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e355      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a4:	d106      	bne.n	80039b4 <HAL_RCC_OscConfig+0x250>
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a0b      	ldr	r2, [pc, #44]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80039ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e025      	b.n	8003a00 <HAL_RCC_OscConfig+0x29c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039bc:	d114      	bne.n	80039e8 <HAL_RCC_OscConfig+0x284>
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a05      	ldr	r2, [pc, #20]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80039c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a02      	ldr	r2, [pc, #8]	; (80039d8 <HAL_RCC_OscConfig+0x274>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e013      	b.n	8003a00 <HAL_RCC_OscConfig+0x29c>
 80039d8:	40021000 	.word	0x40021000
 80039dc:	080056fc 	.word	0x080056fc
 80039e0:	20000000 	.word	0x20000000
 80039e4:	20000004 	.word	0x20000004
 80039e8:	4b8f      	ldr	r3, [pc, #572]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a8e      	ldr	r2, [pc, #568]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	4b8c      	ldr	r3, [pc, #560]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a8b      	ldr	r2, [pc, #556]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d013      	beq.n	8003a30 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fd fa6a 	bl	8000ee0 <HAL_GetTick>
 8003a0c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a10:	f7fd fa66 	bl	8000ee0 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e312      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a22:	4b81      	ldr	r3, [pc, #516]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x2ac>
 8003a2e:	e014      	b.n	8003a5a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fa56 	bl	8000ee0 <HAL_GetTick>
 8003a34:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fd fa52 	bl	8000ee0 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e2fe      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a4a:	4b77      	ldr	r3, [pc, #476]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x2d4>
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d060      	beq.n	8003b28 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_OscConfig+0x314>
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d119      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d116      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a78:	4b6b      	ldr	r3, [pc, #428]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_OscConfig+0x32c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e2db      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b65      	ldr	r3, [pc, #404]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	061b      	lsls	r3, r3, #24
 8003a9e:	4962      	ldr	r1, [pc, #392]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa4:	e040      	b.n	8003b28 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d023      	beq.n	8003af6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aae:	4b5e      	ldr	r3, [pc, #376]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a5d      	ldr	r2, [pc, #372]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fd fa11 	bl	8000ee0 <HAL_GetTick>
 8003abe:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac2:	f7fd fa0d 	bl	8000ee0 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e2b9      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad4:	4b54      	ldr	r3, [pc, #336]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae0:	4b51      	ldr	r3, [pc, #324]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	061b      	lsls	r3, r3, #24
 8003aee:	494e      	ldr	r1, [pc, #312]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
 8003af4:	e018      	b.n	8003b28 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af6:	4b4c      	ldr	r3, [pc, #304]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a4b      	ldr	r2, [pc, #300]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7fd f9ed 	bl	8000ee0 <HAL_GetTick>
 8003b06:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0a:	f7fd f9e9 	bl	8000ee0 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e295      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b1c:	4b42      	ldr	r3, [pc, #264]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f0      	bne.n	8003b0a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 8082 	beq.w	8003c3a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d05f      	beq.n	8003bfe <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003b3e:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b44:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d037      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d006      	beq.n	8003b6c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e26d      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d01b      	beq.n	8003bae <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003b76:	4b2c      	ldr	r3, [pc, #176]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7c:	4a2a      	ldr	r2, [pc, #168]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b86:	f7fd f9ab 	bl	8000ee0 <HAL_GetTick>
 8003b8a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8e:	f7fd f9a7 	bl	8000ee0 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b11      	cmp	r3, #17
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e253      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ba0:	4b21      	ldr	r3, [pc, #132]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1ef      	bne.n	8003b8e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003bae:	4b1e      	ldr	r3, [pc, #120]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb4:	f023 0210 	bic.w	r2, r3, #16
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	491a      	ldr	r1, [pc, #104]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc4:	4b18      	ldr	r3, [pc, #96]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bca:	4a17      	ldr	r2, [pc, #92]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fd f984 	bl	8000ee0 <HAL_GetTick>
 8003bd8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bdc:	f7fd f980 	bl	8000ee0 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b11      	cmp	r3, #17
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e22c      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bee:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ef      	beq.n	8003bdc <HAL_RCC_OscConfig+0x478>
 8003bfc:	e01d      	b.n	8003c3a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c04:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <HAL_RCC_OscConfig+0x4c4>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0e:	f7fd f967 	bl	8000ee0 <HAL_GetTick>
 8003c12:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c14:	e00a      	b.n	8003c2c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c16:	f7fd f963 	bl	8000ee0 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b11      	cmp	r3, #17
 8003c22:	d903      	bls.n	8003c2c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e20f      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
 8003c28:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c2c:	4b83      	ldr	r3, [pc, #524]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1ed      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80bd 	beq.w	8003dc2 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c4e:	4b7b      	ldr	r3, [pc, #492]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10e      	bne.n	8003c78 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	4b78      	ldr	r3, [pc, #480]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5e:	4a77      	ldr	r2, [pc, #476]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c64:	6593      	str	r3, [r2, #88]	; 0x58
 8003c66:	4b75      	ldr	r3, [pc, #468]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c78:	4b71      	ldr	r3, [pc, #452]	; (8003e40 <HAL_RCC_OscConfig+0x6dc>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d118      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c84:	4b6e      	ldr	r3, [pc, #440]	; (8003e40 <HAL_RCC_OscConfig+0x6dc>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a6d      	ldr	r2, [pc, #436]	; (8003e40 <HAL_RCC_OscConfig+0x6dc>)
 8003c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c90:	f7fd f926 	bl	8000ee0 <HAL_GetTick>
 8003c94:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c98:	f7fd f922 	bl	8000ee0 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e1ce      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003caa:	4b65      	ldr	r3, [pc, #404]	; (8003e40 <HAL_RCC_OscConfig+0x6dc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d02c      	beq.n	8003d1c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003cc2:	4b5e      	ldr	r3, [pc, #376]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd4:	4959      	ldr	r1, [pc, #356]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d010      	beq.n	8003d0a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ce8:	4b54      	ldr	r3, [pc, #336]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	4a53      	ldr	r2, [pc, #332]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003cf0:	f043 0304 	orr.w	r3, r3, #4
 8003cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cf8:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	4a4f      	ldr	r2, [pc, #316]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d08:	e018      	b.n	8003d3c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d0a:	4b4c      	ldr	r3, [pc, #304]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	4a4a      	ldr	r2, [pc, #296]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d1a:	e00f      	b.n	8003d3c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d1c:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	4a46      	ldr	r2, [pc, #280]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d2c:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	4a42      	ldr	r2, [pc, #264]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003d34:	f023 0304 	bic.w	r3, r3, #4
 8003d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d016      	beq.n	8003d72 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d44:	f7fd f8cc 	bl	8000ee0 <HAL_GetTick>
 8003d48:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4c:	f7fd f8c8 	bl	8000ee0 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e172      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d62:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0ed      	beq.n	8003d4c <HAL_RCC_OscConfig+0x5e8>
 8003d70:	e01d      	b.n	8003dae <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d72:	f7fd f8b5 	bl	8000ee0 <HAL_GetTick>
 8003d76:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d78:	e00a      	b.n	8003d90 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7a:	f7fd f8b1 	bl	8000ee0 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e15b      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d90:	4b2a      	ldr	r3, [pc, #168]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1ed      	bne.n	8003d7a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003d9e:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	4a25      	ldr	r2, [pc, #148]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d105      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db6:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dba:	4a20      	ldr	r2, [pc, #128]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d041      	beq.n	8003e52 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01c      	beq.n	8003e10 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dd6:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ddc:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fd f87b 	bl	8000ee0 <HAL_GetTick>
 8003dea:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dee:	f7fd f877 	bl	8000ee0 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e123      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e00:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0ef      	beq.n	8003dee <HAL_RCC_OscConfig+0x68a>
 8003e0e:	e020      	b.n	8003e52 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e10:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e16:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <HAL_RCC_OscConfig+0x6d8>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fd f85e 	bl	8000ee0 <HAL_GetTick>
 8003e24:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e26:	e00d      	b.n	8003e44 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e28:	f7fd f85a 	bl	8000ee0 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d906      	bls.n	8003e44 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e106      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
 8003e3a:	bf00      	nop
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e44:	4b82      	ldr	r3, [pc, #520]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1ea      	bne.n	8003e28 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 80f5 	beq.w	8004046 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	f040 80cb 	bne.w	8003ffc <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e66:	4b7a      	ldr	r3, [pc, #488]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f003 0203 	and.w	r2, r3, #3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d12c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e84:	3b01      	subs	r3, #1
 8003e86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d123      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d11b      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d113      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d109      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d06d      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	2b0c      	cmp	r3, #12
 8003ed8:	d068      	beq.n	8003fac <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003eda:	4b5d      	ldr	r3, [pc, #372]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d105      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ee6:	4b5a      	ldr	r3, [pc, #360]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e0a8      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ef6:	4b56      	ldr	r3, [pc, #344]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a55      	ldr	r2, [pc, #340]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003efc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f02:	f7fc ffed 	bl	8000ee0 <HAL_GetTick>
 8003f06:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0a:	f7fc ffe9 	bl	8000ee0 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e095      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f1c:	4b4c      	ldr	r3, [pc, #304]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f0      	bne.n	8003f0a <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f28:	4b49      	ldr	r3, [pc, #292]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	4b49      	ldr	r3, [pc, #292]	; (8004054 <HAL_RCC_OscConfig+0x8f0>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f38:	3a01      	subs	r2, #1
 8003f3a:	0112      	lsls	r2, r2, #4
 8003f3c:	4311      	orrs	r1, r2
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f42:	0212      	lsls	r2, r2, #8
 8003f44:	4311      	orrs	r1, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f4a:	0852      	lsrs	r2, r2, #1
 8003f4c:	3a01      	subs	r2, #1
 8003f4e:	0552      	lsls	r2, r2, #21
 8003f50:	4311      	orrs	r1, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f56:	0852      	lsrs	r2, r2, #1
 8003f58:	3a01      	subs	r2, #1
 8003f5a:	0652      	lsls	r2, r2, #25
 8003f5c:	4311      	orrs	r1, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f62:	06d2      	lsls	r2, r2, #27
 8003f64:	430a      	orrs	r2, r1
 8003f66:	493a      	ldr	r1, [pc, #232]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f6c:	4b38      	ldr	r3, [pc, #224]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a37      	ldr	r2, [pc, #220]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f78:	4b35      	ldr	r3, [pc, #212]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a34      	ldr	r2, [pc, #208]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f84:	f7fc ffac 	bl	8000ee0 <HAL_GetTick>
 8003f88:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8c:	f7fc ffa8 	bl	8000ee0 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e054      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f9e:	4b2c      	ldr	r3, [pc, #176]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003faa:	e04c      	b.n	8004046 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e04b      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb0:	4b27      	ldr	r3, [pc, #156]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d144      	bne.n	8004046 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fbc:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a23      	ldr	r2, [pc, #140]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fc8:	4b21      	ldr	r3, [pc, #132]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a20      	ldr	r2, [pc, #128]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fd4:	f7fc ff84 	bl	8000ee0 <HAL_GetTick>
 8003fd8:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fc ff80 	bl	8000ee0 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e02c      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fee:	4b18      	ldr	r3, [pc, #96]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x878>
 8003ffa:	e024      	b.n	8004046 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	2b0c      	cmp	r3, #12
 8004000:	d01f      	beq.n	8004042 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004002:	4b13      	ldr	r3, [pc, #76]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a12      	ldr	r2, [pc, #72]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8004008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800400c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400e:	f7fc ff67 	bl	8000ee0 <HAL_GetTick>
 8004012:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004016:	f7fc ff63 	bl	8000ee0 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e00f      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004028:	4b09      	ldr	r3, [pc, #36]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f0      	bne.n	8004016 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	4905      	ldr	r1, [pc, #20]	; (8004050 <HAL_RCC_OscConfig+0x8ec>)
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_RCC_OscConfig+0x8f4>)
 800403c:	4013      	ands	r3, r2
 800403e:	60cb      	str	r3, [r1, #12]
 8004040:	e001      	b.n	8004046 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3728      	adds	r7, #40	; 0x28
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000
 8004054:	019d800c 	.word	0x019d800c
 8004058:	feeefffc 	.word	0xfeeefffc

0800405c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e11d      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004074:	4b90      	ldr	r3, [pc, #576]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d910      	bls.n	80040a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b8d      	ldr	r3, [pc, #564]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 020f 	bic.w	r2, r3, #15
 800408a:	498b      	ldr	r1, [pc, #556]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b89      	ldr	r3, [pc, #548]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e105      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d010      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	4b81      	ldr	r3, [pc, #516]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040bc:	429a      	cmp	r2, r3
 80040be:	d908      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c0:	4b7e      	ldr	r3, [pc, #504]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	497b      	ldr	r1, [pc, #492]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d079      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d11e      	bne.n	8004124 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e6:	4b75      	ldr	r3, [pc, #468]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0dc      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80040f6:	f000 fa25 	bl	8004544 <RCC_GetSysClockFreqFromPLLSource>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4a70      	ldr	r2, [pc, #448]	; (80042c0 <HAL_RCC_ClockConfig+0x264>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d946      	bls.n	8004190 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004102:	4b6e      	ldr	r3, [pc, #440]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d140      	bne.n	8004190 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800410e:	4b6b      	ldr	r3, [pc, #428]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004116:	4a69      	ldr	r2, [pc, #420]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800411e:	2380      	movs	r3, #128	; 0x80
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	e035      	b.n	8004190 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d107      	bne.n	800413c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800412c:	4b63      	ldr	r3, [pc, #396]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d115      	bne.n	8004164 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0b9      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d107      	bne.n	8004154 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004144:	4b5d      	ldr	r3, [pc, #372]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0ad      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004154:	4b59      	ldr	r3, [pc, #356]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0a5      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004164:	f000 f8b4 	bl	80042d0 <HAL_RCC_GetSysClockFreq>
 8004168:	4603      	mov	r3, r0
 800416a:	4a55      	ldr	r2, [pc, #340]	; (80042c0 <HAL_RCC_ClockConfig+0x264>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d90f      	bls.n	8004190 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004170:	4b52      	ldr	r3, [pc, #328]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800417c:	4b4f      	ldr	r3, [pc, #316]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004184:	4a4d      	ldr	r2, [pc, #308]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800418c:	2380      	movs	r3, #128	; 0x80
 800418e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004190:	4b4a      	ldr	r3, [pc, #296]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f023 0203 	bic.w	r2, r3, #3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4947      	ldr	r1, [pc, #284]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a2:	f7fc fe9d 	bl	8000ee0 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a8:	e00a      	b.n	80041c0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041aa:	f7fc fe99 	bl	8000ee0 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e077      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c0:	4b3e      	ldr	r3, [pc, #248]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 020c 	and.w	r2, r3, #12
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d1eb      	bne.n	80041aa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b80      	cmp	r3, #128	; 0x80
 80041d6:	d105      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80041d8:	4b38      	ldr	r3, [pc, #224]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a37      	ldr	r2, [pc, #220]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80041de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041e2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d010      	beq.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	4b31      	ldr	r3, [pc, #196]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d208      	bcs.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004200:	4b2e      	ldr	r3, [pc, #184]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	492b      	ldr	r1, [pc, #172]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004212:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d210      	bcs.n	8004242 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f023 020f 	bic.w	r2, r3, #15
 8004228:	4923      	ldr	r1, [pc, #140]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004230:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d001      	beq.n	8004242 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e036      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	4918      	ldr	r1, [pc, #96]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 800425c:	4313      	orrs	r3, r2
 800425e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800426c:	4b13      	ldr	r3, [pc, #76]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4910      	ldr	r1, [pc, #64]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 800427c:	4313      	orrs	r3, r2
 800427e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004280:	f000 f826 	bl	80042d0 <HAL_RCC_GetSysClockFreq>
 8004284:	4602      	mov	r2, r0
 8004286:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	091b      	lsrs	r3, r3, #4
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	490c      	ldr	r1, [pc, #48]	; (80042c4 <HAL_RCC_ClockConfig+0x268>)
 8004292:	5ccb      	ldrb	r3, [r1, r3]
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
 800429c:	4a0a      	ldr	r2, [pc, #40]	; (80042c8 <HAL_RCC_ClockConfig+0x26c>)
 800429e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <HAL_RCC_ClockConfig+0x270>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fc fccd 	bl	8000c44 <HAL_InitTick>
 80042aa:	4603      	mov	r3, r0
 80042ac:	73fb      	strb	r3, [r7, #15]

  return status;
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40022000 	.word	0x40022000
 80042bc:	40021000 	.word	0x40021000
 80042c0:	04c4b400 	.word	0x04c4b400
 80042c4:	080056fc 	.word	0x080056fc
 80042c8:	20000000 	.word	0x20000000
 80042cc:	20000004 	.word	0x20000004

080042d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b089      	sub	sp, #36	; 0x24
 80042d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61fb      	str	r3, [r7, #28]
 80042da:	2300      	movs	r3, #0
 80042dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042de:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e8:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_GetSysClockFreq+0x34>
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	d121      	bne.n	8004342 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d11e      	bne.n	8004342 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004304:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d107      	bne.n	8004320 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004310:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	e005      	b.n	800432c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004320:	4b2d      	ldr	r3, [pc, #180]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800432c:	4a2b      	ldr	r2, [pc, #172]	; (80043dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004334:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10d      	bne.n	8004358 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004340:	e00a      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b04      	cmp	r3, #4
 8004346:	d102      	bne.n	800434e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004348:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	e004      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b08      	cmp	r3, #8
 8004352:	d101      	bne.n	8004358 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004354:	4b23      	ldr	r3, [pc, #140]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004356:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d134      	bne.n	80043c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800435e:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d003      	beq.n	8004376 <HAL_RCC_GetSysClockFreq+0xa6>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b03      	cmp	r3, #3
 8004372:	d003      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0xac>
 8004374:	e005      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004376:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004378:	617b      	str	r3, [r7, #20]
      break;
 800437a:	e005      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800437c:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800437e:	617b      	str	r3, [r7, #20]
      break;
 8004380:	e002      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	617b      	str	r3, [r7, #20]
      break;
 8004386:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004388:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	3301      	adds	r3, #1
 8004394:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004396:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	0a1b      	lsrs	r3, r3, #8
 800439c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	fb03 f202 	mul.w	r2, r3, r2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043ae:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	0e5b      	lsrs	r3, r3, #25
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	3301      	adds	r3, #1
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043c8:	69bb      	ldr	r3, [r7, #24]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3724      	adds	r7, #36	; 0x24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
 80043dc:	08005714 	.word	0x08005714
 80043e0:	00f42400 	.word	0x00f42400
 80043e4:	007a1200 	.word	0x007a1200

080043e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000000 	.word	0x20000000

08004400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004404:	f7ff fff0 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x24>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	0adb      	lsrs	r3, r3, #11
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4904      	ldr	r1, [pc, #16]	; (8004428 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	0800570c 	.word	0x0800570c

0800442c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	220f      	movs	r2, #15
 800443a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <HAL_RCC_GetClockConfig+0x5c>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 0203 	and.w	r2, r3, #3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <HAL_RCC_GetClockConfig+0x5c>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <HAL_RCC_GetClockConfig+0x5c>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004460:	4b09      	ldr	r3, [pc, #36]	; (8004488 <HAL_RCC_GetClockConfig+0x5c>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	08db      	lsrs	r3, r3, #3
 8004466:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800446e:	4b07      	ldr	r3, [pc, #28]	; (800448c <HAL_RCC_GetClockConfig+0x60>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 020f 	and.w	r2, r3, #15
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	601a      	str	r2, [r3, #0]
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000
 800448c:	40022000 	.word	0x40022000

08004490 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800449c:	4b27      	ldr	r3, [pc, #156]	; (800453c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044a8:	f7ff f898 	bl	80035dc <HAL_PWREx_GetVoltageRange>
 80044ac:	6178      	str	r0, [r7, #20]
 80044ae:	e014      	b.n	80044da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044b0:	4b22      	ldr	r3, [pc, #136]	; (800453c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	4a21      	ldr	r2, [pc, #132]	; (800453c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ba:	6593      	str	r3, [r2, #88]	; 0x58
 80044bc:	4b1f      	ldr	r3, [pc, #124]	; (800453c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044c8:	f7ff f888 	bl	80035dc <HAL_PWREx_GetVoltageRange>
 80044cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044ce:	4b1b      	ldr	r3, [pc, #108]	; (800453c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	4a1a      	ldr	r2, [pc, #104]	; (800453c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044e0:	d10b      	bne.n	80044fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b80      	cmp	r3, #128	; 0x80
 80044e6:	d913      	bls.n	8004510 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2ba0      	cmp	r3, #160	; 0xa0
 80044ec:	d902      	bls.n	80044f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ee:	2302      	movs	r3, #2
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	e00d      	b.n	8004510 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044f4:	2301      	movs	r3, #1
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	e00a      	b.n	8004510 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b7f      	cmp	r3, #127	; 0x7f
 80044fe:	d902      	bls.n	8004506 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004500:	2302      	movs	r3, #2
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	e004      	b.n	8004510 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b70      	cmp	r3, #112	; 0x70
 800450a:	d101      	bne.n	8004510 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800450c:	2301      	movs	r3, #1
 800450e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f023 020f 	bic.w	r2, r3, #15
 8004518:	4909      	ldr	r1, [pc, #36]	; (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004520:	4b07      	ldr	r3, [pc, #28]	; (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	429a      	cmp	r2, r3
 800452c:	d001      	beq.n	8004532 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40021000 	.word	0x40021000
 8004540:	40022000 	.word	0x40022000

08004544 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800454a:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d00b      	beq.n	8004572 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b03      	cmp	r3, #3
 800455e:	d825      	bhi.n	80045ac <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d008      	beq.n	8004578 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d11f      	bne.n	80045ac <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800456c:	4b25      	ldr	r3, [pc, #148]	; (8004604 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800456e:	613b      	str	r3, [r7, #16]
    break;
 8004570:	e01f      	b.n	80045b2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004572:	4b25      	ldr	r3, [pc, #148]	; (8004608 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004574:	613b      	str	r3, [r7, #16]
    break;
 8004576:	e01c      	b.n	80045b2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004578:	4b21      	ldr	r3, [pc, #132]	; (8004600 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d107      	bne.n	8004594 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004584:	4b1e      	ldr	r3, [pc, #120]	; (8004600 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800458a:	0a1b      	lsrs	r3, r3, #8
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	e005      	b.n	80045a0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004594:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	091b      	lsrs	r3, r3, #4
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80045a0:	4a1a      	ldr	r2, [pc, #104]	; (800460c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a8:	613b      	str	r3, [r7, #16]
    break;
 80045aa:	e002      	b.n	80045b2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	613b      	str	r3, [r7, #16]
    break;
 80045b0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045b2:	4b13      	ldr	r3, [pc, #76]	; (8004600 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	091b      	lsrs	r3, r3, #4
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	3301      	adds	r3, #1
 80045be:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045c0:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	0a1b      	lsrs	r3, r3, #8
 80045c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	fb03 f202 	mul.w	r2, r3, r2
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	0e5b      	lsrs	r3, r3, #25
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	3301      	adds	r3, #1
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80045f2:	683b      	ldr	r3, [r7, #0]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	40021000 	.word	0x40021000
 8004604:	00f42400 	.word	0x00f42400
 8004608:	007a1200 	.word	0x007a1200
 800460c:	08005714 	.word	0x08005714

08004610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004618:	2300      	movs	r3, #0
 800461a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800461c:	2300      	movs	r3, #0
 800461e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004628:	2b00      	cmp	r3, #0
 800462a:	d040      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004630:	2b80      	cmp	r3, #128	; 0x80
 8004632:	d02a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004634:	2b80      	cmp	r3, #128	; 0x80
 8004636:	d825      	bhi.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004638:	2b60      	cmp	r3, #96	; 0x60
 800463a:	d026      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800463c:	2b60      	cmp	r3, #96	; 0x60
 800463e:	d821      	bhi.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d006      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004644:	2b40      	cmp	r3, #64	; 0x40
 8004646:	d81d      	bhi.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d009      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800464c:	2b20      	cmp	r3, #32
 800464e:	d010      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004650:	e018      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004652:	4b89      	ldr	r3, [pc, #548]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	4a88      	ldr	r2, [pc, #544]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800465e:	e015      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3304      	adds	r3, #4
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fb3e 	bl	8004ce8 <RCCEx_PLLSAI1_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004670:	e00c      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3320      	adds	r3, #32
 8004676:	2100      	movs	r1, #0
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fc29 	bl	8004ed0 <RCCEx_PLLSAI2_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004682:	e003      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	74fb      	strb	r3, [r7, #19]
      break;
 8004688:	e000      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800468a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800468c:	7cfb      	ldrb	r3, [r7, #19]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10b      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004692:	4b79      	ldr	r3, [pc, #484]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004694:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004698:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046a0:	4975      	ldr	r1, [pc, #468]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80046a8:	e001      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
 80046ac:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d047      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c2:	d030      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80046c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c8:	d82a      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ce:	d02a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80046d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d4:	d824      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046da:	d008      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xde>
 80046dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e0:	d81e      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80046e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ea:	d010      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80046ec:	e018      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046ee:	4b62      	ldr	r3, [pc, #392]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	4a61      	ldr	r2, [pc, #388]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046fa:	e015      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f000 faf0 	bl	8004ce8 <RCCEx_PLLSAI1_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800470c:	e00c      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3320      	adds	r3, #32
 8004712:	2100      	movs	r1, #0
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fbdb 	bl	8004ed0 <RCCEx_PLLSAI2_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800471e:	e003      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	74fb      	strb	r3, [r7, #19]
      break;
 8004724:	e000      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004726:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004728:	7cfb      	ldrb	r3, [r7, #19]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10b      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800472e:	4b52      	ldr	r3, [pc, #328]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004730:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	494e      	ldr	r1, [pc, #312]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004744:	e001      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004746:	7cfb      	ldrb	r3, [r7, #19]
 8004748:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 809f 	beq.w	8004896 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004758:	2300      	movs	r3, #0
 800475a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800475c:	4b46      	ldr	r3, [pc, #280]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800475e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004772:	4b41      	ldr	r3, [pc, #260]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004776:	4a40      	ldr	r2, [pc, #256]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477c:	6593      	str	r3, [r2, #88]	; 0x58
 800477e:	4b3e      	ldr	r3, [pc, #248]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478a:	2301      	movs	r3, #1
 800478c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800478e:	4b3b      	ldr	r3, [pc, #236]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a3a      	ldr	r2, [pc, #232]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004798:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800479a:	f7fc fba1 	bl	8000ee0 <HAL_GetTick>
 800479e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047a0:	e009      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a2:	f7fc fb9d 	bl	8000ee0 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d902      	bls.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	74fb      	strb	r3, [r7, #19]
        break;
 80047b4:	e005      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047b6:	4b31      	ldr	r3, [pc, #196]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ef      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80047c2:	7cfb      	ldrb	r3, [r7, #19]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d15b      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047c8:	4b2b      	ldr	r3, [pc, #172]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d01f      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d019      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047e6:	4b24      	ldr	r3, [pc, #144]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047f2:	4b21      	ldr	r3, [pc, #132]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	4a1f      	ldr	r2, [pc, #124]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004802:	4b1d      	ldr	r3, [pc, #116]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	4a1b      	ldr	r2, [pc, #108]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800480a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800480e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004812:	4a19      	ldr	r2, [pc, #100]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d016      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fc fb5c 	bl	8000ee0 <HAL_GetTick>
 8004828:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800482a:	e00b      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482c:	f7fc fb58 	bl	8000ee0 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	; 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d902      	bls.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	74fb      	strb	r3, [r7, #19]
            break;
 8004842:	e006      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004844:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0ec      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004852:	7cfb      	ldrb	r3, [r7, #19]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10c      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004858:	4b07      	ldr	r3, [pc, #28]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004868:	4903      	ldr	r1, [pc, #12]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004870:	e008      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004872:	7cfb      	ldrb	r3, [r7, #19]
 8004874:	74bb      	strb	r3, [r7, #18]
 8004876:	e005      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004878:	40021000 	.word	0x40021000
 800487c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004880:	7cfb      	ldrb	r3, [r7, #19]
 8004882:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004884:	7c7b      	ldrb	r3, [r7, #17]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d105      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488a:	4ba0      	ldr	r3, [pc, #640]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488e:	4a9f      	ldr	r2, [pc, #636]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004894:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048a2:	4b9a      	ldr	r3, [pc, #616]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a8:	f023 0203 	bic.w	r2, r3, #3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b0:	4996      	ldr	r1, [pc, #600]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048c4:	4b91      	ldr	r3, [pc, #580]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ca:	f023 020c 	bic.w	r2, r3, #12
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	498e      	ldr	r1, [pc, #568]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048e6:	4b89      	ldr	r3, [pc, #548]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	4985      	ldr	r1, [pc, #532]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004908:	4b80      	ldr	r3, [pc, #512]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004916:	497d      	ldr	r1, [pc, #500]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0310 	and.w	r3, r3, #16
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800492a:	4b78      	ldr	r3, [pc, #480]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004938:	4974      	ldr	r1, [pc, #464]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800494c:	4b6f      	ldr	r3, [pc, #444]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004952:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495a:	496c      	ldr	r1, [pc, #432]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800496e:	4b67      	ldr	r3, [pc, #412]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004974:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800497c:	4963      	ldr	r1, [pc, #396]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004990:	4b5e      	ldr	r3, [pc, #376]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004996:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800499e:	495b      	ldr	r1, [pc, #364]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049b2:	4b56      	ldr	r3, [pc, #344]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c0:	4952      	ldr	r1, [pc, #328]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049d4:	4b4d      	ldr	r3, [pc, #308]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e2:	494a      	ldr	r1, [pc, #296]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049f6:	4b45      	ldr	r3, [pc, #276]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a04:	4941      	ldr	r1, [pc, #260]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a18:	4b3c      	ldr	r3, [pc, #240]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a1e:	f023 0203 	bic.w	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a26:	4939      	ldr	r1, [pc, #228]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d028      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a3a:	4b34      	ldr	r3, [pc, #208]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a48:	4930      	ldr	r1, [pc, #192]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a58:	d106      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a5a:	4b2c      	ldr	r3, [pc, #176]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	4a2b      	ldr	r2, [pc, #172]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a64:	60d3      	str	r3, [r2, #12]
 8004a66:	e011      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3304      	adds	r3, #4
 8004a76:	2101      	movs	r1, #1
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 f935 	bl	8004ce8 <RCCEx_PLLSAI1_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a82:	7cfb      	ldrb	r3, [r7, #19]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004a88:	7cfb      	ldrb	r3, [r7, #19]
 8004a8a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d04d      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aa0:	d108      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004aa2:	4b1a      	ldr	r3, [pc, #104]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aa8:	4a18      	ldr	r2, [pc, #96]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004aae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ab2:	e012      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ab4:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aba:	4a14      	ldr	r2, [pc, #80]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ac4:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ad2:	490e      	ldr	r1, [pc, #56]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae4:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aee:	60d3      	str	r3, [r2, #12]
 8004af0:	e020      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004af6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004afa:	d109      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4a02      	ldr	r2, [pc, #8]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b06:	60d3      	str	r3, [r2, #12]
 8004b08:	e014      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004b0a:	bf00      	nop
 8004b0c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	2101      	movs	r1, #1
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 f8e1 	bl	8004ce8 <RCCEx_PLLSAI1_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b2a:	7cfb      	ldrb	r3, [r7, #19]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004b30:	7cfb      	ldrb	r3, [r7, #19]
 8004b32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d028      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b40:	4b68      	ldr	r3, [pc, #416]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b4e:	4965      	ldr	r1, [pc, #404]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b5e:	d106      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b60:	4b60      	ldr	r3, [pc, #384]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4a5f      	ldr	r2, [pc, #380]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b6a:	60d3      	str	r3, [r2, #12]
 8004b6c:	e011      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b76:	d10c      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 f8b2 	bl	8004ce8 <RCCEx_PLLSAI1_Config>
 8004b84:	4603      	mov	r3, r0
 8004b86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b88:	7cfb      	ldrb	r3, [r7, #19]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004b8e:	7cfb      	ldrb	r3, [r7, #19]
 8004b90:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01e      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b9e:	4b51      	ldr	r3, [pc, #324]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bae:	494d      	ldr	r1, [pc, #308]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 f88d 	bl	8004ce8 <RCCEx_PLLSAI1_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bd2:	7cfb      	ldrb	r3, [r7, #19]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004bd8:	7cfb      	ldrb	r3, [r7, #19]
 8004bda:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00b      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004be8:	4b3e      	ldr	r3, [pc, #248]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bee:	f023 0204 	bic.w	r2, r3, #4
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf8:	493a      	ldr	r1, [pc, #232]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00b      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c0c:	4b35      	ldr	r3, [pc, #212]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c12:	f023 0218 	bic.w	r2, r3, #24
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1c:	4931      	ldr	r1, [pc, #196]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d035      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c30:	4b2c      	ldr	r3, [pc, #176]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a2b      	ldr	r2, [pc, #172]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c3c:	f7fc f950 	bl	8000ee0 <HAL_GetTick>
 8004c40:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c42:	e009      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c44:	f7fc f94c 	bl	8000ee0 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d902      	bls.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	74fb      	strb	r3, [r7, #19]
        break;
 8004c56:	e005      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c58:	4b22      	ldr	r3, [pc, #136]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1ef      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d113      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004c6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c7a:	491a      	ldr	r1, [pc, #104]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3320      	adds	r3, #32
 8004c86:	2102      	movs	r1, #2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 f921 	bl	8004ed0 <RCCEx_PLLSAI2_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004c92:	7cfb      	ldrb	r3, [r7, #19]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004c98:	7cfb      	ldrb	r3, [r7, #19]
 8004c9a:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d017      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004ca8:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb8:	490a      	ldr	r1, [pc, #40]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cca:	d105      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	4a04      	ldr	r2, [pc, #16]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cd6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40021000 	.word	0x40021000

08004ce8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cf6:	4b72      	ldr	r3, [pc, #456]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00e      	beq.n	8004d20 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d02:	4b6f      	ldr	r3, [pc, #444]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f003 0203 	and.w	r2, r3, #3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d103      	bne.n	8004d1a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
       ||
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d142      	bne.n	8004da0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
 8004d1e:	e03f      	b.n	8004da0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d018      	beq.n	8004d5a <RCCEx_PLLSAI1_Config+0x72>
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d825      	bhi.n	8004d78 <RCCEx_PLLSAI1_Config+0x90>
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d002      	beq.n	8004d36 <RCCEx_PLLSAI1_Config+0x4e>
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d009      	beq.n	8004d48 <RCCEx_PLLSAI1_Config+0x60>
 8004d34:	e020      	b.n	8004d78 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d36:	4b62      	ldr	r3, [pc, #392]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d11d      	bne.n	8004d7e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d46:	e01a      	b.n	8004d7e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d48:	4b5d      	ldr	r3, [pc, #372]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d116      	bne.n	8004d82 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d58:	e013      	b.n	8004d82 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d5a:	4b59      	ldr	r3, [pc, #356]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10f      	bne.n	8004d86 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d66:	4b56      	ldr	r3, [pc, #344]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d76:	e006      	b.n	8004d86 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d7c:	e004      	b.n	8004d88 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d7e:	bf00      	nop
 8004d80:	e002      	b.n	8004d88 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d82:	bf00      	nop
 8004d84:	e000      	b.n	8004d88 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d86:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d108      	bne.n	8004da0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004d8e:	4b4c      	ldr	r3, [pc, #304]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f023 0203 	bic.w	r2, r3, #3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4949      	ldr	r1, [pc, #292]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f040 8086 	bne.w	8004eb4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004da8:	4b45      	ldr	r3, [pc, #276]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a44      	ldr	r2, [pc, #272]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db4:	f7fc f894 	bl	8000ee0 <HAL_GetTick>
 8004db8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dba:	e009      	b.n	8004dd0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dbc:	f7fc f890 	bl	8000ee0 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d902      	bls.n	8004dd0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	73fb      	strb	r3, [r7, #15]
        break;
 8004dce:	e005      	b.n	8004ddc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dd0:	4b3b      	ldr	r3, [pc, #236]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1ef      	bne.n	8004dbc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d168      	bne.n	8004eb4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d113      	bne.n	8004e10 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004de8:	4b35      	ldr	r3, [pc, #212]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	4b35      	ldr	r3, [pc, #212]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6892      	ldr	r2, [r2, #8]
 8004df4:	0211      	lsls	r1, r2, #8
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	68d2      	ldr	r2, [r2, #12]
 8004dfa:	06d2      	lsls	r2, r2, #27
 8004dfc:	4311      	orrs	r1, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6852      	ldr	r2, [r2, #4]
 8004e02:	3a01      	subs	r2, #1
 8004e04:	0112      	lsls	r2, r2, #4
 8004e06:	430a      	orrs	r2, r1
 8004e08:	492d      	ldr	r1, [pc, #180]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	610b      	str	r3, [r1, #16]
 8004e0e:	e02d      	b.n	8004e6c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d115      	bne.n	8004e42 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e16:	4b2a      	ldr	r3, [pc, #168]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	4b2b      	ldr	r3, [pc, #172]	; (8004ec8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6892      	ldr	r2, [r2, #8]
 8004e22:	0211      	lsls	r1, r2, #8
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6912      	ldr	r2, [r2, #16]
 8004e28:	0852      	lsrs	r2, r2, #1
 8004e2a:	3a01      	subs	r2, #1
 8004e2c:	0552      	lsls	r2, r2, #21
 8004e2e:	4311      	orrs	r1, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6852      	ldr	r2, [r2, #4]
 8004e34:	3a01      	subs	r2, #1
 8004e36:	0112      	lsls	r2, r2, #4
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	4921      	ldr	r1, [pc, #132]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	610b      	str	r3, [r1, #16]
 8004e40:	e014      	b.n	8004e6c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e42:	4b1f      	ldr	r3, [pc, #124]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	4b21      	ldr	r3, [pc, #132]	; (8004ecc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6892      	ldr	r2, [r2, #8]
 8004e4e:	0211      	lsls	r1, r2, #8
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6952      	ldr	r2, [r2, #20]
 8004e54:	0852      	lsrs	r2, r2, #1
 8004e56:	3a01      	subs	r2, #1
 8004e58:	0652      	lsls	r2, r2, #25
 8004e5a:	4311      	orrs	r1, r2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6852      	ldr	r2, [r2, #4]
 8004e60:	3a01      	subs	r2, #1
 8004e62:	0112      	lsls	r2, r2, #4
 8004e64:	430a      	orrs	r2, r1
 8004e66:	4916      	ldr	r1, [pc, #88]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e6c:	4b14      	ldr	r3, [pc, #80]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e78:	f7fc f832 	bl	8000ee0 <HAL_GetTick>
 8004e7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e7e:	e009      	b.n	8004e94 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e80:	f7fc f82e 	bl	8000ee0 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d902      	bls.n	8004e94 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	73fb      	strb	r3, [r7, #15]
          break;
 8004e92:	e005      	b.n	8004ea0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e94:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0ef      	beq.n	8004e80 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	4904      	ldr	r1, [pc, #16]	; (8004ec0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	07ff800f 	.word	0x07ff800f
 8004ec8:	ff9f800f 	.word	0xff9f800f
 8004ecc:	f9ff800f 	.word	0xf9ff800f

08004ed0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ede:	4b72      	ldr	r3, [pc, #456]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00e      	beq.n	8004f08 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004eea:	4b6f      	ldr	r3, [pc, #444]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f003 0203 	and.w	r2, r3, #3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d103      	bne.n	8004f02 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
       ||
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d142      	bne.n	8004f88 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
 8004f06:	e03f      	b.n	8004f88 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d018      	beq.n	8004f42 <RCCEx_PLLSAI2_Config+0x72>
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d825      	bhi.n	8004f60 <RCCEx_PLLSAI2_Config+0x90>
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d002      	beq.n	8004f1e <RCCEx_PLLSAI2_Config+0x4e>
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d009      	beq.n	8004f30 <RCCEx_PLLSAI2_Config+0x60>
 8004f1c:	e020      	b.n	8004f60 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f1e:	4b62      	ldr	r3, [pc, #392]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d11d      	bne.n	8004f66 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f2e:	e01a      	b.n	8004f66 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f30:	4b5d      	ldr	r3, [pc, #372]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d116      	bne.n	8004f6a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f40:	e013      	b.n	8004f6a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f42:	4b59      	ldr	r3, [pc, #356]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10f      	bne.n	8004f6e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f4e:	4b56      	ldr	r3, [pc, #344]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f5e:	e006      	b.n	8004f6e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
      break;
 8004f64:	e004      	b.n	8004f70 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f66:	bf00      	nop
 8004f68:	e002      	b.n	8004f70 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f6a:	bf00      	nop
 8004f6c:	e000      	b.n	8004f70 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d108      	bne.n	8004f88 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004f76:	4b4c      	ldr	r3, [pc, #304]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f023 0203 	bic.w	r2, r3, #3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4949      	ldr	r1, [pc, #292]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f040 8086 	bne.w	800509c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f90:	4b45      	ldr	r3, [pc, #276]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a44      	ldr	r2, [pc, #272]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9c:	f7fb ffa0 	bl	8000ee0 <HAL_GetTick>
 8004fa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fa2:	e009      	b.n	8004fb8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fa4:	f7fb ff9c 	bl	8000ee0 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d902      	bls.n	8004fb8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	73fb      	strb	r3, [r7, #15]
        break;
 8004fb6:	e005      	b.n	8004fc4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fb8:	4b3b      	ldr	r3, [pc, #236]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1ef      	bne.n	8004fa4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d168      	bne.n	800509c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d113      	bne.n	8004ff8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fd0:	4b35      	ldr	r3, [pc, #212]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fd2:	695a      	ldr	r2, [r3, #20]
 8004fd4:	4b35      	ldr	r3, [pc, #212]	; (80050ac <RCCEx_PLLSAI2_Config+0x1dc>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6892      	ldr	r2, [r2, #8]
 8004fdc:	0211      	lsls	r1, r2, #8
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	68d2      	ldr	r2, [r2, #12]
 8004fe2:	06d2      	lsls	r2, r2, #27
 8004fe4:	4311      	orrs	r1, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6852      	ldr	r2, [r2, #4]
 8004fea:	3a01      	subs	r2, #1
 8004fec:	0112      	lsls	r2, r2, #4
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	492d      	ldr	r1, [pc, #180]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	614b      	str	r3, [r1, #20]
 8004ff6:	e02d      	b.n	8005054 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d115      	bne.n	800502a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ffe:	4b2a      	ldr	r3, [pc, #168]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005000:	695a      	ldr	r2, [r3, #20]
 8005002:	4b2b      	ldr	r3, [pc, #172]	; (80050b0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005004:	4013      	ands	r3, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6892      	ldr	r2, [r2, #8]
 800500a:	0211      	lsls	r1, r2, #8
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6912      	ldr	r2, [r2, #16]
 8005010:	0852      	lsrs	r2, r2, #1
 8005012:	3a01      	subs	r2, #1
 8005014:	0552      	lsls	r2, r2, #21
 8005016:	4311      	orrs	r1, r2
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6852      	ldr	r2, [r2, #4]
 800501c:	3a01      	subs	r2, #1
 800501e:	0112      	lsls	r2, r2, #4
 8005020:	430a      	orrs	r2, r1
 8005022:	4921      	ldr	r1, [pc, #132]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005024:	4313      	orrs	r3, r2
 8005026:	614b      	str	r3, [r1, #20]
 8005028:	e014      	b.n	8005054 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800502a:	4b1f      	ldr	r3, [pc, #124]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	4b21      	ldr	r3, [pc, #132]	; (80050b4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005030:	4013      	ands	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6892      	ldr	r2, [r2, #8]
 8005036:	0211      	lsls	r1, r2, #8
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6952      	ldr	r2, [r2, #20]
 800503c:	0852      	lsrs	r2, r2, #1
 800503e:	3a01      	subs	r2, #1
 8005040:	0652      	lsls	r2, r2, #25
 8005042:	4311      	orrs	r1, r2
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6852      	ldr	r2, [r2, #4]
 8005048:	3a01      	subs	r2, #1
 800504a:	0112      	lsls	r2, r2, #4
 800504c:	430a      	orrs	r2, r1
 800504e:	4916      	ldr	r1, [pc, #88]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005050:	4313      	orrs	r3, r2
 8005052:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005054:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800505a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005060:	f7fb ff3e 	bl	8000ee0 <HAL_GetTick>
 8005064:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005066:	e009      	b.n	800507c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005068:	f7fb ff3a 	bl	8000ee0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d902      	bls.n	800507c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	73fb      	strb	r3, [r7, #15]
          break;
 800507a:	e005      	b.n	8005088 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0ef      	beq.n	8005068 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800508e:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	4904      	ldr	r1, [pc, #16]	; (80050a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005098:	4313      	orrs	r3, r2
 800509a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40021000 	.word	0x40021000
 80050ac:	07ff800f 	.word	0x07ff800f
 80050b0:	ff9f800f 	.word	0xff9f800f
 80050b4:	f9ff800f 	.word	0xf9ff800f

080050b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e049      	b.n	800515e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f841 	bl	8005166 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f000 f9f8 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b01      	cmp	r3, #1
 800518e:	d001      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e04f      	b.n	8005234 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a23      	ldr	r2, [pc, #140]	; (8005240 <HAL_TIM_Base_Start_IT+0xc4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d01d      	beq.n	80051f2 <HAL_TIM_Base_Start_IT+0x76>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051be:	d018      	beq.n	80051f2 <HAL_TIM_Base_Start_IT+0x76>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1f      	ldr	r2, [pc, #124]	; (8005244 <HAL_TIM_Base_Start_IT+0xc8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d013      	beq.n	80051f2 <HAL_TIM_Base_Start_IT+0x76>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1e      	ldr	r2, [pc, #120]	; (8005248 <HAL_TIM_Base_Start_IT+0xcc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00e      	beq.n	80051f2 <HAL_TIM_Base_Start_IT+0x76>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1c      	ldr	r2, [pc, #112]	; (800524c <HAL_TIM_Base_Start_IT+0xd0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d009      	beq.n	80051f2 <HAL_TIM_Base_Start_IT+0x76>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1b      	ldr	r2, [pc, #108]	; (8005250 <HAL_TIM_Base_Start_IT+0xd4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d004      	beq.n	80051f2 <HAL_TIM_Base_Start_IT+0x76>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a19      	ldr	r2, [pc, #100]	; (8005254 <HAL_TIM_Base_Start_IT+0xd8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d115      	bne.n	800521e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	4b17      	ldr	r3, [pc, #92]	; (8005258 <HAL_TIM_Base_Start_IT+0xdc>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b06      	cmp	r3, #6
 8005202:	d015      	beq.n	8005230 <HAL_TIM_Base_Start_IT+0xb4>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520a:	d011      	beq.n	8005230 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521c:	e008      	b.n	8005230 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0201 	orr.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e000      	b.n	8005232 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005230:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40000400 	.word	0x40000400
 8005248:	40000800 	.word	0x40000800
 800524c:	40000c00 	.word	0x40000c00
 8005250:	40013400 	.word	0x40013400
 8005254:	40014000 	.word	0x40014000
 8005258:	00010007 	.word	0x00010007

0800525c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b02      	cmp	r3, #2
 8005270:	d122      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b02      	cmp	r3, #2
 800527e:	d11b      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0202 	mvn.w	r2, #2
 8005288:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f905 	bl	80054ae <HAL_TIM_IC_CaptureCallback>
 80052a4:	e005      	b.n	80052b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f8f7 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f908 	bl	80054c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d122      	bne.n	800530c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d11b      	bne.n	800530c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0204 	mvn.w	r2, #4
 80052dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2202      	movs	r2, #2
 80052e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f8db 	bl	80054ae <HAL_TIM_IC_CaptureCallback>
 80052f8:	e005      	b.n	8005306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f8cd 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f8de 	bl	80054c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b08      	cmp	r3, #8
 8005318:	d122      	bne.n	8005360 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b08      	cmp	r3, #8
 8005326:	d11b      	bne.n	8005360 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0208 	mvn.w	r2, #8
 8005330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2204      	movs	r2, #4
 8005336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f8b1 	bl	80054ae <HAL_TIM_IC_CaptureCallback>
 800534c:	e005      	b.n	800535a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f8a3 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f8b4 	bl	80054c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0310 	and.w	r3, r3, #16
 800536a:	2b10      	cmp	r3, #16
 800536c:	d122      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	2b10      	cmp	r3, #16
 800537a:	d11b      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0210 	mvn.w	r2, #16
 8005384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2208      	movs	r2, #8
 800538a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f887 	bl	80054ae <HAL_TIM_IC_CaptureCallback>
 80053a0:	e005      	b.n	80053ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f879 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f88a 	bl	80054c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d10e      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d107      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0201 	mvn.w	r2, #1
 80053d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fb f96a 	bl	80006b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ea:	2b80      	cmp	r3, #128	; 0x80
 80053ec:	d10e      	bne.n	800540c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f8:	2b80      	cmp	r3, #128	; 0x80
 80053fa:	d107      	bne.n	800540c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f914 	bl	8005634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800541a:	d10e      	bne.n	800543a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005426:	2b80      	cmp	r3, #128	; 0x80
 8005428:	d107      	bne.n	800543a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f907 	bl	8005648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d10e      	bne.n	8005466 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005452:	2b40      	cmp	r3, #64	; 0x40
 8005454:	d107      	bne.n	8005466 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800545e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f838 	bl	80054d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b20      	cmp	r3, #32
 8005472:	d10e      	bne.n	8005492 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b20      	cmp	r3, #32
 8005480:	d107      	bne.n	8005492 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f06f 0220 	mvn.w	r2, #32
 800548a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f8c7 	bl	8005620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a40      	ldr	r2, [pc, #256]	; (8005600 <TIM_Base_SetConfig+0x114>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d013      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550a:	d00f      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a3d      	ldr	r2, [pc, #244]	; (8005604 <TIM_Base_SetConfig+0x118>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00b      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a3c      	ldr	r2, [pc, #240]	; (8005608 <TIM_Base_SetConfig+0x11c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d007      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a3b      	ldr	r2, [pc, #236]	; (800560c <TIM_Base_SetConfig+0x120>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d003      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a3a      	ldr	r2, [pc, #232]	; (8005610 <TIM_Base_SetConfig+0x124>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d108      	bne.n	800553e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a2f      	ldr	r2, [pc, #188]	; (8005600 <TIM_Base_SetConfig+0x114>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d01f      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554c:	d01b      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a2c      	ldr	r2, [pc, #176]	; (8005604 <TIM_Base_SetConfig+0x118>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d017      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a2b      	ldr	r2, [pc, #172]	; (8005608 <TIM_Base_SetConfig+0x11c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a2a      	ldr	r2, [pc, #168]	; (800560c <TIM_Base_SetConfig+0x120>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00f      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a29      	ldr	r2, [pc, #164]	; (8005610 <TIM_Base_SetConfig+0x124>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a28      	ldr	r2, [pc, #160]	; (8005614 <TIM_Base_SetConfig+0x128>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a27      	ldr	r2, [pc, #156]	; (8005618 <TIM_Base_SetConfig+0x12c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a26      	ldr	r2, [pc, #152]	; (800561c <TIM_Base_SetConfig+0x130>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800558c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a10      	ldr	r2, [pc, #64]	; (8005600 <TIM_Base_SetConfig+0x114>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00f      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a12      	ldr	r2, [pc, #72]	; (8005610 <TIM_Base_SetConfig+0x124>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00b      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a11      	ldr	r2, [pc, #68]	; (8005614 <TIM_Base_SetConfig+0x128>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d007      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a10      	ldr	r2, [pc, #64]	; (8005618 <TIM_Base_SetConfig+0x12c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a0f      	ldr	r2, [pc, #60]	; (800561c <TIM_Base_SetConfig+0x130>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d103      	bne.n	80055ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	615a      	str	r2, [r3, #20]
}
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40012c00 	.word	0x40012c00
 8005604:	40000400 	.word	0x40000400
 8005608:	40000800 	.word	0x40000800
 800560c:	40000c00 	.word	0x40000c00
 8005610:	40013400 	.word	0x40013400
 8005614:	40014000 	.word	0x40014000
 8005618:	40014400 	.word	0x40014400
 800561c:	40014800 	.word	0x40014800

08005620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <__libc_init_array>:
 800565c:	b570      	push	{r4, r5, r6, lr}
 800565e:	4d0d      	ldr	r5, [pc, #52]	; (8005694 <__libc_init_array+0x38>)
 8005660:	4c0d      	ldr	r4, [pc, #52]	; (8005698 <__libc_init_array+0x3c>)
 8005662:	1b64      	subs	r4, r4, r5
 8005664:	10a4      	asrs	r4, r4, #2
 8005666:	2600      	movs	r6, #0
 8005668:	42a6      	cmp	r6, r4
 800566a:	d109      	bne.n	8005680 <__libc_init_array+0x24>
 800566c:	4d0b      	ldr	r5, [pc, #44]	; (800569c <__libc_init_array+0x40>)
 800566e:	4c0c      	ldr	r4, [pc, #48]	; (80056a0 <__libc_init_array+0x44>)
 8005670:	f000 f820 	bl	80056b4 <_init>
 8005674:	1b64      	subs	r4, r4, r5
 8005676:	10a4      	asrs	r4, r4, #2
 8005678:	2600      	movs	r6, #0
 800567a:	42a6      	cmp	r6, r4
 800567c:	d105      	bne.n	800568a <__libc_init_array+0x2e>
 800567e:	bd70      	pop	{r4, r5, r6, pc}
 8005680:	f855 3b04 	ldr.w	r3, [r5], #4
 8005684:	4798      	blx	r3
 8005686:	3601      	adds	r6, #1
 8005688:	e7ee      	b.n	8005668 <__libc_init_array+0xc>
 800568a:	f855 3b04 	ldr.w	r3, [r5], #4
 800568e:	4798      	blx	r3
 8005690:	3601      	adds	r6, #1
 8005692:	e7f2      	b.n	800567a <__libc_init_array+0x1e>
 8005694:	08005744 	.word	0x08005744
 8005698:	08005744 	.word	0x08005744
 800569c:	08005744 	.word	0x08005744
 80056a0:	08005748 	.word	0x08005748

080056a4 <memset>:
 80056a4:	4402      	add	r2, r0
 80056a6:	4603      	mov	r3, r0
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d100      	bne.n	80056ae <memset+0xa>
 80056ac:	4770      	bx	lr
 80056ae:	f803 1b01 	strb.w	r1, [r3], #1
 80056b2:	e7f9      	b.n	80056a8 <memset+0x4>

080056b4 <_init>:
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	bf00      	nop
 80056b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ba:	bc08      	pop	{r3}
 80056bc:	469e      	mov	lr, r3
 80056be:	4770      	bx	lr

080056c0 <_fini>:
 80056c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c2:	bf00      	nop
 80056c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c6:	bc08      	pop	{r3}
 80056c8:	469e      	mov	lr, r3
 80056ca:	4770      	bx	lr
