
kiera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b74  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002da8  08002da8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002da8  08002da8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002da8  08002da8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002da8  08002da8  00012da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dac  08002dac  00012dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08002dbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002dbc  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c2e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021bc  00000000  00000000  00032c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000046e  00000000  00000000  00034e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00035298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d18  00000000  00000000  00036070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e5de  00000000  00000000  00036d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7b1  00000000  00000000  00065366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001184ed  00000000  00000000  00073b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018c004  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000375c  00000000  00000000  0018c054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002d18 	.word	0x08002d18

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08002d18 	.word	0x08002d18

080001fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80001fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000200:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000202:	2400      	movs	r4, #0
 8000204:	9405      	str	r4, [sp, #20]
 8000206:	9406      	str	r4, [sp, #24]
 8000208:	9407      	str	r4, [sp, #28]
 800020a:	9408      	str	r4, [sp, #32]
 800020c:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800020e:	4b46      	ldr	r3, [pc, #280]	; (8000328 <_ZL12MX_GPIO_Initv+0x12c>)
 8000210:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000212:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000216:	64da      	str	r2, [r3, #76]	; 0x4c
 8000218:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800021a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800021e:	9200      	str	r2, [sp, #0]
 8000220:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000224:	f042 0201 	orr.w	r2, r2, #1
 8000228:	64da      	str	r2, [r3, #76]	; 0x4c
 800022a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800022c:	f002 0201 	and.w	r2, r2, #1
 8000230:	9201      	str	r2, [sp, #4]
 8000232:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000236:	f042 0204 	orr.w	r2, r2, #4
 800023a:	64da      	str	r2, [r3, #76]	; 0x4c
 800023c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800023e:	f002 0204 	and.w	r2, r2, #4
 8000242:	9202      	str	r2, [sp, #8]
 8000244:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000248:	f042 0202 	orr.w	r2, r2, #2
 800024c:	64da      	str	r2, [r3, #76]	; 0x4c
 800024e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000250:	f002 0202 	and.w	r2, r2, #2
 8000254:	9203      	str	r2, [sp, #12]
 8000256:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025a:	f042 0208 	orr.w	r2, r2, #8
 800025e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000262:	f003 0308 	and.w	r3, r3, #8
 8000266:	9304      	str	r3, [sp, #16]
 8000268:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin, GPIO_PIN_RESET);
 800026a:	4e30      	ldr	r6, [pc, #192]	; (800032c <_ZL12MX_GPIO_Initv+0x130>)
 800026c:	4622      	mov	r2, r4
 800026e:	21f0      	movs	r1, #240	; 0xf0
 8000270:	4630      	mov	r0, r6
 8000272:	f001 f9ef 	bl	8001654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW5_Pin */
  GPIO_InitStruct.Pin = SW5_Pin;
 8000276:	f04f 0802 	mov.w	r8, #2
 800027a:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800027e:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
 8000282:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000284:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SW5_GPIO_Port, &GPIO_InitStruct);
 8000286:	a905      	add	r1, sp, #20
 8000288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028c:	f001 f850 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000290:	27f0      	movs	r7, #240	; 0xf0
 8000292:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000294:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000298:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800029a:	2303      	movs	r3, #3
 800029c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800029e:	2305      	movs	r3, #5
 80002a0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a2:	a905      	add	r1, sp, #20
 80002a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a8:	f001 f842 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 SW2_1_Pin SW2_2_Pin
                           SW2_3_Pin SW2_4_Pin SW3_Pin SW4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|SW2_1_Pin|SW2_2_Pin
 80002ac:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 80002b0:	9305      	str	r3, [sp, #20]
                          |SW2_3_Pin|SW2_4_Pin|SW3_Pin|SW4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002b2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002b6:	a905      	add	r1, sp, #20
 80002b8:	481d      	ldr	r0, [pc, #116]	; (8000330 <_ZL12MX_GPIO_Initv+0x134>)
 80002ba:	f001 f839 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_1_Pin SW1_2_Pin SW1_3_Pin SW1_4_Pin */
  GPIO_InitStruct.Pin = SW1_1_Pin|SW1_2_Pin|SW1_3_Pin|SW1_4_Pin;
 80002be:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80002c2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002c4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c8:	a905      	add	r1, sp, #20
 80002ca:	4630      	mov	r0, r6
 80002cc:	f001 f830 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW6_Pin */
  GPIO_InitStruct.Pin = SW6_Pin;
 80002d0:	2304      	movs	r3, #4
 80002d2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002d4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SW6_GPIO_Port, &GPIO_InitStruct);
 80002d8:	a905      	add	r1, sp, #20
 80002da:	4816      	ldr	r0, [pc, #88]	; (8000334 <_ZL12MX_GPIO_Initv+0x138>)
 80002dc:	f001 f828 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : ControlLed4_Pin ControlLed3_Pin ControlLed2_Pin ControlLed1_Pin */
  GPIO_InitStruct.Pin = ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin;
 80002e0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e2:	2301      	movs	r3, #1
 80002e4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ea:	a905      	add	r1, sp, #20
 80002ec:	4630      	mov	r0, r6
 80002ee:	f001 f81f 	bl	8001330 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80002f2:	4622      	mov	r2, r4
 80002f4:	4621      	mov	r1, r4
 80002f6:	200a      	movs	r0, #10
 80002f8:	f000 fff0 	bl	80012dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80002fc:	200a      	movs	r0, #10
 80002fe:	f001 f809 	bl	8001314 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000302:	4622      	mov	r2, r4
 8000304:	4621      	mov	r1, r4
 8000306:	2017      	movs	r0, #23
 8000308:	f000 ffe8 	bl	80012dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800030c:	2017      	movs	r0, #23
 800030e:	f001 f801 	bl	8001314 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000312:	4622      	mov	r2, r4
 8000314:	4621      	mov	r1, r4
 8000316:	2028      	movs	r0, #40	; 0x28
 8000318:	f000 ffe0 	bl	80012dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800031c:	2028      	movs	r0, #40	; 0x28
 800031e:	f000 fff9 	bl	8001314 <HAL_NVIC_EnableIRQ>

}
 8000322:	b00a      	add	sp, #40	; 0x28
 8000324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000328:	40021000 	.word	0x40021000
 800032c:	48000400 	.word	0x48000400
 8000330:	48000800 	.word	0x48000800
 8000334:	48000c00 	.word	0x48000c00

08000338 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000338:	b510      	push	{r4, lr}
 800033a:	b08a      	sub	sp, #40	; 0x28
//	timer = HAL_GetTick();
	PUTM_CAN::Steering_Wheel_event scroll_state{};
 800033c:	2300      	movs	r3, #0
 800033e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8000342:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

	if (GPIO_Pin == SW3_Pin)
 8000346:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800034a:	d024      	beq.n	8000396 <HAL_GPIO_EXTI_Callback+0x5e>
	{
		sw3_pressed = 1;
//		HAL_GPIO_TogglePin(ControlLed4_GPIO_Port, ControlLed4_Pin);
	} else if (GPIO_Pin == SW4_Pin)
 800034c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8000350:	d03c      	beq.n	80003cc <HAL_GPIO_EXTI_Callback+0x94>
	{
		sw4_pressed = 1;
//		HAL_GPIO_TogglePin(ControlLed3_GPIO_Port, ControlLed3_Pin);
	} else if (GPIO_Pin == SW5_Pin)
 8000352:	2802      	cmp	r0, #2
 8000354:	d03e      	beq.n	80003d4 <HAL_GPIO_EXTI_Callback+0x9c>
	{
		sw5_pressed = 1;
//		HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
	} else if (GPIO_Pin == SW6_Pin)
 8000356:	2804      	cmp	r0, #4
 8000358:	d040      	beq.n	80003dc <HAL_GPIO_EXTI_Callback+0xa4>
	{
		sw6_pressed = 1;
//		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
	} else if (GPIO_Pin == SW1_1_Pin)
 800035a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800035e:	d041      	beq.n	80003e4 <HAL_GPIO_EXTI_Callback+0xac>
	{
		scroll_state.l_s_1 = PUTM_CAN::scrollStates::scroll_1;
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
	} else if (GPIO_Pin == SW1_2_Pin)
 8000360:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000364:	d043      	beq.n	80003ee <HAL_GPIO_EXTI_Callback+0xb6>
	{
		scroll_state.l_s_1 = PUTM_CAN::scrollStates::scroll_2;
		HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
	} else if (GPIO_Pin == SW1_3_Pin)
 8000366:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800036a:	d048      	beq.n	80003fe <HAL_GPIO_EXTI_Callback+0xc6>
	{
		scroll_state.l_s_1 = PUTM_CAN::scrollStates::scroll_3;
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
	} else if (GPIO_Pin == SW1_4_Pin)
 800036c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000370:	d04d      	beq.n	800040e <HAL_GPIO_EXTI_Callback+0xd6>
	{
		scroll_state.l_s_1 = PUTM_CAN::scrollStates::scroll_4;
		HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
	} else if (GPIO_Pin == SW2_1_Pin)
 8000372:	2840      	cmp	r0, #64	; 0x40
 8000374:	d053      	beq.n	800041e <HAL_GPIO_EXTI_Callback+0xe6>
	{
		scroll_state.r_s_1 = PUTM_CAN::scrollStates::scroll_1;
		HAL_GPIO_TogglePin(ControlLed3_GPIO_Port, ControlLed3_Pin);
	} else if (GPIO_Pin == SW2_2_Pin)
 8000376:	2880      	cmp	r0, #128	; 0x80
 8000378:	d056      	beq.n	8000428 <HAL_GPIO_EXTI_Callback+0xf0>
	{
		scroll_state.r_s_1 = PUTM_CAN::scrollStates::scroll_2;
		HAL_GPIO_TogglePin(ControlLed4_GPIO_Port, ControlLed4_Pin);
	} else if (GPIO_Pin == SW2_3_Pin)
 800037a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800037e:	d05b      	beq.n	8000438 <HAL_GPIO_EXTI_Callback+0x100>
	{
		scroll_state.r_s_1 = PUTM_CAN::scrollStates::scroll_3;
		HAL_GPIO_TogglePin(ControlLed3_GPIO_Port, ControlLed3_Pin);
	} else if (GPIO_Pin == SW2_4_Pin)
 8000380:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000384:	d10a      	bne.n	800039c <HAL_GPIO_EXTI_Callback+0x64>
	{
		scroll_state.r_s_1 = PUTM_CAN::scrollStates::scroll_4;
 8000386:	2303      	movs	r3, #3
 8000388:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		HAL_GPIO_TogglePin(ControlLed4_GPIO_Port, ControlLed4_Pin);
 800038c:	2110      	movs	r1, #16
 800038e:	482e      	ldr	r0, [pc, #184]	; (8000448 <HAL_GPIO_EXTI_Callback+0x110>)
 8000390:	f001 f978 	bl	8001684 <HAL_GPIO_TogglePin>
 8000394:	e002      	b.n	800039c <HAL_GPIO_EXTI_Callback+0x64>
		sw3_pressed = 1;
 8000396:	4b2d      	ldr	r3, [pc, #180]	; (800044c <HAL_GPIO_EXTI_Callback+0x114>)
 8000398:	2201      	movs	r2, #1
 800039a:	701a      	strb	r2, [r3, #0]
  CAN_TxHeaderTypeDef header;
  uint8_t buff[max_dlc_size];

  constexpr Can_tx_message(const T &data,
                           const CAN_TxHeaderTypeDef &message_header)
      : header{message_header} {
 800039c:	f10d 0c04 	add.w	ip, sp, #4
 80003a0:	4c2b      	ldr	r4, [pc, #172]	; (8000450 <HAL_GPIO_EXTI_Callback+0x118>)
 80003a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80003ac:	e88c 0003 	stmia.w	ip, {r0, r1}
    static_assert(std::is_standard_layout<T>(), "Object must by C like struct");
    static_assert(std::is_trivially_copyable<T>(),
                  "Object must by C like struct");
    static_assert(sizeof(T) <= max_dlc_size,
                  "Object size must be less than 8bytes");
    std::memcpy(this->buff, &data, sizeof(T));
 80003b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80003b2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80003b6:	0c1b      	lsrs	r3, r3, #16
 80003b8:	f88d 301e 	strb.w	r3, [sp, #30]
  }

  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
    static uint32_t TxMailbox(0);
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80003bc:	4b25      	ldr	r3, [pc, #148]	; (8000454 <HAL_GPIO_EXTI_Callback+0x11c>)
 80003be:	aa07      	add	r2, sp, #28
 80003c0:	a901      	add	r1, sp, #4
 80003c2:	4825      	ldr	r0, [pc, #148]	; (8000458 <HAL_GPIO_EXTI_Callback+0x120>)
 80003c4:	f000 fddb 	bl	8000f7e <HAL_CAN_AddTxMessage>

	auto steering_wheel_frame = PUTM_CAN::Can_tx_message<PUTM_CAN::Steering_Wheel_event>
	(scroll_state, PUTM_CAN::can_tx_header_STEERING_WHEEL_EVENT);

	steering_wheel_frame.send(hcan1);
}
 80003c8:	b00a      	add	sp, #40	; 0x28
 80003ca:	bd10      	pop	{r4, pc}
		sw4_pressed = 1;
 80003cc:	4b23      	ldr	r3, [pc, #140]	; (800045c <HAL_GPIO_EXTI_Callback+0x124>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	701a      	strb	r2, [r3, #0]
 80003d2:	e7e3      	b.n	800039c <HAL_GPIO_EXTI_Callback+0x64>
		sw5_pressed = 1;
 80003d4:	4b22      	ldr	r3, [pc, #136]	; (8000460 <HAL_GPIO_EXTI_Callback+0x128>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	701a      	strb	r2, [r3, #0]
 80003da:	e7df      	b.n	800039c <HAL_GPIO_EXTI_Callback+0x64>
		sw6_pressed = 1;
 80003dc:	4b21      	ldr	r3, [pc, #132]	; (8000464 <HAL_GPIO_EXTI_Callback+0x12c>)
 80003de:	2201      	movs	r2, #1
 80003e0:	701a      	strb	r2, [r3, #0]
 80003e2:	e7db      	b.n	800039c <HAL_GPIO_EXTI_Callback+0x64>
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 80003e4:	2180      	movs	r1, #128	; 0x80
 80003e6:	4818      	ldr	r0, [pc, #96]	; (8000448 <HAL_GPIO_EXTI_Callback+0x110>)
 80003e8:	f001 f94c 	bl	8001684 <HAL_GPIO_TogglePin>
 80003ec:	e7d6      	b.n	800039c <HAL_GPIO_EXTI_Callback+0x64>
		scroll_state.l_s_1 = PUTM_CAN::scrollStates::scroll_2;
 80003ee:	2301      	movs	r3, #1
 80003f0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
 80003f4:	2140      	movs	r1, #64	; 0x40
 80003f6:	4814      	ldr	r0, [pc, #80]	; (8000448 <HAL_GPIO_EXTI_Callback+0x110>)
 80003f8:	f001 f944 	bl	8001684 <HAL_GPIO_TogglePin>
 80003fc:	e7ce      	b.n	800039c <HAL_GPIO_EXTI_Callback+0x64>
		scroll_state.l_s_1 = PUTM_CAN::scrollStates::scroll_3;
 80003fe:	2302      	movs	r3, #2
 8000400:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	4810      	ldr	r0, [pc, #64]	; (8000448 <HAL_GPIO_EXTI_Callback+0x110>)
 8000408:	f001 f93c 	bl	8001684 <HAL_GPIO_TogglePin>
 800040c:	e7c6      	b.n	800039c <HAL_GPIO_EXTI_Callback+0x64>
		scroll_state.l_s_1 = PUTM_CAN::scrollStates::scroll_4;
 800040e:	2303      	movs	r3, #3
 8000410:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
 8000414:	2140      	movs	r1, #64	; 0x40
 8000416:	480c      	ldr	r0, [pc, #48]	; (8000448 <HAL_GPIO_EXTI_Callback+0x110>)
 8000418:	f001 f934 	bl	8001684 <HAL_GPIO_TogglePin>
 800041c:	e7be      	b.n	800039c <HAL_GPIO_EXTI_Callback+0x64>
		HAL_GPIO_TogglePin(ControlLed3_GPIO_Port, ControlLed3_Pin);
 800041e:	2120      	movs	r1, #32
 8000420:	4809      	ldr	r0, [pc, #36]	; (8000448 <HAL_GPIO_EXTI_Callback+0x110>)
 8000422:	f001 f92f 	bl	8001684 <HAL_GPIO_TogglePin>
 8000426:	e7b9      	b.n	800039c <HAL_GPIO_EXTI_Callback+0x64>
		scroll_state.r_s_1 = PUTM_CAN::scrollStates::scroll_2;
 8000428:	2301      	movs	r3, #1
 800042a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		HAL_GPIO_TogglePin(ControlLed4_GPIO_Port, ControlLed4_Pin);
 800042e:	2110      	movs	r1, #16
 8000430:	4805      	ldr	r0, [pc, #20]	; (8000448 <HAL_GPIO_EXTI_Callback+0x110>)
 8000432:	f001 f927 	bl	8001684 <HAL_GPIO_TogglePin>
 8000436:	e7b1      	b.n	800039c <HAL_GPIO_EXTI_Callback+0x64>
		scroll_state.r_s_1 = PUTM_CAN::scrollStates::scroll_3;
 8000438:	2302      	movs	r3, #2
 800043a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		HAL_GPIO_TogglePin(ControlLed3_GPIO_Port, ControlLed3_Pin);
 800043e:	2120      	movs	r1, #32
 8000440:	4801      	ldr	r0, [pc, #4]	; (8000448 <HAL_GPIO_EXTI_Callback+0x110>)
 8000442:	f001 f91f 	bl	8001684 <HAL_GPIO_TogglePin>
 8000446:	e7a9      	b.n	800039c <HAL_GPIO_EXTI_Callback+0x64>
 8000448:	48000400 	.word	0x48000400
 800044c:	2000005c 	.word	0x2000005c
 8000450:	08002d48 	.word	0x08002d48
 8000454:	2000002c 	.word	0x2000002c
 8000458:	20000030 	.word	0x20000030
 800045c:	2000005d 	.word	0x2000005d
 8000460:	2000005e 	.word	0x2000005e
 8000464:	2000005f 	.word	0x2000005f

08000468 <heartbeat>:

void heartbeat()
{
 8000468:	b510      	push	{r4, lr}
 800046a:	b08a      	sub	sp, #40	; 0x28

	PUTM_CAN::Steering_Wheel_main pcb_alive{0, PUTM_CAN::Steering_Wheel_states::OK};
 800046c:	2300      	movs	r3, #0
 800046e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8000472:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
      : header{message_header} {
 8000476:	f10d 0c04 	add.w	ip, sp, #4
 800047a:	4c0b      	ldr	r4, [pc, #44]	; (80004a8 <heartbeat+0x40>)
 800047c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800047e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000482:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000486:	e88c 0003 	stmia.w	ip, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 800048a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800048c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000490:	0c1b      	lsrs	r3, r3, #16
 8000492:	f88d 301e 	strb.w	r3, [sp, #30]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8000496:	4b05      	ldr	r3, [pc, #20]	; (80004ac <heartbeat+0x44>)
 8000498:	aa07      	add	r2, sp, #28
 800049a:	a901      	add	r1, sp, #4
 800049c:	4804      	ldr	r0, [pc, #16]	; (80004b0 <heartbeat+0x48>)
 800049e:	f000 fd6e 	bl	8000f7e <HAL_CAN_AddTxMessage>

	auto steering_wheel_heartbeat = PUTM_CAN::Can_tx_message<PUTM_CAN::Steering_Wheel_main>
	(pcb_alive, PUTM_CAN::can_tx_header_STEERING_WHEEL_MAIN);

 	steering_wheel_heartbeat.send(hcan1);
}
 80004a2:	b00a      	add	sp, #40	; 0x28
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	bf00      	nop
 80004a8:	08002d30 	.word	0x08002d30
 80004ac:	20000028 	.word	0x20000028
 80004b0:	20000030 	.word	0x20000030

080004b4 <reset_flags>:
//	}
//}

void reset_flags()
{
	sw3_pressed = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <reset_flags+0x14>)
 80004b8:	7013      	strb	r3, [r2, #0]
	sw4_pressed = 0;
 80004ba:	4a04      	ldr	r2, [pc, #16]	; (80004cc <reset_flags+0x18>)
 80004bc:	7013      	strb	r3, [r2, #0]
	sw5_pressed = 0;
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <reset_flags+0x1c>)
 80004c0:	7013      	strb	r3, [r2, #0]
	sw6_pressed = 0;
 80004c2:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <reset_flags+0x20>)
 80004c4:	7013      	strb	r3, [r2, #0]
}
 80004c6:	4770      	bx	lr
 80004c8:	2000005c 	.word	0x2000005c
 80004cc:	2000005d 	.word	0x2000005d
 80004d0:	2000005e 	.word	0x2000005e
 80004d4:	2000005f 	.word	0x2000005f

080004d8 <wait_for_second_button>:
{
 80004d8:	b510      	push	{r4, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
	HAL_Delay(500);
 80004dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e0:	f000 fb20 	bl	8000b24 <HAL_Delay>
	PUTM_CAN::Steering_Wheel_event button_pressed{};
 80004e4:	2300      	movs	r3, #0
 80004e6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80004ea:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	if (sw3_pressed && sw4_pressed)
 80004ee:	4b3f      	ldr	r3, [pc, #252]	; (80005ec <wait_for_second_button+0x114>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	b1fb      	cbz	r3, 8000534 <wait_for_second_button+0x5c>
 80004f4:	4a3e      	ldr	r2, [pc, #248]	; (80005f0 <wait_for_second_button+0x118>)
 80004f6:	7812      	ldrb	r2, [r2, #0]
 80004f8:	b1e2      	cbz	r2, 8000534 <wait_for_second_button+0x5c>
		button_pressed.button = PUTM_CAN::buttonStates::button1_2;
 80004fa:	2305      	movs	r3, #5
 80004fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      : header{message_header} {
 8000500:	f10d 0c04 	add.w	ip, sp, #4
 8000504:	4c3b      	ldr	r4, [pc, #236]	; (80005f4 <wait_for_second_button+0x11c>)
 8000506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000508:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800050c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000510:	e88c 0003 	stmia.w	ip, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8000514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000516:	f8ad 301c 	strh.w	r3, [sp, #28]
 800051a:	0c1b      	lsrs	r3, r3, #16
 800051c:	f88d 301e 	strb.w	r3, [sp, #30]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8000520:	4b35      	ldr	r3, [pc, #212]	; (80005f8 <wait_for_second_button+0x120>)
 8000522:	aa07      	add	r2, sp, #28
 8000524:	a901      	add	r1, sp, #4
 8000526:	4835      	ldr	r0, [pc, #212]	; (80005fc <wait_for_second_button+0x124>)
 8000528:	f000 fd29 	bl	8000f7e <HAL_CAN_AddTxMessage>
	reset_flags();
 800052c:	f7ff ffc2 	bl	80004b4 <reset_flags>
}
 8000530:	b00a      	add	sp, #40	; 0x28
 8000532:	bd10      	pop	{r4, pc}
	} else if (sw3_pressed && sw5_pressed)
 8000534:	b133      	cbz	r3, 8000544 <wait_for_second_button+0x6c>
 8000536:	4a32      	ldr	r2, [pc, #200]	; (8000600 <wait_for_second_button+0x128>)
 8000538:	7812      	ldrb	r2, [r2, #0]
 800053a:	b11a      	cbz	r2, 8000544 <wait_for_second_button+0x6c>
		button_pressed.button = PUTM_CAN::buttonStates::button1_3;
 800053c:	2306      	movs	r3, #6
 800053e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000542:	e7dd      	b.n	8000500 <wait_for_second_button+0x28>
	} else if (sw3_pressed && sw6_pressed)
 8000544:	b113      	cbz	r3, 800054c <wait_for_second_button+0x74>
 8000546:	4a2f      	ldr	r2, [pc, #188]	; (8000604 <wait_for_second_button+0x12c>)
 8000548:	7812      	ldrb	r2, [r2, #0]
 800054a:	b96a      	cbnz	r2, 8000568 <wait_for_second_button+0x90>
	} else if (sw4_pressed && sw5_pressed)
 800054c:	4a28      	ldr	r2, [pc, #160]	; (80005f0 <wait_for_second_button+0x118>)
 800054e:	7812      	ldrb	r2, [r2, #0]
 8000550:	b112      	cbz	r2, 8000558 <wait_for_second_button+0x80>
 8000552:	492b      	ldr	r1, [pc, #172]	; (8000600 <wait_for_second_button+0x128>)
 8000554:	7809      	ldrb	r1, [r1, #0]
 8000556:	b979      	cbnz	r1, 8000578 <wait_for_second_button+0xa0>
	} else if (sw4_pressed && sw6_pressed)
 8000558:	b1b2      	cbz	r2, 8000588 <wait_for_second_button+0xb0>
 800055a:	492a      	ldr	r1, [pc, #168]	; (8000604 <wait_for_second_button+0x12c>)
 800055c:	7809      	ldrb	r1, [r1, #0]
 800055e:	b199      	cbz	r1, 8000588 <wait_for_second_button+0xb0>
		button_pressed.button = PUTM_CAN::buttonStates::button2_4;
 8000560:	2309      	movs	r3, #9
 8000562:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000566:	e7cb      	b.n	8000500 <wait_for_second_button+0x28>
		button_pressed.button = PUTM_CAN::buttonStates::button1_4;
 8000568:	2307      	movs	r3, #7
 800056a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		HAL_GPIO_TogglePin(ControlLed4_GPIO_Port, ControlLed4_Pin);
 800056e:	2110      	movs	r1, #16
 8000570:	4825      	ldr	r0, [pc, #148]	; (8000608 <wait_for_second_button+0x130>)
 8000572:	f001 f887 	bl	8001684 <HAL_GPIO_TogglePin>
 8000576:	e7c3      	b.n	8000500 <wait_for_second_button+0x28>
		button_pressed.button = PUTM_CAN::buttonStates::button2_3;
 8000578:	2308      	movs	r3, #8
 800057a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	4821      	ldr	r0, [pc, #132]	; (8000608 <wait_for_second_button+0x130>)
 8000582:	f001 f87f 	bl	8001684 <HAL_GPIO_TogglePin>
 8000586:	e7bb      	b.n	8000500 <wait_for_second_button+0x28>
	} else if (sw5_pressed && sw6_pressed)
 8000588:	491d      	ldr	r1, [pc, #116]	; (8000600 <wait_for_second_button+0x128>)
 800058a:	7809      	ldrb	r1, [r1, #0]
 800058c:	b131      	cbz	r1, 800059c <wait_for_second_button+0xc4>
 800058e:	481d      	ldr	r0, [pc, #116]	; (8000604 <wait_for_second_button+0x12c>)
 8000590:	7800      	ldrb	r0, [r0, #0]
 8000592:	b118      	cbz	r0, 800059c <wait_for_second_button+0xc4>
		button_pressed.button = PUTM_CAN::buttonStates::button3_4;
 8000594:	230a      	movs	r3, #10
 8000596:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800059a:	e7b1      	b.n	8000500 <wait_for_second_button+0x28>
	} else if (sw3_pressed) {
 800059c:	b11b      	cbz	r3, 80005a6 <wait_for_second_button+0xce>
		button_pressed.button = PUTM_CAN::buttonStates::button1;
 800059e:	2301      	movs	r3, #1
 80005a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80005a4:	e7ac      	b.n	8000500 <wait_for_second_button+0x28>
	} else if (sw4_pressed) {
 80005a6:	b962      	cbnz	r2, 80005c2 <wait_for_second_button+0xea>
	} else if (sw5_pressed) {
 80005a8:	b999      	cbnz	r1, 80005d2 <wait_for_second_button+0xfa>
	} else if (sw6_pressed) {
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <wait_for_second_button+0x12c>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0a6      	beq.n	8000500 <wait_for_second_button+0x28>
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	4814      	ldr	r0, [pc, #80]	; (8000608 <wait_for_second_button+0x130>)
 80005b6:	f001 f865 	bl	8001684 <HAL_GPIO_TogglePin>
		button_pressed.button = PUTM_CAN::buttonStates::button4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80005c0:	e79e      	b.n	8000500 <wait_for_second_button+0x28>
		button_pressed.button = PUTM_CAN::buttonStates::button2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	480f      	ldr	r0, [pc, #60]	; (8000608 <wait_for_second_button+0x130>)
 80005cc:	f001 f85a 	bl	8001684 <HAL_GPIO_TogglePin>
 80005d0:	e796      	b.n	8000500 <wait_for_second_button+0x28>
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 80005d2:	4c0d      	ldr	r4, [pc, #52]	; (8000608 <wait_for_second_button+0x130>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	4620      	mov	r0, r4
 80005d8:	f001 f854 	bl	8001684 <HAL_GPIO_TogglePin>
		button_pressed.button = PUTM_CAN::buttonStates::button3;
 80005dc:	2303      	movs	r3, #3
 80005de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 80005e2:	2180      	movs	r1, #128	; 0x80
 80005e4:	4620      	mov	r0, r4
 80005e6:	f001 f84d 	bl	8001684 <HAL_GPIO_TogglePin>
 80005ea:	e789      	b.n	8000500 <wait_for_second_button+0x28>
 80005ec:	2000005c 	.word	0x2000005c
 80005f0:	2000005d 	.word	0x2000005d
 80005f4:	08002d48 	.word	0x08002d48
 80005f8:	2000002c 	.word	0x2000002c
 80005fc:	20000030 	.word	0x20000030
 8000600:	2000005e 	.word	0x2000005e
 8000604:	2000005f 	.word	0x2000005f
 8000608:	48000400 	.word	0x48000400

0800060c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800060c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800060e:	6802      	ldr	r2, [r0, #0]
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000612:	429a      	cmp	r2, r3
 8000614:	d000      	beq.n	8000618 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000616:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000618:	f000 fa64 	bl	8000ae4 <HAL_IncTick>
}
 800061c:	e7fb      	b.n	8000616 <HAL_TIM_PeriodElapsedCallback+0xa>
 800061e:	bf00      	nop
 8000620:	40012c00 	.word	0x40012c00

08000624 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000626:	e7fe      	b.n	8000626 <Error_Handler+0x2>

08000628 <_ZL12MX_CAN1_Initv>:
{
 8000628:	b508      	push	{r3, lr}
  hcan1.Instance = CAN1;
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <_ZL12MX_CAN1_Initv+0x3c>)
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <_ZL12MX_CAN1_Initv+0x40>)
 800062e:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 8;
 8000630:	2308      	movs	r3, #8
 8000632:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000638:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800063a:	2300      	movs	r3, #0
 800063c:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800063e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000642:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000644:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000648:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800064a:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800064c:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 800064e:	2201      	movs	r2, #1
 8000650:	7682      	strb	r2, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000652:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000654:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000656:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000658:	f000 fa88 	bl	8000b6c <HAL_CAN_Init>
 800065c:	b900      	cbnz	r0, 8000660 <_ZL12MX_CAN1_Initv+0x38>
}
 800065e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000660:	f7ff ffe0 	bl	8000624 <Error_Handler>
 8000664:	20000030 	.word	0x20000030
 8000668:	40006400 	.word	0x40006400

0800066c <_Z18SystemClock_Configv>:
{
 800066c:	b500      	push	{lr}
 800066e:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000670:	2248      	movs	r2, #72	; 0x48
 8000672:	2100      	movs	r1, #0
 8000674:	a806      	add	r0, sp, #24
 8000676:	f002 fb47 	bl	8002d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067a:	2000      	movs	r0, #0
 800067c:	9001      	str	r0, [sp, #4]
 800067e:	9002      	str	r0, [sp, #8]
 8000680:	9003      	str	r0, [sp, #12]
 8000682:	9004      	str	r0, [sp, #16]
 8000684:	9005      	str	r0, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000686:	f001 f84f 	bl	8001728 <HAL_PWREx_ControlVoltageScaling>
 800068a:	bb20      	cbnz	r0, 80006d6 <_Z18SystemClock_Configv+0x6a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800068c:	2310      	movs	r3, #16
 800068e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000690:	2201      	movs	r2, #1
 8000692:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000698:	2360      	movs	r3, #96	; 0x60
 800069a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006a0:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a2:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006a4:	223c      	movs	r2, #60	; 0x3c
 80006a6:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006aa:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ac:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	a806      	add	r0, sp, #24
 80006b0:	f001 f8de 	bl	8001870 <HAL_RCC_OscConfig>
 80006b4:	b988      	cbnz	r0, 80006da <_Z18SystemClock_Configv+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2303      	movs	r3, #3
 80006bc:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c6:	2105      	movs	r1, #5
 80006c8:	a801      	add	r0, sp, #4
 80006ca:	f001 fd4d 	bl	8002168 <HAL_RCC_ClockConfig>
 80006ce:	b930      	cbnz	r0, 80006de <_Z18SystemClock_Configv+0x72>
}
 80006d0:	b019      	add	sp, #100	; 0x64
 80006d2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006d6:	f7ff ffa5 	bl	8000624 <Error_Handler>
    Error_Handler();
 80006da:	f7ff ffa3 	bl	8000624 <Error_Handler>
    Error_Handler();
 80006de:	f7ff ffa1 	bl	8000624 <Error_Handler>
	...

080006e4 <main>:
{
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80006e8:	f000 f9e3 	bl	8000ab2 <HAL_Init>
  SystemClock_Config();
 80006ec:	f7ff ffbe 	bl	800066c <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80006f0:	f7ff fd84 	bl	80001fc <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 80006f4:	f7ff ff98 	bl	8000628 <_ZL12MX_CAN1_Initv>
  sFilterConfig.FilterBank = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	9305      	str	r3, [sp, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80006fc:	9306      	str	r3, [sp, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006fe:	2201      	movs	r2, #1
 8000700:	9207      	str	r2, [sp, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000702:	9300      	str	r3, [sp, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000704:	9301      	str	r3, [sp, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000706:	9302      	str	r3, [sp, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000708:	9303      	str	r3, [sp, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800070a:	9304      	str	r3, [sp, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800070c:	9208      	str	r2, [sp, #32]
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 800070e:	4669      	mov	r1, sp
 8000710:	481e      	ldr	r0, [pc, #120]	; (800078c <main+0xa8>)
 8000712:	f000 fb26 	bl	8000d62 <HAL_CAN_ConfigFilter>
 8000716:	b108      	cbz	r0, 800071c <main+0x38>
		Error_Handler();
 8000718:	f7ff ff84 	bl	8000624 <Error_Handler>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800071c:	481b      	ldr	r0, [pc, #108]	; (800078c <main+0xa8>)
 800071e:	f000 fbea 	bl	8000ef6 <HAL_CAN_Start>
 8000722:	b108      	cbz	r0, 8000728 <main+0x44>
		Error_Handler();
 8000724:	f7ff ff7e 	bl	8000624 <Error_Handler>
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 8000728:	2103      	movs	r1, #3
 800072a:	4818      	ldr	r0, [pc, #96]	; (800078c <main+0xa8>)
 800072c:	f000 fcf7 	bl	800111e <HAL_CAN_ActivateNotification>
 8000730:	b108      	cbz	r0, 8000736 <main+0x52>
		Error_Handler();
 8000732:	f7ff ff77 	bl	8000624 <Error_Handler>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000736:	2102      	movs	r1, #2
 8000738:	4814      	ldr	r0, [pc, #80]	; (800078c <main+0xa8>)
 800073a:	f000 fcf0 	bl	800111e <HAL_CAN_ActivateNotification>
  uint32_t timer = HAL_GetTick();
 800073e:	f000 f9e5 	bl	8000b0c <HAL_GetTick>
 8000742:	4605      	mov	r5, r0
 8000744:	e007      	b.n	8000756 <main+0x72>
		  wait_for_second_button();
 8000746:	f7ff fec7 	bl	80004d8 <wait_for_second_button>
	  if (timer + 500 < HAL_GetTick())
 800074a:	f505 74fa 	add.w	r4, r5, #500	; 0x1f4
 800074e:	f000 f9dd 	bl	8000b0c <HAL_GetTick>
 8000752:	4284      	cmp	r4, r0
 8000754:	d314      	bcc.n	8000780 <main+0x9c>
	  i++;
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <main+0xac>)
 8000758:	6813      	ldr	r3, [r2, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	6013      	str	r3, [r2, #0]
	  if (sw3_pressed or sw4_pressed or sw5_pressed or sw6_pressed) {
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <main+0xb0>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1ef      	bne.n	8000746 <main+0x62>
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <main+0xb4>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1eb      	bne.n	8000746 <main+0x62>
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <main+0xb8>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1e7      	bne.n	8000746 <main+0x62>
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <main+0xbc>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0e5      	beq.n	800074a <main+0x66>
 800077e:	e7e2      	b.n	8000746 <main+0x62>
		  heartbeat();
 8000780:	f7ff fe72 	bl	8000468 <heartbeat>
		  timer = HAL_GetTick();
 8000784:	f000 f9c2 	bl	8000b0c <HAL_GetTick>
 8000788:	4605      	mov	r5, r0
 800078a:	e7e4      	b.n	8000756 <main+0x72>
 800078c:	20000030 	.word	0x20000030
 8000790:	20000058 	.word	0x20000058
 8000794:	2000005c 	.word	0x2000005c
 8000798:	2000005d 	.word	0x2000005d
 800079c:	2000005e 	.word	0x2000005e
 80007a0:	2000005f 	.word	0x2000005f

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x44>)
 80007ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_MspInit+0x44>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6613      	str	r3, [r2, #96]	; 0x60
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x44>)
 80007b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x44>)
 80007c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x44>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	6593      	str	r3, [r2, #88]	; 0x58
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x44>)
 80007d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a18      	ldr	r2, [pc, #96]	; (800086c <HAL_CAN_MspInit+0x80>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d129      	bne.n	8000862 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <HAL_CAN_MspInit+0x84>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	4a17      	ldr	r2, [pc, #92]	; (8000870 <HAL_CAN_MspInit+0x84>)
 8000814:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000818:	6593      	str	r3, [r2, #88]	; 0x58
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_CAN_MspInit+0x84>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_CAN_MspInit+0x84>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a11      	ldr	r2, [pc, #68]	; (8000870 <HAL_CAN_MspInit+0x84>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_CAN_MspInit+0x84>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800083e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000850:	2309      	movs	r3, #9
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085e:	f000 fd67 	bl	8001330 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000862:	bf00      	nop
 8000864:	3728      	adds	r7, #40	; 0x28
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40006400 	.word	0x40006400
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000884:	2200      	movs	r2, #0
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	2019      	movs	r0, #25
 800088a:	f000 fd27 	bl	80012dc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800088e:	2019      	movs	r0, #25
 8000890:	f000 fd40 	bl	8001314 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <HAL_InitTick+0x9c>)
 8000896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000898:	4a1d      	ldr	r2, [pc, #116]	; (8000910 <HAL_InitTick+0x9c>)
 800089a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800089e:	6613      	str	r3, [r2, #96]	; 0x60
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <HAL_InitTick+0x9c>)
 80008a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ac:	f107 0210 	add.w	r2, r7, #16
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4611      	mov	r1, r2
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 fe3e 	bl	8002538 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008bc:	f001 fe26 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 80008c0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <HAL_InitTick+0xa0>)
 80008c6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ca:	0c9b      	lsrs	r3, r3, #18
 80008cc:	3b01      	subs	r3, #1
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_InitTick+0xa4>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <HAL_InitTick+0xa8>)
 80008d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_InitTick+0xa4>)
 80008d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_InitTick+0xa4>)
 80008e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_InitTick+0xa4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_InitTick+0xa4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <HAL_InitTick+0xa4>)
 80008f2:	f001 ff13 	bl	800271c <HAL_TIM_Base_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d104      	bne.n	8000906 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008fc:	4806      	ldr	r0, [pc, #24]	; (8000918 <HAL_InitTick+0xa4>)
 80008fe:	f001 ff6f 	bl	80027e0 <HAL_TIM_Base_Start_IT>
 8000902:	4603      	mov	r3, r0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3730      	adds	r7, #48	; 0x30
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40021000 	.word	0x40021000
 8000914:	431bde83 	.word	0x431bde83
 8000918:	20000060 	.word	0x20000060
 800091c:	40012c00 	.word	0x40012c00

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler+0x4>

08000932 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <UsageFault_Handler+0x4>

0800093e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800097a:	2010      	movs	r0, #16
 800097c:	f000 fe9c 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000988:	2020      	movs	r0, #32
 800098a:	f000 fe95 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW2_1_Pin);
 800098e:	2040      	movs	r0, #64	; 0x40
 8000990:	f000 fe92 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW2_2_Pin);
 8000994:	2080      	movs	r0, #128	; 0x80
 8000996:	f000 fe8f 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW2_3_Pin);
 800099a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800099e:	f000 fe8b 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW2_4_Pin);
 80009a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009a6:	f000 fe87 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009b6:	f001 ff83 	bl	80028c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000060 	.word	0x20000060

080009c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 80009c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009cc:	f000 fe74 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW4_Pin);
 80009d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80009d4:	f000 fe70 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW1_1_Pin);
 80009d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009dc:	f000 fe6c 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW1_2_Pin);
 80009e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009e4:	f000 fe68 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW1_3_Pin);
 80009e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009ec:	f000 fe64 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW1_4_Pin);
 80009f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009f4:	f000 fe60 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <SystemInit+0x5c>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <SystemInit+0x5c>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <SystemInit+0x60>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <SystemInit+0x60>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <SystemInit+0x60>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <SystemInit+0x60>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <SystemInit+0x60>)
 8000a28:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a2c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <SystemInit+0x60>)
 8000a34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a38:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <SystemInit+0x60>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <SystemInit+0x60>)
 8000a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a44:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <SystemInit+0x60>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00
 8000a5c:	40021000 	.word	0x40021000

08000a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a64:	f7ff ffca 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a6a:	e003      	b.n	8000a74 <LoopCopyDataInit>

08000a6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a72:	3104      	adds	r1, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a74:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a7c:	d3f6      	bcc.n	8000a6c <CopyDataInit>
	ldr	r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a80:	e002      	b.n	8000a88 <LoopFillZerobss>

08000a82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a84:	f842 3b04 	str.w	r3, [r2], #4

08000a88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <LoopForever+0x16>)
	cmp	r2, r3
 8000a8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a8c:	d3f9      	bcc.n	8000a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f002 f917 	bl	8002cc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a92:	f7ff fe27 	bl	80006e4 <main>

08000a96 <LoopForever>:

LoopForever:
    b LoopForever
 8000a96:	e7fe      	b.n	8000a96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a98:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000a9c:	08002db0 	.word	0x08002db0
	ldr	r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000aa4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000aa8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000aac:	200000b0 	.word	0x200000b0

08000ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_2_IRQHandler>

08000ab2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 fc02 	bl	80012c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f7ff fed6 	bl	8000874 <HAL_InitTick>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	71fb      	strb	r3, [r7, #7]
 8000ad2:	e001      	b.n	8000ad8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad4:	f7ff fe66 	bl	80007a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x20>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x24>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <HAL_IncTick+0x24>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000008 	.word	0x20000008
 8000b08:	200000ac 	.word	0x200000ac

08000b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <HAL_GetTick+0x14>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	200000ac 	.word	0x200000ac

08000b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff ffee 	bl	8000b0c <HAL_GetTick>
 8000b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3c:	d005      	beq.n	8000b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_Delay+0x44>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4a:	bf00      	nop
 8000b4c:	f7ff ffde 	bl	8000b0c <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d8f7      	bhi.n	8000b4c <HAL_Delay+0x28>
  {
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008

08000b6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e0ed      	b.n	8000d5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fe2e 	bl	80007ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f042 0201 	orr.w	r2, r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ba0:	f7ff ffb4 	bl	8000b0c <HAL_GetTick>
 8000ba4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ba6:	e012      	b.n	8000bce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ba8:	f7ff ffb0 	bl	8000b0c <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	2b0a      	cmp	r3, #10
 8000bb4:	d90b      	bls.n	8000bce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2205      	movs	r2, #5
 8000bc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e0c5      	b.n	8000d5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d0e5      	beq.n	8000ba8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f022 0202 	bic.w	r2, r2, #2
 8000bea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bec:	f7ff ff8e 	bl	8000b0c <HAL_GetTick>
 8000bf0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bf2:	e012      	b.n	8000c1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bf4:	f7ff ff8a 	bl	8000b0c <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	2b0a      	cmp	r3, #10
 8000c00:	d90b      	bls.n	8000c1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2205      	movs	r2, #5
 8000c12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e09f      	b.n	8000d5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1e5      	bne.n	8000bf4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7e1b      	ldrb	r3, [r3, #24]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d108      	bne.n	8000c42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e007      	b.n	8000c52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7e5b      	ldrb	r3, [r3, #25]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d108      	bne.n	8000c6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e007      	b.n	8000c7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	7e9b      	ldrb	r3, [r3, #26]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d108      	bne.n	8000c96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f042 0220 	orr.w	r2, r2, #32
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	e007      	b.n	8000ca6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f022 0220 	bic.w	r2, r2, #32
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7edb      	ldrb	r3, [r3, #27]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d108      	bne.n	8000cc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0210 	bic.w	r2, r2, #16
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e007      	b.n	8000cd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 0210 	orr.w	r2, r2, #16
 8000cce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7f1b      	ldrb	r3, [r3, #28]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d108      	bne.n	8000cea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0208 	orr.w	r2, r2, #8
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	e007      	b.n	8000cfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 0208 	bic.w	r2, r2, #8
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7f5b      	ldrb	r3, [r3, #29]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d108      	bne.n	8000d14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f042 0204 	orr.w	r2, r2, #4
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e007      	b.n	8000d24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0204 	bic.w	r2, r2, #4
 8000d22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	ea42 0103 	orr.w	r1, r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	1e5a      	subs	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2201      	movs	r2, #1
 8000d54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b087      	sub	sp, #28
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d78:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d7a:	7cfb      	ldrb	r3, [r7, #19]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d003      	beq.n	8000d88 <HAL_CAN_ConfigFilter+0x26>
 8000d80:	7cfb      	ldrb	r3, [r7, #19]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	f040 80aa 	bne.w	8000edc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d8e:	f043 0201 	orr.w	r2, r3, #1
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	f003 031f 	and.w	r3, r3, #31
 8000da0:	2201      	movs	r2, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d123      	bne.n	8000e0a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	401a      	ands	r2, r3
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000de4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3248      	adds	r2, #72	; 0x48
 8000dea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dfe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e00:	6979      	ldr	r1, [r7, #20]
 8000e02:	3348      	adds	r3, #72	; 0x48
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	440b      	add	r3, r1
 8000e08:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d122      	bne.n	8000e58 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e32:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3248      	adds	r2, #72	; 0x48
 8000e38:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e4c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e4e:	6979      	ldr	r1, [r7, #20]
 8000e50:	3348      	adds	r3, #72	; 0x48
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	440b      	add	r3, r1
 8000e56:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d109      	bne.n	8000e74 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000e72:	e007      	b.n	8000e84 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d109      	bne.n	8000ea0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000e9e:	e007      	b.n	8000eb0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d107      	bne.n	8000ec8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ece:	f023 0201 	bic.w	r2, r3, #1
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e006      	b.n	8000eea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
  }
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	371c      	adds	r7, #28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b084      	sub	sp, #16
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d12e      	bne.n	8000f68 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0201 	bic.w	r2, r2, #1
 8000f20:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f22:	f7ff fdf3 	bl	8000b0c <HAL_GetTick>
 8000f26:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f28:	e012      	b.n	8000f50 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f2a:	f7ff fdef 	bl	8000b0c <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b0a      	cmp	r3, #10
 8000f36:	d90b      	bls.n	8000f50 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2205      	movs	r2, #5
 8000f48:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e012      	b.n	8000f76 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1e5      	bne.n	8000f2a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	e006      	b.n	8000f76 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
  }
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b089      	sub	sp, #36	; 0x24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f92:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f9c:	7ffb      	ldrb	r3, [r7, #31]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d003      	beq.n	8000faa <HAL_CAN_AddTxMessage+0x2c>
 8000fa2:	7ffb      	ldrb	r3, [r7, #31]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	f040 80ad 	bne.w	8001104 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10a      	bne.n	8000fca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d105      	bne.n	8000fca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 8095 	beq.w	80010f4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	0e1b      	lsrs	r3, r3, #24
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	409a      	lsls	r2, r3
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10d      	bne.n	8001002 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ff0:	68f9      	ldr	r1, [r7, #12]
 8000ff2:	6809      	ldr	r1, [r1, #0]
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3318      	adds	r3, #24
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	440b      	add	r3, r1
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	e00f      	b.n	8001022 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800100c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001012:	68f9      	ldr	r1, [r7, #12]
 8001014:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001016:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3318      	adds	r3, #24
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	440b      	add	r3, r1
 8001020:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6819      	ldr	r1, [r3, #0]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	691a      	ldr	r2, [r3, #16]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3318      	adds	r3, #24
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	440b      	add	r3, r1
 8001032:	3304      	adds	r3, #4
 8001034:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	7d1b      	ldrb	r3, [r3, #20]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d111      	bne.n	8001062 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3318      	adds	r3, #24
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	4413      	add	r3, r2
 800104a:	3304      	adds	r3, #4
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	6811      	ldr	r1, [r2, #0]
 8001052:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3318      	adds	r3, #24
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	440b      	add	r3, r1
 800105e:	3304      	adds	r3, #4
 8001060:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3307      	adds	r3, #7
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	061a      	lsls	r2, r3, #24
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3306      	adds	r3, #6
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	041b      	lsls	r3, r3, #16
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3305      	adds	r3, #5
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	4313      	orrs	r3, r2
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	3204      	adds	r2, #4
 8001082:	7812      	ldrb	r2, [r2, #0]
 8001084:	4610      	mov	r0, r2
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	6811      	ldr	r1, [r2, #0]
 800108a:	ea43 0200 	orr.w	r2, r3, r0
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	440b      	add	r3, r1
 8001094:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001098:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3303      	adds	r3, #3
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	061a      	lsls	r2, r3, #24
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3302      	adds	r3, #2
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	041b      	lsls	r3, r3, #16
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3301      	adds	r3, #1
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	4313      	orrs	r3, r2
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	4610      	mov	r0, r2
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	6811      	ldr	r1, [r2, #0]
 80010c0:	ea43 0200 	orr.w	r2, r3, r0
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	011b      	lsls	r3, r3, #4
 80010c8:	440b      	add	r3, r1
 80010ca:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80010ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	3318      	adds	r3, #24
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	4413      	add	r3, r2
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	6811      	ldr	r1, [r2, #0]
 80010e2:	f043 0201 	orr.w	r2, r3, #1
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3318      	adds	r3, #24
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	440b      	add	r3, r1
 80010ee:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e00e      	b.n	8001112 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e006      	b.n	8001112 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
  }
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800111e:	b480      	push	{r7}
 8001120:	b085      	sub	sp, #20
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800112e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d002      	beq.n	800113c <HAL_CAN_ActivateNotification+0x1e>
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d109      	bne.n	8001150 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6959      	ldr	r1, [r3, #20]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	430a      	orrs	r2, r1
 800114a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	e006      	b.n	800115e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
  }
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4907      	ldr	r1, [pc, #28]	; (8001208 <__NVIC_EnableIRQ+0x38>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	; (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ff4c 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ee:	f7ff ff61 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 80012f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	6978      	ldr	r0, [r7, #20]
 80012fa:	f7ff ffb1 	bl	8001260 <NVIC_EncodePriority>
 80012fe:	4602      	mov	r2, r0
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff80 	bl	800120c <__NVIC_SetPriority>
}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff54 	bl	80011d0 <__NVIC_EnableIRQ>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133e:	e166      	b.n	800160e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2101      	movs	r1, #1
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8158 	beq.w	8001608 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d005      	beq.n	8001370 <HAL_GPIO_Init+0x40>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d130      	bne.n	80013d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013a6:	2201      	movs	r2, #1
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	f003 0201 	and.w	r2, r3, #1
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d017      	beq.n	800140e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d123      	bne.n	8001462 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	220f      	movs	r2, #15
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	691a      	ldr	r2, [r3, #16]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	6939      	ldr	r1, [r7, #16]
 800145e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0203 	and.w	r2, r3, #3
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 80b2 	beq.w	8001608 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a4:	4b61      	ldr	r3, [pc, #388]	; (800162c <HAL_GPIO_Init+0x2fc>)
 80014a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a8:	4a60      	ldr	r2, [pc, #384]	; (800162c <HAL_GPIO_Init+0x2fc>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6613      	str	r3, [r2, #96]	; 0x60
 80014b0:	4b5e      	ldr	r3, [pc, #376]	; (800162c <HAL_GPIO_Init+0x2fc>)
 80014b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014bc:	4a5c      	ldr	r2, [pc, #368]	; (8001630 <HAL_GPIO_Init+0x300>)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	220f      	movs	r2, #15
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014e6:	d02b      	beq.n	8001540 <HAL_GPIO_Init+0x210>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a52      	ldr	r2, [pc, #328]	; (8001634 <HAL_GPIO_Init+0x304>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d025      	beq.n	800153c <HAL_GPIO_Init+0x20c>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a51      	ldr	r2, [pc, #324]	; (8001638 <HAL_GPIO_Init+0x308>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d01f      	beq.n	8001538 <HAL_GPIO_Init+0x208>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a50      	ldr	r2, [pc, #320]	; (800163c <HAL_GPIO_Init+0x30c>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d019      	beq.n	8001534 <HAL_GPIO_Init+0x204>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a4f      	ldr	r2, [pc, #316]	; (8001640 <HAL_GPIO_Init+0x310>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d013      	beq.n	8001530 <HAL_GPIO_Init+0x200>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a4e      	ldr	r2, [pc, #312]	; (8001644 <HAL_GPIO_Init+0x314>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d00d      	beq.n	800152c <HAL_GPIO_Init+0x1fc>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a4d      	ldr	r2, [pc, #308]	; (8001648 <HAL_GPIO_Init+0x318>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d007      	beq.n	8001528 <HAL_GPIO_Init+0x1f8>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a4c      	ldr	r2, [pc, #304]	; (800164c <HAL_GPIO_Init+0x31c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d101      	bne.n	8001524 <HAL_GPIO_Init+0x1f4>
 8001520:	2307      	movs	r3, #7
 8001522:	e00e      	b.n	8001542 <HAL_GPIO_Init+0x212>
 8001524:	2308      	movs	r3, #8
 8001526:	e00c      	b.n	8001542 <HAL_GPIO_Init+0x212>
 8001528:	2306      	movs	r3, #6
 800152a:	e00a      	b.n	8001542 <HAL_GPIO_Init+0x212>
 800152c:	2305      	movs	r3, #5
 800152e:	e008      	b.n	8001542 <HAL_GPIO_Init+0x212>
 8001530:	2304      	movs	r3, #4
 8001532:	e006      	b.n	8001542 <HAL_GPIO_Init+0x212>
 8001534:	2303      	movs	r3, #3
 8001536:	e004      	b.n	8001542 <HAL_GPIO_Init+0x212>
 8001538:	2302      	movs	r3, #2
 800153a:	e002      	b.n	8001542 <HAL_GPIO_Init+0x212>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <HAL_GPIO_Init+0x212>
 8001540:	2300      	movs	r3, #0
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	f002 0203 	and.w	r2, r2, #3
 8001548:	0092      	lsls	r2, r2, #2
 800154a:	4093      	lsls	r3, r2
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001552:	4937      	ldr	r1, [pc, #220]	; (8001630 <HAL_GPIO_Init+0x300>)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	3302      	adds	r3, #2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001560:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <HAL_GPIO_Init+0x320>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001584:	4a32      	ldr	r2, [pc, #200]	; (8001650 <HAL_GPIO_Init+0x320>)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800158a:	4b31      	ldr	r3, [pc, #196]	; (8001650 <HAL_GPIO_Init+0x320>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ae:	4a28      	ldr	r2, [pc, #160]	; (8001650 <HAL_GPIO_Init+0x320>)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015b4:	4b26      	ldr	r3, [pc, #152]	; (8001650 <HAL_GPIO_Init+0x320>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43db      	mvns	r3, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015d8:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <HAL_GPIO_Init+0x320>)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <HAL_GPIO_Init+0x320>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_GPIO_Init+0x320>)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	fa22 f303 	lsr.w	r3, r2, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	f47f ae91 	bne.w	8001340 <HAL_GPIO_Init+0x10>
  }
}
 800161e:	bf00      	nop
 8001620:	bf00      	nop
 8001622:	371c      	adds	r7, #28
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40021000 	.word	0x40021000
 8001630:	40010000 	.word	0x40010000
 8001634:	48000400 	.word	0x48000400
 8001638:	48000800 	.word	0x48000800
 800163c:	48000c00 	.word	0x48000c00
 8001640:	48001000 	.word	0x48001000
 8001644:	48001400 	.word	0x48001400
 8001648:	48001800 	.word	0x48001800
 800164c:	48001c00 	.word	0x48001c00
 8001650:	40010400 	.word	0x40010400

08001654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
 8001660:	4613      	mov	r3, r2
 8001662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001664:	787b      	ldrb	r3, [r7, #1]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001670:	e002      	b.n	8001678 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4013      	ands	r3, r2
 800169c:	041a      	lsls	r2, r3, #16
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	43d9      	mvns	r1, r3
 80016a2:	887b      	ldrh	r3, [r7, #2]
 80016a4:	400b      	ands	r3, r1
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	619a      	str	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d006      	beq.n	80016dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fe2e 	bl	8000338 <HAL_GPIO_EXTI_Callback>
  }
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40010400 	.word	0x40010400

080016e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ec:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <HAL_PWREx_GetVoltageRange+0x3c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f8:	d102      	bne.n	8001700 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80016fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fe:	e00b      	b.n	8001718 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800170e:	d102      	bne.n	8001716 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001714:	e000      	b.n	8001718 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001716:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40007000 	.word	0x40007000

08001728 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d141      	bne.n	80017ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001736:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d131      	bne.n	80017a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001744:	4b47      	ldr	r3, [pc, #284]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800174a:	4a46      	ldr	r2, [pc, #280]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001750:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001754:	4b43      	ldr	r3, [pc, #268]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800175c:	4a41      	ldr	r2, [pc, #260]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001762:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001764:	4b40      	ldr	r3, [pc, #256]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2232      	movs	r2, #50	; 0x32
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	4a3f      	ldr	r2, [pc, #252]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001770:	fba2 2303 	umull	r2, r3, r2, r3
 8001774:	0c9b      	lsrs	r3, r3, #18
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800177a:	e002      	b.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3b01      	subs	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001782:	4b38      	ldr	r3, [pc, #224]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178e:	d102      	bne.n	8001796 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f2      	bne.n	800177c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001796:	4b33      	ldr	r3, [pc, #204]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a2:	d158      	bne.n	8001856 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e057      	b.n	8001858 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017a8:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ae:	4a2d      	ldr	r2, [pc, #180]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017b8:	e04d      	b.n	8001856 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c0:	d141      	bne.n	8001846 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017c2:	4b28      	ldr	r3, [pc, #160]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ce:	d131      	bne.n	8001834 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017d6:	4a23      	ldr	r2, [pc, #140]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e0:	4b20      	ldr	r3, [pc, #128]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017e8:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2232      	movs	r2, #50	; 0x32
 80017f6:	fb02 f303 	mul.w	r3, r2, r3
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001800:	0c9b      	lsrs	r3, r3, #18
 8001802:	3301      	adds	r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001806:	e002      	b.n	800180e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3b01      	subs	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800181a:	d102      	bne.n	8001822 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f2      	bne.n	8001808 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182e:	d112      	bne.n	8001856 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e011      	b.n	8001858 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001840:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001844:	e007      	b.n	8001856 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001850:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001854:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40007000 	.word	0x40007000
 8001868:	20000000 	.word	0x20000000
 800186c:	431bde83 	.word	0x431bde83

08001870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	f000 bc68 	b.w	8002154 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001884:	4b97      	ldr	r3, [pc, #604]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800188e:	4b95      	ldr	r3, [pc, #596]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80e6 	beq.w	8001a72 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d007      	beq.n	80018bc <HAL_RCC_OscConfig+0x4c>
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	2b0c      	cmp	r3, #12
 80018b0:	f040 808d 	bne.w	80019ce <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	f040 8089 	bne.w	80019ce <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018bc:	4b89      	ldr	r3, [pc, #548]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_RCC_OscConfig+0x66>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f000 bc3f 	b.w	8002154 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018da:	4b82      	ldr	r3, [pc, #520]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d004      	beq.n	80018f0 <HAL_RCC_OscConfig+0x80>
 80018e6:	4b7f      	ldr	r3, [pc, #508]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ee:	e005      	b.n	80018fc <HAL_RCC_OscConfig+0x8c>
 80018f0:	4b7c      	ldr	r3, [pc, #496]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80018f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d224      	bcs.n	800194a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fe49 	bl	800259c <RCC_SetFlashLatencyFromMSIRange>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	f000 bc1f 	b.w	8002154 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001916:	4b73      	ldr	r3, [pc, #460]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a72      	ldr	r2, [pc, #456]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 800191c:	f043 0308 	orr.w	r3, r3, #8
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b70      	ldr	r3, [pc, #448]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	496d      	ldr	r1, [pc, #436]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001930:	4313      	orrs	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001934:	4b6b      	ldr	r3, [pc, #428]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	4968      	ldr	r1, [pc, #416]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
 8001948:	e025      	b.n	8001996 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800194a:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a65      	ldr	r2, [pc, #404]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001950:	f043 0308 	orr.w	r3, r3, #8
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b63      	ldr	r3, [pc, #396]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	4960      	ldr	r1, [pc, #384]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001968:	4b5e      	ldr	r3, [pc, #376]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	495b      	ldr	r1, [pc, #364]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fe08 	bl	800259c <RCC_SetFlashLatencyFromMSIRange>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e3de      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001996:	f000 fd21 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 800199a:	4602      	mov	r2, r0
 800199c:	4b51      	ldr	r3, [pc, #324]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	4950      	ldr	r1, [pc, #320]	; (8001ae8 <HAL_RCC_OscConfig+0x278>)
 80019a8:	5ccb      	ldrb	r3, [r1, r3]
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	4a4e      	ldr	r2, [pc, #312]	; (8001aec <HAL_RCC_OscConfig+0x27c>)
 80019b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019b6:	4b4e      	ldr	r3, [pc, #312]	; (8001af0 <HAL_RCC_OscConfig+0x280>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe ff5a 	bl	8000874 <HAL_InitTick>
 80019c0:	4603      	mov	r3, r0
 80019c2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d052      	beq.n	8001a70 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	e3c2      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d032      	beq.n	8001a3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019d6:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a42      	ldr	r2, [pc, #264]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019e2:	f7ff f893 	bl	8000b0c <HAL_GetTick>
 80019e6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ea:	f7ff f88f 	bl	8000b0c <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e3ab      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019fc:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a35      	ldr	r2, [pc, #212]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	f043 0308 	orr.w	r3, r3, #8
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	4930      	ldr	r1, [pc, #192]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a26:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	492b      	ldr	r1, [pc, #172]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
 8001a3a:	e01a      	b.n	8001a72 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a28      	ldr	r2, [pc, #160]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a48:	f7ff f860 	bl	8000b0c <HAL_GetTick>
 8001a4c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a50:	f7ff f85c 	bl	8000b0c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e378      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x1e0>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d073      	beq.n	8001b66 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_OscConfig+0x220>
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d10e      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d10b      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d063      	beq.n	8001b64 <HAL_RCC_OscConfig+0x2f4>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d15f      	bne.n	8001b64 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e355      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	d106      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x250>
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e025      	b.n	8001b0c <HAL_RCC_OscConfig+0x29c>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac8:	d114      	bne.n	8001af4 <HAL_RCC_OscConfig+0x284>
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a02      	ldr	r2, [pc, #8]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e013      	b.n	8001b0c <HAL_RCC_OscConfig+0x29c>
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	08002d60 	.word	0x08002d60
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000004 	.word	0x20000004
 8001af4:	4b8f      	ldr	r3, [pc, #572]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a8e      	ldr	r2, [pc, #568]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b8c      	ldr	r3, [pc, #560]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a8b      	ldr	r2, [pc, #556]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7fe fffa 	bl	8000b0c <HAL_GetTick>
 8001b18:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b1c:	f7fe fff6 	bl	8000b0c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	; 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e312      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b2e:	4b81      	ldr	r3, [pc, #516]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x2ac>
 8001b3a:	e014      	b.n	8001b66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7fe ffe6 	bl	8000b0c <HAL_GetTick>
 8001b40:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7fe ffe2 	bl	8000b0c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e2fe      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b56:	4b77      	ldr	r3, [pc, #476]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x2d4>
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d060      	beq.n	8001c34 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_OscConfig+0x314>
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	2b0c      	cmp	r3, #12
 8001b7c:	d119      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d116      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b84:	4b6b      	ldr	r3, [pc, #428]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_OscConfig+0x32c>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e2db      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9c:	4b65      	ldr	r3, [pc, #404]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	061b      	lsls	r3, r3, #24
 8001baa:	4962      	ldr	r1, [pc, #392]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb0:	e040      	b.n	8001c34 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d023      	beq.n	8001c02 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bba:	4b5e      	ldr	r3, [pc, #376]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a5d      	ldr	r2, [pc, #372]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7fe ffa1 	bl	8000b0c <HAL_GetTick>
 8001bca:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bce:	f7fe ff9d 	bl	8000b0c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e2b9      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be0:	4b54      	ldr	r3, [pc, #336]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bec:	4b51      	ldr	r3, [pc, #324]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	494e      	ldr	r1, [pc, #312]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
 8001c00:	e018      	b.n	8001c34 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c02:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a4b      	ldr	r2, [pc, #300]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0e:	f7fe ff7d 	bl	8000b0c <HAL_GetTick>
 8001c12:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c16:	f7fe ff79 	bl	8000b0c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e295      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c28:	4b42      	ldr	r3, [pc, #264]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f0      	bne.n	8001c16 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 8082 	beq.w	8001d46 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d05f      	beq.n	8001d0a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001c4a:	4b3a      	ldr	r3, [pc, #232]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c50:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699a      	ldr	r2, [r3, #24]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d037      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e26d      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01b      	beq.n	8001cba <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001c82:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c88:	4a2a      	ldr	r2, [pc, #168]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c92:	f7fe ff3b 	bl	8000b0c <HAL_GetTick>
 8001c96:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9a:	f7fe ff37 	bl	8000b0c <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b11      	cmp	r3, #17
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e253      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1ef      	bne.n	8001c9a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc0:	f023 0210 	bic.w	r2, r3, #16
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	491a      	ldr	r1, [pc, #104]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd6:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7fe ff14 	bl	8000b0c <HAL_GetTick>
 8001ce4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce8:	f7fe ff10 	bl	8000b0c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b11      	cmp	r3, #17
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e22c      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0ef      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x478>
 8001d08:	e01d      	b.n	8001d46 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d10:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	f023 0301 	bic.w	r3, r3, #1
 8001d16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1a:	f7fe fef7 	bl	8000b0c <HAL_GetTick>
 8001d1e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d20:	e00a      	b.n	8001d38 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d22:	f7fe fef3 	bl	8000b0c <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b11      	cmp	r3, #17
 8001d2e:	d903      	bls.n	8001d38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e20f      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
 8001d34:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d38:	4b83      	ldr	r3, [pc, #524]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1ed      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 80bd 	beq.w	8001ece <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d5a:	4b7b      	ldr	r3, [pc, #492]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10e      	bne.n	8001d84 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	4b78      	ldr	r3, [pc, #480]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	4a77      	ldr	r2, [pc, #476]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	6593      	str	r3, [r2, #88]	; 0x58
 8001d72:	4b75      	ldr	r3, [pc, #468]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d84:	4b71      	ldr	r3, [pc, #452]	; (8001f4c <HAL_RCC_OscConfig+0x6dc>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d118      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d90:	4b6e      	ldr	r3, [pc, #440]	; (8001f4c <HAL_RCC_OscConfig+0x6dc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a6d      	ldr	r2, [pc, #436]	; (8001f4c <HAL_RCC_OscConfig+0x6dc>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9c:	f7fe feb6 	bl	8000b0c <HAL_GetTick>
 8001da0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da4:	f7fe feb2 	bl	8000b0c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1ce      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db6:	4b65      	ldr	r3, [pc, #404]	; (8001f4c <HAL_RCC_OscConfig+0x6dc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d02c      	beq.n	8001e28 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001dce:	4b5e      	ldr	r3, [pc, #376]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de0:	4959      	ldr	r1, [pc, #356]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d010      	beq.n	8001e16 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001df4:	4b54      	ldr	r3, [pc, #336]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	4a53      	ldr	r2, [pc, #332]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e04:	4b50      	ldr	r3, [pc, #320]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0a:	4a4f      	ldr	r2, [pc, #316]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e14:	e018      	b.n	8001e48 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e16:	4b4c      	ldr	r3, [pc, #304]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1c:	4a4a      	ldr	r2, [pc, #296]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e26:	e00f      	b.n	8001e48 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e28:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2e:	4a46      	ldr	r2, [pc, #280]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e38:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	4a42      	ldr	r2, [pc, #264]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001e40:	f023 0304 	bic.w	r3, r3, #4
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d016      	beq.n	8001e7e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7fe fe5c 	bl	8000b0c <HAL_GetTick>
 8001e54:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e58:	f7fe fe58 	bl	8000b0c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e172      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6e:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ed      	beq.n	8001e58 <HAL_RCC_OscConfig+0x5e8>
 8001e7c:	e01d      	b.n	8001eba <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7fe fe45 	bl	8000b0c <HAL_GetTick>
 8001e82:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7fe fe41 	bl	8000b0c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e15b      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1ed      	bne.n	8001e86 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001eaa:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	4a25      	ldr	r2, [pc, #148]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d105      	bne.n	8001ece <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec2:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	4a20      	ldr	r2, [pc, #128]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d041      	beq.n	8001f5e <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01c      	beq.n	8001f1c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ee8:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef2:	f7fe fe0b 	bl	8000b0c <HAL_GetTick>
 8001ef6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001efa:	f7fe fe07 	bl	8000b0c <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e123      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0ef      	beq.n	8001efa <HAL_RCC_OscConfig+0x68a>
 8001f1a:	e020      	b.n	8001f5e <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f22:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <HAL_RCC_OscConfig+0x6d8>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2c:	f7fe fdee 	bl	8000b0c <HAL_GetTick>
 8001f30:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f32:	e00d      	b.n	8001f50 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f34:	f7fe fdea 	bl	8000b0c <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d906      	bls.n	8001f50 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e106      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f50:	4b82      	ldr	r3, [pc, #520]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 8001f52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1ea      	bne.n	8001f34 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80f5 	beq.w	8002152 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	f040 80cb 	bne.w	8002108 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f72:	4b7a      	ldr	r3, [pc, #488]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0203 	and.w	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d12c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f90:	3b01      	subs	r3, #1
 8001f92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d123      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d113      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d109      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	085b      	lsrs	r3, r3, #1
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d06d      	beq.n	80020bc <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d068      	beq.n	80020b8 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d105      	bne.n	8001ffe <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ff2:	4b5a      	ldr	r3, [pc, #360]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0a8      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002002:	4b56      	ldr	r3, [pc, #344]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a55      	ldr	r2, [pc, #340]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 8002008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800200c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800200e:	f7fe fd7d 	bl	8000b0c <HAL_GetTick>
 8002012:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002016:	f7fe fd79 	bl	8000b0c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e095      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002028:	4b4c      	ldr	r3, [pc, #304]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f0      	bne.n	8002016 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002034:	4b49      	ldr	r3, [pc, #292]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	4b49      	ldr	r3, [pc, #292]	; (8002160 <HAL_RCC_OscConfig+0x8f0>)
 800203a:	4013      	ands	r3, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002044:	3a01      	subs	r2, #1
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	4311      	orrs	r1, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800204e:	0212      	lsls	r2, r2, #8
 8002050:	4311      	orrs	r1, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002056:	0852      	lsrs	r2, r2, #1
 8002058:	3a01      	subs	r2, #1
 800205a:	0552      	lsls	r2, r2, #21
 800205c:	4311      	orrs	r1, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002062:	0852      	lsrs	r2, r2, #1
 8002064:	3a01      	subs	r2, #1
 8002066:	0652      	lsls	r2, r2, #25
 8002068:	4311      	orrs	r1, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800206e:	06d2      	lsls	r2, r2, #27
 8002070:	430a      	orrs	r2, r1
 8002072:	493a      	ldr	r1, [pc, #232]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 8002074:	4313      	orrs	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002078:	4b38      	ldr	r3, [pc, #224]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a37      	ldr	r2, [pc, #220]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 800207e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002082:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002084:	4b35      	ldr	r3, [pc, #212]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4a34      	ldr	r2, [pc, #208]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 800208a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800208e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002090:	f7fe fd3c 	bl	8000b0c <HAL_GetTick>
 8002094:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe fd38 	bl	8000b0c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e054      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020aa:	4b2c      	ldr	r3, [pc, #176]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020b6:	e04c      	b.n	8002152 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e04b      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d144      	bne.n	8002152 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a23      	ldr	r2, [pc, #140]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 80020ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020d4:	4b21      	ldr	r3, [pc, #132]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a20      	ldr	r2, [pc, #128]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 80020da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020e0:	f7fe fd14 	bl	8000b0c <HAL_GetTick>
 80020e4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe fd10 	bl	8000b0c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e02c      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x878>
 8002106:	e024      	b.n	8002152 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	2b0c      	cmp	r3, #12
 800210c:	d01f      	beq.n	800214e <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 8002114:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7fe fcf7 	bl	8000b0c <HAL_GetTick>
 800211e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7fe fcf3 	bl	8000b0c <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e00f      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	4905      	ldr	r1, [pc, #20]	; (800215c <HAL_RCC_OscConfig+0x8ec>)
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <HAL_RCC_OscConfig+0x8f4>)
 8002148:	4013      	ands	r3, r2
 800214a:	60cb      	str	r3, [r1, #12]
 800214c:	e001      	b.n	8002152 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3728      	adds	r7, #40	; 0x28
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	019d800c 	.word	0x019d800c
 8002164:	feeefffc 	.word	0xfeeefffc

08002168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e11d      	b.n	80023bc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b90      	ldr	r3, [pc, #576]	; (80023c4 <HAL_RCC_ClockConfig+0x25c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d910      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b8d      	ldr	r3, [pc, #564]	; (80023c4 <HAL_RCC_ClockConfig+0x25c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 020f 	bic.w	r2, r3, #15
 8002196:	498b      	ldr	r1, [pc, #556]	; (80023c4 <HAL_RCC_ClockConfig+0x25c>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b89      	ldr	r3, [pc, #548]	; (80023c4 <HAL_RCC_ClockConfig+0x25c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e105      	b.n	80023bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d010      	beq.n	80021de <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	4b81      	ldr	r3, [pc, #516]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d908      	bls.n	80021de <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021cc:	4b7e      	ldr	r3, [pc, #504]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	497b      	ldr	r1, [pc, #492]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d079      	beq.n	80022de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d11e      	bne.n	8002230 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	4b75      	ldr	r3, [pc, #468]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0dc      	b.n	80023bc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002202:	f000 fa25 	bl	8002650 <RCC_GetSysClockFreqFromPLLSource>
 8002206:	4603      	mov	r3, r0
 8002208:	4a70      	ldr	r2, [pc, #448]	; (80023cc <HAL_RCC_ClockConfig+0x264>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d946      	bls.n	800229c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800220e:	4b6e      	ldr	r3, [pc, #440]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d140      	bne.n	800229c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800221a:	4b6b      	ldr	r3, [pc, #428]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002222:	4a69      	ldr	r2, [pc, #420]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 8002224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002228:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e035      	b.n	800229c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d107      	bne.n	8002248 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002238:	4b63      	ldr	r3, [pc, #396]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d115      	bne.n	8002270 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0b9      	b.n	80023bc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d107      	bne.n	8002260 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002250:	4b5d      	ldr	r3, [pc, #372]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0ad      	b.n	80023bc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002260:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0a5      	b.n	80023bc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002270:	f000 f8b4 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8002274:	4603      	mov	r3, r0
 8002276:	4a55      	ldr	r2, [pc, #340]	; (80023cc <HAL_RCC_ClockConfig+0x264>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d90f      	bls.n	800229c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800227c:	4b52      	ldr	r3, [pc, #328]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002288:	4b4f      	ldr	r3, [pc, #316]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002290:	4a4d      	ldr	r2, [pc, #308]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 8002292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002296:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800229c:	4b4a      	ldr	r3, [pc, #296]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 0203 	bic.w	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4947      	ldr	r1, [pc, #284]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ae:	f7fe fc2d 	bl	8000b0c <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b6:	f7fe fc29 	bl	8000b0c <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e077      	b.n	80023bc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022cc:	4b3e      	ldr	r3, [pc, #248]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 020c 	and.w	r2, r3, #12
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	429a      	cmp	r2, r3
 80022dc:	d1eb      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b80      	cmp	r3, #128	; 0x80
 80022e2:	d105      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022e4:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4a37      	ldr	r2, [pc, #220]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 80022ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022ee:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d010      	beq.n	800231e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002308:	429a      	cmp	r2, r3
 800230a:	d208      	bcs.n	800231e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230c:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	492b      	ldr	r1, [pc, #172]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <HAL_RCC_ClockConfig+0x25c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d210      	bcs.n	800234e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <HAL_RCC_ClockConfig+0x25c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f023 020f 	bic.w	r2, r3, #15
 8002334:	4923      	ldr	r1, [pc, #140]	; (80023c4 <HAL_RCC_ClockConfig+0x25c>)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <HAL_RCC_ClockConfig+0x25c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e036      	b.n	80023bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800235a:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4918      	ldr	r1, [pc, #96]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4910      	ldr	r1, [pc, #64]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 8002388:	4313      	orrs	r3, r2
 800238a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800238c:	f000 f826 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_RCC_ClockConfig+0x260>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	490c      	ldr	r1, [pc, #48]	; (80023d0 <HAL_RCC_ClockConfig+0x268>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <HAL_RCC_ClockConfig+0x26c>)
 80023aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_RCC_ClockConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe fa5f 	bl	8000874 <HAL_InitTick>
 80023b6:	4603      	mov	r3, r0
 80023b8:	73fb      	strb	r3, [r7, #15]

  return status;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40021000 	.word	0x40021000
 80023cc:	04c4b400 	.word	0x04c4b400
 80023d0:	08002d60 	.word	0x08002d60
 80023d4:	20000000 	.word	0x20000000
 80023d8:	20000004 	.word	0x20000004

080023dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ea:	4b3e      	ldr	r3, [pc, #248]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f4:	4b3b      	ldr	r3, [pc, #236]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x34>
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d121      	bne.n	800244e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d11e      	bne.n	800244e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002410:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d107      	bne.n	800242c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800241c:	4b31      	ldr	r3, [pc, #196]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800241e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	e005      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800242c:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002438:	4a2b      	ldr	r2, [pc, #172]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002440:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10d      	bne.n	8002464 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d102      	bne.n	800245a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002454:	4b25      	ldr	r3, [pc, #148]	; (80024ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	e004      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b08      	cmp	r3, #8
 800245e:	d101      	bne.n	8002464 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002460:	4b23      	ldr	r3, [pc, #140]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002462:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	2b0c      	cmp	r3, #12
 8002468:	d134      	bne.n	80024d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800246a:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d003      	beq.n	8002482 <HAL_RCC_GetSysClockFreq+0xa6>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d003      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0xac>
 8002480:	e005      	b.n	800248e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002484:	617b      	str	r3, [r7, #20]
      break;
 8002486:	e005      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800248a:	617b      	str	r3, [r7, #20]
      break;
 800248c:	e002      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	617b      	str	r3, [r7, #20]
      break;
 8002492:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3301      	adds	r3, #1
 80024a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	fb03 f202 	mul.w	r2, r3, r2
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	0e5b      	lsrs	r3, r3, #25
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	3301      	adds	r3, #1
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024d4:	69bb      	ldr	r3, [r7, #24]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3724      	adds	r7, #36	; 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08002d78 	.word	0x08002d78
 80024ec:	00f42400 	.word	0x00f42400
 80024f0:	007a1200 	.word	0x007a1200

080024f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_RCC_GetHCLKFreq+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000000 	.word	0x20000000

0800250c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002510:	f7ff fff0 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0adb      	lsrs	r3, r3, #11
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4904      	ldr	r1, [pc, #16]	; (8002534 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	08002d70 	.word	0x08002d70

08002538 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	220f      	movs	r2, #15
 8002546:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002548:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCC_GetClockConfig+0x5c>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0203 	and.w	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_RCC_GetClockConfig+0x5c>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_RCC_GetClockConfig+0x5c>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_RCC_GetClockConfig+0x5c>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800257a:	4b07      	ldr	r3, [pc, #28]	; (8002598 <HAL_RCC_GetClockConfig+0x60>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 020f 	and.w	r2, r3, #15
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	601a      	str	r2, [r3, #0]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
 8002598:	40022000 	.word	0x40022000

0800259c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025a8:	4b27      	ldr	r3, [pc, #156]	; (8002648 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025b4:	f7ff f898 	bl	80016e8 <HAL_PWREx_GetVoltageRange>
 80025b8:	6178      	str	r0, [r7, #20]
 80025ba:	e014      	b.n	80025e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025bc:	4b22      	ldr	r3, [pc, #136]	; (8002648 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	4a21      	ldr	r2, [pc, #132]	; (8002648 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c6:	6593      	str	r3, [r2, #88]	; 0x58
 80025c8:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025d4:	f7ff f888 	bl	80016e8 <HAL_PWREx_GetVoltageRange>
 80025d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025da:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	4a1a      	ldr	r2, [pc, #104]	; (8002648 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ec:	d10b      	bne.n	8002606 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b80      	cmp	r3, #128	; 0x80
 80025f2:	d913      	bls.n	800261c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2ba0      	cmp	r3, #160	; 0xa0
 80025f8:	d902      	bls.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025fa:	2302      	movs	r3, #2
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	e00d      	b.n	800261c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002600:	2301      	movs	r3, #1
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	e00a      	b.n	800261c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b7f      	cmp	r3, #127	; 0x7f
 800260a:	d902      	bls.n	8002612 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800260c:	2302      	movs	r3, #2
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	e004      	b.n	800261c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b70      	cmp	r3, #112	; 0x70
 8002616:	d101      	bne.n	800261c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002618:	2301      	movs	r3, #1
 800261a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 020f 	bic.w	r2, r3, #15
 8002624:	4909      	ldr	r1, [pc, #36]	; (800264c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800262c:	4b07      	ldr	r3, [pc, #28]	; (800264c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	40022000 	.word	0x40022000

08002650 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002656:	4b2d      	ldr	r3, [pc, #180]	; (800270c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d00b      	beq.n	800267e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b03      	cmp	r3, #3
 800266a:	d825      	bhi.n	80026b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d008      	beq.n	8002684 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d11f      	bne.n	80026b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002678:	4b25      	ldr	r3, [pc, #148]	; (8002710 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800267a:	613b      	str	r3, [r7, #16]
    break;
 800267c:	e01f      	b.n	80026be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800267e:	4b25      	ldr	r3, [pc, #148]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002680:	613b      	str	r3, [r7, #16]
    break;
 8002682:	e01c      	b.n	80026be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002684:	4b21      	ldr	r3, [pc, #132]	; (800270c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d107      	bne.n	80026a0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002690:	4b1e      	ldr	r3, [pc, #120]	; (800270c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	e005      	b.n	80026ac <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026a0:	4b1a      	ldr	r3, [pc, #104]	; (800270c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80026ac:	4a1a      	ldr	r2, [pc, #104]	; (8002718 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b4:	613b      	str	r3, [r7, #16]
    break;
 80026b6:	e002      	b.n	80026be <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]
    break;
 80026bc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	3301      	adds	r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	fb03 f202 	mul.w	r2, r3, r2
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	0e5b      	lsrs	r3, r3, #25
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	3301      	adds	r3, #1
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80026fe:	683b      	ldr	r3, [r7, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	371c      	adds	r7, #28
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40021000 	.word	0x40021000
 8002710:	00f42400 	.word	0x00f42400
 8002714:	007a1200 	.word	0x007a1200
 8002718:	08002d78 	.word	0x08002d78

0800271c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e049      	b.n	80027c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f841 	bl	80027ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	4619      	mov	r1, r3
 800275a:	4610      	mov	r0, r2
 800275c:	f000 f9f8 	bl	8002b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d001      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e04f      	b.n	8002898 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a23      	ldr	r2, [pc, #140]	; (80028a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01d      	beq.n	8002856 <HAL_TIM_Base_Start_IT+0x76>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002822:	d018      	beq.n	8002856 <HAL_TIM_Base_Start_IT+0x76>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_TIM_Base_Start_IT+0x76>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_TIM_Base_Start_IT+0xcc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00e      	beq.n	8002856 <HAL_TIM_Base_Start_IT+0x76>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1c      	ldr	r2, [pc, #112]	; (80028b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d009      	beq.n	8002856 <HAL_TIM_Base_Start_IT+0x76>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d004      	beq.n	8002856 <HAL_TIM_Base_Start_IT+0x76>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d115      	bne.n	8002882 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <HAL_TIM_Base_Start_IT+0xdc>)
 800285e:	4013      	ands	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b06      	cmp	r3, #6
 8002866:	d015      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0xb4>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286e:	d011      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002880:	e008      	b.n	8002894 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e000      	b.n	8002896 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002894:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	40012c00 	.word	0x40012c00
 80028a8:	40000400 	.word	0x40000400
 80028ac:	40000800 	.word	0x40000800
 80028b0:	40000c00 	.word	0x40000c00
 80028b4:	40013400 	.word	0x40013400
 80028b8:	40014000 	.word	0x40014000
 80028bc:	00010007 	.word	0x00010007

080028c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d122      	bne.n	800291c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d11b      	bne.n	800291c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0202 	mvn.w	r2, #2
 80028ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f905 	bl	8002b12 <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f8f7 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f908 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b04      	cmp	r3, #4
 8002928:	d122      	bne.n	8002970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b04      	cmp	r3, #4
 8002936:	d11b      	bne.n	8002970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0204 	mvn.w	r2, #4
 8002940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f8db 	bl	8002b12 <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f8cd 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f8de 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b08      	cmp	r3, #8
 800297c:	d122      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b08      	cmp	r3, #8
 800298a:	d11b      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0208 	mvn.w	r2, #8
 8002994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f8b1 	bl	8002b12 <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8a3 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f8b4 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d122      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0210 	mvn.w	r2, #16
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2208      	movs	r2, #8
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f887 	bl	8002b12 <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f879 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f88a 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d10e      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d107      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0201 	mvn.w	r2, #1
 8002a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fd fde4 	bl	800060c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	2b80      	cmp	r3, #128	; 0x80
 8002a50:	d10e      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d107      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f914 	bl	8002c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7e:	d10e      	bne.n	8002a9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b80      	cmp	r3, #128	; 0x80
 8002a8c:	d107      	bne.n	8002a9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f907 	bl	8002cac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d10e      	bne.n	8002aca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d107      	bne.n	8002aca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f838 	bl	8002b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d10e      	bne.n	8002af6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d107      	bne.n	8002af6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f06f 0220 	mvn.w	r2, #32
 8002aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f8c7 	bl	8002c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a40      	ldr	r2, [pc, #256]	; (8002c64 <TIM_Base_SetConfig+0x114>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d013      	beq.n	8002b90 <TIM_Base_SetConfig+0x40>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6e:	d00f      	beq.n	8002b90 <TIM_Base_SetConfig+0x40>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a3d      	ldr	r2, [pc, #244]	; (8002c68 <TIM_Base_SetConfig+0x118>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00b      	beq.n	8002b90 <TIM_Base_SetConfig+0x40>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a3c      	ldr	r2, [pc, #240]	; (8002c6c <TIM_Base_SetConfig+0x11c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d007      	beq.n	8002b90 <TIM_Base_SetConfig+0x40>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a3b      	ldr	r2, [pc, #236]	; (8002c70 <TIM_Base_SetConfig+0x120>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d003      	beq.n	8002b90 <TIM_Base_SetConfig+0x40>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a3a      	ldr	r2, [pc, #232]	; (8002c74 <TIM_Base_SetConfig+0x124>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d108      	bne.n	8002ba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a2f      	ldr	r2, [pc, #188]	; (8002c64 <TIM_Base_SetConfig+0x114>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d01f      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb0:	d01b      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a2c      	ldr	r2, [pc, #176]	; (8002c68 <TIM_Base_SetConfig+0x118>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d017      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a2b      	ldr	r2, [pc, #172]	; (8002c6c <TIM_Base_SetConfig+0x11c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a2a      	ldr	r2, [pc, #168]	; (8002c70 <TIM_Base_SetConfig+0x120>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00f      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a29      	ldr	r2, [pc, #164]	; (8002c74 <TIM_Base_SetConfig+0x124>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00b      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a28      	ldr	r2, [pc, #160]	; (8002c78 <TIM_Base_SetConfig+0x128>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a27      	ldr	r2, [pc, #156]	; (8002c7c <TIM_Base_SetConfig+0x12c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d003      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <TIM_Base_SetConfig+0x130>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d108      	bne.n	8002bfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <TIM_Base_SetConfig+0x114>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00f      	beq.n	8002c48 <TIM_Base_SetConfig+0xf8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a12      	ldr	r2, [pc, #72]	; (8002c74 <TIM_Base_SetConfig+0x124>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00b      	beq.n	8002c48 <TIM_Base_SetConfig+0xf8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a11      	ldr	r2, [pc, #68]	; (8002c78 <TIM_Base_SetConfig+0x128>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d007      	beq.n	8002c48 <TIM_Base_SetConfig+0xf8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a10      	ldr	r2, [pc, #64]	; (8002c7c <TIM_Base_SetConfig+0x12c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d003      	beq.n	8002c48 <TIM_Base_SetConfig+0xf8>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <TIM_Base_SetConfig+0x130>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d103      	bne.n	8002c50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	615a      	str	r2, [r3, #20]
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800
 8002c70:	40000c00 	.word	0x40000c00
 8002c74:	40013400 	.word	0x40013400
 8002c78:	40014000 	.word	0x40014000
 8002c7c:	40014400 	.word	0x40014400
 8002c80:	40014800 	.word	0x40014800

08002c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <__libc_init_array>:
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	4d0d      	ldr	r5, [pc, #52]	; (8002cf8 <__libc_init_array+0x38>)
 8002cc4:	4c0d      	ldr	r4, [pc, #52]	; (8002cfc <__libc_init_array+0x3c>)
 8002cc6:	1b64      	subs	r4, r4, r5
 8002cc8:	10a4      	asrs	r4, r4, #2
 8002cca:	2600      	movs	r6, #0
 8002ccc:	42a6      	cmp	r6, r4
 8002cce:	d109      	bne.n	8002ce4 <__libc_init_array+0x24>
 8002cd0:	4d0b      	ldr	r5, [pc, #44]	; (8002d00 <__libc_init_array+0x40>)
 8002cd2:	4c0c      	ldr	r4, [pc, #48]	; (8002d04 <__libc_init_array+0x44>)
 8002cd4:	f000 f820 	bl	8002d18 <_init>
 8002cd8:	1b64      	subs	r4, r4, r5
 8002cda:	10a4      	asrs	r4, r4, #2
 8002cdc:	2600      	movs	r6, #0
 8002cde:	42a6      	cmp	r6, r4
 8002ce0:	d105      	bne.n	8002cee <__libc_init_array+0x2e>
 8002ce2:	bd70      	pop	{r4, r5, r6, pc}
 8002ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce8:	4798      	blx	r3
 8002cea:	3601      	adds	r6, #1
 8002cec:	e7ee      	b.n	8002ccc <__libc_init_array+0xc>
 8002cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf2:	4798      	blx	r3
 8002cf4:	3601      	adds	r6, #1
 8002cf6:	e7f2      	b.n	8002cde <__libc_init_array+0x1e>
 8002cf8:	08002da8 	.word	0x08002da8
 8002cfc:	08002da8 	.word	0x08002da8
 8002d00:	08002da8 	.word	0x08002da8
 8002d04:	08002dac 	.word	0x08002dac

08002d08 <memset>:
 8002d08:	4402      	add	r2, r0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d100      	bne.n	8002d12 <memset+0xa>
 8002d10:	4770      	bx	lr
 8002d12:	f803 1b01 	strb.w	r1, [r3], #1
 8002d16:	e7f9      	b.n	8002d0c <memset+0x4>

08002d18 <_init>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	bf00      	nop
 8002d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1e:	bc08      	pop	{r3}
 8002d20:	469e      	mov	lr, r3
 8002d22:	4770      	bx	lr

08002d24 <_fini>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	bf00      	nop
 8002d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2a:	bc08      	pop	{r3}
 8002d2c:	469e      	mov	lr, r3
 8002d2e:	4770      	bx	lr
