
kiera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f1c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005120  08005120  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005120  08005120  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005120  08005120  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000000c  08005134  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08005134  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015aa0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000275f  00000000  00000000  00035adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00038240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  000394e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d1a7  00000000  00000000  0003a678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a86  00000000  00000000  0006781f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012172a  00000000  00000000  0007b2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019c9cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f6c  00000000  00000000  0019ca24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080050c0 	.word	0x080050c0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080050c0 	.word	0x080050c0

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 fea1 	bl	8000f46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f824 	bl	8000250 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000208:	f000 f868 	bl	80002dc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020c:	f000 f9e2 	bl	80005d4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000210:	f000 f96e 	bl	80004f0 <MX_CAN1_Init>
  MX_DMA_Init();
 8000214:	f000 f9a0 	bl	8000558 <MX_DMA_Init>
  MX_ADC1_Init();
 8000218:	f000 f88c 	bl	8000334 <MX_ADC1_Init>
  MX_ADC2_Init();
 800021c:	f000 f902 	bl	8000424 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  //  HAL_ADC_Start_IT(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)left_adc_reading, 10);
 8000220:	220a      	movs	r2, #10
 8000222:	4908      	ldr	r1, [pc, #32]	; (8000244 <main+0x48>)
 8000224:	4808      	ldr	r0, [pc, #32]	; (8000248 <main+0x4c>)
 8000226:	f001 fa25 	bl	8001674 <HAL_ADC_Start_DMA>

  //  HAL_ADC_Start_IT(&hadc2);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)right_adc_reading, 10);
 800022a:	220a      	movs	r2, #10
 800022c:	4907      	ldr	r1, [pc, #28]	; (800024c <main+0x50>)
 800022e:	4806      	ldr	r0, [pc, #24]	; (8000248 <main+0x4c>)
 8000230:	f001 fa20 	bl	8001674 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  toggle diode
	  choose_left_scroll_state();
 8000234:	f000 fb3e 	bl	80008b4 <choose_left_scroll_state>
	  wait_for_second_button();
 8000238:	f000 fac0 	bl	80007bc <wait_for_second_button>
	  reset_flags();
 800023c:	f000 fb1e 	bl	800087c <reset_flags>
	  choose_left_scroll_state();
 8000240:	e7f8      	b.n	8000234 <main+0x38>
 8000242:	bf00      	nop
 8000244:	20000034 	.word	0x20000034
 8000248:	200000b4 	.word	0x200000b4
 800024c:	20000180 	.word	0x20000180

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b098      	sub	sp, #96	; 0x60
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2248      	movs	r2, #72	; 0x48
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f004 ff26 	bl	80050b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000272:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000276:	f002 fed7 	bl	8003028 <HAL_PWREx_ControlVoltageScaling>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000280:	f000 fbf4 	bl	8000a6c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000284:	2310      	movs	r3, #16
 8000286:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000290:	2360      	movs	r3, #96	; 0x60
 8000292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000294:	2300      	movs	r3, #0
 8000296:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	f107 0318 	add.w	r3, r7, #24
 800029c:	4618      	mov	r0, r3
 800029e:	f002 ff67 	bl	8003170 <HAL_RCC_OscConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002a8:	f000 fbe0 	bl	8000a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	230f      	movs	r3, #15
 80002ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2100      	movs	r1, #0
 80002c4:	4618      	mov	r0, r3
 80002c6:	f003 fbdb 	bl	8003a80 <HAL_RCC_ClockConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002d0:	f000 fbcc 	bl	8000a6c <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3760      	adds	r7, #96	; 0x60
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b0a6      	sub	sp, #152	; 0x98
 80002e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e2:	463b      	mov	r3, r7
 80002e4:	2298      	movs	r2, #152	; 0x98
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f004 fee1 	bl	80050b0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002f2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80002f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80002f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002fc:	2301      	movs	r3, #1
 80002fe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000300:	2301      	movs	r3, #1
 8000302:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000304:	2310      	movs	r3, #16
 8000306:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000308:	2302      	movs	r3, #2
 800030a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800030c:	2302      	movs	r3, #2
 800030e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000310:	2302      	movs	r3, #2
 8000312:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000318:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031a:	463b      	mov	r3, r7
 800031c:	4618      	mov	r0, r3
 800031e:	f003 fe7d 	bl	800401c <HAL_RCCEx_PeriphCLKConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000328:	f000 fba0 	bl	8000a6c <Error_Handler>
  }
}
 800032c:	bf00      	nop
 800032e:	3798      	adds	r7, #152	; 0x98
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b08a      	sub	sp, #40	; 0x28
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800033a:	f107 031c 	add.w	r3, r7, #28
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]
 8000354:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000356:	4b30      	ldr	r3, [pc, #192]	; (8000418 <MX_ADC1_Init+0xe4>)
 8000358:	4a30      	ldr	r2, [pc, #192]	; (800041c <MX_ADC1_Init+0xe8>)
 800035a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 800035c:	4b2e      	ldr	r3, [pc, #184]	; (8000418 <MX_ADC1_Init+0xe4>)
 800035e:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 8000362:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000364:	4b2c      	ldr	r3, [pc, #176]	; (8000418 <MX_ADC1_Init+0xe4>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800036a:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <MX_ADC1_Init+0xe4>)
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000370:	4b29      	ldr	r3, [pc, #164]	; (8000418 <MX_ADC1_Init+0xe4>)
 8000372:	2200      	movs	r2, #0
 8000374:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000376:	4b28      	ldr	r3, [pc, #160]	; (8000418 <MX_ADC1_Init+0xe4>)
 8000378:	2204      	movs	r2, #4
 800037a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800037c:	4b26      	ldr	r3, [pc, #152]	; (8000418 <MX_ADC1_Init+0xe4>)
 800037e:	2200      	movs	r2, #0
 8000380:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000382:	4b25      	ldr	r3, [pc, #148]	; (8000418 <MX_ADC1_Init+0xe4>)
 8000384:	2201      	movs	r2, #1
 8000386:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000388:	4b23      	ldr	r3, [pc, #140]	; (8000418 <MX_ADC1_Init+0xe4>)
 800038a:	2201      	movs	r2, #1
 800038c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800038e:	4b22      	ldr	r3, [pc, #136]	; (8000418 <MX_ADC1_Init+0xe4>)
 8000390:	2200      	movs	r2, #0
 8000392:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000396:	4b20      	ldr	r3, [pc, #128]	; (8000418 <MX_ADC1_Init+0xe4>)
 8000398:	2200      	movs	r2, #0
 800039a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800039c:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <MX_ADC1_Init+0xe4>)
 800039e:	2200      	movs	r2, #0
 80003a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80003a2:	4b1d      	ldr	r3, [pc, #116]	; (8000418 <MX_ADC1_Init+0xe4>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003aa:	4b1b      	ldr	r3, [pc, #108]	; (8000418 <MX_ADC1_Init+0xe4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003b0:	4b19      	ldr	r3, [pc, #100]	; (8000418 <MX_ADC1_Init+0xe4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b8:	4817      	ldr	r0, [pc, #92]	; (8000418 <MX_ADC1_Init+0xe4>)
 80003ba:	f001 f809 	bl	80013d0 <HAL_ADC_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80003c4:	f000 fb52 	bl	8000a6c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003cc:	f107 031c 	add.w	r3, r7, #28
 80003d0:	4619      	mov	r1, r3
 80003d2:	4811      	ldr	r0, [pc, #68]	; (8000418 <MX_ADC1_Init+0xe4>)
 80003d4:	f001 ff38 	bl	8002248 <HAL_ADCEx_MultiModeConfigChannel>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80003de:	f000 fb45 	bl	8000a6c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MX_ADC1_Init+0xec>)
 80003e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e6:	2306      	movs	r3, #6
 80003e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80003ea:	2307      	movs	r3, #7
 80003ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003ee:	237f      	movs	r3, #127	; 0x7f
 80003f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003f2:	2304      	movs	r3, #4
 80003f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4619      	mov	r1, r3
 80003fe:	4806      	ldr	r0, [pc, #24]	; (8000418 <MX_ADC1_Init+0xe4>)
 8000400:	f001 fa0a 	bl	8001818 <HAL_ADC_ConfigChannel>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800040a:	f000 fb2f 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	3728      	adds	r7, #40	; 0x28
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	200000b4 	.word	0x200000b4
 800041c:	50040000 	.word	0x50040000
 8000420:	19200040 	.word	0x19200040

08000424 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800042a:	463b      	mov	r3, r7
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]
 8000438:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800043a:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <MX_ADC2_Init+0xbc>)
 800043c:	4a29      	ldr	r2, [pc, #164]	; (80004e4 <MX_ADC2_Init+0xc0>)
 800043e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000440:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <MX_ADC2_Init+0xbc>)
 8000442:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 8000446:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000448:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <MX_ADC2_Init+0xbc>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800044e:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <MX_ADC2_Init+0xbc>)
 8000450:	2200      	movs	r2, #0
 8000452:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000454:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <MX_ADC2_Init+0xbc>)
 8000456:	2200      	movs	r2, #0
 8000458:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800045a:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <MX_ADC2_Init+0xbc>)
 800045c:	2204      	movs	r2, #4
 800045e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000460:	4b1f      	ldr	r3, [pc, #124]	; (80004e0 <MX_ADC2_Init+0xbc>)
 8000462:	2200      	movs	r2, #0
 8000464:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000466:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <MX_ADC2_Init+0xbc>)
 8000468:	2201      	movs	r2, #1
 800046a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800046c:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <MX_ADC2_Init+0xbc>)
 800046e:	2201      	movs	r2, #1
 8000470:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000472:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <MX_ADC2_Init+0xbc>)
 8000474:	2200      	movs	r2, #0
 8000476:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800047a:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <MX_ADC2_Init+0xbc>)
 800047c:	2200      	movs	r2, #0
 800047e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <MX_ADC2_Init+0xbc>)
 8000482:	2200      	movs	r2, #0
 8000484:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000486:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <MX_ADC2_Init+0xbc>)
 8000488:	2201      	movs	r2, #1
 800048a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <MX_ADC2_Init+0xbc>)
 8000490:	2200      	movs	r2, #0
 8000492:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <MX_ADC2_Init+0xbc>)
 8000496:	2200      	movs	r2, #0
 8000498:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800049c:	4810      	ldr	r0, [pc, #64]	; (80004e0 <MX_ADC2_Init+0xbc>)
 800049e:	f000 ff97 	bl	80013d0 <HAL_ADC_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80004a8:	f000 fae0 	bl	8000a6c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004ac:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <MX_ADC2_Init+0xc4>)
 80004ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004b0:	2306      	movs	r3, #6
 80004b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_ADC2_Init+0xc8>)
 80004ba:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004bc:	2304      	movs	r3, #4
 80004be:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004c4:	463b      	mov	r3, r7
 80004c6:	4619      	mov	r1, r3
 80004c8:	4805      	ldr	r0, [pc, #20]	; (80004e0 <MX_ADC2_Init+0xbc>)
 80004ca:	f001 f9a5 	bl	8001818 <HAL_ADC_ConfigChannel>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80004d4:	f000 faca 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004d8:	bf00      	nop
 80004da:	3718      	adds	r7, #24
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000048 	.word	0x20000048
 80004e4:	50040100 	.word	0x50040100
 80004e8:	1d500080 	.word	0x1d500080
 80004ec:	407f0000 	.word	0x407f0000

080004f0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <MX_CAN1_Init+0x60>)
 80004f6:	4a17      	ldr	r2, [pc, #92]	; (8000554 <MX_CAN1_Init+0x64>)
 80004f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <MX_CAN1_Init+0x60>)
 80004fc:	2210      	movs	r2, #16
 80004fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000500:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_CAN1_Init+0x60>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_CAN1_Init+0x60>)
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800050c:	4b10      	ldr	r3, [pc, #64]	; (8000550 <MX_CAN1_Init+0x60>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_CAN1_Init+0x60>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <MX_CAN1_Init+0x60>)
 800051a:	2200      	movs	r2, #0
 800051c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_CAN1_Init+0x60>)
 8000520:	2200      	movs	r2, #0
 8000522:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_CAN1_Init+0x60>)
 8000526:	2200      	movs	r2, #0
 8000528:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_CAN1_Init+0x60>)
 800052c:	2200      	movs	r2, #0
 800052e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_CAN1_Init+0x60>)
 8000532:	2200      	movs	r2, #0
 8000534:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_CAN1_Init+0x60>)
 8000538:	2200      	movs	r2, #0
 800053a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_CAN1_Init+0x60>)
 800053e:	f001 ff27 	bl	8002390 <HAL_CAN_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000548:	f000 fa90 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200001f8 	.word	0x200001f8
 8000554:	40006400 	.word	0x40006400

08000558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800055e:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <MX_DMA_Init+0x78>)
 8000560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000562:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <MX_DMA_Init+0x78>)
 8000564:	f043 0304 	orr.w	r3, r3, #4
 8000568:	6493      	str	r3, [r2, #72]	; 0x48
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_DMA_Init+0x78>)
 800056c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800056e:	f003 0304 	and.w	r3, r3, #4
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <MX_DMA_Init+0x78>)
 8000578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800057a:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <MX_DMA_Init+0x78>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6493      	str	r3, [r2, #72]	; 0x48
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <MX_DMA_Init+0x78>)
 8000584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_DMA_Init+0x78>)
 8000590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <MX_DMA_Init+0x78>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	6493      	str	r3, [r2, #72]	; 0x48
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <MX_DMA_Init+0x78>)
 800059c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2010      	movs	r0, #16
 80005ac:	f002 f8a4 	bl	80026f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005b0:	2010      	movs	r0, #16
 80005b2:	f002 f8bd 	bl	8002730 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2045      	movs	r0, #69	; 0x45
 80005bc:	f002 f89c 	bl	80026f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80005c0:	2045      	movs	r0, #69	; 0x45
 80005c2:	f002 f8b5 	bl	8002730 <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ea:	4b55      	ldr	r3, [pc, #340]	; (8000740 <MX_GPIO_Init+0x16c>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a54      	ldr	r2, [pc, #336]	; (8000740 <MX_GPIO_Init+0x16c>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b52      	ldr	r3, [pc, #328]	; (8000740 <MX_GPIO_Init+0x16c>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b4f      	ldr	r3, [pc, #316]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a4e      	ldr	r2, [pc, #312]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b4c      	ldr	r3, [pc, #304]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b49      	ldr	r3, [pc, #292]	; (8000740 <MX_GPIO_Init+0x16c>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	4a48      	ldr	r2, [pc, #288]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000626:	4b46      	ldr	r3, [pc, #280]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000632:	4b43      	ldr	r3, [pc, #268]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	4a42      	ldr	r2, [pc, #264]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063e:	4b40      	ldr	r3, [pc, #256]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b3d      	ldr	r3, [pc, #244]	; (8000740 <MX_GPIO_Init+0x16c>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a3c      	ldr	r2, [pc, #240]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	21f0      	movs	r1, #240	; 0xf0
 8000666:	4837      	ldr	r0, [pc, #220]	; (8000744 <MX_GPIO_Init+0x170>)
 8000668:	f002 fc74 	bl	8002f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800066c:	23f0      	movs	r3, #240	; 0xf0
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	2302      	movs	r3, #2
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000678:	2303      	movs	r3, #3
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800067c:	2305      	movs	r3, #5
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f002 fad1 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 SW4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|SW4_Pin;
 800068e:	f44f 6303 	mov.w	r3, #2096	; 0x830
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000694:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <MX_GPIO_Init+0x174>)
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	482a      	ldr	r0, [pc, #168]	; (800074c <MX_GPIO_Init+0x178>)
 80006a4:	f002 fac4 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW3_Pin SW5_Pin */
  GPIO_InitStruct.Pin = SW3_Pin|SW5_Pin;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <MX_GPIO_Init+0x17c>)
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4823      	ldr	r0, [pc, #140]	; (800074c <MX_GPIO_Init+0x178>)
 80006be:	f002 fab7 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW6_Pin */
  GPIO_InitStruct.Pin = SW6_Pin;
 80006c2:	2304      	movs	r3, #4
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c6:	4b22      	ldr	r3, [pc, #136]	; (8000750 <MX_GPIO_Init+0x17c>)
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW6_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	481f      	ldr	r0, [pc, #124]	; (8000754 <MX_GPIO_Init+0x180>)
 80006d6:	f002 faab 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ControlLed4_Pin ControlLed3_Pin ControlLed2_Pin ControlLed1_Pin */
  GPIO_InitStruct.Pin = ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin;
 80006da:	23f0      	movs	r3, #240	; 0xf0
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4814      	ldr	r0, [pc, #80]	; (8000744 <MX_GPIO_Init+0x170>)
 80006f2:	f002 fa9d 	bl	8002c30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2008      	movs	r0, #8
 80006fc:	f001 fffc 	bl	80026f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000700:	2008      	movs	r0, #8
 8000702:	f002 f815 	bl	8002730 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	200a      	movs	r0, #10
 800070c:	f001 fff4 	bl	80026f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000710:	200a      	movs	r0, #10
 8000712:	f002 f80d 	bl	8002730 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2017      	movs	r0, #23
 800071c:	f001 ffec 	bl	80026f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000720:	2017      	movs	r0, #23
 8000722:	f002 f805 	bl	8002730 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2028      	movs	r0, #40	; 0x28
 800072c:	f001 ffe4 	bl	80026f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000730:	2028      	movs	r0, #40	; 0x28
 8000732:	f001 fffd 	bl	8002730 <HAL_NVIC_EnableIRQ>

}
 8000736:	bf00      	nop
 8000738:	3728      	adds	r7, #40	; 0x28
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000
 8000744:	48000400 	.word	0x48000400
 8000748:	10110000 	.word	0x10110000
 800074c:	48000800 	.word	0x48000800
 8000750:	10210000 	.word	0x10210000
 8000754:	48000c00 	.word	0x48000c00

08000758 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SW3_Pin)
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000768:	d103      	bne.n	8000772 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		sw3_pressed = 1;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <HAL_GPIO_EXTI_Callback+0x54>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
		sw5_pressed = 1;
	} else if (GPIO_Pin == SW6_Pin)
	{
		sw6_pressed = 1;
	}
}
 8000770:	e015      	b.n	800079e <HAL_GPIO_EXTI_Callback+0x46>
	} else if (GPIO_Pin == SW4_Pin)
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000778:	d103      	bne.n	8000782 <HAL_GPIO_EXTI_Callback+0x2a>
		sw4_pressed = 1;
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <HAL_GPIO_EXTI_Callback+0x58>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
}
 8000780:	e00d      	b.n	800079e <HAL_GPIO_EXTI_Callback+0x46>
	} else if (GPIO_Pin == SW5_Pin)
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000788:	d103      	bne.n	8000792 <HAL_GPIO_EXTI_Callback+0x3a>
		sw5_pressed = 1;
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800078c:	2201      	movs	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
}
 8000790:	e005      	b.n	800079e <HAL_GPIO_EXTI_Callback+0x46>
	} else if (GPIO_Pin == SW6_Pin)
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d102      	bne.n	800079e <HAL_GPIO_EXTI_Callback+0x46>
		sw6_pressed = 1;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <HAL_GPIO_EXTI_Callback+0x60>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	2000017e 	.word	0x2000017e
 80007b0:	2000017d 	.word	0x2000017d
 80007b4:	2000017c 	.word	0x2000017c
 80007b8:	2000002c 	.word	0x2000002c

080007bc <wait_for_second_button>:


void wait_for_second_button()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	//	reaction time
	HAL_Delay(50);
 80007c0:	2032      	movs	r0, #50	; 0x32
 80007c2:	f000 fbf9 	bl	8000fb8 <HAL_Delay>

	if (sw3_pressed && sw4_pressed)
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <wait_for_second_button+0xac>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d003      	beq.n	80007d6 <wait_for_second_button+0x1a>
 80007ce:	4b27      	ldr	r3, [pc, #156]	; (800086c <wait_for_second_button+0xb0>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d146      	bne.n	8000864 <wait_for_second_button+0xa8>
	{
		//		can
	} else if (sw3_pressed && sw5_pressed)
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <wait_for_second_button+0xac>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d003      	beq.n	80007e6 <wait_for_second_button+0x2a>
 80007de:	4b24      	ldr	r3, [pc, #144]	; (8000870 <wait_for_second_button+0xb4>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d13e      	bne.n	8000864 <wait_for_second_button+0xa8>
	{
		//		can
	} else if (sw3_pressed && sw6_pressed)
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <wait_for_second_button+0xac>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d003      	beq.n	80007f6 <wait_for_second_button+0x3a>
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <wait_for_second_button+0xb8>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d136      	bne.n	8000864 <wait_for_second_button+0xa8>
	{
		//		can
	} else if (sw4_pressed && sw5_pressed)
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <wait_for_second_button+0xb0>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d003      	beq.n	8000806 <wait_for_second_button+0x4a>
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <wait_for_second_button+0xb4>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d12e      	bne.n	8000864 <wait_for_second_button+0xa8>
	{
		//		can
	} else if (sw4_pressed && sw6_pressed)
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <wait_for_second_button+0xb0>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d003      	beq.n	8000816 <wait_for_second_button+0x5a>
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <wait_for_second_button+0xb8>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d126      	bne.n	8000864 <wait_for_second_button+0xa8>
	{
		//		can
	} else if (sw5_pressed && sw6_pressed)
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <wait_for_second_button+0xb4>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d008      	beq.n	8000830 <wait_for_second_button+0x74>
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <wait_for_second_button+0xb8>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <wait_for_second_button+0x74>
	{
		HAL_GPIO_TogglePin(ControlLed3_GPIO_Port, ControlLed3_Pin);
 8000826:	2120      	movs	r1, #32
 8000828:	4813      	ldr	r0, [pc, #76]	; (8000878 <wait_for_second_button+0xbc>)
 800082a:	f002 fbab 	bl	8002f84 <HAL_GPIO_TogglePin>
 800082e:	e019      	b.n	8000864 <wait_for_second_button+0xa8>
	} else if (sw3_pressed) {
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <wait_for_second_button+0xac>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d115      	bne.n	8000864 <wait_for_second_button+0xa8>
		//		can
	} else if (sw4_pressed) {
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <wait_for_second_button+0xb0>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d111      	bne.n	8000864 <wait_for_second_button+0xa8>
		//		can
	} else if (sw5_pressed) {
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <wait_for_second_button+0xb4>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d004      	beq.n	8000852 <wait_for_second_button+0x96>
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	480b      	ldr	r0, [pc, #44]	; (8000878 <wait_for_second_button+0xbc>)
 800084c:	f002 fb9a 	bl	8002f84 <HAL_GPIO_TogglePin>
	} else if (sw6_pressed) {
		HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
	}
}
 8000850:	e008      	b.n	8000864 <wait_for_second_button+0xa8>
	} else if (sw6_pressed) {
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <wait_for_second_button+0xb8>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <wait_for_second_button+0xa8>
		HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <wait_for_second_button+0xbc>)
 800085e:	f002 fb91 	bl	8002f84 <HAL_GPIO_TogglePin>
}
 8000862:	e7ff      	b.n	8000864 <wait_for_second_button+0xa8>
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000017e 	.word	0x2000017e
 800086c:	2000017d 	.word	0x2000017d
 8000870:	2000017c 	.word	0x2000017c
 8000874:	2000002c 	.word	0x2000002c
 8000878:	48000400 	.word	0x48000400

0800087c <reset_flags>:


void reset_flags()
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	sw3_pressed = 0;
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <reset_flags+0x28>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
	sw4_pressed = 0;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <reset_flags+0x2c>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
	sw5_pressed = 0;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <reset_flags+0x30>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
	sw6_pressed = 0;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <reset_flags+0x34>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	2000017e 	.word	0x2000017e
 80008a8:	2000017d 	.word	0x2000017d
 80008ac:	2000017c 	.word	0x2000017c
 80008b0:	2000002c 	.word	0x2000002c

080008b4 <choose_left_scroll_state>:
//	return average_adc;
//}


void choose_left_scroll_state()
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
	float average_adc = 0;
 80008ba:	f04f 0300 	mov.w	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]

	//	  calculate average adc
	for (int i = 0; i < 10; i++) {
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	e010      	b.n	80008e8 <choose_left_scroll_state+0x34>
		average_adc = average_adc + left_adc_reading[i];
 80008c6:	4a55      	ldr	r2, [pc, #340]	; (8000a1c <choose_left_scroll_state+0x168>)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ce:	ee07 3a90 	vmov	s15, r3
 80008d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80008da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008de:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < 10; i++) {
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	3301      	adds	r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	2b09      	cmp	r3, #9
 80008ec:	ddeb      	ble.n	80008c6 <choose_left_scroll_state+0x12>
	}

	average_adc = average_adc / 10;
 80008ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80008f2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80008f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008fa:	edc7 7a03 	vstr	s15, [r7, #12]

	int lss = 0; // Left Scroll State
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]

	if (1110 < average_adc && average_adc < 1115)
 8000902:	edd7 7a03 	vldr	s15, [r7, #12]
 8000906:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8000a20 <choose_left_scroll_state+0x16c>
 800090a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000912:	dd0b      	ble.n	800092c <choose_left_scroll_state+0x78>
 8000914:	edd7 7a03 	vldr	s15, [r7, #12]
 8000918:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000a24 <choose_left_scroll_state+0x170>
 800091c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000924:	d502      	bpl.n	800092c <choose_left_scroll_state+0x78>
	{
		lss = 1;
 8000926:	2301      	movs	r3, #1
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	e03d      	b.n	80009a8 <choose_left_scroll_state+0xf4>
	} else if (3129 < average_adc && average_adc < 3133)
 800092c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000930:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000a28 <choose_left_scroll_state+0x174>
 8000934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800093c:	dd0b      	ble.n	8000956 <choose_left_scroll_state+0xa2>
 800093e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000942:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8000a2c <choose_left_scroll_state+0x178>
 8000946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800094a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094e:	d502      	bpl.n	8000956 <choose_left_scroll_state+0xa2>
	{
		lss = 2;
 8000950:	2302      	movs	r3, #2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	e028      	b.n	80009a8 <choose_left_scroll_state+0xf4>
	} else if (3715 < average_adc && average_adc < 3721)
 8000956:	edd7 7a03 	vldr	s15, [r7, #12]
 800095a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000a30 <choose_left_scroll_state+0x17c>
 800095e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	dd0b      	ble.n	8000980 <choose_left_scroll_state+0xcc>
 8000968:	edd7 7a03 	vldr	s15, [r7, #12]
 800096c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000a34 <choose_left_scroll_state+0x180>
 8000970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000978:	d502      	bpl.n	8000980 <choose_left_scroll_state+0xcc>
	{
		lss = 3;
 800097a:	2303      	movs	r3, #3
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	e013      	b.n	80009a8 <choose_left_scroll_state+0xf4>
	} else if (3970 < average_adc && average_adc < 3975)
 8000980:	edd7 7a03 	vldr	s15, [r7, #12]
 8000984:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000a38 <choose_left_scroll_state+0x184>
 8000988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800098c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000990:	dd0a      	ble.n	80009a8 <choose_left_scroll_state+0xf4>
 8000992:	edd7 7a03 	vldr	s15, [r7, #12]
 8000996:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000a3c <choose_left_scroll_state+0x188>
 800099a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800099e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a2:	d501      	bpl.n	80009a8 <choose_left_scroll_state+0xf4>
	{
		lss = 4;
 80009a4:	2304      	movs	r3, #4
 80009a6:	607b      	str	r3, [r7, #4]
	}


	if (lss != left_last_state)
 80009a8:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <choose_left_scroll_state+0x18c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d02e      	beq.n	8000a10 <choose_left_scroll_state+0x15c>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	2b03      	cmp	r3, #3
 80009b8:	d82b      	bhi.n	8000a12 <choose_left_scroll_state+0x15e>
 80009ba:	a201      	add	r2, pc, #4	; (adr r2, 80009c0 <choose_left_scroll_state+0x10c>)
 80009bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c0:	080009d1 	.word	0x080009d1
 80009c4:	080009e1 	.word	0x080009e1
 80009c8:	080009f1 	.word	0x080009f1
 80009cc:	08000a01 	.word	0x08000a01
	{
		switch (lss)
		{
		case 1:
			HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 80009d0:	2180      	movs	r1, #128	; 0x80
 80009d2:	481c      	ldr	r0, [pc, #112]	; (8000a44 <choose_left_scroll_state+0x190>)
 80009d4:	f002 fad6 	bl	8002f84 <HAL_GPIO_TogglePin>
//			HAL_Delay(200);
			left_last_state = lss;
 80009d8:	4a19      	ldr	r2, [pc, #100]	; (8000a40 <choose_left_scroll_state+0x18c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
			break;
 80009de:	e018      	b.n	8000a12 <choose_left_scroll_state+0x15e>
		case 2:
			HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
 80009e0:	2140      	movs	r1, #64	; 0x40
 80009e2:	4818      	ldr	r0, [pc, #96]	; (8000a44 <choose_left_scroll_state+0x190>)
 80009e4:	f002 face 	bl	8002f84 <HAL_GPIO_TogglePin>
//			HAL_Delay(200);
			left_last_state = lss;
 80009e8:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <choose_left_scroll_state+0x18c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
			break;
 80009ee:	e010      	b.n	8000a12 <choose_left_scroll_state+0x15e>
		case 3:
			HAL_GPIO_TogglePin(ControlLed3_GPIO_Port, ControlLed3_Pin);
 80009f0:	2120      	movs	r1, #32
 80009f2:	4814      	ldr	r0, [pc, #80]	; (8000a44 <choose_left_scroll_state+0x190>)
 80009f4:	f002 fac6 	bl	8002f84 <HAL_GPIO_TogglePin>
//			HAL_Delay(200);
			left_last_state = lss;
 80009f8:	4a11      	ldr	r2, [pc, #68]	; (8000a40 <choose_left_scroll_state+0x18c>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]
			break;
 80009fe:	e008      	b.n	8000a12 <choose_left_scroll_state+0x15e>
		case 4:
			HAL_GPIO_TogglePin(ControlLed4_GPIO_Port, ControlLed4_Pin);
 8000a00:	2110      	movs	r1, #16
 8000a02:	4810      	ldr	r0, [pc, #64]	; (8000a44 <choose_left_scroll_state+0x190>)
 8000a04:	f002 fabe 	bl	8002f84 <HAL_GPIO_TogglePin>
//			HAL_Delay(200);
			left_last_state = lss;
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <choose_left_scroll_state+0x18c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
			break;
 8000a0e:	e000      	b.n	8000a12 <choose_left_scroll_state+0x15e>
		}
	}
 8000a10:	bf00      	nop
}
 8000a12:	bf00      	nop
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000034 	.word	0x20000034
 8000a20:	448ac000 	.word	0x448ac000
 8000a24:	448b6000 	.word	0x448b6000
 8000a28:	45439000 	.word	0x45439000
 8000a2c:	4543d000 	.word	0x4543d000
 8000a30:	45683000 	.word	0x45683000
 8000a34:	45689000 	.word	0x45689000
 8000a38:	45782000 	.word	0x45782000
 8000a3c:	45787000 	.word	0x45787000
 8000a40:	20000028 	.word	0x20000028
 8000a44:	48000400 	.word	0x48000400

08000a48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d101      	bne.n	8000a5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a5a:	f000 fa8d 	bl	8000f78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40012c00 	.word	0x40012c00

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_MspInit+0x44>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HAL_MspInit+0x44>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	; 0x30
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a5f      	ldr	r2, [pc, #380]	; (8000c5c <HAL_ADC_MspInit+0x19c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d159      	bne.n	8000b96 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000ae2:	4b5f      	ldr	r3, [pc, #380]	; (8000c60 <HAL_ADC_MspInit+0x1a0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4a5d      	ldr	r2, [pc, #372]	; (8000c60 <HAL_ADC_MspInit+0x1a0>)
 8000aea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000aec:	4b5c      	ldr	r3, [pc, #368]	; (8000c60 <HAL_ADC_MspInit+0x1a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d10b      	bne.n	8000b0c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000af4:	4b5b      	ldr	r3, [pc, #364]	; (8000c64 <HAL_ADC_MspInit+0x1a4>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af8:	4a5a      	ldr	r2, [pc, #360]	; (8000c64 <HAL_ADC_MspInit+0x1a4>)
 8000afa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b00:	4b58      	ldr	r3, [pc, #352]	; (8000c64 <HAL_ADC_MspInit+0x1a4>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b55      	ldr	r3, [pc, #340]	; (8000c64 <HAL_ADC_MspInit+0x1a4>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b10:	4a54      	ldr	r2, [pc, #336]	; (8000c64 <HAL_ADC_MspInit+0x1a4>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b18:	4b52      	ldr	r3, [pc, #328]	; (8000c64 <HAL_ADC_MspInit+0x1a4>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = SW1_Pin;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b28:	230b      	movs	r3, #11
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3a:	f002 f879 	bl	8002c30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel6;
 8000b3e:	4b4a      	ldr	r3, [pc, #296]	; (8000c68 <HAL_ADC_MspInit+0x1a8>)
 8000b40:	4a4a      	ldr	r2, [pc, #296]	; (8000c6c <HAL_ADC_MspInit+0x1ac>)
 8000b42:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b44:	4b48      	ldr	r3, [pc, #288]	; (8000c68 <HAL_ADC_MspInit+0x1a8>)
 8000b46:	2205      	movs	r2, #5
 8000b48:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b4a:	4b47      	ldr	r3, [pc, #284]	; (8000c68 <HAL_ADC_MspInit+0x1a8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b50:	4b45      	ldr	r3, [pc, #276]	; (8000c68 <HAL_ADC_MspInit+0x1a8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b56:	4b44      	ldr	r3, [pc, #272]	; (8000c68 <HAL_ADC_MspInit+0x1a8>)
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b5c:	4b42      	ldr	r3, [pc, #264]	; (8000c68 <HAL_ADC_MspInit+0x1a8>)
 8000b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b62:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b64:	4b40      	ldr	r3, [pc, #256]	; (8000c68 <HAL_ADC_MspInit+0x1a8>)
 8000b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b6a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b6c:	4b3e      	ldr	r3, [pc, #248]	; (8000c68 <HAL_ADC_MspInit+0x1a8>)
 8000b6e:	2220      	movs	r2, #32
 8000b70:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b72:	4b3d      	ldr	r3, [pc, #244]	; (8000c68 <HAL_ADC_MspInit+0x1a8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b78:	483b      	ldr	r0, [pc, #236]	; (8000c68 <HAL_ADC_MspInit+0x1a8>)
 8000b7a:	f001 fde7 	bl	800274c <HAL_DMA_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000b84:	f7ff ff72 	bl	8000a6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a37      	ldr	r2, [pc, #220]	; (8000c68 <HAL_ADC_MspInit+0x1a8>)
 8000b8c:	651a      	str	r2, [r3, #80]	; 0x50
 8000b8e:	4a36      	ldr	r2, [pc, #216]	; (8000c68 <HAL_ADC_MspInit+0x1a8>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000b94:	e05d      	b.n	8000c52 <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a35      	ldr	r2, [pc, #212]	; (8000c70 <HAL_ADC_MspInit+0x1b0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d158      	bne.n	8000c52 <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000ba0:	4b2f      	ldr	r3, [pc, #188]	; (8000c60 <HAL_ADC_MspInit+0x1a0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	4a2e      	ldr	r2, [pc, #184]	; (8000c60 <HAL_ADC_MspInit+0x1a0>)
 8000ba8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000baa:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <HAL_ADC_MspInit+0x1a0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d10b      	bne.n	8000bca <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000bb2:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <HAL_ADC_MspInit+0x1a4>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a2b      	ldr	r2, [pc, #172]	; (8000c64 <HAL_ADC_MspInit+0x1a4>)
 8000bb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <HAL_ADC_MspInit+0x1a4>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <HAL_ADC_MspInit+0x1a4>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4a25      	ldr	r2, [pc, #148]	; (8000c64 <HAL_ADC_MspInit+0x1a4>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <HAL_ADC_MspInit+0x1a4>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SW2_Pin|GPIO_PIN_3;
 8000be2:	230c      	movs	r3, #12
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000be6:	230b      	movs	r3, #11
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f002 f81a 	bl	8002c30 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel7;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <HAL_ADC_MspInit+0x1b4>)
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <HAL_ADC_MspInit+0x1b8>)
 8000c00:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <HAL_ADC_MspInit+0x1b4>)
 8000c04:	2206      	movs	r2, #6
 8000c06:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <HAL_ADC_MspInit+0x1b4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <HAL_ADC_MspInit+0x1b4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_ADC_MspInit+0x1b4>)
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <HAL_ADC_MspInit+0x1b4>)
 8000c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c20:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_ADC_MspInit+0x1b4>)
 8000c24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c28:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_ADC_MspInit+0x1b4>)
 8000c2c:	2220      	movs	r2, #32
 8000c2e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <HAL_ADC_MspInit+0x1b4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000c36:	480f      	ldr	r0, [pc, #60]	; (8000c74 <HAL_ADC_MspInit+0x1b4>)
 8000c38:	f001 fd88 	bl	800274c <HAL_DMA_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_ADC_MspInit+0x186>
      Error_Handler();
 8000c42:	f7ff ff13 	bl	8000a6c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_ADC_MspInit+0x1b4>)
 8000c4a:	651a      	str	r2, [r3, #80]	; 0x50
 8000c4c:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <HAL_ADC_MspInit+0x1b4>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000c52:	bf00      	nop
 8000c54:	3730      	adds	r7, #48	; 0x30
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	50040000 	.word	0x50040000
 8000c60:	20000030 	.word	0x20000030
 8000c64:	40021000 	.word	0x40021000
 8000c68:	2000011c 	.word	0x2000011c
 8000c6c:	4002006c 	.word	0x4002006c
 8000c70:	50040100 	.word	0x50040100
 8000c74:	20000198 	.word	0x20000198
 8000c78:	40020480 	.word	0x40020480

08000c7c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <HAL_CAN_MspInit+0x80>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d129      	bne.n	8000cf2 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_CAN_MspInit+0x84>)
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca2:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_CAN_MspInit+0x84>)
 8000ca4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ca8:	6593      	str	r3, [r2, #88]	; 0x58
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_CAN_MspInit+0x84>)
 8000cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_CAN_MspInit+0x84>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4a11      	ldr	r2, [pc, #68]	; (8000d00 <HAL_CAN_MspInit+0x84>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_CAN_MspInit+0x84>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ce0:	2309      	movs	r3, #9
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cee:	f001 ff9f 	bl	8002c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40006400 	.word	0x40006400
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	2019      	movs	r0, #25
 8000d1a:	f001 fced 	bl	80026f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d1e:	2019      	movs	r0, #25
 8000d20:	f001 fd06 	bl	8002730 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <HAL_InitTick+0x9c>)
 8000d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d28:	4a1d      	ldr	r2, [pc, #116]	; (8000da0 <HAL_InitTick+0x9c>)
 8000d2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d2e:	6613      	str	r3, [r2, #96]	; 0x60
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <HAL_InitTick+0x9c>)
 8000d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d3c:	f107 0210 	add.w	r2, r7, #16
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f003 f874 	bl	8003e34 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d4c:	f003 f85c 	bl	8003e08 <HAL_RCC_GetPCLK2Freq>
 8000d50:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d54:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <HAL_InitTick+0xa0>)
 8000d56:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5a:	0c9b      	lsrs	r3, r3, #18
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_InitTick+0xa4>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	; (8000dac <HAL_InitTick+0xa8>)
 8000d64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_InitTick+0xa4>)
 8000d68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d6c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d6e:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <HAL_InitTick+0xa4>)
 8000d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d72:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_InitTick+0xa4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_InitTick+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d80:	4809      	ldr	r0, [pc, #36]	; (8000da8 <HAL_InitTick+0xa4>)
 8000d82:	f003 fe9f 	bl	8004ac4 <HAL_TIM_Base_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d104      	bne.n	8000d96 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d8c:	4806      	ldr	r0, [pc, #24]	; (8000da8 <HAL_InitTick+0xa4>)
 8000d8e:	f003 fefb 	bl	8004b88 <HAL_TIM_Base_Start_IT>
 8000d92:	4603      	mov	r3, r0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3730      	adds	r7, #48	; 0x30
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40021000 	.word	0x40021000
 8000da4:	431bde83 	.word	0x431bde83
 8000da8:	20000220 	.word	0x20000220
 8000dac:	40012c00 	.word	0x40012c00

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000e0a:	2004      	movs	r0, #4
 8000e0c:	f002 f8d4 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000e18:	2010      	movs	r0, #16
 8000e1a:	f002 f8cd 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <DMA1_Channel6_IRQHandler+0x10>)
 8000e2a:	f001 fdb2 	bl	8002992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000011c 	.word	0x2000011c

08000e38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000e3c:	2020      	movs	r0, #32
 8000e3e:	f002 f8bb 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e4e:	f003 ff0b 	bl	8004c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000220 	.word	0x20000220

08000e5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000e60:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e64:	f002 f8a8 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000e68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e6c:	f002 f8a4 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000e70:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e74:	f002 f8a0 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <DMA2_Channel7_IRQHandler+0x10>)
 8000e82:	f001 fd86 	bl	8002992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000198 	.word	0x20000198

08000e90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <SystemInit+0x5c>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a14      	ldr	r2, [pc, #80]	; (8000eec <SystemInit+0x5c>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <SystemInit+0x60>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a11      	ldr	r2, [pc, #68]	; (8000ef0 <SystemInit+0x60>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <SystemInit+0x60>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <SystemInit+0x60>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <SystemInit+0x60>)
 8000ebc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ec0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ec4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <SystemInit+0x60>)
 8000ec8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ecc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <SystemInit+0x60>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <SystemInit+0x60>)
 8000ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SystemInit+0x60>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef8:	f7ff ffca 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000efc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000efe:	e003      	b.n	8000f08 <LoopCopyDataInit>

08000f00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f06:	3104      	adds	r1, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f08:	480a      	ldr	r0, [pc, #40]	; (8000f34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f10:	d3f6      	bcc.n	8000f00 <CopyDataInit>
	ldr	r2, =_sbss
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f14:	e002      	b.n	8000f1c <LoopFillZerobss>

08000f16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f18:	f842 3b04 	str.w	r3, [r2], #4

08000f1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <LoopForever+0x16>)
	cmp	r2, r3
 8000f1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f20:	d3f9      	bcc.n	8000f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f22:	f004 f8a1 	bl	8005068 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f26:	f7ff f969 	bl	80001fc <main>

08000f2a <LoopForever>:

LoopForever:
    b LoopForever
 8000f2a:	e7fe      	b.n	8000f2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f2c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000f30:	08005128 	.word	0x08005128
	ldr	r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f38:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000f3c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000f40:	20000270 	.word	0x20000270

08000f44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC1_2_IRQHandler>

08000f46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f001 fbc6 	bl	80026e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f56:	200f      	movs	r0, #15
 8000f58:	f7ff fed4 	bl	8000d04 <HAL_InitTick>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d002      	beq.n	8000f68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	71fb      	strb	r3, [r7, #7]
 8000f66:	e001      	b.n	8000f6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f68:	f7ff fd86 	bl	8000a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	2000026c 	.word	0x2000026c

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	2000026c 	.word	0x2000026c

08000fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff ffee 	bl	8000fa0 <HAL_GetTick>
 8000fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd0:	d005      	beq.n	8000fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_Delay+0x44>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fde:	bf00      	nop
 8000fe0:	f7ff ffde 	bl	8000fa0 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d8f7      	bhi.n	8000fe0 <HAL_Delay+0x28>
  {
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008

08001000 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	609a      	str	r2, [r3, #8]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	609a      	str	r2, [r3, #8]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3360      	adds	r3, #96	; 0x60
 800107a:	461a      	mov	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <LL_ADC_SetOffset+0x44>)
 800108a:	4013      	ands	r3, r2
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	4313      	orrs	r3, r2
 8001098:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010a0:	bf00      	nop
 80010a2:	371c      	adds	r7, #28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	03fff000 	.word	0x03fff000

080010b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3360      	adds	r3, #96	; 0x60
 80010be:	461a      	mov	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	3360      	adds	r3, #96	; 0x60
 80010ec:	461a      	mov	r2, r3
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	431a      	orrs	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	615a      	str	r2, [r3, #20]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800115e:	b480      	push	{r7}
 8001160:	b087      	sub	sp, #28
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3330      	adds	r3, #48	; 0x30
 800116e:	461a      	mov	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	0a1b      	lsrs	r3, r3, #8
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	f003 030c 	and.w	r3, r3, #12
 800117a:	4413      	add	r3, r2
 800117c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f003 031f 	and.w	r3, r3, #31
 8001188:	211f      	movs	r1, #31
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	401a      	ands	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	0e9b      	lsrs	r3, r3, #26
 8001196:	f003 011f 	and.w	r1, r3, #31
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	431a      	orrs	r2, r3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011aa:	bf00      	nop
 80011ac:	371c      	adds	r7, #28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b087      	sub	sp, #28
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	3314      	adds	r3, #20
 80011c6:	461a      	mov	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	0e5b      	lsrs	r3, r3, #25
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	4413      	add	r3, r2
 80011d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	0d1b      	lsrs	r3, r3, #20
 80011de:	f003 031f 	and.w	r3, r3, #31
 80011e2:	2107      	movs	r1, #7
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	401a      	ands	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	0d1b      	lsrs	r3, r3, #20
 80011f0:	f003 031f 	and.w	r3, r3, #31
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	431a      	orrs	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001200:	bf00      	nop
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001224:	43db      	mvns	r3, r3
 8001226:	401a      	ands	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0318 	and.w	r3, r3, #24
 800122e:	4908      	ldr	r1, [pc, #32]	; (8001250 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001230:	40d9      	lsrs	r1, r3
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	400b      	ands	r3, r1
 8001236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800123a:	431a      	orrs	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	0007ffff 	.word	0x0007ffff

08001254 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 031f 	and.w	r3, r3, #31
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001280:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6093      	str	r3, [r2, #8]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012a8:	d101      	bne.n	80012ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012f8:	d101      	bne.n	80012fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800131c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001320:	f043 0201 	orr.w	r2, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <LL_ADC_IsEnabled+0x18>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <LL_ADC_IsEnabled+0x1a>
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800136a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800136e:	f043 0204 	orr.w	r2, r3, #4
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	2b04      	cmp	r3, #4
 8001394:	d101      	bne.n	800139a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d101      	bne.n	80013c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e134      	b.n	8001654 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d109      	bne.n	800140c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fb61 	bl	8000ac0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff3f 	bl	8001294 <LL_ADC_IsDeepPowerDownEnabled>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d004      	beq.n	8001426 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff25 	bl	8001270 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff5a 	bl	80012e4 <LL_ADC_IsInternalRegulatorEnabled>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d115      	bne.n	8001462 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff3e 	bl	80012bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001440:	4b86      	ldr	r3, [pc, #536]	; (800165c <HAL_ADC_Init+0x28c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	099b      	lsrs	r3, r3, #6
 8001446:	4a86      	ldr	r2, [pc, #536]	; (8001660 <HAL_ADC_Init+0x290>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	099b      	lsrs	r3, r3, #6
 800144e:	3301      	adds	r3, #1
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001454:	e002      	b.n	800145c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3b01      	subs	r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f9      	bne.n	8001456 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff3c 	bl	80012e4 <LL_ADC_IsInternalRegulatorEnabled>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10d      	bne.n	800148e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001476:	f043 0210 	orr.w	r2, r3, #16
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001482:	f043 0201 	orr.w	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff75 	bl	8001382 <LL_ADC_REG_IsConversionOngoing>
 8001498:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f040 80cd 	bne.w	8001642 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f040 80c9 	bne.w	8001642 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014b8:	f043 0202 	orr.w	r2, r3, #2
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff35 	bl	8001334 <LL_ADC_IsEnabled>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d110      	bne.n	80014f2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014d0:	4864      	ldr	r0, [pc, #400]	; (8001664 <HAL_ADC_Init+0x294>)
 80014d2:	f7ff ff2f 	bl	8001334 <LL_ADC_IsEnabled>
 80014d6:	4604      	mov	r4, r0
 80014d8:	4863      	ldr	r0, [pc, #396]	; (8001668 <HAL_ADC_Init+0x298>)
 80014da:	f7ff ff2b 	bl	8001334 <LL_ADC_IsEnabled>
 80014de:	4603      	mov	r3, r0
 80014e0:	4323      	orrs	r3, r4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d105      	bne.n	80014f2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4619      	mov	r1, r3
 80014ec:	485f      	ldr	r0, [pc, #380]	; (800166c <HAL_ADC_Init+0x29c>)
 80014ee:	f7ff fd87 	bl	8001000 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7e5b      	ldrb	r3, [r3, #25]
 80014f6:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014fc:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001502:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001508:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001510:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3020 	ldrb.w	r3, [r3, #32]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d106      	bne.n	800152e <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	3b01      	subs	r3, #1
 8001526:	045b      	lsls	r3, r3, #17
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	2b00      	cmp	r3, #0
 8001534:	d009      	beq.n	800154a <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001542:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	4b47      	ldr	r3, [pc, #284]	; (8001670 <HAL_ADC_Init+0x2a0>)
 8001552:	4013      	ands	r3, r2
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	69b9      	ldr	r1, [r7, #24]
 800155a:	430b      	orrs	r3, r1
 800155c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff0d 	bl	8001382 <LL_ADC_REG_IsConversionOngoing>
 8001568:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff1a 	bl	80013a8 <LL_ADC_INJ_IsConversionOngoing>
 8001574:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d140      	bne.n	80015fe <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d13d      	bne.n	80015fe <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7e1b      	ldrb	r3, [r3, #24]
 800158a:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800158c:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001594:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015a4:	f023 0306 	bic.w	r3, r3, #6
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	69b9      	ldr	r1, [r7, #24]
 80015ae:	430b      	orrs	r3, r1
 80015b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d118      	bne.n	80015ee <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015c6:	f023 0304 	bic.w	r3, r3, #4
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015d2:	4311      	orrs	r1, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015d8:	4311      	orrs	r1, r2
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015de:	430a      	orrs	r2, r1
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	e007      	b.n	80015fe <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0201 	bic.w	r2, r2, #1
 80015fc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d10c      	bne.n	8001620 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	f023 010f 	bic.w	r1, r3, #15
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	1e5a      	subs	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	631a      	str	r2, [r3, #48]	; 0x30
 800161e:	e007      	b.n	8001630 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 020f 	bic.w	r2, r2, #15
 800162e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001634:	f023 0303 	bic.w	r3, r3, #3
 8001638:	f043 0201 	orr.w	r2, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	659a      	str	r2, [r3, #88]	; 0x58
 8001640:	e007      	b.n	8001652 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	f043 0210 	orr.w	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001652:	7ffb      	ldrb	r3, [r7, #31]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3724      	adds	r7, #36	; 0x24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}
 800165c:	20000000 	.word	0x20000000
 8001660:	053e2d63 	.word	0x053e2d63
 8001664:	50040000 	.word	0x50040000
 8001668:	50040100 	.word	0x50040100
 800166c:	50040300 	.word	0x50040300
 8001670:	fff0c007 	.word	0xfff0c007

08001674 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001680:	4850      	ldr	r0, [pc, #320]	; (80017c4 <HAL_ADC_Start_DMA+0x150>)
 8001682:	f7ff fde7 	bl	8001254 <LL_ADC_GetMultimode>
 8001686:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fe78 	bl	8001382 <LL_ADC_REG_IsConversionOngoing>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	f040 808e 	bne.w	80017b6 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_Start_DMA+0x34>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e089      	b.n	80017bc <HAL_ADC_Start_DMA+0x148>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d002      	beq.n	80016c2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	2b09      	cmp	r3, #9
 80016c0:	d172      	bne.n	80017a8 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 fca4 	bl	8002010 <ADC_Enable>
 80016c8:	4603      	mov	r3, r0
 80016ca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d165      	bne.n	800179e <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a37      	ldr	r2, [pc, #220]	; (80017c8 <HAL_ADC_Start_DMA+0x154>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d002      	beq.n	80016f6 <HAL_ADC_Start_DMA+0x82>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	e000      	b.n	80016f8 <HAL_ADC_Start_DMA+0x84>
 80016f6:	4b35      	ldr	r3, [pc, #212]	; (80017cc <HAL_ADC_Start_DMA+0x158>)
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d002      	beq.n	8001706 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d105      	bne.n	8001712 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001722:	f023 0206 	bic.w	r2, r3, #6
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	65da      	str	r2, [r3, #92]	; 0x5c
 800172a:	e002      	b.n	8001732 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001736:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <HAL_ADC_Start_DMA+0x15c>)
 8001738:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800173e:	4a25      	ldr	r2, [pc, #148]	; (80017d4 <HAL_ADC_Start_DMA+0x160>)
 8001740:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001746:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <HAL_ADC_Start_DMA+0x164>)
 8001748:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	221c      	movs	r2, #28
 8001750:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0210 	orr.w	r2, r2, #16
 8001768:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0201 	orr.w	r2, r2, #1
 8001778:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3340      	adds	r3, #64	; 0x40
 8001784:	4619      	mov	r1, r3
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f001 f887 	bl	800289c <HAL_DMA_Start_IT>
 800178e:	4603      	mov	r3, r0
 8001790:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fddf 	bl	800135a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800179c:	e00d      	b.n	80017ba <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 80017a6:	e008      	b.n	80017ba <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80017b4:	e001      	b.n	80017ba <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017b6:	2302      	movs	r3, #2
 80017b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	50040300 	.word	0x50040300
 80017c8:	50040100 	.word	0x50040100
 80017cc:	50040000 	.word	0x50040000
 80017d0:	080020d5 	.word	0x080020d5
 80017d4:	080021ad 	.word	0x080021ad
 80017d8:	080021c9 	.word	0x080021c9

080017dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b0b6      	sub	sp, #216	; 0xd8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_ADC_ConfigChannel+0x22>
 8001836:	2302      	movs	r3, #2
 8001838:	e3d5      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x7ce>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fd9b 	bl	8001382 <LL_ADC_REG_IsConversionOngoing>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 83ba 	bne.w	8001fc8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b05      	cmp	r3, #5
 800185a:	d824      	bhi.n	80018a6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	3b02      	subs	r3, #2
 8001862:	2b03      	cmp	r3, #3
 8001864:	d81b      	bhi.n	800189e <HAL_ADC_ConfigChannel+0x86>
 8001866:	a201      	add	r2, pc, #4	; (adr r2, 800186c <HAL_ADC_ConfigChannel+0x54>)
 8001868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186c:	0800187d 	.word	0x0800187d
 8001870:	08001885 	.word	0x08001885
 8001874:	0800188d 	.word	0x0800188d
 8001878:	08001895 	.word	0x08001895
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	220c      	movs	r2, #12
 8001880:	605a      	str	r2, [r3, #4]
          break;
 8001882:	e011      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2212      	movs	r2, #18
 8001888:	605a      	str	r2, [r3, #4]
          break;
 800188a:	e00d      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	2218      	movs	r2, #24
 8001890:	605a      	str	r2, [r3, #4]
          break;
 8001892:	e009      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189a:	605a      	str	r2, [r3, #4]
          break;
 800189c:	e004      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2206      	movs	r2, #6
 80018a2:	605a      	str	r2, [r3, #4]
          break;
 80018a4:	e000      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80018a6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	f7ff fc52 	bl	800115e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fd5f 	bl	8001382 <LL_ADC_REG_IsConversionOngoing>
 80018c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fd6b 	bl	80013a8 <LL_ADC_INJ_IsConversionOngoing>
 80018d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f040 81c1 	bne.w	8001c62 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f040 81bc 	bne.w	8001c62 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018f2:	d10f      	bne.n	8001914 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff fc59 	bl	80011b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fc00 	bl	8001112 <LL_ADC_SetSamplingTimeCommonConfig>
 8001912:	e00e      	b.n	8001932 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	6819      	ldr	r1, [r3, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	461a      	mov	r2, r3
 8001922:	f7ff fc48 	bl	80011b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fbf0 	bl	8001112 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	08db      	lsrs	r3, r3, #3
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2b04      	cmp	r3, #4
 8001952:	d00a      	beq.n	800196a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6919      	ldr	r1, [r3, #16]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001964:	f7ff fb80 	bl	8001068 <LL_ADC_SetOffset>
 8001968:	e17b      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fb9d 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10a      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x17e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fb92 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	0e9b      	lsrs	r3, r3, #26
 8001990:	f003 021f 	and.w	r2, r3, #31
 8001994:	e01e      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x1bc>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fb87 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019ac:	fa93 f3a3 	rbit	r3, r3
 80019b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80019c4:	2320      	movs	r3, #32
 80019c6:	e004      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80019c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x1d4>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	0e9b      	lsrs	r3, r3, #26
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	e018      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x206>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001a10:	2320      	movs	r3, #32
 8001a12:	e004      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001a14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d106      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fb56 	bl	80010dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fb3a 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10a      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x244>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fb2f 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	0e9b      	lsrs	r3, r3, #26
 8001a56:	f003 021f 	and.w	r2, r3, #31
 8001a5a:	e01e      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x282>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2101      	movs	r1, #1
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fb24 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001a8a:	2320      	movs	r3, #32
 8001a8c:	e004      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001a8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d105      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x29a>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	0e9b      	lsrs	r3, r3, #26
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	e018      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x2cc>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ac6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001aca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ace:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	e004      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001ada:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ade:	fab3 f383 	clz	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d106      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2200      	movs	r2, #0
 8001aee:	2101      	movs	r1, #1
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff faf3 	bl	80010dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2102      	movs	r1, #2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fad7 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10a      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x30a>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2102      	movs	r1, #2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff facc 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	0e9b      	lsrs	r3, r3, #26
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	e01e      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x348>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2102      	movs	r1, #2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fac1 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001b50:	2320      	movs	r3, #32
 8001b52:	e004      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001b54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x360>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0e9b      	lsrs	r3, r3, #26
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	e016      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x38e>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001b98:	2320      	movs	r3, #32
 8001b9a:	e004      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d106      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fa92 	bl	80010dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2103      	movs	r1, #3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fa76 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10a      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x3cc>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fa6b 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	0e9b      	lsrs	r3, r3, #26
 8001bde:	f003 021f 	and.w	r2, r3, #31
 8001be2:	e017      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x3fc>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2103      	movs	r1, #3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fa60 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001bfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bfe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001c06:	2320      	movs	r3, #32
 8001c08:	e003      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001c0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x414>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0e9b      	lsrs	r3, r3, #26
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	e011      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x438>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001c44:	2320      	movs	r3, #32
 8001c46:	e003      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d106      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2103      	movs	r1, #3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fa3d 	bl	80010dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fb64 	bl	8001334 <LL_ADC_IsEnabled>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 8140 	bne.w	8001ef4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6819      	ldr	r1, [r3, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	461a      	mov	r2, r3
 8001c82:	f7ff fac3 	bl	800120c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	4a8f      	ldr	r2, [pc, #572]	; (8001ec8 <HAL_ADC_ConfigChannel+0x6b0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	f040 8131 	bne.w	8001ef4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10b      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x4a2>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	0e9b      	lsrs	r3, r3, #26
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	2b09      	cmp	r3, #9
 8001cb0:	bf94      	ite	ls
 8001cb2:	2301      	movls	r3, #1
 8001cb4:	2300      	movhi	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	e019      	b.n	8001cee <HAL_ADC_ConfigChannel+0x4d6>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cca:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001cd2:	2320      	movs	r3, #32
 8001cd4:	e003      	b.n	8001cde <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	2b09      	cmp	r3, #9
 8001ce6:	bf94      	ite	ls
 8001ce8:	2301      	movls	r3, #1
 8001cea:	2300      	movhi	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d079      	beq.n	8001de6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d107      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x4f6>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	0e9b      	lsrs	r3, r3, #26
 8001d04:	3301      	adds	r3, #1
 8001d06:	069b      	lsls	r3, r3, #26
 8001d08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d0c:	e015      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x522>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001d26:	2320      	movs	r3, #32
 8001d28:	e003      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2c:	fab3 f383 	clz	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	3301      	adds	r3, #1
 8001d34:	069b      	lsls	r3, r3, #26
 8001d36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d109      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x542>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	0e9b      	lsrs	r3, r3, #26
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	2101      	movs	r1, #1
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	e017      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x572>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001d72:	2320      	movs	r3, #32
 8001d74:	e003      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	2101      	movs	r1, #1
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	ea42 0103 	orr.w	r1, r2, r3
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10a      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x598>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	0e9b      	lsrs	r3, r3, #26
 8001da0:	3301      	adds	r3, #1
 8001da2:	f003 021f 	and.w	r2, r3, #31
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	051b      	lsls	r3, r3, #20
 8001dae:	e018      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x5ca>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	e003      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f003 021f 	and.w	r2, r3, #31
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de2:	430b      	orrs	r3, r1
 8001de4:	e081      	b.n	8001eea <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d107      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x5ea>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	0e9b      	lsrs	r3, r3, #26
 8001df8:	3301      	adds	r3, #1
 8001dfa:	069b      	lsls	r3, r3, #26
 8001dfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e00:	e015      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x616>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	e003      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	3301      	adds	r3, #1
 8001e28:	069b      	lsls	r3, r3, #26
 8001e2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d109      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x636>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	0e9b      	lsrs	r3, r3, #26
 8001e40:	3301      	adds	r3, #1
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	e017      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x666>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	61fb      	str	r3, [r7, #28]
  return result;
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001e66:	2320      	movs	r3, #32
 8001e68:	e003      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	3301      	adds	r3, #1
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	2101      	movs	r1, #1
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	ea42 0103 	orr.w	r1, r2, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10d      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x692>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0e9b      	lsrs	r3, r3, #26
 8001e94:	3301      	adds	r3, #1
 8001e96:	f003 021f 	and.w	r2, r3, #31
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b1e      	subs	r3, #30
 8001ea2:	051b      	lsls	r3, r3, #20
 8001ea4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	e01e      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x6d0>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	613b      	str	r3, [r7, #16]
  return result;
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d104      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	e006      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x6bc>
 8001ec6:	bf00      	nop
 8001ec8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f003 021f 	and.w	r2, r3, #31
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b1e      	subs	r3, #30
 8001ee2:	051b      	lsls	r3, r3, #20
 8001ee4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	6892      	ldr	r2, [r2, #8]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7ff f961 	bl	80011b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d06c      	beq.n	8001fda <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f00:	483c      	ldr	r0, [pc, #240]	; (8001ff4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f02:	f7ff f8a3 	bl	800104c <LL_ADC_GetCommonPathInternalCh>
 8001f06:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a3a      	ldr	r2, [pc, #232]	; (8001ff8 <HAL_ADC_ConfigChannel+0x7e0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d127      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d121      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a35      	ldr	r2, [pc, #212]	; (8001ffc <HAL_ADC_ConfigChannel+0x7e4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d157      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f32:	4619      	mov	r1, r3
 8001f34:	482f      	ldr	r0, [pc, #188]	; (8001ff4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f36:	f7ff f876 	bl	8001026 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f3a:	4b31      	ldr	r3, [pc, #196]	; (8002000 <HAL_ADC_ConfigChannel+0x7e8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	099b      	lsrs	r3, r3, #6
 8001f40:	4a30      	ldr	r2, [pc, #192]	; (8002004 <HAL_ADC_ConfigChannel+0x7ec>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	099b      	lsrs	r3, r3, #6
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f54:	e002      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f9      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f62:	e03a      	b.n	8001fda <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a27      	ldr	r2, [pc, #156]	; (8002008 <HAL_ADC_ConfigChannel+0x7f0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d113      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x77e>
 8001f6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10d      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <HAL_ADC_ConfigChannel+0x7e4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d12a      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f90:	f7ff f849 	bl	8001026 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f94:	e021      	b.n	8001fda <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1c      	ldr	r2, [pc, #112]	; (800200c <HAL_ADC_ConfigChannel+0x7f4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d11c      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d116      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_ADC_ConfigChannel+0x7e4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d111      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001fc2:	f7ff f830 	bl	8001026 <LL_ADC_SetCommonPathInternalCh>
 8001fc6:	e008      	b.n	8001fda <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001fe2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	37d8      	adds	r7, #216	; 0xd8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	80080000 	.word	0x80080000
 8001ff4:	50040300 	.word	0x50040300
 8001ff8:	c7520000 	.word	0xc7520000
 8001ffc:	50040000 	.word	0x50040000
 8002000:	20000000 	.word	0x20000000
 8002004:	053e2d63 	.word	0x053e2d63
 8002008:	cb840000 	.word	0xcb840000
 800200c:	80000001 	.word	0x80000001

08002010 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff f989 	bl	8001334 <LL_ADC_IsEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d14d      	bne.n	80020c4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <ADC_Enable+0xc0>)
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00d      	beq.n	8002052 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	f043 0210 	orr.w	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e039      	b.n	80020c6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff f958 	bl	800130c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800205c:	f7fe ffa0 	bl	8000fa0 <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002062:	e028      	b.n	80020b6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff f963 	bl	8001334 <LL_ADC_IsEnabled>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d104      	bne.n	800207e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff f947 	bl	800130c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800207e:	f7fe ff8f 	bl	8000fa0 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d914      	bls.n	80020b6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d00d      	beq.n	80020b6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f043 0210 	orr.w	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e007      	b.n	80020c6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d1cf      	bne.n	8002064 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	8000003f 	.word	0x8000003f

080020d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d14b      	bne.n	8002186 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d021      	beq.n	800214c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff f813 	bl	8001138 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d032      	beq.n	800217e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d12b      	bne.n	800217e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d11f      	bne.n	800217e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	f043 0201 	orr.w	r2, r3, #1
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	659a      	str	r2, [r3, #88]	; 0x58
 800214a:	e018      	b.n	800217e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d111      	bne.n	800217e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d105      	bne.n	800217e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff fb2c 	bl	80017dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002184:	e00e      	b.n	80021a4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7ff fb36 	bl	8001804 <HAL_ADC_ErrorCallback>
}
 8002198:	e004      	b.n	80021a4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f7ff fb18 	bl	80017f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	f043 0204 	orr.w	r2, r3, #4
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f7ff fb08 	bl	8001804 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021f4:	bf00      	nop
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <LL_ADC_IsEnabled>:
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <LL_ADC_IsEnabled+0x18>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <LL_ADC_IsEnabled+0x1a>
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_ADC_REG_IsConversionOngoing>:
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b04      	cmp	r3, #4
 8002234:	d101      	bne.n	800223a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b0a1      	sub	sp, #132	; 0x84
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002262:	2302      	movs	r3, #2
 8002264:	e089      	b.n	800237a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800226e:	2300      	movs	r3, #0
 8002270:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002272:	2300      	movs	r3, #0
 8002274:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a42      	ldr	r2, [pc, #264]	; (8002384 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d102      	bne.n	8002286 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002280:	4b41      	ldr	r3, [pc, #260]	; (8002388 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e001      	b.n	800228a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10b      	bne.n	80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e068      	b.n	800237a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ffb9 	bl	8002222 <LL_ADC_REG_IsConversionOngoing>
 80022b0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ffb3 	bl	8002222 <LL_ADC_REG_IsConversionOngoing>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d14a      	bne.n	8002358 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80022c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d147      	bne.n	8002358 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80022c8:	4b30      	ldr	r3, [pc, #192]	; (800238c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80022ca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d027      	beq.n	8002324 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80022d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022e6:	035b      	lsls	r3, r3, #13
 80022e8:	430b      	orrs	r3, r1
 80022ea:	431a      	orrs	r2, r3
 80022ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022f0:	4824      	ldr	r0, [pc, #144]	; (8002384 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80022f2:	f7ff ff83 	bl	80021fc <LL_ADC_IsEnabled>
 80022f6:	4604      	mov	r4, r0
 80022f8:	4823      	ldr	r0, [pc, #140]	; (8002388 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80022fa:	f7ff ff7f 	bl	80021fc <LL_ADC_IsEnabled>
 80022fe:	4603      	mov	r3, r0
 8002300:	4323      	orrs	r3, r4
 8002302:	2b00      	cmp	r3, #0
 8002304:	d132      	bne.n	800236c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800230e:	f023 030f 	bic.w	r3, r3, #15
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	6811      	ldr	r1, [r2, #0]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	6892      	ldr	r2, [r2, #8]
 800231a:	430a      	orrs	r2, r1
 800231c:	431a      	orrs	r2, r3
 800231e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002320:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002322:	e023      	b.n	800236c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800232c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800232e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002330:	4814      	ldr	r0, [pc, #80]	; (8002384 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002332:	f7ff ff63 	bl	80021fc <LL_ADC_IsEnabled>
 8002336:	4604      	mov	r4, r0
 8002338:	4813      	ldr	r0, [pc, #76]	; (8002388 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800233a:	f7ff ff5f 	bl	80021fc <LL_ADC_IsEnabled>
 800233e:	4603      	mov	r3, r0
 8002340:	4323      	orrs	r3, r4
 8002342:	2b00      	cmp	r3, #0
 8002344:	d112      	bne.n	800236c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800234e:	f023 030f 	bic.w	r3, r3, #15
 8002352:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002354:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002356:	e009      	b.n	800236c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	f043 0220 	orr.w	r2, r3, #32
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800236a:	e000      	b.n	800236e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800236c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002376:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800237a:	4618      	mov	r0, r3
 800237c:	3784      	adds	r7, #132	; 0x84
 800237e:	46bd      	mov	sp, r7
 8002380:	bd90      	pop	{r4, r7, pc}
 8002382:	bf00      	nop
 8002384:	50040000 	.word	0x50040000
 8002388:	50040100 	.word	0x50040100
 800238c:	50040300 	.word	0x50040300

08002390 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e0ed      	b.n	800257e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7fe fc64 	bl	8000c7c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0202 	bic.w	r2, r2, #2
 80023c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c4:	f7fe fdec 	bl	8000fa0 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ca:	e012      	b.n	80023f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023cc:	f7fe fde8 	bl	8000fa0 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b0a      	cmp	r3, #10
 80023d8:	d90b      	bls.n	80023f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2205      	movs	r2, #5
 80023ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0c5      	b.n	800257e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1e5      	bne.n	80023cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002410:	f7fe fdc6 	bl	8000fa0 <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002416:	e012      	b.n	800243e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002418:	f7fe fdc2 	bl	8000fa0 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b0a      	cmp	r3, #10
 8002424:	d90b      	bls.n	800243e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2205      	movs	r2, #5
 8002436:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e09f      	b.n	800257e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0e5      	beq.n	8002418 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7e1b      	ldrb	r3, [r3, #24]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d108      	bne.n	8002466 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e007      	b.n	8002476 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7e5b      	ldrb	r3, [r3, #25]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d108      	bne.n	8002490 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	e007      	b.n	80024a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800249e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7e9b      	ldrb	r3, [r3, #26]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d108      	bne.n	80024ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0220 	orr.w	r2, r2, #32
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	e007      	b.n	80024ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0220 	bic.w	r2, r2, #32
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7edb      	ldrb	r3, [r3, #27]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d108      	bne.n	80024e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0210 	bic.w	r2, r2, #16
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e007      	b.n	80024f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0210 	orr.w	r2, r2, #16
 80024f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7f1b      	ldrb	r3, [r3, #28]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d108      	bne.n	800250e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0208 	orr.w	r2, r2, #8
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e007      	b.n	800251e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0208 	bic.w	r2, r2, #8
 800251c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7f5b      	ldrb	r3, [r3, #29]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d108      	bne.n	8002538 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0204 	orr.w	r2, r2, #4
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	e007      	b.n	8002548 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0204 	bic.w	r2, r2, #4
 8002546:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	ea42 0103 	orr.w	r1, r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	1e5a      	subs	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <__NVIC_SetPriorityGrouping+0x44>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a4:	4013      	ands	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ba:	4a04      	ldr	r2, [pc, #16]	; (80025cc <__NVIC_SetPriorityGrouping+0x44>)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	60d3      	str	r3, [r2, #12]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <__NVIC_GetPriorityGrouping+0x18>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	f003 0307 	and.w	r3, r3, #7
}
 80025de:	4618      	mov	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	db0b      	blt.n	8002616 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	4907      	ldr	r1, [pc, #28]	; (8002624 <__NVIC_EnableIRQ+0x38>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	2001      	movs	r0, #1
 800260e:	fa00 f202 	lsl.w	r2, r0, r2
 8002612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000e100 	.word	0xe000e100

08002628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	6039      	str	r1, [r7, #0]
 8002632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002638:	2b00      	cmp	r3, #0
 800263a:	db0a      	blt.n	8002652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	490c      	ldr	r1, [pc, #48]	; (8002674 <__NVIC_SetPriority+0x4c>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	0112      	lsls	r2, r2, #4
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	440b      	add	r3, r1
 800264c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002650:	e00a      	b.n	8002668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4908      	ldr	r1, [pc, #32]	; (8002678 <__NVIC_SetPriority+0x50>)
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	3b04      	subs	r3, #4
 8002660:	0112      	lsls	r2, r2, #4
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	440b      	add	r3, r1
 8002666:	761a      	strb	r2, [r3, #24]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000e100 	.word	0xe000e100
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	; 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f1c3 0307 	rsb	r3, r3, #7
 8002696:	2b04      	cmp	r3, #4
 8002698:	bf28      	it	cs
 800269a:	2304      	movcs	r3, #4
 800269c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d902      	bls.n	80026ac <NVIC_EncodePriority+0x30>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3b03      	subs	r3, #3
 80026aa:	e000      	b.n	80026ae <NVIC_EncodePriority+0x32>
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	401a      	ands	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c4:	f04f 31ff 	mov.w	r1, #4294967295
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	43d9      	mvns	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	4313      	orrs	r3, r2
         );
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3724      	adds	r7, #36	; 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ff4c 	bl	8002588 <__NVIC_SetPriorityGrouping>
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800270a:	f7ff ff61 	bl	80025d0 <__NVIC_GetPriorityGrouping>
 800270e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	6978      	ldr	r0, [r7, #20]
 8002716:	f7ff ffb1 	bl	800267c <NVIC_EncodePriority>
 800271a:	4602      	mov	r2, r0
 800271c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ff80 	bl	8002628 <__NVIC_SetPriority>
}
 8002728:	bf00      	nop
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ff54 	bl	80025ec <__NVIC_EnableIRQ>
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e08d      	b.n	800287a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_DMA_Init+0x138>)
 8002766:	429a      	cmp	r2, r3
 8002768:	d80f      	bhi.n	800278a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	4b45      	ldr	r3, [pc, #276]	; (8002888 <HAL_DMA_Init+0x13c>)
 8002772:	4413      	add	r3, r2
 8002774:	4a45      	ldr	r2, [pc, #276]	; (800288c <HAL_DMA_Init+0x140>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	009a      	lsls	r2, r3, #2
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a42      	ldr	r2, [pc, #264]	; (8002890 <HAL_DMA_Init+0x144>)
 8002786:	641a      	str	r2, [r3, #64]	; 0x40
 8002788:	e00e      	b.n	80027a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	4b40      	ldr	r3, [pc, #256]	; (8002894 <HAL_DMA_Init+0x148>)
 8002792:	4413      	add	r3, r2
 8002794:	4a3d      	ldr	r2, [pc, #244]	; (800288c <HAL_DMA_Init+0x140>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	009a      	lsls	r2, r3, #2
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a3c      	ldr	r2, [pc, #240]	; (8002898 <HAL_DMA_Init+0x14c>)
 80027a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f9b6 	bl	8002b6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002808:	d102      	bne.n	8002810 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002824:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d010      	beq.n	8002850 <HAL_DMA_Init+0x104>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b04      	cmp	r3, #4
 8002834:	d80c      	bhi.n	8002850 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f9d6 	bl	8002be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	e008      	b.n	8002862 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40020407 	.word	0x40020407
 8002888:	bffdfff8 	.word	0xbffdfff8
 800288c:	cccccccd 	.word	0xcccccccd
 8002890:	40020000 	.word	0x40020000
 8002894:	bffdfbf8 	.word	0xbffdfbf8
 8002898:	40020400 	.word	0x40020400

0800289c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_DMA_Start_IT+0x20>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e066      	b.n	800298a <HAL_DMA_Start_IT+0xee>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d155      	bne.n	800297c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f8fb 	bl	8002af0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d008      	beq.n	8002914 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 020e 	orr.w	r2, r2, #14
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	e00f      	b.n	8002934 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0204 	bic.w	r2, r2, #4
 8002922:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 020a 	orr.w	r2, r2, #10
 8002932:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002950:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002968:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0201 	orr.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e005      	b.n	8002988 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002984:	2302      	movs	r3, #2
 8002986:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002988:	7dfb      	ldrb	r3, [r7, #23]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f003 031c 	and.w	r3, r3, #28
 80029b2:	2204      	movs	r2, #4
 80029b4:	409a      	lsls	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d026      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x7a>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d021      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d107      	bne.n	80029e6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0204 	bic.w	r2, r2, #4
 80029e4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f003 021c 	and.w	r2, r3, #28
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	2104      	movs	r1, #4
 80029f4:	fa01 f202 	lsl.w	r2, r1, r2
 80029f8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d071      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002a0a:	e06c      	b.n	8002ae6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a10:	f003 031c 	and.w	r3, r3, #28
 8002a14:	2202      	movs	r2, #2
 8002a16:	409a      	lsls	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d02e      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xec>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d029      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10b      	bne.n	8002a50 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 020a 	bic.w	r2, r2, #10
 8002a46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	f003 021c 	and.w	r2, r3, #28
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d038      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a7c:	e033      	b.n	8002ae6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f003 031c 	and.w	r3, r3, #28
 8002a86:	2208      	movs	r2, #8
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d02a      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x156>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d025      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 020e 	bic.w	r2, r2, #14
 8002aaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	f003 021c 	and.w	r2, r3, #28
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	2101      	movs	r1, #1
 8002aba:	fa01 f202 	lsl.w	r2, r1, r2
 8002abe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d004      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ae6:	bf00      	nop
 8002ae8:	bf00      	nop
}
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b06:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d004      	beq.n	8002b1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b18:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	f003 021c 	and.w	r2, r3, #28
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2101      	movs	r1, #1
 8002b28:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d108      	bne.n	8002b50 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b4e:	e007      	b.n	8002b60 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	60da      	str	r2, [r3, #12]
}
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d80a      	bhi.n	8002b96 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b8c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6493      	str	r3, [r2, #72]	; 0x48
 8002b94:	e007      	b.n	8002ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	009a      	lsls	r2, r3, #2
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002ba0:	4413      	add	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	3b08      	subs	r3, #8
 8002bae:	4a0c      	ldr	r2, [pc, #48]	; (8002be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002bbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	40020407 	.word	0x40020407
 8002bdc:	4002081c 	.word	0x4002081c
 8002be0:	cccccccd 	.word	0xcccccccd
 8002be4:	40020880 	.word	0x40020880

08002be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	461a      	mov	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a08      	ldr	r2, [pc, #32]	; (8002c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c0a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	2201      	movs	r2, #1
 8002c16:	409a      	lsls	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	1000823f 	.word	0x1000823f
 8002c2c:	40020940 	.word	0x40020940

08002c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3e:	e166      	b.n	8002f0e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	2101      	movs	r1, #1
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 8158 	beq.w	8002f08 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d00b      	beq.n	8002c78 <HAL_GPIO_Init+0x48>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d007      	beq.n	8002c78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c6c:	2b11      	cmp	r3, #17
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b12      	cmp	r3, #18
 8002c76:	d130      	bne.n	8002cda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	2203      	movs	r2, #3
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cae:	2201      	movs	r2, #1
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	f003 0201 	and.w	r2, r3, #1
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0xea>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b12      	cmp	r3, #18
 8002d18:	d123      	bne.n	8002d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	08da      	lsrs	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3208      	adds	r2, #8
 8002d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	220f      	movs	r2, #15
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	08da      	lsrs	r2, r3, #3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3208      	adds	r2, #8
 8002d5c:	6939      	ldr	r1, [r7, #16]
 8002d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 0203 	and.w	r2, r3, #3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80b2 	beq.w	8002f08 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da4:	4b61      	ldr	r3, [pc, #388]	; (8002f2c <HAL_GPIO_Init+0x2fc>)
 8002da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da8:	4a60      	ldr	r2, [pc, #384]	; (8002f2c <HAL_GPIO_Init+0x2fc>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6613      	str	r3, [r2, #96]	; 0x60
 8002db0:	4b5e      	ldr	r3, [pc, #376]	; (8002f2c <HAL_GPIO_Init+0x2fc>)
 8002db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dbc:	4a5c      	ldr	r2, [pc, #368]	; (8002f30 <HAL_GPIO_Init+0x300>)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002de6:	d02b      	beq.n	8002e40 <HAL_GPIO_Init+0x210>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a52      	ldr	r2, [pc, #328]	; (8002f34 <HAL_GPIO_Init+0x304>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d025      	beq.n	8002e3c <HAL_GPIO_Init+0x20c>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a51      	ldr	r2, [pc, #324]	; (8002f38 <HAL_GPIO_Init+0x308>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d01f      	beq.n	8002e38 <HAL_GPIO_Init+0x208>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a50      	ldr	r2, [pc, #320]	; (8002f3c <HAL_GPIO_Init+0x30c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d019      	beq.n	8002e34 <HAL_GPIO_Init+0x204>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a4f      	ldr	r2, [pc, #316]	; (8002f40 <HAL_GPIO_Init+0x310>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d013      	beq.n	8002e30 <HAL_GPIO_Init+0x200>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a4e      	ldr	r2, [pc, #312]	; (8002f44 <HAL_GPIO_Init+0x314>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00d      	beq.n	8002e2c <HAL_GPIO_Init+0x1fc>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a4d      	ldr	r2, [pc, #308]	; (8002f48 <HAL_GPIO_Init+0x318>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d007      	beq.n	8002e28 <HAL_GPIO_Init+0x1f8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a4c      	ldr	r2, [pc, #304]	; (8002f4c <HAL_GPIO_Init+0x31c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d101      	bne.n	8002e24 <HAL_GPIO_Init+0x1f4>
 8002e20:	2307      	movs	r3, #7
 8002e22:	e00e      	b.n	8002e42 <HAL_GPIO_Init+0x212>
 8002e24:	2308      	movs	r3, #8
 8002e26:	e00c      	b.n	8002e42 <HAL_GPIO_Init+0x212>
 8002e28:	2306      	movs	r3, #6
 8002e2a:	e00a      	b.n	8002e42 <HAL_GPIO_Init+0x212>
 8002e2c:	2305      	movs	r3, #5
 8002e2e:	e008      	b.n	8002e42 <HAL_GPIO_Init+0x212>
 8002e30:	2304      	movs	r3, #4
 8002e32:	e006      	b.n	8002e42 <HAL_GPIO_Init+0x212>
 8002e34:	2303      	movs	r3, #3
 8002e36:	e004      	b.n	8002e42 <HAL_GPIO_Init+0x212>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e002      	b.n	8002e42 <HAL_GPIO_Init+0x212>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_GPIO_Init+0x212>
 8002e40:	2300      	movs	r3, #0
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	f002 0203 	and.w	r2, r2, #3
 8002e48:	0092      	lsls	r2, r2, #2
 8002e4a:	4093      	lsls	r3, r2
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e52:	4937      	ldr	r1, [pc, #220]	; (8002f30 <HAL_GPIO_Init+0x300>)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	089b      	lsrs	r3, r3, #2
 8002e58:	3302      	adds	r3, #2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e60:	4b3b      	ldr	r3, [pc, #236]	; (8002f50 <HAL_GPIO_Init+0x320>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e84:	4a32      	ldr	r2, [pc, #200]	; (8002f50 <HAL_GPIO_Init+0x320>)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <HAL_GPIO_Init+0x320>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eae:	4a28      	ldr	r2, [pc, #160]	; (8002f50 <HAL_GPIO_Init+0x320>)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002eb4:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_GPIO_Init+0x320>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ed8:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <HAL_GPIO_Init+0x320>)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ede:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <HAL_GPIO_Init+0x320>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4013      	ands	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f02:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <HAL_GPIO_Init+0x320>)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f47f ae91 	bne.w	8002c40 <HAL_GPIO_Init+0x10>
  }
}
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40010000 	.word	0x40010000
 8002f34:	48000400 	.word	0x48000400
 8002f38:	48000800 	.word	0x48000800
 8002f3c:	48000c00 	.word	0x48000c00
 8002f40:	48001000 	.word	0x48001000
 8002f44:	48001400 	.word	0x48001400
 8002f48:	48001800 	.word	0x48001800
 8002f4c:	48001c00 	.word	0x48001c00
 8002f50:	40010400 	.word	0x40010400

08002f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
 8002f60:	4613      	mov	r3, r2
 8002f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f64:	787b      	ldrb	r3, [r7, #1]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f6a:	887a      	ldrh	r2, [r7, #2]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f70:	e002      	b.n	8002f78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	041a      	lsls	r2, r3, #16
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	43d9      	mvns	r1, r3
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	400b      	ands	r3, r1
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	619a      	str	r2, [r3, #24]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d006      	beq.n	8002fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fce:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd fbbe 	bl	8000758 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40010400 	.word	0x40010400

08002fe8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fec:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff8:	d102      	bne.n	8003000 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ffe:	e00b      	b.n	8003018 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003000:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300e:	d102      	bne.n	8003016 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003014:	e000      	b.n	8003018 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003016:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003018:	4618      	mov	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40007000 	.word	0x40007000

08003028 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d141      	bne.n	80030ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003036:	4b4b      	ldr	r3, [pc, #300]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800303e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003042:	d131      	bne.n	80030a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003044:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800304a:	4a46      	ldr	r2, [pc, #280]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003050:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003054:	4b43      	ldr	r3, [pc, #268]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800305c:	4a41      	ldr	r2, [pc, #260]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003062:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003064:	4b40      	ldr	r3, [pc, #256]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2232      	movs	r2, #50	; 0x32
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	4a3f      	ldr	r2, [pc, #252]	; (800316c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	0c9b      	lsrs	r3, r3, #18
 8003076:	3301      	adds	r3, #1
 8003078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800307a:	e002      	b.n	8003082 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3b01      	subs	r3, #1
 8003080:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003082:	4b38      	ldr	r3, [pc, #224]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308e:	d102      	bne.n	8003096 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f2      	bne.n	800307c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003096:	4b33      	ldr	r3, [pc, #204]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a2:	d158      	bne.n	8003156 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e057      	b.n	8003158 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030a8:	4b2e      	ldr	r3, [pc, #184]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ae:	4a2d      	ldr	r2, [pc, #180]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030b8:	e04d      	b.n	8003156 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c0:	d141      	bne.n	8003146 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030c2:	4b28      	ldr	r3, [pc, #160]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ce:	d131      	bne.n	8003134 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030d0:	4b24      	ldr	r3, [pc, #144]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030d6:	4a23      	ldr	r2, [pc, #140]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030e0:	4b20      	ldr	r3, [pc, #128]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030e8:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80030f0:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2232      	movs	r2, #50	; 0x32
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	4a1c      	ldr	r2, [pc, #112]	; (800316c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	0c9b      	lsrs	r3, r3, #18
 8003102:	3301      	adds	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003106:	e002      	b.n	800310e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3b01      	subs	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311a:	d102      	bne.n	8003122 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f2      	bne.n	8003108 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312e:	d112      	bne.n	8003156 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e011      	b.n	8003158 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800313a:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003140:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003144:	e007      	b.n	8003156 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003146:	4b07      	ldr	r3, [pc, #28]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800314e:	4a05      	ldr	r2, [pc, #20]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003154:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40007000 	.word	0x40007000
 8003168:	20000000 	.word	0x20000000
 800316c:	431bde83 	.word	0x431bde83

08003170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	; 0x28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	f000 bc76 	b.w	8003a70 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003184:	4ba1      	ldr	r3, [pc, #644]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800318e:	4b9f      	ldr	r3, [pc, #636]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80e6 	beq.w	8003372 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <HAL_RCC_OscConfig+0x4c>
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	f040 808d 	bne.w	80032ce <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	f040 8089 	bne.w	80032ce <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031bc:	4b93      	ldr	r3, [pc, #588]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d006      	beq.n	80031d6 <HAL_RCC_OscConfig+0x66>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d102      	bne.n	80031d6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f000 bc4d 	b.w	8003a70 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031da:	4b8c      	ldr	r3, [pc, #560]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_RCC_OscConfig+0x80>
 80031e6:	4b89      	ldr	r3, [pc, #548]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ee:	e005      	b.n	80031fc <HAL_RCC_OscConfig+0x8c>
 80031f0:	4b86      	ldr	r3, [pc, #536]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80031f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d224      	bcs.n	800324a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fe47 	bl	8003e98 <RCC_SetFlashLatencyFromMSIRange>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	f000 bc2d 	b.w	8003a70 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003216:	4b7d      	ldr	r3, [pc, #500]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a7c      	ldr	r2, [pc, #496]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 800321c:	f043 0308 	orr.w	r3, r3, #8
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	4b7a      	ldr	r3, [pc, #488]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	4977      	ldr	r1, [pc, #476]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003234:	4b75      	ldr	r3, [pc, #468]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	4972      	ldr	r1, [pc, #456]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]
 8003248:	e025      	b.n	8003296 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800324a:	4b70      	ldr	r3, [pc, #448]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a6f      	ldr	r2, [pc, #444]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003250:	f043 0308 	orr.w	r3, r3, #8
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b6d      	ldr	r3, [pc, #436]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	496a      	ldr	r1, [pc, #424]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003264:	4313      	orrs	r3, r2
 8003266:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003268:	4b68      	ldr	r3, [pc, #416]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	021b      	lsls	r3, r3, #8
 8003276:	4965      	ldr	r1, [pc, #404]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fe06 	bl	8003e98 <RCC_SetFlashLatencyFromMSIRange>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e3ec      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003296:	f000 fd1f 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 800329a:	4602      	mov	r2, r0
 800329c:	4b5b      	ldr	r3, [pc, #364]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	495a      	ldr	r1, [pc, #360]	; (8003410 <HAL_RCC_OscConfig+0x2a0>)
 80032a8:	5ccb      	ldrb	r3, [r1, r3]
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	4a58      	ldr	r2, [pc, #352]	; (8003414 <HAL_RCC_OscConfig+0x2a4>)
 80032b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032b6:	4b58      	ldr	r3, [pc, #352]	; (8003418 <HAL_RCC_OscConfig+0x2a8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd fd22 	bl	8000d04 <HAL_InitTick>
 80032c0:	4603      	mov	r3, r0
 80032c2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d052      	beq.n	8003370 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	e3d0      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d032      	beq.n	800333c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032d6:	4b4d      	ldr	r3, [pc, #308]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a4c      	ldr	r2, [pc, #304]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032e2:	f7fd fe5d 	bl	8000fa0 <HAL_GetTick>
 80032e6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ea:	f7fd fe59 	bl	8000fa0 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e3b9      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032fc:	4b43      	ldr	r3, [pc, #268]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003308:	4b40      	ldr	r3, [pc, #256]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a3f      	ldr	r2, [pc, #252]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 800330e:	f043 0308 	orr.w	r3, r3, #8
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b3d      	ldr	r3, [pc, #244]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	493a      	ldr	r1, [pc, #232]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003326:	4b39      	ldr	r3, [pc, #228]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	4935      	ldr	r1, [pc, #212]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]
 800333a:	e01a      	b.n	8003372 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800333c:	4b33      	ldr	r3, [pc, #204]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a32      	ldr	r2, [pc, #200]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003348:	f7fd fe2a 	bl	8000fa0 <HAL_GetTick>
 800334c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003350:	f7fd fe26 	bl	8000fa0 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e386      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003362:	4b2a      	ldr	r3, [pc, #168]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x1e0>
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003370:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d073      	beq.n	8003466 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d005      	beq.n	8003390 <HAL_RCC_OscConfig+0x220>
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d10e      	bne.n	80033a8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d10b      	bne.n	80033a8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	4b1e      	ldr	r3, [pc, #120]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d063      	beq.n	8003464 <HAL_RCC_OscConfig+0x2f4>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d15f      	bne.n	8003464 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e363      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b0:	d106      	bne.n	80033c0 <HAL_RCC_OscConfig+0x250>
 80033b2:	4b16      	ldr	r3, [pc, #88]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a15      	ldr	r2, [pc, #84]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e01d      	b.n	80033fc <HAL_RCC_OscConfig+0x28c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x274>
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a0f      	ldr	r2, [pc, #60]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80033d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a0c      	ldr	r2, [pc, #48]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0x28c>
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a08      	ldr	r2, [pc, #32]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80033ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a05      	ldr	r2, [pc, #20]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80033f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01b      	beq.n	800343c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fd fdcc 	bl	8000fa0 <HAL_GetTick>
 8003408:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800340a:	e010      	b.n	800342e <HAL_RCC_OscConfig+0x2be>
 800340c:	40021000 	.word	0x40021000
 8003410:	080050d8 	.word	0x080050d8
 8003414:	20000000 	.word	0x20000000
 8003418:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341c:	f7fd fdc0 	bl	8000fa0 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e320      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342e:	4ba0      	ldr	r3, [pc, #640]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x2ac>
 800343a:	e014      	b.n	8003466 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fd fdb0 	bl	8000fa0 <HAL_GetTick>
 8003440:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003444:	f7fd fdac 	bl	8000fa0 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e30c      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003456:	4b96      	ldr	r3, [pc, #600]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x2d4>
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d060      	beq.n	8003534 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d005      	beq.n	8003484 <HAL_RCC_OscConfig+0x314>
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	d119      	bne.n	80034b2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d116      	bne.n	80034b2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003484:	4b8a      	ldr	r3, [pc, #552]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_OscConfig+0x32c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e2e9      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b84      	ldr	r3, [pc, #528]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	061b      	lsls	r3, r3, #24
 80034aa:	4981      	ldr	r1, [pc, #516]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b0:	e040      	b.n	8003534 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d023      	beq.n	8003502 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ba:	4b7d      	ldr	r3, [pc, #500]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7c      	ldr	r2, [pc, #496]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 80034c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fd fd6b 	bl	8000fa0 <HAL_GetTick>
 80034ca:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ce:	f7fd fd67 	bl	8000fa0 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e2c7      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034e0:	4b73      	ldr	r3, [pc, #460]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	4b70      	ldr	r3, [pc, #448]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	061b      	lsls	r3, r3, #24
 80034fa:	496d      	ldr	r1, [pc, #436]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
 8003500:	e018      	b.n	8003534 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003502:	4b6b      	ldr	r3, [pc, #428]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a6a      	ldr	r2, [pc, #424]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 8003508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800350c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fd fd47 	bl	8000fa0 <HAL_GetTick>
 8003512:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003516:	f7fd fd43 	bl	8000fa0 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e2a3      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003528:	4b61      	ldr	r3, [pc, #388]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d07f      	beq.n	8003640 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d05f      	beq.n	8003608 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003548:	4b59      	ldr	r3, [pc, #356]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 800354a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699a      	ldr	r2, [r3, #24]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	429a      	cmp	r2, r3
 800355c:	d037      	beq.n	80035ce <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d006      	beq.n	8003576 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e27c      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01b      	beq.n	80035b8 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8003580:	4b4b      	ldr	r3, [pc, #300]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 8003582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003586:	4a4a      	ldr	r2, [pc, #296]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003590:	f7fd fd06 	bl	8000fa0 <HAL_GetTick>
 8003594:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003598:	f7fd fd02 	bl	8000fa0 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b11      	cmp	r3, #17
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e262      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035aa:	4b41      	ldr	r3, [pc, #260]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 80035ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1ef      	bne.n	8003598 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80035b8:	4b3d      	ldr	r3, [pc, #244]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 80035ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035be:	f023 0210 	bic.w	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	493a      	ldr	r1, [pc, #232]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ce:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 80035d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d4:	4a36      	ldr	r2, [pc, #216]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035de:	f7fd fcdf 	bl	8000fa0 <HAL_GetTick>
 80035e2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e6:	f7fd fcdb 	bl	8000fa0 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b11      	cmp	r3, #17
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e23b      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035f8:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 80035fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0ef      	beq.n	80035e6 <HAL_RCC_OscConfig+0x476>
 8003606:	e01b      	b.n	8003640 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003608:	4b29      	ldr	r3, [pc, #164]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 800360a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800360e:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fd fcc2 	bl	8000fa0 <HAL_GetTick>
 800361c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003620:	f7fd fcbe 	bl	8000fa0 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b11      	cmp	r3, #17
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e21e      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003632:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 8003634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ef      	bne.n	8003620 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80c1 	beq.w	80037d0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364e:	2300      	movs	r3, #0
 8003650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003654:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 8003656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10e      	bne.n	800367e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003660:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366a:	6593      	str	r3, [r2, #88]	; 0x58
 800366c:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <HAL_RCC_OscConfig+0x540>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003678:	2301      	movs	r3, #1
 800367a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <HAL_RCC_OscConfig+0x544>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d11c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <HAL_RCC_OscConfig+0x544>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <HAL_RCC_OscConfig+0x544>)
 8003690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003696:	f7fd fc83 	bl	8000fa0 <HAL_GetTick>
 800369a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800369c:	e00c      	b.n	80036b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369e:	f7fd fc7f 	bl	8000fa0 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d905      	bls.n	80036b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e1df      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b8:	4b99      	ldr	r3, [pc, #612]	; (8003920 <HAL_RCC_OscConfig+0x7b0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0ec      	beq.n	800369e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d02c      	beq.n	800372a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80036d0:	4b94      	ldr	r3, [pc, #592]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e2:	4990      	ldr	r1, [pc, #576]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80036f6:	4b8b      	ldr	r3, [pc, #556]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	4a89      	ldr	r2, [pc, #548]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 80036fe:	f043 0304 	orr.w	r3, r3, #4
 8003702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003706:	4b87      	ldr	r3, [pc, #540]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 8003708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370c:	4a85      	ldr	r2, [pc, #532]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003716:	e018      	b.n	800374a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003718:	4b82      	ldr	r3, [pc, #520]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	4a81      	ldr	r2, [pc, #516]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003728:	e00f      	b.n	800374a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800372a:	4b7e      	ldr	r3, [pc, #504]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	4a7c      	ldr	r2, [pc, #496]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 8003732:	f023 0301 	bic.w	r3, r3, #1
 8003736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800373a:	4b7a      	ldr	r3, [pc, #488]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 800373c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003740:	4a78      	ldr	r2, [pc, #480]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 8003742:	f023 0304 	bic.w	r3, r3, #4
 8003746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d016      	beq.n	8003780 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003752:	f7fd fc25 	bl	8000fa0 <HAL_GetTick>
 8003756:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fd fc21 	bl	8000fa0 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	; 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e17f      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003770:	4b6c      	ldr	r3, [pc, #432]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0ed      	beq.n	800375a <HAL_RCC_OscConfig+0x5ea>
 800377e:	e01d      	b.n	80037bc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fd fc0e 	bl	8000fa0 <HAL_GetTick>
 8003784:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003786:	e00a      	b.n	800379e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fd fc0a 	bl	8000fa0 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	; 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e168      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800379e:	4b61      	ldr	r3, [pc, #388]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ed      	bne.n	8003788 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80037ac:	4b5d      	ldr	r3, [pc, #372]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	4a5c      	ldr	r2, [pc, #368]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 80037b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d105      	bne.n	80037d0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c4:	4b57      	ldr	r3, [pc, #348]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	4a56      	ldr	r2, [pc, #344]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 80037ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d03c      	beq.n	8003856 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01c      	beq.n	800381e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037e4:	4b4f      	ldr	r3, [pc, #316]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 80037e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ea:	4a4e      	ldr	r2, [pc, #312]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f4:	f7fd fbd4 	bl	8000fa0 <HAL_GetTick>
 80037f8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037fc:	f7fd fbd0 	bl	8000fa0 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e130      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800380e:	4b45      	ldr	r3, [pc, #276]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 8003810:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ef      	beq.n	80037fc <HAL_RCC_OscConfig+0x68c>
 800381c:	e01b      	b.n	8003856 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800381e:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 8003820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003824:	4a3f      	ldr	r2, [pc, #252]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382e:	f7fd fbb7 	bl	8000fa0 <HAL_GetTick>
 8003832:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003836:	f7fd fbb3 	bl	8000fa0 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e113      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003848:	4b36      	ldr	r3, [pc, #216]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 800384a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1ef      	bne.n	8003836 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8107 	beq.w	8003a6e <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	2b02      	cmp	r3, #2
 8003866:	f040 80cf 	bne.w	8003a08 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800386a:	4b2e      	ldr	r3, [pc, #184]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f003 0203 	and.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	429a      	cmp	r2, r3
 800387c:	d12c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003888:	3b01      	subs	r3, #1
 800388a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d123      	bne.n	80038d8 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d11b      	bne.n	80038d8 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d113      	bne.n	80038d8 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	3b01      	subs	r3, #1
 80038be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d109      	bne.n	80038d8 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	085b      	lsrs	r3, r3, #1
 80038d0:	3b01      	subs	r3, #1
 80038d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d071      	beq.n	80039bc <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	2b0c      	cmp	r3, #12
 80038dc:	d06c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038de:	4b11      	ldr	r3, [pc, #68]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d105      	bne.n	80038f6 <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038ea:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e0ba      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a09      	ldr	r2, [pc, #36]	; (8003924 <HAL_RCC_OscConfig+0x7b4>)
 8003900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003904:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003906:	f7fd fb4b 	bl	8000fa0 <HAL_GetTick>
 800390a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800390c:	e00c      	b.n	8003928 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390e:	f7fd fb47 	bl	8000fa0 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d905      	bls.n	8003928 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e0a7      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
 8003920:	40007000 	.word	0x40007000
 8003924:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003928:	4b53      	ldr	r3, [pc, #332]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ec      	bne.n	800390e <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003934:	4b50      	ldr	r3, [pc, #320]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <HAL_RCC_OscConfig+0x90c>)
 800393a:	4013      	ands	r3, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003944:	3a01      	subs	r2, #1
 8003946:	0112      	lsls	r2, r2, #4
 8003948:	4311      	orrs	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800394e:	0212      	lsls	r2, r2, #8
 8003950:	4311      	orrs	r1, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003956:	0852      	lsrs	r2, r2, #1
 8003958:	3a01      	subs	r2, #1
 800395a:	0552      	lsls	r2, r2, #21
 800395c:	4311      	orrs	r1, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003962:	0852      	lsrs	r2, r2, #1
 8003964:	3a01      	subs	r2, #1
 8003966:	0652      	lsls	r2, r2, #25
 8003968:	4311      	orrs	r1, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800396e:	06d2      	lsls	r2, r2, #27
 8003970:	430a      	orrs	r2, r1
 8003972:	4941      	ldr	r1, [pc, #260]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 8003974:	4313      	orrs	r3, r2
 8003976:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003978:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a3e      	ldr	r2, [pc, #248]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 800397e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003982:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003984:	4b3c      	ldr	r3, [pc, #240]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4a3b      	ldr	r2, [pc, #236]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 800398a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800398e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003990:	f7fd fb06 	bl	8000fa0 <HAL_GetTick>
 8003994:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003998:	f7fd fb02 	bl	8000fa0 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e062      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039aa:	4b33      	ldr	r3, [pc, #204]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039b6:	e05a      	b.n	8003a6e <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e059      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039bc:	4b2e      	ldr	r3, [pc, #184]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d152      	bne.n	8003a6e <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039c8:	4b2b      	ldr	r3, [pc, #172]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a2a      	ldr	r2, [pc, #168]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 80039ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039d4:	4b28      	ldr	r3, [pc, #160]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4a27      	ldr	r2, [pc, #156]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 80039da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039e0:	f7fd fade 	bl	8000fa0 <HAL_GetTick>
 80039e4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e8:	f7fd fada 	bl	8000fa0 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e03a      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fa:	4b1f      	ldr	r3, [pc, #124]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x878>
 8003a06:	e032      	b.n	8003a6e <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	2b0c      	cmp	r3, #12
 8003a0c:	d02d      	beq.n	8003a6a <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a19      	ldr	r2, [pc, #100]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 8003a14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a18:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003a1a:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a26:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	4a13      	ldr	r2, [pc, #76]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 8003a2c:	f023 0303 	bic.w	r3, r3, #3
 8003a30:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	4a10      	ldr	r2, [pc, #64]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 8003a38:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a40:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fd faad 	bl	8000fa0 <HAL_GetTick>
 8003a46:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4a:	f7fd faa9 	bl	8000fa0 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e009      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a5c:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_RCC_OscConfig+0x908>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f0      	bne.n	8003a4a <HAL_RCC_OscConfig+0x8da>
 8003a68:	e001      	b.n	8003a6e <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3728      	adds	r7, #40	; 0x28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	019d800c 	.word	0x019d800c

08003a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e10f      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a98:	4b89      	ldr	r3, [pc, #548]	; (8003cc0 <HAL_RCC_ClockConfig+0x240>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d910      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b86      	ldr	r3, [pc, #536]	; (8003cc0 <HAL_RCC_ClockConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 020f 	bic.w	r2, r3, #15
 8003aae:	4984      	ldr	r1, [pc, #528]	; (8003cc0 <HAL_RCC_ClockConfig+0x240>)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b82      	ldr	r3, [pc, #520]	; (8003cc0 <HAL_RCC_ClockConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0f7      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8089 	beq.w	8003be8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d133      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ade:	4b79      	ldr	r3, [pc, #484]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0e4      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003aee:	f000 fa2d 	bl	8003f4c <RCC_GetSysClockFreqFromPLLSource>
 8003af2:	4603      	mov	r3, r0
 8003af4:	4a74      	ldr	r2, [pc, #464]	; (8003cc8 <HAL_RCC_ClockConfig+0x248>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d955      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003afa:	4b72      	ldr	r3, [pc, #456]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b06:	4b6f      	ldr	r3, [pc, #444]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b0e:	4a6d      	ldr	r2, [pc, #436]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	e044      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d03e      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x126>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d13a      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b30:	4b64      	ldr	r3, [pc, #400]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b38:	4a62      	ldr	r2, [pc, #392]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b3e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	e02f      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4e:	4b5d      	ldr	r3, [pc, #372]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d115      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e0ac      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b66:	4b57      	ldr	r3, [pc, #348]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e0a0      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b76:	4b53      	ldr	r3, [pc, #332]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e098      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003b86:	f000 f8a7 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4a4e      	ldr	r2, [pc, #312]	; (8003cc8 <HAL_RCC_ClockConfig+0x248>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d909      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b92:	4b4c      	ldr	r3, [pc, #304]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b9a:	4a4a      	ldr	r2, [pc, #296]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ba2:	2380      	movs	r3, #128	; 0x80
 8003ba4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ba6:	4b47      	ldr	r3, [pc, #284]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 0203 	bic.w	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4944      	ldr	r1, [pc, #272]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb8:	f7fd f9f2 	bl	8000fa0 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc0:	f7fd f9ee 	bl	8000fa0 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e070      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	4b3b      	ldr	r3, [pc, #236]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 020c 	and.w	r2, r3, #12
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d1eb      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf4:	4b33      	ldr	r3, [pc, #204]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	4930      	ldr	r1, [pc, #192]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	608b      	str	r3, [r1, #8]
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d105      	bne.n	8003c1a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c0e:	4b2d      	ldr	r3, [pc, #180]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	4a2c      	ldr	r2, [pc, #176]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003c14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c18:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c1a:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <HAL_RCC_ClockConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d210      	bcs.n	8003c4a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c28:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <HAL_RCC_ClockConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f023 020f 	bic.w	r2, r3, #15
 8003c30:	4923      	ldr	r1, [pc, #140]	; (8003cc0 <HAL_RCC_ClockConfig+0x240>)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c38:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <HAL_RCC_ClockConfig+0x240>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d001      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e036      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c56:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	4918      	ldr	r1, [pc, #96]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d009      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c74:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4910      	ldr	r1, [pc, #64]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c88:	f000 f826 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <HAL_RCC_ClockConfig+0x244>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	490c      	ldr	r1, [pc, #48]	; (8003ccc <HAL_RCC_ClockConfig+0x24c>)
 8003c9a:	5ccb      	ldrb	r3, [r1, r3]
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca4:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <HAL_RCC_ClockConfig+0x250>)
 8003ca6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <HAL_RCC_ClockConfig+0x254>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fd f829 	bl	8000d04 <HAL_InitTick>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	73fb      	strb	r3, [r7, #15]

  return status;
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40022000 	.word	0x40022000
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	04c4b400 	.word	0x04c4b400
 8003ccc:	080050d8 	.word	0x080050d8
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	20000004 	.word	0x20000004

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b089      	sub	sp, #36	; 0x24
 8003cdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ce6:	4b3e      	ldr	r3, [pc, #248]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cf0:	4b3b      	ldr	r3, [pc, #236]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0x34>
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d121      	bne.n	8003d4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d11e      	bne.n	8003d4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d0c:	4b34      	ldr	r3, [pc, #208]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d107      	bne.n	8003d28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d18:	4b31      	ldr	r3, [pc, #196]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1e:	0a1b      	lsrs	r3, r3, #8
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	e005      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d28:	4b2d      	ldr	r3, [pc, #180]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d34:	4a2b      	ldr	r2, [pc, #172]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10d      	bne.n	8003d60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d102      	bne.n	8003d56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d50:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d52:	61bb      	str	r3, [r7, #24]
 8003d54:	e004      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d5c:	4b23      	ldr	r3, [pc, #140]	; (8003dec <HAL_RCC_GetSysClockFreq+0x114>)
 8003d5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	d134      	bne.n	8003dd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d66:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d003      	beq.n	8003d7e <HAL_RCC_GetSysClockFreq+0xa6>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d003      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0xac>
 8003d7c:	e005      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d7e:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d80:	617b      	str	r3, [r7, #20]
      break;
 8003d82:	e005      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d84:	4b19      	ldr	r3, [pc, #100]	; (8003dec <HAL_RCC_GetSysClockFreq+0x114>)
 8003d86:	617b      	str	r3, [r7, #20]
      break;
 8003d88:	e002      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	617b      	str	r3, [r7, #20]
      break;
 8003d8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d90:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d9e:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	fb02 f203 	mul.w	r2, r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003db6:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	0e5b      	lsrs	r3, r3, #25
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dd0:	69bb      	ldr	r3, [r7, #24]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3724      	adds	r7, #36	; 0x24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40021000 	.word	0x40021000
 8003de4:	080050f0 	.word	0x080050f0
 8003de8:	00f42400 	.word	0x00f42400
 8003dec:	007a1200 	.word	0x007a1200

08003df0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df4:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000000 	.word	0x20000000

08003e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e0c:	f7ff fff0 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	0adb      	lsrs	r3, r3, #11
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	4904      	ldr	r1, [pc, #16]	; (8003e30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e1e:	5ccb      	ldrb	r3, [r1, r3]
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	080050e8 	.word	0x080050e8

08003e34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	220f      	movs	r2, #15
 8003e42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 0203 	and.w	r2, r3, #3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	08db      	lsrs	r3, r3, #3
 8003e6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <HAL_RCC_GetClockConfig+0x60>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 020f 	and.w	r2, r3, #15
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	601a      	str	r2, [r3, #0]
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40022000 	.word	0x40022000

08003e98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ea4:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003eb0:	f7ff f89a 	bl	8002fe8 <HAL_PWREx_GetVoltageRange>
 8003eb4:	6178      	str	r0, [r7, #20]
 8003eb6:	e014      	b.n	8003ee2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003eb8:	4b22      	ldr	r3, [pc, #136]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebc:	4a21      	ldr	r2, [pc, #132]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ec4:	4b1f      	ldr	r3, [pc, #124]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ed0:	f7ff f88a 	bl	8002fe8 <HAL_PWREx_GetVoltageRange>
 8003ed4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee8:	d10b      	bne.n	8003f02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b80      	cmp	r3, #128	; 0x80
 8003eee:	d913      	bls.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ef4:	d902      	bls.n	8003efc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	e00d      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003efc:	2301      	movs	r3, #1
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	e00a      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b7f      	cmp	r3, #127	; 0x7f
 8003f06:	d902      	bls.n	8003f0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003f08:	2302      	movs	r3, #2
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	e004      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b70      	cmp	r3, #112	; 0x70
 8003f12:	d101      	bne.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f14:	2301      	movs	r3, #1
 8003f16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f023 020f 	bic.w	r2, r3, #15
 8003f20:	4909      	ldr	r1, [pc, #36]	; (8003f48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d001      	beq.n	8003f3a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40022000 	.word	0x40022000

08003f4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003f56:	4b2d      	ldr	r3, [pc, #180]	; (800400c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d118      	bne.n	8003f94 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f62:	4b2a      	ldr	r3, [pc, #168]	; (800400c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d107      	bne.n	8003f7e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f6e:	4b27      	ldr	r3, [pc, #156]	; (800400c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f74:	0a1b      	lsrs	r3, r3, #8
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e005      	b.n	8003f8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f7e:	4b23      	ldr	r3, [pc, #140]	; (800400c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	091b      	lsrs	r3, r3, #4
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f8a:	4a21      	ldr	r2, [pc, #132]	; (8004010 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f92:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f94:	4b1d      	ldr	r3, [pc, #116]	; (800400c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d003      	beq.n	8003fac <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d003      	beq.n	8003fb2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8003faa:	e005      	b.n	8003fb8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003fae:	613b      	str	r3, [r7, #16]
    break;
 8003fb0:	e005      	b.n	8003fbe <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003fb2:	4b19      	ldr	r3, [pc, #100]	; (8004018 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003fb4:	613b      	str	r3, [r7, #16]
    break;
 8003fb6:	e002      	b.n	8003fbe <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	613b      	str	r3, [r7, #16]
    break;
 8003fbc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fbe:	4b13      	ldr	r3, [pc, #76]	; (800400c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	091b      	lsrs	r3, r3, #4
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	3301      	adds	r3, #1
 8003fca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	0a1b      	lsrs	r3, r3, #8
 8003fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	fb02 f203 	mul.w	r2, r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fe4:	4b09      	ldr	r3, [pc, #36]	; (800400c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	0e5b      	lsrs	r3, r3, #25
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003ffe:	683b      	ldr	r3, [r7, #0]
}
 8004000:	4618      	mov	r0, r3
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40021000 	.word	0x40021000
 8004010:	080050f0 	.word	0x080050f0
 8004014:	00f42400 	.word	0x00f42400
 8004018:	007a1200 	.word	0x007a1200

0800401c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004024:	2300      	movs	r3, #0
 8004026:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004028:	2300      	movs	r3, #0
 800402a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004034:	2b00      	cmp	r3, #0
 8004036:	d040      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403c:	2b80      	cmp	r3, #128	; 0x80
 800403e:	d02a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004040:	2b80      	cmp	r3, #128	; 0x80
 8004042:	d825      	bhi.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004044:	2b60      	cmp	r3, #96	; 0x60
 8004046:	d026      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004048:	2b60      	cmp	r3, #96	; 0x60
 800404a:	d821      	bhi.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800404c:	2b40      	cmp	r3, #64	; 0x40
 800404e:	d006      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	d81d      	bhi.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d009      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004058:	2b20      	cmp	r3, #32
 800405a:	d010      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800405c:	e018      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800405e:	4b89      	ldr	r3, [pc, #548]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	4a88      	ldr	r2, [pc, #544]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800406a:	e015      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3304      	adds	r3, #4
 8004070:	2100      	movs	r1, #0
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fb3e 	bl	80046f4 <RCCEx_PLLSAI1_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800407c:	e00c      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3320      	adds	r3, #32
 8004082:	2100      	movs	r1, #0
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fc29 	bl	80048dc <RCCEx_PLLSAI2_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800408e:	e003      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	74fb      	strb	r3, [r7, #19]
      break;
 8004094:	e000      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004098:	7cfb      	ldrb	r3, [r7, #19]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10b      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800409e:	4b79      	ldr	r3, [pc, #484]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040a4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ac:	4975      	ldr	r1, [pc, #468]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80040b4:	e001      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b6:	7cfb      	ldrb	r3, [r7, #19]
 80040b8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d047      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ce:	d030      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80040d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d4:	d82a      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80040d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040da:	d02a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80040dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e0:	d824      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80040e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e6:	d008      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xde>
 80040e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ec:	d81e      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80040f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f6:	d010      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80040f8:	e018      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040fa:	4b62      	ldr	r3, [pc, #392]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	4a61      	ldr	r2, [pc, #388]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004104:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004106:	e015      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f000 faf0 	bl	80046f4 <RCCEx_PLLSAI1_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004118:	e00c      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3320      	adds	r3, #32
 800411e:	2100      	movs	r1, #0
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fbdb 	bl	80048dc <RCCEx_PLLSAI2_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800412a:	e003      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	74fb      	strb	r3, [r7, #19]
      break;
 8004130:	e000      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10b      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800413a:	4b52      	ldr	r3, [pc, #328]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800413c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	494e      	ldr	r1, [pc, #312]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004150:	e001      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 809f 	beq.w	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004164:	2300      	movs	r3, #0
 8004166:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004168:	4b46      	ldr	r3, [pc, #280]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800416a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004178:	2300      	movs	r3, #0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00d      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	4b41      	ldr	r3, [pc, #260]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004182:	4a40      	ldr	r2, [pc, #256]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	6593      	str	r3, [r2, #88]	; 0x58
 800418a:	4b3e      	ldr	r3, [pc, #248]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004196:	2301      	movs	r3, #1
 8004198:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800419a:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a3a      	ldr	r2, [pc, #232]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80041a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041a6:	f7fc fefb 	bl	8000fa0 <HAL_GetTick>
 80041aa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041ac:	e009      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ae:	f7fc fef7 	bl	8000fa0 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d902      	bls.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	74fb      	strb	r3, [r7, #19]
        break;
 80041c0:	e005      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041c2:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0ef      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80041ce:	7cfb      	ldrb	r3, [r7, #19]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d15b      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041d4:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041de:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01f      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d019      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041f2:	4b24      	ldr	r3, [pc, #144]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041fe:	4b21      	ldr	r3, [pc, #132]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004204:	4a1f      	ldr	r2, [pc, #124]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800420e:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	4a1b      	ldr	r2, [pc, #108]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800421a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800421e:	4a19      	ldr	r2, [pc, #100]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d016      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fc feb6 	bl	8000fa0 <HAL_GetTick>
 8004234:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004236:	e00b      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fc feb2 	bl	8000fa0 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	; 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d902      	bls.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	74fb      	strb	r3, [r7, #19]
            break;
 800424e:	e006      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0ec      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800425e:	7cfb      	ldrb	r3, [r7, #19]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10c      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004264:	4b07      	ldr	r3, [pc, #28]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004274:	4903      	ldr	r1, [pc, #12]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800427c:	e008      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800427e:	7cfb      	ldrb	r3, [r7, #19]
 8004280:	74bb      	strb	r3, [r7, #18]
 8004282:	e005      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004284:	40021000 	.word	0x40021000
 8004288:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004290:	7c7b      	ldrb	r3, [r7, #17]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d105      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004296:	4ba0      	ldr	r3, [pc, #640]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	4a9f      	ldr	r2, [pc, #636]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800429c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042ae:	4b9a      	ldr	r3, [pc, #616]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f023 0203 	bic.w	r2, r3, #3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042bc:	4996      	ldr	r1, [pc, #600]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042d0:	4b91      	ldr	r3, [pc, #580]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	f023 020c 	bic.w	r2, r3, #12
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	498e      	ldr	r1, [pc, #568]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042f2:	4b89      	ldr	r3, [pc, #548]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004300:	4985      	ldr	r1, [pc, #532]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004314:	4b80      	ldr	r3, [pc, #512]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004322:	497d      	ldr	r1, [pc, #500]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0310 	and.w	r3, r3, #16
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004336:	4b78      	ldr	r3, [pc, #480]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004344:	4974      	ldr	r1, [pc, #464]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004358:	4b6f      	ldr	r3, [pc, #444]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004366:	496c      	ldr	r1, [pc, #432]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800437a:	4b67      	ldr	r3, [pc, #412]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004388:	4963      	ldr	r1, [pc, #396]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800439c:	4b5e      	ldr	r3, [pc, #376]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043aa:	495b      	ldr	r1, [pc, #364]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043be:	4b56      	ldr	r3, [pc, #344]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	4952      	ldr	r1, [pc, #328]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043e0:	4b4d      	ldr	r3, [pc, #308]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	494a      	ldr	r1, [pc, #296]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004402:	4b45      	ldr	r3, [pc, #276]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004410:	4941      	ldr	r1, [pc, #260]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004424:	4b3c      	ldr	r3, [pc, #240]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004426:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800442a:	f023 0203 	bic.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004432:	4939      	ldr	r1, [pc, #228]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d028      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004446:	4b34      	ldr	r3, [pc, #208]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004454:	4930      	ldr	r1, [pc, #192]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004464:	d106      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004466:	4b2c      	ldr	r3, [pc, #176]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	4a2b      	ldr	r2, [pc, #172]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800446c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004470:	60d3      	str	r3, [r2, #12]
 8004472:	e011      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004478:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800447c:	d10c      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3304      	adds	r3, #4
 8004482:	2101      	movs	r1, #1
 8004484:	4618      	mov	r0, r3
 8004486:	f000 f935 	bl	80046f4 <RCCEx_PLLSAI1_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800448e:	7cfb      	ldrb	r3, [r7, #19]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004494:	7cfb      	ldrb	r3, [r7, #19]
 8004496:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d04d      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044ac:	d108      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80044ae:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044b4:	4a18      	ldr	r2, [pc, #96]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80044be:	e012      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80044c0:	4b15      	ldr	r3, [pc, #84]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044c6:	4a14      	ldr	r2, [pc, #80]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80044d0:	4b11      	ldr	r3, [pc, #68]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044de:	490e      	ldr	r1, [pc, #56]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ee:	d106      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f0:	4b09      	ldr	r3, [pc, #36]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4a08      	ldr	r2, [pc, #32]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044fa:	60d3      	str	r3, [r2, #12]
 80044fc:	e020      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004506:	d109      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004508:	4b03      	ldr	r3, [pc, #12]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4a02      	ldr	r2, [pc, #8]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800450e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004512:	60d3      	str	r3, [r2, #12]
 8004514:	e014      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004524:	d10c      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3304      	adds	r3, #4
 800452a:	2101      	movs	r1, #1
 800452c:	4618      	mov	r0, r3
 800452e:	f000 f8e1 	bl	80046f4 <RCCEx_PLLSAI1_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004536:	7cfb      	ldrb	r3, [r7, #19]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800453c:	7cfb      	ldrb	r3, [r7, #19]
 800453e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d028      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800454c:	4b68      	ldr	r3, [pc, #416]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800455a:	4965      	ldr	r1, [pc, #404]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800456a:	d106      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800456c:	4b60      	ldr	r3, [pc, #384]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4a5f      	ldr	r2, [pc, #380]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004576:	60d3      	str	r3, [r2, #12]
 8004578:	e011      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800457e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004582:	d10c      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3304      	adds	r3, #4
 8004588:	2101      	movs	r1, #1
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f8b2 	bl	80046f4 <RCCEx_PLLSAI1_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800459a:	7cfb      	ldrb	r3, [r7, #19]
 800459c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01e      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045aa:	4b51      	ldr	r3, [pc, #324]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ba:	494d      	ldr	r1, [pc, #308]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3304      	adds	r3, #4
 80045d2:	2102      	movs	r1, #2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 f88d 	bl	80046f4 <RCCEx_PLLSAI1_Config>
 80045da:	4603      	mov	r3, r0
 80045dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045de:	7cfb      	ldrb	r3, [r7, #19]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80045e4:	7cfb      	ldrb	r3, [r7, #19]
 80045e6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00b      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045f4:	4b3e      	ldr	r3, [pc, #248]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80045f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045fa:	f023 0204 	bic.w	r2, r3, #4
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004604:	493a      	ldr	r1, [pc, #232]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00b      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004618:	4b35      	ldr	r3, [pc, #212]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800461a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800461e:	f023 0218 	bic.w	r2, r3, #24
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004628:	4931      	ldr	r1, [pc, #196]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d035      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800463c:	4b2c      	ldr	r3, [pc, #176]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a2b      	ldr	r2, [pc, #172]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004648:	f7fc fcaa 	bl	8000fa0 <HAL_GetTick>
 800464c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800464e:	e009      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004650:	f7fc fca6 	bl	8000fa0 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d902      	bls.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	74fb      	strb	r3, [r7, #19]
        break;
 8004662:	e005      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004664:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1ef      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004670:	7cfb      	ldrb	r3, [r7, #19]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d113      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004676:	4b1e      	ldr	r3, [pc, #120]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004678:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800467c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004686:	491a      	ldr	r1, [pc, #104]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3320      	adds	r3, #32
 8004692:	2102      	movs	r1, #2
 8004694:	4618      	mov	r0, r3
 8004696:	f000 f921 	bl	80048dc <RCCEx_PLLSAI2_Config>
 800469a:	4603      	mov	r3, r0
 800469c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d017      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80046b4:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80046b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c4:	490a      	ldr	r1, [pc, #40]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046d6:	d105      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80046de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000

080046f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004702:	4b72      	ldr	r3, [pc, #456]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00e      	beq.n	800472c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800470e:	4b6f      	ldr	r3, [pc, #444]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f003 0203 	and.w	r2, r3, #3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d103      	bne.n	8004726 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
       ||
 8004722:	2b00      	cmp	r3, #0
 8004724:	d142      	bne.n	80047ac <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
 800472a:	e03f      	b.n	80047ac <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b03      	cmp	r3, #3
 8004732:	d018      	beq.n	8004766 <RCCEx_PLLSAI1_Config+0x72>
 8004734:	2b03      	cmp	r3, #3
 8004736:	d825      	bhi.n	8004784 <RCCEx_PLLSAI1_Config+0x90>
 8004738:	2b01      	cmp	r3, #1
 800473a:	d002      	beq.n	8004742 <RCCEx_PLLSAI1_Config+0x4e>
 800473c:	2b02      	cmp	r3, #2
 800473e:	d009      	beq.n	8004754 <RCCEx_PLLSAI1_Config+0x60>
 8004740:	e020      	b.n	8004784 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004742:	4b62      	ldr	r3, [pc, #392]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d11d      	bne.n	800478a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004752:	e01a      	b.n	800478a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004754:	4b5d      	ldr	r3, [pc, #372]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475c:	2b00      	cmp	r3, #0
 800475e:	d116      	bne.n	800478e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004764:	e013      	b.n	800478e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004766:	4b59      	ldr	r3, [pc, #356]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10f      	bne.n	8004792 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004772:	4b56      	ldr	r3, [pc, #344]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004782:	e006      	b.n	8004792 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      break;
 8004788:	e004      	b.n	8004794 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800478a:	bf00      	nop
 800478c:	e002      	b.n	8004794 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800478e:	bf00      	nop
 8004790:	e000      	b.n	8004794 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004792:	bf00      	nop
    }

    if(status == HAL_OK)
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d108      	bne.n	80047ac <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800479a:	4b4c      	ldr	r3, [pc, #304]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f023 0203 	bic.w	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4949      	ldr	r1, [pc, #292]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f040 8086 	bne.w	80048c0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047b4:	4b45      	ldr	r3, [pc, #276]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a44      	ldr	r2, [pc, #272]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c0:	f7fc fbee 	bl	8000fa0 <HAL_GetTick>
 80047c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047c6:	e009      	b.n	80047dc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047c8:	f7fc fbea 	bl	8000fa0 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d902      	bls.n	80047dc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	73fb      	strb	r3, [r7, #15]
        break;
 80047da:	e005      	b.n	80047e8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047dc:	4b3b      	ldr	r3, [pc, #236]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1ef      	bne.n	80047c8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d168      	bne.n	80048c0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d113      	bne.n	800481c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047f4:	4b35      	ldr	r3, [pc, #212]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	4b35      	ldr	r3, [pc, #212]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6892      	ldr	r2, [r2, #8]
 8004800:	0211      	lsls	r1, r2, #8
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	68d2      	ldr	r2, [r2, #12]
 8004806:	06d2      	lsls	r2, r2, #27
 8004808:	4311      	orrs	r1, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6852      	ldr	r2, [r2, #4]
 800480e:	3a01      	subs	r2, #1
 8004810:	0112      	lsls	r2, r2, #4
 8004812:	430a      	orrs	r2, r1
 8004814:	492d      	ldr	r1, [pc, #180]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004816:	4313      	orrs	r3, r2
 8004818:	610b      	str	r3, [r1, #16]
 800481a:	e02d      	b.n	8004878 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d115      	bne.n	800484e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004822:	4b2a      	ldr	r3, [pc, #168]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004828:	4013      	ands	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6892      	ldr	r2, [r2, #8]
 800482e:	0211      	lsls	r1, r2, #8
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6912      	ldr	r2, [r2, #16]
 8004834:	0852      	lsrs	r2, r2, #1
 8004836:	3a01      	subs	r2, #1
 8004838:	0552      	lsls	r2, r2, #21
 800483a:	4311      	orrs	r1, r2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6852      	ldr	r2, [r2, #4]
 8004840:	3a01      	subs	r2, #1
 8004842:	0112      	lsls	r2, r2, #4
 8004844:	430a      	orrs	r2, r1
 8004846:	4921      	ldr	r1, [pc, #132]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004848:	4313      	orrs	r3, r2
 800484a:	610b      	str	r3, [r1, #16]
 800484c:	e014      	b.n	8004878 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800484e:	4b1f      	ldr	r3, [pc, #124]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	4b21      	ldr	r3, [pc, #132]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004854:	4013      	ands	r3, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6892      	ldr	r2, [r2, #8]
 800485a:	0211      	lsls	r1, r2, #8
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6952      	ldr	r2, [r2, #20]
 8004860:	0852      	lsrs	r2, r2, #1
 8004862:	3a01      	subs	r2, #1
 8004864:	0652      	lsls	r2, r2, #25
 8004866:	4311      	orrs	r1, r2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6852      	ldr	r2, [r2, #4]
 800486c:	3a01      	subs	r2, #1
 800486e:	0112      	lsls	r2, r2, #4
 8004870:	430a      	orrs	r2, r1
 8004872:	4916      	ldr	r1, [pc, #88]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004874:	4313      	orrs	r3, r2
 8004876:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004878:	4b14      	ldr	r3, [pc, #80]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a13      	ldr	r2, [pc, #76]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800487e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004882:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7fc fb8c 	bl	8000fa0 <HAL_GetTick>
 8004888:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800488a:	e009      	b.n	80048a0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800488c:	f7fc fb88 	bl	8000fa0 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d902      	bls.n	80048a0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	73fb      	strb	r3, [r7, #15]
          break;
 800489e:	e005      	b.n	80048ac <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048a0:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0ef      	beq.n	800488c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	4904      	ldr	r1, [pc, #16]	; (80048cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000
 80048d0:	07ff800f 	.word	0x07ff800f
 80048d4:	ff9f800f 	.word	0xff9f800f
 80048d8:	f9ff800f 	.word	0xf9ff800f

080048dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ea:	4b72      	ldr	r3, [pc, #456]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00e      	beq.n	8004914 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048f6:	4b6f      	ldr	r3, [pc, #444]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f003 0203 	and.w	r2, r3, #3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d103      	bne.n	800490e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
       ||
 800490a:	2b00      	cmp	r3, #0
 800490c:	d142      	bne.n	8004994 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
 8004912:	e03f      	b.n	8004994 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b03      	cmp	r3, #3
 800491a:	d018      	beq.n	800494e <RCCEx_PLLSAI2_Config+0x72>
 800491c:	2b03      	cmp	r3, #3
 800491e:	d825      	bhi.n	800496c <RCCEx_PLLSAI2_Config+0x90>
 8004920:	2b01      	cmp	r3, #1
 8004922:	d002      	beq.n	800492a <RCCEx_PLLSAI2_Config+0x4e>
 8004924:	2b02      	cmp	r3, #2
 8004926:	d009      	beq.n	800493c <RCCEx_PLLSAI2_Config+0x60>
 8004928:	e020      	b.n	800496c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800492a:	4b62      	ldr	r3, [pc, #392]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d11d      	bne.n	8004972 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800493a:	e01a      	b.n	8004972 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800493c:	4b5d      	ldr	r3, [pc, #372]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004944:	2b00      	cmp	r3, #0
 8004946:	d116      	bne.n	8004976 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800494c:	e013      	b.n	8004976 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800494e:	4b59      	ldr	r3, [pc, #356]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10f      	bne.n	800497a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800495a:	4b56      	ldr	r3, [pc, #344]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800496a:	e006      	b.n	800497a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
      break;
 8004970:	e004      	b.n	800497c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004972:	bf00      	nop
 8004974:	e002      	b.n	800497c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004976:	bf00      	nop
 8004978:	e000      	b.n	800497c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800497a:	bf00      	nop
    }

    if(status == HAL_OK)
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d108      	bne.n	8004994 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004982:	4b4c      	ldr	r3, [pc, #304]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f023 0203 	bic.w	r2, r3, #3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4949      	ldr	r1, [pc, #292]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004990:	4313      	orrs	r3, r2
 8004992:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b00      	cmp	r3, #0
 8004998:	f040 8086 	bne.w	8004aa8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800499c:	4b45      	ldr	r3, [pc, #276]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a44      	ldr	r2, [pc, #272]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a8:	f7fc fafa 	bl	8000fa0 <HAL_GetTick>
 80049ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049ae:	e009      	b.n	80049c4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049b0:	f7fc faf6 	bl	8000fa0 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d902      	bls.n	80049c4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	73fb      	strb	r3, [r7, #15]
        break;
 80049c2:	e005      	b.n	80049d0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049c4:	4b3b      	ldr	r3, [pc, #236]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1ef      	bne.n	80049b0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d168      	bne.n	8004aa8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d113      	bne.n	8004a04 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049dc:	4b35      	ldr	r3, [pc, #212]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049de:	695a      	ldr	r2, [r3, #20]
 80049e0:	4b35      	ldr	r3, [pc, #212]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6892      	ldr	r2, [r2, #8]
 80049e8:	0211      	lsls	r1, r2, #8
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68d2      	ldr	r2, [r2, #12]
 80049ee:	06d2      	lsls	r2, r2, #27
 80049f0:	4311      	orrs	r1, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6852      	ldr	r2, [r2, #4]
 80049f6:	3a01      	subs	r2, #1
 80049f8:	0112      	lsls	r2, r2, #4
 80049fa:	430a      	orrs	r2, r1
 80049fc:	492d      	ldr	r1, [pc, #180]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	614b      	str	r3, [r1, #20]
 8004a02:	e02d      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d115      	bne.n	8004a36 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a0a:	4b2a      	ldr	r3, [pc, #168]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	4b2b      	ldr	r3, [pc, #172]	; (8004abc <RCCEx_PLLSAI2_Config+0x1e0>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6892      	ldr	r2, [r2, #8]
 8004a16:	0211      	lsls	r1, r2, #8
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6912      	ldr	r2, [r2, #16]
 8004a1c:	0852      	lsrs	r2, r2, #1
 8004a1e:	3a01      	subs	r2, #1
 8004a20:	0552      	lsls	r2, r2, #21
 8004a22:	4311      	orrs	r1, r2
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6852      	ldr	r2, [r2, #4]
 8004a28:	3a01      	subs	r2, #1
 8004a2a:	0112      	lsls	r2, r2, #4
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	4921      	ldr	r1, [pc, #132]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	614b      	str	r3, [r1, #20]
 8004a34:	e014      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a36:	4b1f      	ldr	r3, [pc, #124]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a38:	695a      	ldr	r2, [r3, #20]
 8004a3a:	4b21      	ldr	r3, [pc, #132]	; (8004ac0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6892      	ldr	r2, [r2, #8]
 8004a42:	0211      	lsls	r1, r2, #8
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6952      	ldr	r2, [r2, #20]
 8004a48:	0852      	lsrs	r2, r2, #1
 8004a4a:	3a01      	subs	r2, #1
 8004a4c:	0652      	lsls	r2, r2, #25
 8004a4e:	4311      	orrs	r1, r2
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6852      	ldr	r2, [r2, #4]
 8004a54:	3a01      	subs	r2, #1
 8004a56:	0112      	lsls	r2, r2, #4
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	4916      	ldr	r1, [pc, #88]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a60:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a13      	ldr	r2, [pc, #76]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6c:	f7fc fa98 	bl	8000fa0 <HAL_GetTick>
 8004a70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a72:	e009      	b.n	8004a88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a74:	f7fc fa94 	bl	8000fa0 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d902      	bls.n	8004a88 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	73fb      	strb	r3, [r7, #15]
          break;
 8004a86:	e005      	b.n	8004a94 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0ef      	beq.n	8004a74 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	4904      	ldr	r1, [pc, #16]	; (8004ab4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	07ff800f 	.word	0x07ff800f
 8004abc:	ff9f800f 	.word	0xff9f800f
 8004ac0:	f9ff800f 	.word	0xf9ff800f

08004ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e049      	b.n	8004b6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f841 	bl	8004b72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3304      	adds	r3, #4
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f000 f9f8 	bl	8004ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d001      	beq.n	8004ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e04f      	b.n	8004c40 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a23      	ldr	r2, [pc, #140]	; (8004c4c <HAL_TIM_Base_Start_IT+0xc4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01d      	beq.n	8004bfe <HAL_TIM_Base_Start_IT+0x76>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bca:	d018      	beq.n	8004bfe <HAL_TIM_Base_Start_IT+0x76>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <HAL_TIM_Base_Start_IT+0x76>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1e      	ldr	r2, [pc, #120]	; (8004c54 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00e      	beq.n	8004bfe <HAL_TIM_Base_Start_IT+0x76>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <HAL_TIM_Base_Start_IT+0xd0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d009      	beq.n	8004bfe <HAL_TIM_Base_Start_IT+0x76>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1b      	ldr	r2, [pc, #108]	; (8004c5c <HAL_TIM_Base_Start_IT+0xd4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d004      	beq.n	8004bfe <HAL_TIM_Base_Start_IT+0x76>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a19      	ldr	r2, [pc, #100]	; (8004c60 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d115      	bne.n	8004c2a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b06      	cmp	r3, #6
 8004c0e:	d015      	beq.n	8004c3c <HAL_TIM_Base_Start_IT+0xb4>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c16:	d011      	beq.n	8004c3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c28:	e008      	b.n	8004c3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0201 	orr.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e000      	b.n	8004c3e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40000800 	.word	0x40000800
 8004c58:	40000c00 	.word	0x40000c00
 8004c5c:	40013400 	.word	0x40013400
 8004c60:	40014000 	.word	0x40014000
 8004c64:	00010007 	.word	0x00010007

08004c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d122      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d11b      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0202 	mvn.w	r2, #2
 8004c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f905 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004cb0:	e005      	b.n	8004cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f8f7 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f908 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d122      	bne.n	8004d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d11b      	bne.n	8004d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0204 	mvn.w	r2, #4
 8004ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2202      	movs	r2, #2
 8004cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f8db 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004d04:	e005      	b.n	8004d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f8cd 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f8de 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d122      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d11b      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0208 	mvn.w	r2, #8
 8004d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2204      	movs	r2, #4
 8004d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f8b1 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004d58:	e005      	b.n	8004d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f8a3 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f8b4 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0310 	and.w	r3, r3, #16
 8004d76:	2b10      	cmp	r3, #16
 8004d78:	d122      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d11b      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0210 	mvn.w	r2, #16
 8004d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2208      	movs	r2, #8
 8004d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f887 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004dac:	e005      	b.n	8004dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f879 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f88a 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d10e      	bne.n	8004dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d107      	bne.n	8004dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0201 	mvn.w	r2, #1
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fb fe2e 	bl	8000a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df6:	2b80      	cmp	r3, #128	; 0x80
 8004df8:	d10e      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e04:	2b80      	cmp	r3, #128	; 0x80
 8004e06:	d107      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f914 	bl	8005040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e26:	d10e      	bne.n	8004e46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e32:	2b80      	cmp	r3, #128	; 0x80
 8004e34:	d107      	bne.n	8004e46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f907 	bl	8005054 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b40      	cmp	r3, #64	; 0x40
 8004e52:	d10e      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	d107      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f838 	bl	8004ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d10e      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d107      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f06f 0220 	mvn.w	r2, #32
 8004e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f8c7 	bl	800502c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a40      	ldr	r2, [pc, #256]	; (800500c <TIM_Base_SetConfig+0x114>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f16:	d00f      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3d      	ldr	r2, [pc, #244]	; (8005010 <TIM_Base_SetConfig+0x118>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00b      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a3c      	ldr	r2, [pc, #240]	; (8005014 <TIM_Base_SetConfig+0x11c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d007      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3b      	ldr	r2, [pc, #236]	; (8005018 <TIM_Base_SetConfig+0x120>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d003      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a3a      	ldr	r2, [pc, #232]	; (800501c <TIM_Base_SetConfig+0x124>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d108      	bne.n	8004f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2f      	ldr	r2, [pc, #188]	; (800500c <TIM_Base_SetConfig+0x114>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01f      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f58:	d01b      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2c      	ldr	r2, [pc, #176]	; (8005010 <TIM_Base_SetConfig+0x118>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d017      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a2b      	ldr	r2, [pc, #172]	; (8005014 <TIM_Base_SetConfig+0x11c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2a      	ldr	r2, [pc, #168]	; (8005018 <TIM_Base_SetConfig+0x120>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00f      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a29      	ldr	r2, [pc, #164]	; (800501c <TIM_Base_SetConfig+0x124>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00b      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a28      	ldr	r2, [pc, #160]	; (8005020 <TIM_Base_SetConfig+0x128>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d007      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a27      	ldr	r2, [pc, #156]	; (8005024 <TIM_Base_SetConfig+0x12c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d003      	beq.n	8004f92 <TIM_Base_SetConfig+0x9a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a26      	ldr	r2, [pc, #152]	; (8005028 <TIM_Base_SetConfig+0x130>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d108      	bne.n	8004fa4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a10      	ldr	r2, [pc, #64]	; (800500c <TIM_Base_SetConfig+0x114>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00f      	beq.n	8004ff0 <TIM_Base_SetConfig+0xf8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a12      	ldr	r2, [pc, #72]	; (800501c <TIM_Base_SetConfig+0x124>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00b      	beq.n	8004ff0 <TIM_Base_SetConfig+0xf8>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a11      	ldr	r2, [pc, #68]	; (8005020 <TIM_Base_SetConfig+0x128>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d007      	beq.n	8004ff0 <TIM_Base_SetConfig+0xf8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a10      	ldr	r2, [pc, #64]	; (8005024 <TIM_Base_SetConfig+0x12c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_Base_SetConfig+0xf8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a0f      	ldr	r2, [pc, #60]	; (8005028 <TIM_Base_SetConfig+0x130>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d103      	bne.n	8004ff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	615a      	str	r2, [r3, #20]
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800
 8005018:	40000c00 	.word	0x40000c00
 800501c:	40013400 	.word	0x40013400
 8005020:	40014000 	.word	0x40014000
 8005024:	40014400 	.word	0x40014400
 8005028:	40014800 	.word	0x40014800

0800502c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <__libc_init_array>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	4d0d      	ldr	r5, [pc, #52]	; (80050a0 <__libc_init_array+0x38>)
 800506c:	4c0d      	ldr	r4, [pc, #52]	; (80050a4 <__libc_init_array+0x3c>)
 800506e:	1b64      	subs	r4, r4, r5
 8005070:	10a4      	asrs	r4, r4, #2
 8005072:	2600      	movs	r6, #0
 8005074:	42a6      	cmp	r6, r4
 8005076:	d109      	bne.n	800508c <__libc_init_array+0x24>
 8005078:	4d0b      	ldr	r5, [pc, #44]	; (80050a8 <__libc_init_array+0x40>)
 800507a:	4c0c      	ldr	r4, [pc, #48]	; (80050ac <__libc_init_array+0x44>)
 800507c:	f000 f820 	bl	80050c0 <_init>
 8005080:	1b64      	subs	r4, r4, r5
 8005082:	10a4      	asrs	r4, r4, #2
 8005084:	2600      	movs	r6, #0
 8005086:	42a6      	cmp	r6, r4
 8005088:	d105      	bne.n	8005096 <__libc_init_array+0x2e>
 800508a:	bd70      	pop	{r4, r5, r6, pc}
 800508c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005090:	4798      	blx	r3
 8005092:	3601      	adds	r6, #1
 8005094:	e7ee      	b.n	8005074 <__libc_init_array+0xc>
 8005096:	f855 3b04 	ldr.w	r3, [r5], #4
 800509a:	4798      	blx	r3
 800509c:	3601      	adds	r6, #1
 800509e:	e7f2      	b.n	8005086 <__libc_init_array+0x1e>
 80050a0:	08005120 	.word	0x08005120
 80050a4:	08005120 	.word	0x08005120
 80050a8:	08005120 	.word	0x08005120
 80050ac:	08005124 	.word	0x08005124

080050b0 <memset>:
 80050b0:	4402      	add	r2, r0
 80050b2:	4603      	mov	r3, r0
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d100      	bne.n	80050ba <memset+0xa>
 80050b8:	4770      	bx	lr
 80050ba:	f803 1b01 	strb.w	r1, [r3], #1
 80050be:	e7f9      	b.n	80050b4 <memset+0x4>

080050c0 <_init>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	bf00      	nop
 80050c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c6:	bc08      	pop	{r3}
 80050c8:	469e      	mov	lr, r3
 80050ca:	4770      	bx	lr

080050cc <_fini>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr
