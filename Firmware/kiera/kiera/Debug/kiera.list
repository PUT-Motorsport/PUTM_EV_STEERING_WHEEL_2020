
kiera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fdc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056ec  080056ec  000202c0  2**0
                  CONTENTS
  4 .ARM          00000000  080056ec  080056ec  000202c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056ec  080056ec  000202c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080056ec  080056ec  000156ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  080056fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200002c0  080059bc  000202c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  080059bc  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023c4c  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b7  00000000  00000000  00043f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00002db6  00000000  00000000  000476f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  0004a4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001240  00000000  00000000  0004b520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032b31  00000000  00000000  0004c760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013dc1  00000000  00000000  0007f291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00125f3c  00000000  00000000  00093052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b8f8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004830  00000000  00000000  001b8fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200002c0 	.word	0x200002c0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005184 	.word	0x08005184

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002c4 	.word	0x200002c4
 80001fc:	08005184 	.word	0x08005184

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <_ZNK11GpioElement6handleEv>:
class GpioElement
{
	public:
		GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted);

		virtual void handle() const { };
 80002a0:	4770      	bx	lr
	...

080002a4 <_ZN11GpioElementD1Ev>:

		virtual ~GpioElement() = default;
 80002a4:	4b01      	ldr	r3, [pc, #4]	; (80002ac <_ZN11GpioElementD1Ev+0x8>)
 80002a6:	6003      	str	r3, [r0, #0]
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	080051a4 	.word	0x080051a4

080002b0 <_ZN14GpioOutElementD1Ev>:
		void deactivate() const;

		//virtual void handle() override = 0;
		void toggle() const;

		~GpioOutElement() { };
 80002b0:	4a02      	ldr	r2, [pc, #8]	; (80002bc <_ZN14GpioOutElementD1Ev+0xc>)
 80002b2:	6002      	str	r2, [r0, #0]
		virtual ~GpioElement() = default;
 80002b4:	4a02      	ldr	r2, [pc, #8]	; (80002c0 <_ZN14GpioOutElementD1Ev+0x10>)
 80002b6:	6002      	str	r2, [r0, #0]
		~GpioOutElement() { };
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	080051b8 	.word	0x080051b8
 80002c0:	080051a4 	.word	0x080051a4

080002c4 <_ZN13GpioInElementD1Ev>:
		bool risingEdge() const;
		bool fallingEdge() const;

		bool const& getStateConstRefForDebug() const;

		~GpioInElement() { };
 80002c4:	4a02      	ldr	r2, [pc, #8]	; (80002d0 <_ZN13GpioInElementD1Ev+0xc>)
 80002c6:	6002      	str	r2, [r0, #0]
		virtual ~GpioElement() = default;
 80002c8:	4a02      	ldr	r2, [pc, #8]	; (80002d4 <_ZN13GpioInElementD1Ev+0x10>)
 80002ca:	6002      	str	r2, [r0, #0]
		~GpioInElement() { };
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	080051cc 	.word	0x080051cc
 80002d4:	080051a4 	.word	0x080051a4

080002d8 <_ZN11GpioElementD0Ev>:
		virtual ~GpioElement() = default;
 80002d8:	b510      	push	{r4, lr}
 80002da:	4604      	mov	r4, r0
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <_ZN11GpioElementD0Ev+0x14>)
 80002de:	6003      	str	r3, [r0, #0]
 80002e0:	2110      	movs	r1, #16
 80002e2:	f003 ff1f 	bl	8004124 <_ZdlPvj>
 80002e6:	4620      	mov	r0, r4
 80002e8:	bd10      	pop	{r4, pc}
 80002ea:	bf00      	nop
 80002ec:	080051a4 	.word	0x080051a4

080002f0 <_ZN14GpioOutElementD0Ev>:
		~GpioOutElement() { };
 80002f0:	b510      	push	{r4, lr}
 80002f2:	4604      	mov	r4, r0
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <_ZN14GpioOutElementD0Ev+0x18>)
 80002f6:	6003      	str	r3, [r0, #0]
		virtual ~GpioElement() = default;
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <_ZN14GpioOutElementD0Ev+0x1c>)
 80002fa:	6003      	str	r3, [r0, #0]
		~GpioOutElement() { };
 80002fc:	2110      	movs	r1, #16
 80002fe:	f003 ff11 	bl	8004124 <_ZdlPvj>
 8000302:	4620      	mov	r0, r4
 8000304:	bd10      	pop	{r4, pc}
 8000306:	bf00      	nop
 8000308:	080051b8 	.word	0x080051b8
 800030c:	080051a4 	.word	0x080051a4

08000310 <_ZN13GpioInElementD0Ev>:
		~GpioInElement() { };
 8000310:	b510      	push	{r4, lr}
 8000312:	4604      	mov	r4, r0
 8000314:	4b04      	ldr	r3, [pc, #16]	; (8000328 <_ZN13GpioInElementD0Ev+0x18>)
 8000316:	6003      	str	r3, [r0, #0]
		virtual ~GpioElement() = default;
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <_ZN13GpioInElementD0Ev+0x1c>)
 800031a:	6003      	str	r3, [r0, #0]
		~GpioInElement() { };
 800031c:	2114      	movs	r1, #20
 800031e:	f003 ff01 	bl	8004124 <_ZdlPvj>
 8000322:	4620      	mov	r0, r4
 8000324:	bd10      	pop	{r4, pc}
 8000326:	bf00      	nop
 8000328:	080051cc 	.word	0x080051cc
 800032c:	080051a4 	.word	0x080051a4

08000330 <_ZNK13GpioInElement6handleEv>:
	this->falling_edge = false;
	return ret;
}

void GpioInElement::handle() const
{
 8000330:	b510      	push	{r4, lr}
 8000332:	4604      	mov	r4, r0
	 *		  1  |    1   |  0
	 *
	 *	  basically a XOR operation
	 *
	 */
	bool buff = ((HAL_GPIO_ReadPin((GPIO_TypeDef*)(this->port), this->pin) == GPIO_PIN_SET) != this->is_inverted);
 8000334:	8901      	ldrh	r1, [r0, #8]
 8000336:	68c0      	ldr	r0, [r0, #12]
 8000338:	f002 fbc0 	bl	8002abc <HAL_GPIO_ReadPin>
 800033c:	2801      	cmp	r0, #1
 800033e:	bf14      	ite	ne
 8000340:	2000      	movne	r0, #0
 8000342:	2001      	moveq	r0, #1
 8000344:	7963      	ldrb	r3, [r4, #5]
 8000346:	1ac2      	subs	r2, r0, r3
 8000348:	bf18      	it	ne
 800034a:	2201      	movne	r2, #1
	if (buff == this->state) return;
 800034c:	7921      	ldrb	r1, [r4, #4]
 800034e:	4291      	cmp	r1, r2
 8000350:	d00d      	beq.n	800036e <_ZNK13GpioInElement6handleEv+0x3e>
	if (buff && !this->state)
 8000352:	4298      	cmp	r0, r3
 8000354:	d008      	beq.n	8000368 <_ZNK13GpioInElement6handleEv+0x38>
 8000356:	b939      	cbnz	r1, 8000368 <_ZNK13GpioInElement6handleEv+0x38>
	{
		this->rising_edge = true;
 8000358:	f04f 0c01 	mov.w	ip, #1
 800035c:	f884 c010 	strb.w	ip, [r4, #16]
		this->falling_edge = false;
 8000360:	f04f 0c00 	mov.w	ip, #0
 8000364:	f884 c011 	strb.w	ip, [r4, #17]
	}
	if (!buff && this->state)
 8000368:	4298      	cmp	r0, r3
 800036a:	d001      	beq.n	8000370 <_ZNK13GpioInElement6handleEv+0x40>
	{
		this->rising_edge = false;
		this->falling_edge = true;
	}
	this->state = buff;
 800036c:	7122      	strb	r2, [r4, #4]
}
 800036e:	bd10      	pop	{r4, pc}
	if (!buff && this->state)
 8000370:	2900      	cmp	r1, #0
 8000372:	d0fb      	beq.n	800036c <_ZNK13GpioInElement6handleEv+0x3c>
		this->rising_edge = false;
 8000374:	2300      	movs	r3, #0
 8000376:	7423      	strb	r3, [r4, #16]
		this->falling_edge = true;
 8000378:	2301      	movs	r3, #1
 800037a:	7463      	strb	r3, [r4, #17]
 800037c:	e7f6      	b.n	800036c <_ZNK13GpioInElement6handleEv+0x3c>
	...

08000380 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>:
GpioElement::GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 8000380:	b410      	push	{r4}
						 port(port), pin(pin), is_inverted(is_inverted) { }
 8000382:	4c04      	ldr	r4, [pc, #16]	; (8000394 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb+0x14>)
 8000384:	6004      	str	r4, [r0, #0]
 8000386:	7143      	strb	r3, [r0, #5]
 8000388:	6082      	str	r2, [r0, #8]
 800038a:	60c1      	str	r1, [r0, #12]
 800038c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	080051a4 	.word	0x080051a4

08000398 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>:
GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin, const bool is_inverted) :
 8000398:	b510      	push	{r4, lr}
 800039a:	4604      	mov	r4, r0
							   GpioElement(port, pin, is_inverted) { }
 800039c:	f7ff fff0 	bl	8000380 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 80003a0:	4b01      	ldr	r3, [pc, #4]	; (80003a8 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb+0x10>)
 80003a2:	6023      	str	r3, [r4, #0]
 80003a4:	4620      	mov	r0, r4
 80003a6:	bd10      	pop	{r4, pc}
 80003a8:	080051b8 	.word	0x080051b8

080003ac <_ZNK14GpioOutElement8activateEv>:
{
 80003ac:	b508      	push	{r3, lr}
 80003ae:	4603      	mov	r3, r0
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_RESET : GPIO_PIN_SET));
 80003b0:	68c0      	ldr	r0, [r0, #12]
 80003b2:	8919      	ldrh	r1, [r3, #8]
 80003b4:	795b      	ldrb	r3, [r3, #5]
 80003b6:	b11b      	cbz	r3, 80003c0 <_ZNK14GpioOutElement8activateEv+0x14>
 80003b8:	2200      	movs	r2, #0
 80003ba:	f002 fb97 	bl	8002aec <HAL_GPIO_WritePin>
}
 80003be:	bd08      	pop	{r3, pc}
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_RESET : GPIO_PIN_SET));
 80003c0:	2201      	movs	r2, #1
 80003c2:	e7fa      	b.n	80003ba <_ZNK14GpioOutElement8activateEv+0xe>

080003c4 <_ZNK14GpioOutElement10deactivateEv>:
{
 80003c4:	b508      	push	{r3, lr}
 80003c6:	4603      	mov	r3, r0
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_SET : GPIO_PIN_RESET));
 80003c8:	68c0      	ldr	r0, [r0, #12]
 80003ca:	8919      	ldrh	r1, [r3, #8]
 80003cc:	795b      	ldrb	r3, [r3, #5]
 80003ce:	b11b      	cbz	r3, 80003d8 <_ZNK14GpioOutElement10deactivateEv+0x14>
 80003d0:	2201      	movs	r2, #1
 80003d2:	f002 fb8b 	bl	8002aec <HAL_GPIO_WritePin>
}
 80003d6:	bd08      	pop	{r3, pc}
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_SET : GPIO_PIN_RESET));
 80003d8:	2200      	movs	r2, #0
 80003da:	e7fa      	b.n	80003d2 <_ZNK14GpioOutElement10deactivateEv+0xe>

080003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>:
GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 80003dc:	b510      	push	{r4, lr}
 80003de:	4604      	mov	r4, r0
							 GpioElement(port, pin, is_inverted) { }
 80003e0:	f7ff ffce 	bl	8000380 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 80003e4:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb+0x18>)
 80003e6:	6023      	str	r3, [r4, #0]
 80003e8:	2300      	movs	r3, #0
 80003ea:	7423      	strb	r3, [r4, #16]
 80003ec:	7463      	strb	r3, [r4, #17]
 80003ee:	4620      	mov	r0, r4
 80003f0:	bd10      	pop	{r4, pc}
 80003f2:	bf00      	nop
 80003f4:	080051cc 	.word	0x080051cc

080003f8 <_ZNK13GpioInElement8isActiveEv>:
}
 80003f8:	7900      	ldrb	r0, [r0, #4]
 80003fa:	4770      	bx	lr

080003fc <_ZNK13GpioInElement10risingEdgeEv>:
{
 80003fc:	4603      	mov	r3, r0
	bool ret = this->rising_edge;
 80003fe:	7c00      	ldrb	r0, [r0, #16]
	this->rising_edge = false;
 8000400:	2200      	movs	r2, #0
 8000402:	741a      	strb	r2, [r3, #16]
}
 8000404:	4770      	bx	lr

08000406 <_ZNK13GpioInElement11fallingEdgeEv>:
{
 8000406:	4603      	mov	r3, r0
	bool ret = this->falling_edge;
 8000408:	7c40      	ldrb	r0, [r0, #17]
	this->falling_edge = false;
 800040a:	2200      	movs	r2, #0
 800040c:	745a      	strb	r2, [r3, #17]
}
 800040e:	4770      	bx	lr

08000410 <_ZNK13GpioInElement24getStateConstRefForDebugEv>:

bool const& GpioInElement::getStateConstRefForDebug() const
{
	return this->state;
}
 8000410:	3004      	adds	r0, #4
 8000412:	4770      	bx	lr

08000414 <_ZN8PUTM_CAN6DeviceINS_14Telemetry_MainEE8set_dataERKNS_14Can_rx_messageE>:
      };

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
    new_data = true;
 8000414:	2301      	movs	r3, #1
 8000416:	7183      	strb	r3, [r0, #6]
 8000418:	69cb      	ldr	r3, [r1, #28]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800041a:	f8c0 3007 	str.w	r3, [r0, #7]
  }
 800041e:	4770      	bx	lr

08000420 <_ZN8PUTM_CAN6DeviceINS_18TC_rear_suspensionEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 8000420:	2301      	movs	r3, #1
 8000422:	7183      	strb	r3, [r0, #6]
 8000424:	69cb      	ldr	r3, [r1, #28]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000426:	f8c0 3007 	str.w	r3, [r0, #7]
  }
 800042a:	4770      	bx	lr

0800042c <_ZN8PUTM_CAN6DeviceINS_9SWPS_mainEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 800042c:	2301      	movs	r3, #1
 800042e:	7183      	strb	r3, [r0, #6]
 8000430:	8b8b      	ldrh	r3, [r1, #28]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000432:	f8a0 3007 	strh.w	r3, [r0, #7]
  }
 8000436:	4770      	bx	lr

08000438 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_MainEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 8000438:	2301      	movs	r3, #1
 800043a:	7183      	strb	r3, [r0, #6]
 800043c:	7f0b      	ldrb	r3, [r1, #28]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800043e:	71c3      	strb	r3, [r0, #7]
  }
 8000440:	4770      	bx	lr

08000442 <_ZN8PUTM_CAN6DeviceINS_6DV_AssEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 8000442:	2301      	movs	r3, #1
 8000444:	7183      	strb	r3, [r0, #6]
 8000446:	7f0b      	ldrb	r3, [r1, #28]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000448:	71c3      	strb	r3, [r0, #7]
  }
 800044a:	4770      	bx	lr

0800044c <_ZN8PUTM_CAN6DeviceINS_25Dash_steering_wheel_angleEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 800044c:	2301      	movs	r3, #1
 800044e:	7183      	strb	r3, [r0, #6]
 8000450:	8b8b      	ldrh	r3, [r1, #28]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000452:	f8a0 3007 	strh.w	r3, [r0, #7]
  }
 8000456:	4770      	bx	lr

08000458 <_ZN8PUTM_CAN6DeviceINS_17Dash_lap_finishedEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 8000458:	2301      	movs	r3, #1
 800045a:	7183      	strb	r3, [r0, #6]
 800045c:	69cb      	ldr	r3, [r1, #28]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800045e:	f8c0 3007 	str.w	r3, [r0, #7]
  }
 8000462:	4770      	bx	lr

08000464 <_ZN8PUTM_CAN6DeviceINS_27Dash_steering_wheel_requestEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 8000464:	2301      	movs	r3, #1
 8000466:	7183      	strb	r3, [r0, #6]
 8000468:	7f0b      	ldrb	r3, [r1, #28]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800046a:	71c3      	strb	r3, [r0, #7]
  }
 800046c:	4770      	bx	lr

0800046e <_ZN8PUTM_CAN6DeviceINS_26Dash_Smart_Fuses_FAN_speedEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 800046e:	2301      	movs	r3, #1
 8000470:	7183      	strb	r3, [r0, #6]
 8000472:	8b8b      	ldrh	r3, [r1, #28]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000474:	f8a0 3007 	strh.w	r3, [r0, #7]
  }
 8000478:	4770      	bx	lr

0800047a <_ZN8PUTM_CAN6DeviceINS_9Dash_MainEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 800047a:	2301      	movs	r3, #1
 800047c:	7183      	strb	r3, [r0, #6]
 800047e:	7f0b      	ldrb	r3, [r1, #28]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000480:	71c3      	strb	r3, [r0, #7]
  }
 8000482:	4770      	bx	lr

08000484 <_ZN8PUTM_CAN6DeviceINS_12AQ_ts_buttonEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 8000484:	2301      	movs	r3, #1
 8000486:	7183      	strb	r3, [r0, #6]
 8000488:	7f0b      	ldrb	r3, [r1, #28]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800048a:	71c3      	strb	r3, [r0, #7]
  }
 800048c:	4770      	bx	lr

0800048e <_ZN8PUTM_CAN6DeviceINS_17YawProbe_air_flowEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 800048e:	2301      	movs	r3, #1
 8000490:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000492:	8b8a      	ldrh	r2, [r1, #28]
 8000494:	7f8b      	ldrb	r3, [r1, #30]
 8000496:	f8a0 2007 	strh.w	r2, [r0, #7]
 800049a:	7243      	strb	r3, [r0, #9]
  }
 800049c:	4770      	bx	lr

0800049e <_ZN8PUTM_CAN6DeviceINS_14WheelTemp_mainEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 800049e:	2301      	movs	r3, #1
 80004a0:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80004a2:	69ca      	ldr	r2, [r1, #28]
 80004a4:	6a0b      	ldr	r3, [r1, #32]
 80004a6:	f8c0 2007 	str.w	r2, [r0, #7]
 80004aa:	f8c0 300b 	str.w	r3, [r0, #11]
  }
 80004ae:	4770      	bx	lr

080004b0 <_ZN8PUTM_CAN6DeviceINS_11TC_imu_gyroEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 80004b0:	2301      	movs	r3, #1
 80004b2:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80004b4:	69cb      	ldr	r3, [r1, #28]
 80004b6:	f8c0 3007 	str.w	r3, [r0, #7]
 80004ba:	8c0b      	ldrh	r3, [r1, #32]
 80004bc:	f8a0 300b 	strh.w	r3, [r0, #11]
  }
 80004c0:	4770      	bx	lr

080004c2 <_ZN8PUTM_CAN6DeviceINS_10TC_imu_accEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 80004c2:	2301      	movs	r3, #1
 80004c4:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80004c6:	69cb      	ldr	r3, [r1, #28]
 80004c8:	f8c0 3007 	str.w	r3, [r0, #7]
 80004cc:	8c0b      	ldrh	r3, [r1, #32]
 80004ce:	f8a0 300b 	strh.w	r3, [r0, #11]
  }
 80004d2:	4770      	bx	lr

080004d4 <_ZN8PUTM_CAN6DeviceINS_15TC_temperaturesEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 80004d4:	2301      	movs	r3, #1
 80004d6:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80004d8:	69cb      	ldr	r3, [r1, #28]
 80004da:	f8c0 3007 	str.w	r3, [r0, #7]
 80004de:	8c0b      	ldrh	r3, [r1, #32]
 80004e0:	f8a0 300b 	strh.w	r3, [r0, #11]
  }
 80004e4:	4770      	bx	lr

080004e6 <_ZN8PUTM_CAN6DeviceINS_19TC_wheel_velocitiesEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 80004e6:	2301      	movs	r3, #1
 80004e8:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80004ea:	69ca      	ldr	r2, [r1, #28]
 80004ec:	6a0b      	ldr	r3, [r1, #32]
 80004ee:	f8c0 2007 	str.w	r2, [r0, #7]
 80004f2:	f8c0 300b 	str.w	r3, [r0, #11]
  }
 80004f6:	4770      	bx	lr

080004f8 <_ZN8PUTM_CAN6DeviceINS_7TC_mainEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 80004f8:	2301      	movs	r3, #1
 80004fa:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80004fc:	69ca      	ldr	r2, [r1, #28]
 80004fe:	6a0b      	ldr	r3, [r1, #32]
 8000500:	f8c0 2007 	str.w	r2, [r0, #7]
 8000504:	f8c0 300b 	str.w	r3, [r0, #11]
  }
 8000508:	4770      	bx	lr

0800050a <_ZN8PUTM_CAN6DeviceINS_20Steering_Wheel_eventEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 800050a:	2301      	movs	r3, #1
 800050c:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800050e:	8b8a      	ldrh	r2, [r1, #28]
 8000510:	7f8b      	ldrb	r3, [r1, #30]
 8000512:	f8a0 2007 	strh.w	r2, [r0, #7]
 8000516:	7243      	strb	r3, [r0, #9]
  }
 8000518:	4770      	bx	lr

0800051a <_ZN8PUTM_CAN6DeviceINS_19Steering_Wheel_mainEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 800051a:	2301      	movs	r3, #1
 800051c:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800051e:	8b8a      	ldrh	r2, [r1, #28]
 8000520:	7f8b      	ldrb	r3, [r1, #30]
 8000522:	f8a0 2007 	strh.w	r2, [r0, #7]
 8000526:	7243      	strb	r3, [r0, #9]
  }
 8000528:	4770      	bx	lr

0800052a <_ZN8PUTM_CAN6DeviceINS_9SF_safetyEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 800052a:	2301      	movs	r3, #1
 800052c:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800052e:	69cb      	ldr	r3, [r1, #28]
 8000530:	f8c0 3007 	str.w	r3, [r0, #7]
 8000534:	f891 3020 	ldrb.w	r3, [r1, #32]
 8000538:	72c3      	strb	r3, [r0, #11]
  }
 800053a:	4770      	bx	lr

0800053c <_ZN8PUTM_CAN6DeviceINS_18SF_PassiveElementsEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 800053c:	2301      	movs	r3, #1
 800053e:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000540:	69ca      	ldr	r2, [r1, #28]
 8000542:	6a0b      	ldr	r3, [r1, #32]
 8000544:	f8c0 2007 	str.w	r2, [r0, #7]
 8000548:	f8c0 300b 	str.w	r3, [r0, #11]
  }
 800054c:	4770      	bx	lr

0800054e <_ZN8PUTM_CAN6DeviceINS_9SF_SupplyEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 800054e:	2301      	movs	r3, #1
 8000550:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000552:	69ca      	ldr	r2, [r1, #28]
 8000554:	6a0b      	ldr	r3, [r1, #32]
 8000556:	f8c0 2007 	str.w	r2, [r0, #7]
 800055a:	f8c0 300b 	str.w	r3, [r0, #11]
  }
 800055e:	4770      	bx	lr

08000560 <_ZN8PUTM_CAN6DeviceINS_23SF_LegendaryDVAndSupplyEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 8000560:	2301      	movs	r3, #1
 8000562:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000564:	69ca      	ldr	r2, [r1, #28]
 8000566:	6a0b      	ldr	r3, [r1, #32]
 8000568:	f8c0 2007 	str.w	r2, [r0, #7]
 800056c:	f8c0 300b 	str.w	r3, [r0, #11]
  }
 8000570:	4770      	bx	lr

08000572 <_ZN8PUTM_CAN6DeviceINS_7SF_mainEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 8000572:	2301      	movs	r3, #1
 8000574:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000576:	69cb      	ldr	r3, [r1, #28]
 8000578:	f8c0 3007 	str.w	r3, [r0, #7]
 800057c:	f891 3020 	ldrb.w	r3, [r1, #32]
 8000580:	72c3      	strb	r3, [r0, #11]
  }
 8000582:	4770      	bx	lr

08000584 <_ZN8PUTM_CAN6DeviceINS_22Lap_timer_Skidpad_timeEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 8000584:	2301      	movs	r3, #1
 8000586:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000588:	69cb      	ldr	r3, [r1, #28]
 800058a:	f8c0 3007 	str.w	r3, [r0, #7]
 800058e:	f891 3020 	ldrb.w	r3, [r1, #32]
 8000592:	72c3      	strb	r3, [r0, #11]
  }
 8000594:	4770      	bx	lr

08000596 <_ZN8PUTM_CAN6DeviceINS_18Lap_timer_Lap_timeEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 8000596:	2301      	movs	r3, #1
 8000598:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800059a:	69cb      	ldr	r3, [r1, #28]
 800059c:	f8c0 3007 	str.w	r3, [r0, #7]
 80005a0:	f891 3020 	ldrb.w	r3, [r1, #32]
 80005a4:	72c3      	strb	r3, [r0, #11]
  }
 80005a6:	4770      	bx	lr

080005a8 <_ZN8PUTM_CAN6DeviceINS_18Lap_timer_Acc_timeEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 80005a8:	2301      	movs	r3, #1
 80005aa:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80005ac:	69cb      	ldr	r3, [r1, #28]
 80005ae:	f8c0 3007 	str.w	r3, [r0, #7]
 80005b2:	f891 3020 	ldrb.w	r3, [r1, #32]
 80005b6:	72c3      	strb	r3, [r0, #11]
  }
 80005b8:	4770      	bx	lr

080005ba <_ZN8PUTM_CAN6DeviceINS_16Lap_timer_SectorEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 80005ba:	2301      	movs	r3, #1
 80005bc:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80005be:	69cb      	ldr	r3, [r1, #28]
 80005c0:	f8c0 3007 	str.w	r3, [r0, #7]
 80005c4:	8c0b      	ldrh	r3, [r1, #32]
 80005c6:	f8a0 300b 	strh.w	r3, [r0, #11]
  }
 80005ca:	4770      	bx	lr

080005cc <_ZN8PUTM_CAN6DeviceINS_8Dash_TCSEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 80005cc:	2301      	movs	r3, #1
 80005ce:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80005d0:	69ca      	ldr	r2, [r1, #28]
 80005d2:	6a0b      	ldr	r3, [r1, #32]
 80005d4:	f8c0 2007 	str.w	r2, [r0, #7]
 80005d8:	f8c0 300b 	str.w	r3, [r0, #11]
  }
 80005dc:	4770      	bx	lr

080005de <_ZN8PUTM_CAN6DeviceINS_18BMS_LV_temperatureEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 80005de:	2301      	movs	r3, #1
 80005e0:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80005e2:	69ca      	ldr	r2, [r1, #28]
 80005e4:	6a0b      	ldr	r3, [r1, #32]
 80005e6:	f8c0 2007 	str.w	r2, [r0, #7]
 80005ea:	f8c0 300b 	str.w	r3, [r0, #11]
  }
 80005ee:	4770      	bx	lr

080005f0 <_ZN8PUTM_CAN6DeviceINS_11BMS_LV_mainEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 80005f0:	2301      	movs	r3, #1
 80005f2:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80005f4:	69cb      	ldr	r3, [r1, #28]
 80005f6:	f8c0 3007 	str.w	r3, [r0, #7]
 80005fa:	8c0b      	ldrh	r3, [r1, #32]
 80005fc:	f8a0 300b 	strh.w	r3, [r0, #11]
  }
 8000600:	4770      	bx	lr

08000602 <_ZN8PUTM_CAN6DeviceINS_11BMS_HV_mainEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 8000602:	2301      	movs	r3, #1
 8000604:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000606:	69ca      	ldr	r2, [r1, #28]
 8000608:	6a0b      	ldr	r3, [r1, #32]
 800060a:	f8c0 2007 	str.w	r2, [r0, #7]
 800060e:	f8c0 300b 	str.w	r3, [r0, #11]
  }
 8000612:	4770      	bx	lr

08000614 <_ZN8PUTM_CAN6DeviceINS_12AQ_gyroscopeEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 8000614:	2301      	movs	r3, #1
 8000616:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000618:	69cb      	ldr	r3, [r1, #28]
 800061a:	f8c0 3007 	str.w	r3, [r0, #7]
 800061e:	8c0b      	ldrh	r3, [r1, #32]
 8000620:	f8a0 300b 	strh.w	r3, [r0, #11]
  }
 8000624:	4770      	bx	lr

08000626 <_ZN8PUTM_CAN6DeviceINS_15AQ_accelerationEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 8000626:	2301      	movs	r3, #1
 8000628:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800062a:	69cb      	ldr	r3, [r1, #28]
 800062c:	f8c0 3007 	str.w	r3, [r0, #7]
 8000630:	8c0b      	ldrh	r3, [r1, #32]
 8000632:	f8a0 300b 	strh.w	r3, [r0, #11]
  }
 8000636:	4770      	bx	lr

08000638 <_ZN8PUTM_CAN6DeviceINS_7AQ_mainEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 8000638:	2301      	movs	r3, #1
 800063a:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800063c:	69ca      	ldr	r2, [r1, #28]
 800063e:	6a0b      	ldr	r3, [r1, #32]
 8000640:	f8c0 2007 	str.w	r2, [r0, #7]
 8000644:	f8c0 300b 	str.w	r3, [r0, #11]
  }
 8000648:	4770      	bx	lr

0800064a <_ZN8PUTM_CAN6DeviceINS_9Apps_mainEE8set_dataERKNS_14Can_rx_messageE>:
    new_data = true;
 800064a:	2301      	movs	r3, #1
 800064c:	7183      	strb	r3, [r0, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800064e:	69cb      	ldr	r3, [r1, #28]
 8000650:	f8c0 3007 	str.w	r3, [r0, #7]
 8000654:	f891 3020 	ldrb.w	r3, [r1, #32]
 8000658:	72c3      	strb	r3, [r0, #11]
  }
 800065a:	4770      	bx	lr

0800065c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	2400      	movs	r4, #0
 8000662:	9405      	str	r4, [sp, #20]
 8000664:	9406      	str	r4, [sp, #24]
 8000666:	9407      	str	r4, [sp, #28]
 8000668:	9408      	str	r4, [sp, #32]
 800066a:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066c:	4b41      	ldr	r3, [pc, #260]	; (8000774 <_ZL12MX_GPIO_Initv+0x118>)
 800066e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000670:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000674:	64da      	str	r2, [r3, #76]	; 0x4c
 8000676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000678:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800067c:	9200      	str	r2, [sp, #0]
 800067e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000682:	f042 0201 	orr.w	r2, r2, #1
 8000686:	64da      	str	r2, [r3, #76]	; 0x4c
 8000688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800068a:	f002 0201 	and.w	r2, r2, #1
 800068e:	9201      	str	r2, [sp, #4]
 8000690:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000694:	f042 0204 	orr.w	r2, r2, #4
 8000698:	64da      	str	r2, [r3, #76]	; 0x4c
 800069a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800069c:	f002 0204 	and.w	r2, r2, #4
 80006a0:	9202      	str	r2, [sp, #8]
 80006a2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006a6:	f042 0202 	orr.w	r2, r2, #2
 80006aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80006ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006ae:	f002 0202 	and.w	r2, r2, #2
 80006b2:	9203      	str	r2, [sp, #12]
 80006b4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006b8:	f042 0208 	orr.w	r2, r2, #8
 80006bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80006be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	9304      	str	r3, [sp, #16]
 80006c6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin, GPIO_PIN_RESET);
 80006c8:	4d2b      	ldr	r5, [pc, #172]	; (8000778 <_ZL12MX_GPIO_Initv+0x11c>)
 80006ca:	4622      	mov	r2, r4
 80006cc:	21f0      	movs	r1, #240	; 0xf0
 80006ce:	4628      	mov	r0, r5
 80006d0:	f002 fa0c 	bl	8002aec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW7_Pin SW8_Pin SW9_Pin SW10_Pin */
  GPIO_InitStruct.Pin = SW7_Pin|SW8_Pin|SW9_Pin|SW10_Pin;
 80006d4:	f240 3306 	movw	r3, #774	; 0x306
 80006d8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006da:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	a905      	add	r1, sp, #20
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f002 f858 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80006e8:	26f0      	movs	r6, #240	; 0xf0
 80006ea:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2702      	movs	r7, #2
 80006ee:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006f6:	2305      	movs	r3, #5
 80006f8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	a905      	add	r1, sp, #20
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000700:	f002 f84a 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INIT1_Pin IMU_INIT2_Pin */
  GPIO_InitStruct.Pin = IMU_INIT1_Pin|IMU_INIT2_Pin;
 8000704:	2330      	movs	r3, #48	; 0x30
 8000706:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000708:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800070c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800070e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000710:	4f1a      	ldr	r7, [pc, #104]	; (800077c <_ZL12MX_GPIO_Initv+0x120>)
 8000712:	a905      	add	r1, sp, #20
 8000714:	4638      	mov	r0, r7
 8000716:	f002 f83f 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_1_Pin SW1_2_Pin SW1_3_Pin SW1_4_Pin */
  GPIO_InitStruct.Pin = SW1_1_Pin|SW1_2_Pin|SW1_3_Pin|SW1_4_Pin;
 800071a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800071e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	a905      	add	r1, sp, #20
 8000726:	4628      	mov	r0, r5
 8000728:	f002 f836 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_1_Pin SW2_2_Pin SW2_3_Pin SW2_4_Pin
                           SW3_Pin SW4_Pin SW5_Pin */
  GPIO_InitStruct.Pin = SW2_1_Pin|SW2_2_Pin|SW2_3_Pin|SW2_4_Pin
 800072c:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000730:	9305      	str	r3, [sp, #20]
                          |SW3_Pin|SW4_Pin|SW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000732:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	a905      	add	r1, sp, #20
 8000738:	4638      	mov	r0, r7
 800073a:	f002 f82d 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW6_Pin */
  GPIO_InitStruct.Pin = SW6_Pin;
 800073e:	2304      	movs	r3, #4
 8000740:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000742:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SW6_GPIO_Port, &GPIO_InitStruct);
 8000746:	a905      	add	r1, sp, #20
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <_ZL12MX_GPIO_Initv+0x124>)
 800074a:	f002 f825 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pins : ControlLed4_Pin ControlLed3_Pin ControlLed2_Pin ControlLed1_Pin */
  GPIO_InitStruct.Pin = ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin;
 800074e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000758:	a905      	add	r1, sp, #20
 800075a:	4628      	mov	r0, r5
 800075c:	f002 f81c 	bl	8002798 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000760:	4622      	mov	r2, r4
 8000762:	4621      	mov	r1, r4
 8000764:	2017      	movs	r0, #23
 8000766:	f001 ffed 	bl	8002744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800076a:	2017      	movs	r0, #23
 800076c:	f002 f806 	bl	800277c <HAL_NVIC_EnableIRQ>

}
 8000770:	b00b      	add	sp, #44	; 0x2c
 8000772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	48000400 	.word	0x48000400
 800077c:	48000800 	.word	0x48000800
 8000780:	48000c00 	.word	0x48000c00

08000784 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v>:
    /// Allocate storage for an object from the pool.
    /// If asserts or exceptions are enabled and there are no more free items an
    /// etl::pool_no_allocation if thrown, otherwise a null pointer is returned.
    //*************************************************************************
    template <typename T>
    T* allocate()
 8000784:	b510      	push	{r4, lr}
    {
      if (sizeof(T) > Item_Size)
 8000786:	6902      	ldr	r2, [r0, #16]
 8000788:	2a0b      	cmp	r2, #11
 800078a:	d91b      	bls.n	80007c4 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x40>
 800078c:	4603      	mov	r3, r0
    char* allocate_item()
    {
      char* p_value = ETL_NULLPTR;

      // Any free space left?
      if (items_allocated < Max_Size)
 800078e:	6882      	ldr	r2, [r0, #8]
 8000790:	6941      	ldr	r1, [r0, #20]
 8000792:	428a      	cmp	r2, r1
 8000794:	d21f      	bcs.n	80007d6 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x52>
      {
        // Initialise another one if necessary.
        if (items_initialised < Max_Size)
 8000796:	68c2      	ldr	r2, [r0, #12]
 8000798:	4291      	cmp	r1, r2
 800079a:	d909      	bls.n	80007b0 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x2c>
        {
          char* p = p_buffer + (items_initialised * Item_Size);
 800079c:	6800      	ldr	r0, [r0, #0]
 800079e:	691c      	ldr	r4, [r3, #16]
 80007a0:	fb04 f202 	mul.w	r2, r4, r2
 80007a4:	1881      	adds	r1, r0, r2
          char* np = p + Item_Size;
 80007a6:	4421      	add	r1, r4
          *reinterpret_cast<char**>(p) = np;
 80007a8:	5081      	str	r1, [r0, r2]
          ++items_initialised;
 80007aa:	68da      	ldr	r2, [r3, #12]
 80007ac:	3201      	adds	r2, #1
 80007ae:	60da      	str	r2, [r3, #12]
        }

        // Get the address of new allocated item.
        p_value = p_next;
 80007b0:	6858      	ldr	r0, [r3, #4]

        ++items_allocated;
 80007b2:	689a      	ldr	r2, [r3, #8]
 80007b4:	3201      	adds	r2, #1
 80007b6:	609a      	str	r2, [r3, #8]
        if (items_allocated < Max_Size)
 80007b8:	6959      	ldr	r1, [r3, #20]
 80007ba:	428a      	cmp	r2, r1
 80007bc:	d208      	bcs.n	80007d0 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x4c>
        {
          // Set up the pointer to the next free item
          p_next = *reinterpret_cast<char**>(p_next);
 80007be:	6802      	ldr	r2, [r0, #0]
 80007c0:	605a      	str	r2, [r3, #4]
    }
 80007c2:	bd10      	pop	{r4, pc}
        ETL_ASSERT(false, ETL_ERROR(etl::pool_element_size));
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x60>)
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x64>)
 80007c8:	2175      	movs	r1, #117	; 0x75
 80007ca:	4808      	ldr	r0, [pc, #32]	; (80007ec <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x68>)
 80007cc:	f003 fcae 	bl	800412c <__assert_func>
        }
        else
        {
          // No more left!
          p_next = ETL_NULLPTR;
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	e7f5      	b.n	80007c2 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x3e>
        }
      }
      else
      {
        ETL_ASSERT(false, ETL_ERROR(pool_no_allocation));
 80007d6:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x60>)
 80007d8:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x6c>)
 80007da:	f240 1171 	movw	r1, #369	; 0x171
 80007de:	4803      	ldr	r0, [pc, #12]	; (80007ec <_ZN3etl5ipool8allocateINS_5ilistIjE11data_node_tEEEPT_v+0x68>)
 80007e0:	f003 fca4 	bl	800412c <__assert_func>
 80007e4:	080051d8 	.word	0x080051d8
 80007e8:	080051e0 	.word	0x080051e0
 80007ec:	0800522c 	.word	0x0800522c
 80007f0:	08005244 	.word	0x08005244

080007f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
Can_interface can;

} // namespace PUTM_CAN

#ifndef PUTM_USE_CAN_FD
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80007f4:	b500      	push	{lr}
 80007f6:	b08b      	sub	sp, #44	; 0x2c
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 80007f8:	2100      	movs	r1, #0
 80007fa:	9100      	str	r1, [sp, #0]
 80007fc:	9101      	str	r1, [sp, #4]
 80007fe:	9102      	str	r1, [sp, #8]
 8000800:	9103      	str	r1, [sp, #12]
 8000802:	9104      	str	r1, [sp, #16]
 8000804:	9105      	str	r1, [sp, #20]
 8000806:	9106      	str	r1, [sp, #24]
 8000808:	9107      	str	r1, [sp, #28]
 800080a:	9108      	str	r1, [sp, #32]
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 800080c:	ab07      	add	r3, sp, #28
 800080e:	466a      	mov	r2, sp
 8000810:	f001 fb79 	bl	8001f06 <HAL_CAN_GetRxMessage>
    this->status =
 8000814:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 8000818:	b2c3      	uxtb	r3, r0
 800081a:	b113      	cbz	r3, 8000822 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
    if (not PUTM_CAN::can.parse_message(rx)) {
      // Unknown message
      //Error_Handler();
    }
  }
}
 800081c:	b00b      	add	sp, #44	; 0x2c
 800081e:	f85d fb04 	ldr.w	pc, [sp], #4
    for (auto &device : device_array) {
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000824:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d0f8      	beq.n	800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
      if (device->get_ID() == m.header.StdId) {
 800082a:	6818      	ldr	r0, [r3, #0]
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 800082c:	7902      	ldrb	r2, [r0, #4]
 800082e:	7941      	ldrb	r1, [r0, #5]
 8000830:	f001 010f 	and.w	r1, r1, #15
 8000834:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000838:	9900      	ldr	r1, [sp, #0]
 800083a:	428a      	cmp	r2, r1
 800083c:	d001      	beq.n	8000842 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
    for (auto &device : device_array) {
 800083e:	3304      	adds	r3, #4
 8000840:	e7f0      	b.n	8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
        device->set_data(m);
 8000842:	6803      	ldr	r3, [r0, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4669      	mov	r1, sp
 8000848:	4798      	blx	r3
        return true;
 800084a:	e7e7      	b.n	800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
 800084c:	200001bc 	.word	0x200001bc
 8000850:	20000250 	.word	0x20000250

08000854 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	//do nothing
}
 8000854:	4770      	bx	lr
	...

08000858 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000858:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800085a:	6802      	ldr	r2, [r0, #0]
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x14>)
 800085e:	429a      	cmp	r2, r3
 8000860:	d000      	beq.n	8000864 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000862:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000864:	f001 f832 	bl	80018cc <HAL_IncTick>
}
 8000868:	e7fb      	b.n	8000862 <HAL_TIM_PeriodElapsedCallback+0xa>
 800086a:	bf00      	nop
 800086c:	40012c00 	.word	0x40012c00

08000870 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000872:	e7fe      	b.n	8000872 <Error_Handler+0x2>

08000874 <_ZL12MX_CAN1_Initv>:
{
 8000874:	b508      	push	{r3, lr}
  hcan1.Instance = CAN1;
 8000876:	480d      	ldr	r0, [pc, #52]	; (80008ac <_ZL12MX_CAN1_Initv+0x38>)
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <_ZL12MX_CAN1_Initv+0x3c>)
 800087a:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 6;
 800087c:	2306      	movs	r3, #6
 800087e:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000880:	2300      	movs	r3, #0
 8000882:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000884:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000886:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800088a:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 800088c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000890:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000892:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000894:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000896:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000898:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800089a:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800089c:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800089e:	f001 f859 	bl	8001954 <HAL_CAN_Init>
 80008a2:	b900      	cbnz	r0, 80008a6 <_ZL12MX_CAN1_Initv+0x32>
}
 80008a4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80008a6:	f7ff ffe3 	bl	8000870 <Error_Handler>
 80008aa:	bf00      	nop
 80008ac:	200004ac 	.word	0x200004ac
 80008b0:	40006400 	.word	0x40006400

080008b4 <_Z18SystemClock_Configv>:
{
 80008b4:	b500      	push	{lr}
 80008b6:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b8:	2248      	movs	r2, #72	; 0x48
 80008ba:	2100      	movs	r1, #0
 80008bc:	a806      	add	r0, sp, #24
 80008be:	f003 fc97 	bl	80041f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c2:	2000      	movs	r0, #0
 80008c4:	9001      	str	r0, [sp, #4]
 80008c6:	9002      	str	r0, [sp, #8]
 80008c8:	9003      	str	r0, [sp, #12]
 80008ca:	9004      	str	r0, [sp, #16]
 80008cc:	9005      	str	r0, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80008ce:	f002 f95d 	bl	8002b8c <HAL_PWREx_ControlVoltageScaling>
 80008d2:	bb20      	cbnz	r0, 800091e <_Z18SystemClock_Configv+0x6a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008d4:	2310      	movs	r3, #16
 80008d6:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008d8:	2201      	movs	r2, #1
 80008da:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008e0:	2360      	movs	r3, #96	; 0x60
 80008e2:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e4:	2302      	movs	r3, #2
 80008e6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008e8:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ea:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 80008ec:	223c      	movs	r2, #60	; 0x3c
 80008ee:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f0:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008f2:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008f4:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	a806      	add	r0, sp, #24
 80008f8:	f002 f9ec 	bl	8002cd4 <HAL_RCC_OscConfig>
 80008fc:	b988      	cbnz	r0, 8000922 <_Z18SystemClock_Configv+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2303      	movs	r3, #3
 8000904:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800090e:	2105      	movs	r1, #5
 8000910:	a801      	add	r0, sp, #4
 8000912:	f002 fe5b 	bl	80035cc <HAL_RCC_ClockConfig>
 8000916:	b930      	cbnz	r0, 8000926 <_Z18SystemClock_Configv+0x72>
}
 8000918:	b019      	add	sp, #100	; 0x64
 800091a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800091e:	f7ff ffa7 	bl	8000870 <Error_Handler>
    Error_Handler();
 8000922:	f7ff ffa5 	bl	8000870 <Error_Handler>
    Error_Handler();
 8000926:	f7ff ffa3 	bl	8000870 <Error_Handler>
	...

0800092c <_Z8setUpCanv>:
{
 800092c:	b508      	push	{r3, lr}
	can_filtering_config.FilterBank = 0;
 800092e:	4911      	ldr	r1, [pc, #68]	; (8000974 <_Z8setUpCanv+0x48>)
 8000930:	2300      	movs	r3, #0
 8000932:	614b      	str	r3, [r1, #20]
	can_filtering_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000934:	618b      	str	r3, [r1, #24]
	can_filtering_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8000936:	2201      	movs	r2, #1
 8000938:	61ca      	str	r2, [r1, #28]
	can_filtering_config.FilterIdHigh = 0x0000;
 800093a:	600b      	str	r3, [r1, #0]
	can_filtering_config.FilterIdLow = 0x0000;
 800093c:	604b      	str	r3, [r1, #4]
	can_filtering_config.FilterMaskIdHigh = 0x0000;
 800093e:	608b      	str	r3, [r1, #8]
	can_filtering_config.FilterMaskIdLow = 0x0000;
 8000940:	60cb      	str	r3, [r1, #12]
	can_filtering_config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000942:	610b      	str	r3, [r1, #16]
	can_filtering_config.FilterActivation = ENABLE;
 8000944:	620a      	str	r2, [r1, #32]
	can_filtering_config.SlaveStartFilterBank = 14;
 8000946:	230e      	movs	r3, #14
 8000948:	624b      	str	r3, [r1, #36]	; 0x24
	if ( HAL_CAN_ConfigFilter(&hcan1, &can_filtering_config) != HAL_OK )
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <_Z8setUpCanv+0x4c>)
 800094c:	f001 f8fd 	bl	8001b4a <HAL_CAN_ConfigFilter>
 8000950:	b948      	cbnz	r0, 8000966 <_Z8setUpCanv+0x3a>
	if ( HAL_CAN_Start(&hcan1) != HAL_OK )
 8000952:	4809      	ldr	r0, [pc, #36]	; (8000978 <_Z8setUpCanv+0x4c>)
 8000954:	f001 f9c3 	bl	8001cde <HAL_CAN_Start>
 8000958:	b938      	cbnz	r0, 800096a <_Z8setUpCanv+0x3e>
	if ( HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK )
 800095a:	2102      	movs	r1, #2
 800095c:	4806      	ldr	r0, [pc, #24]	; (8000978 <_Z8setUpCanv+0x4c>)
 800095e:	f001 fbe4 	bl	800212a <HAL_CAN_ActivateNotification>
 8000962:	b920      	cbnz	r0, 800096e <_Z8setUpCanv+0x42>
}
 8000964:	bd08      	pop	{r3, pc}
		Error_Handler();
 8000966:	f7ff ff83 	bl	8000870 <Error_Handler>
		Error_Handler();
 800096a:	f7ff ff81 	bl	8000870 <Error_Handler>
		Error_Handler();
 800096e:	f7ff ff7f 	bl	8000870 <Error_Handler>
 8000972:	bf00      	nop
 8000974:	20000468 	.word	0x20000468
 8000978:	200004ac 	.word	0x200004ac

0800097c <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE>:
{
 800097c:	b530      	push	{r4, r5, lr}
 800097e:	b08b      	sub	sp, #44	; 0x2c
	controls_states.button_states = button;
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x7c>)
 8000982:	761a      	strb	r2, [r3, #24]
	controls_states.left_scroll_state = rotary_left;
 8000984:	7698      	strb	r0, [r3, #26]
	controls_states.right_scroll_state = rotary_right;
 8000986:	7659      	strb	r1, [r3, #25]
	if(button == PUTM_CAN::buttonStates::button4)
 8000988:	2a04      	cmp	r2, #4
 800098a:	d01e      	beq.n	80009ca <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x4e>
		};
 800098c:	f88d 2004 	strb.w	r2, [sp, #4]
 8000990:	f88d 0005 	strb.w	r0, [sp, #5]
 8000994:	f88d 1006 	strb.w	r1, [sp, #6]
      : header{message_header} {
 8000998:	f10d 0c08 	add.w	ip, sp, #8
 800099c:	4c17      	ldr	r4, [pc, #92]	; (80009fc <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x80>)
 800099e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80009a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009a8:	e88c 0003 	stmia.w	ip, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80009ac:	9b01      	ldr	r3, [sp, #4]
 80009ae:	f8ad 3020 	strh.w	r3, [sp, #32]
 80009b2:	0c1b      	lsrs	r3, r3, #16
 80009b4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x84>)
 80009ba:	aa08      	add	r2, sp, #32
 80009bc:	a902      	add	r1, sp, #8
 80009be:	4811      	ldr	r0, [pc, #68]	; (8000a04 <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x88>)
 80009c0:	f001 f9d1 	bl	8001d66 <HAL_CAN_AddTxMessage>
		if(steering_wheel_frame.send(hcan1) != HAL_OK) Error_Handler();
 80009c4:	b9b0      	cbnz	r0, 80009f4 <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x78>
}
 80009c6:	b00b      	add	sp, #44	; 0x2c
 80009c8:	bd30      	pop	{r4, r5, pc}
      : header{message_header} {
 80009ca:	ac02      	add	r4, sp, #8
 80009cc:	4d0e      	ldr	r5, [pc, #56]	; (8000a08 <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x8c>)
 80009ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009d6:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80009da:	2300      	movs	r3, #0
 80009dc:	f88d 3020 	strb.w	r3, [sp, #32]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x90>)
 80009e2:	aa08      	add	r2, sp, #32
 80009e4:	a902      	add	r1, sp, #8
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x88>)
 80009e8:	f001 f9bd 	bl	8001d66 <HAL_CAN_AddTxMessage>
		if(aq_ts_button_frame.send(hcan1) != HAL_OK) Error_Handler();
 80009ec:	2800      	cmp	r0, #0
 80009ee:	d0ea      	beq.n	80009c6 <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE+0x4a>
 80009f0:	f7ff ff3e 	bl	8000870 <Error_Handler>
		if(steering_wheel_frame.send(hcan1) != HAL_OK) Error_Handler();
 80009f4:	f7ff ff3c 	bl	8000870 <Error_Handler>
 80009f8:	20000490 	.word	0x20000490
 80009fc:	080055b8 	.word	0x080055b8
 8000a00:	200002e0 	.word	0x200002e0
 8000a04:	200004ac 	.word	0x200004ac
 8000a08:	08005588 	.word	0x08005588
 8000a0c:	200002e4 	.word	0x200002e4

08000a10 <heartbeat>:
{
 8000a10:	b510      	push	{r4, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
	PUTM_CAN::Steering_Wheel_main pcb_alive
 8000a14:	2300      	movs	r3, #0
 8000a16:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8000a1a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
      : header{message_header} {
 8000a1e:	f10d 0c04 	add.w	ip, sp, #4
 8000a22:	4c0c      	ldr	r4, [pc, #48]	; (8000a54 <heartbeat+0x44>)
 8000a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000a2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a2e:	e88c 0003 	stmia.w	ip, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8000a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a34:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000a38:	0c1b      	lsrs	r3, r3, #16
 8000a3a:	f88d 301e 	strb.w	r3, [sp, #30]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <heartbeat+0x48>)
 8000a40:	aa07      	add	r2, sp, #28
 8000a42:	a901      	add	r1, sp, #4
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <heartbeat+0x4c>)
 8000a46:	f001 f98e 	bl	8001d66 <HAL_CAN_AddTxMessage>
 	if(steering_wheel_heartbeat.send(hcan1) != HAL_OK) Error_Handler();
 8000a4a:	b908      	cbnz	r0, 8000a50 <heartbeat+0x40>
}
 8000a4c:	b00a      	add	sp, #40	; 0x28
 8000a4e:	bd10      	pop	{r4, pc}
 	if(steering_wheel_heartbeat.send(hcan1) != HAL_OK) Error_Handler();
 8000a50:	f7ff ff0e 	bl	8000870 <Error_Handler>
 8000a54:	080055a0 	.word	0x080055a0
 8000a58:	200002dc 	.word	0x200002dc
 8000a5c:	200004ac 	.word	0x200004ac

08000a60 <main>:
{
 8000a60:	b570      	push	{r4, r5, r6, lr}
 8000a62:	b082      	sub	sp, #8
  HAL_Init();
 8000a64:	f000 ff19 	bl	800189a <HAL_Init>
  SystemClock_Config();
 8000a68:	f7ff ff24 	bl	80008b4 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8000a6c:	f7ff fdf6 	bl	800065c <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 8000a70:	f7ff ff00 	bl	8000874 <_ZL12MX_CAN1_Initv>
   setUpCan();
 8000a74:	f7ff ff5a 	bl	800092c <_Z8setUpCanv>
   debug_led_1.deactivate();
 8000a78:	4897      	ldr	r0, [pc, #604]	; (8000cd8 <main+0x278>)
 8000a7a:	f7ff fca3 	bl	80003c4 <_ZNK14GpioOutElement10deactivateEv>
   debug_led_2.deactivate();
 8000a7e:	4897      	ldr	r0, [pc, #604]	; (8000cdc <main+0x27c>)
 8000a80:	f7ff fca0 	bl	80003c4 <_ZNK14GpioOutElement10deactivateEv>
   debug_led_3.deactivate();
 8000a84:	4896      	ldr	r0, [pc, #600]	; (8000ce0 <main+0x280>)
 8000a86:	f7ff fc9d 	bl	80003c4 <_ZNK14GpioOutElement10deactivateEv>
   debug_led_4.deactivate();
 8000a8a:	4896      	ldr	r0, [pc, #600]	; (8000ce4 <main+0x284>)
 8000a8c:	f7ff fc9a 	bl	80003c4 <_ZNK14GpioOutElement10deactivateEv>
 8000a90:	e041      	b.n	8000b16 <main+0xb6>
		  heartbeat();
 8000a92:	f7ff ffbd 	bl	8000a10 <heartbeat>
 8000a96:	e043      	b.n	8000b20 <main+0xc0>
	  right_rotary.handle();
 8000a98:	4893      	ldr	r0, [pc, #588]	; (8000ce8 <main+0x288>)
 8000a9a:	f000 fc32 	bl	8001302 <_ZNK6Rotary6handleEv>
	  left_rotary.handle();
 8000a9e:	4893      	ldr	r0, [pc, #588]	; (8000cec <main+0x28c>)
 8000aa0:	f000 fc2f 	bl	8001302 <_ZNK6Rotary6handleEv>
	  if(controls_states.g_btn) debug_led_1.activate();
 8000aa4:	4b92      	ldr	r3, [pc, #584]	; (8000cf0 <main+0x290>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d045      	beq.n	8000b3a <main+0xda>
 8000aae:	488a      	ldr	r0, [pc, #552]	; (8000cd8 <main+0x278>)
 8000ab0:	f7ff fc7c 	bl	80003ac <_ZNK14GpioOutElement8activateEv>
	  if(controls_states.r_btn) debug_led_2.activate();
 8000ab4:	4b8e      	ldr	r3, [pc, #568]	; (8000cf0 <main+0x290>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d041      	beq.n	8000b42 <main+0xe2>
 8000abe:	4887      	ldr	r0, [pc, #540]	; (8000cdc <main+0x27c>)
 8000ac0:	f7ff fc74 	bl	80003ac <_ZNK14GpioOutElement8activateEv>
	  if(controls_states.y_btn) debug_led_3.activate();
 8000ac4:	4b8a      	ldr	r3, [pc, #552]	; (8000cf0 <main+0x290>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d03d      	beq.n	8000b4a <main+0xea>
 8000ace:	4884      	ldr	r0, [pc, #528]	; (8000ce0 <main+0x280>)
 8000ad0:	f7ff fc6c 	bl	80003ac <_ZNK14GpioOutElement8activateEv>
	  if(controls_states.b_btn) debug_led_4.activate();
 8000ad4:	4b86      	ldr	r3, [pc, #536]	; (8000cf0 <main+0x290>)
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d039      	beq.n	8000b52 <main+0xf2>
 8000ade:	4881      	ldr	r0, [pc, #516]	; (8000ce4 <main+0x284>)
 8000ae0:	f7ff fc64 	bl	80003ac <_ZNK14GpioOutElement8activateEv>
	  auto left_rot = left_rotary.getRotation();
 8000ae4:	4881      	ldr	r0, [pc, #516]	; (8000cec <main+0x28c>)
 8000ae6:	f000 fc52 	bl	800138e <_ZN6Rotary11getRotationEv>
	  auto right_rot = right_rotary.getRotation();
 8000aea:	487f      	ldr	r0, [pc, #508]	; (8000ce8 <main+0x288>)
 8000aec:	f000 fc4f 	bl	800138e <_ZN6Rotary11getRotationEv>
    //*************************************************************************
    /// <b>true</b> if the list has a shared pool.
    //*************************************************************************
    bool has_shared_pool() const
    {
      return pool_is_shared;
 8000af0:	4b80      	ldr	r3, [pc, #512]	; (8000cf4 <main+0x294>)
 8000af2:	7c1b      	ldrb	r3, [r3, #16]
    //*************************************************************************
    /// Gets the size of the list.
    //*************************************************************************
    size_type size() const
    {
      if (has_shared_pool())
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d130      	bne.n	8000b5a <main+0xfa>

        return count;
      }
      else
      {
        return p_node_pool->size();
 8000af8:	4b7e      	ldr	r3, [pc, #504]	; (8000cf4 <main+0x294>)
 8000afa:	681b      	ldr	r3, [r3, #0]
      return items_allocated;
 8000afc:	689a      	ldr	r2, [r3, #8]
	  if(pressed_buttons_i.size() == 0) mission = Mission::Waiting;
 8000afe:	b90a      	cbnz	r2, 8000b04 <main+0xa4>
 8000b00:	4b7d      	ldr	r3, [pc, #500]	; (8000cf8 <main+0x298>)
 8000b02:	701a      	strb	r2, [r3, #0]
	  switch (mission)
 8000b04:	4b7c      	ldr	r3, [pc, #496]	; (8000cf8 <main+0x298>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	f000 8083 	beq.w	8000c14 <main+0x1b4>
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	f000 817f 	beq.w	8000e12 <main+0x3b2>
 8000b14:	b353      	cbz	r3, 8000b6c <main+0x10c>
	  if(heartbeat_timer.checkIfTimedOutThenReset())
 8000b16:	4879      	ldr	r0, [pc, #484]	; (8000cfc <main+0x29c>)
 8000b18:	f000 fe83 	bl	8001822 <_ZN5Timer24checkIfTimedOutThenResetEv>
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d1b8      	bne.n	8000a92 <main+0x32>
	  HAL_Delay(config.basic_delay);
 8000b20:	200a      	movs	r0, #10
 8000b22:	f000 fef3 	bl	800190c <HAL_Delay>
	  for(const auto btn_ptr : buttons) btn_ptr->handle();
 8000b26:	4c76      	ldr	r4, [pc, #472]	; (8000d00 <main+0x2a0>)
 8000b28:	4b76      	ldr	r3, [pc, #472]	; (8000d04 <main+0x2a4>)
 8000b2a:	429c      	cmp	r4, r3
 8000b2c:	d0b4      	beq.n	8000a98 <main+0x38>
 8000b2e:	f854 0b04 	ldr.w	r0, [r4], #4
 8000b32:	6803      	ldr	r3, [r0, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4798      	blx	r3
 8000b38:	e7f6      	b.n	8000b28 <main+0xc8>
	  else debug_led_1.deactivate();
 8000b3a:	4867      	ldr	r0, [pc, #412]	; (8000cd8 <main+0x278>)
 8000b3c:	f7ff fc42 	bl	80003c4 <_ZNK14GpioOutElement10deactivateEv>
 8000b40:	e7b8      	b.n	8000ab4 <main+0x54>
	  else debug_led_2.deactivate();
 8000b42:	4866      	ldr	r0, [pc, #408]	; (8000cdc <main+0x27c>)
 8000b44:	f7ff fc3e 	bl	80003c4 <_ZNK14GpioOutElement10deactivateEv>
 8000b48:	e7bc      	b.n	8000ac4 <main+0x64>
	  else debug_led_3.deactivate();
 8000b4a:	4865      	ldr	r0, [pc, #404]	; (8000ce0 <main+0x280>)
 8000b4c:	f7ff fc3a 	bl	80003c4 <_ZNK14GpioOutElement10deactivateEv>
 8000b50:	e7c0      	b.n	8000ad4 <main+0x74>
	  else debug_led_4.deactivate();
 8000b52:	4864      	ldr	r0, [pc, #400]	; (8000ce4 <main+0x284>)
 8000b54:	f7ff fc36 	bl	80003c4 <_ZNK14GpioOutElement10deactivateEv>
 8000b58:	e7c4      	b.n	8000ae4 <main+0x84>
        node_t* p_node = terminal_node.next;
 8000b5a:	4b66      	ldr	r3, [pc, #408]	; (8000cf4 <main+0x294>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
        size_type count = 0U;
 8000b5e:	2200      	movs	r2, #0
        while (p_node != &terminal_node)
 8000b60:	4969      	ldr	r1, [pc, #420]	; (8000d08 <main+0x2a8>)
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d0cb      	beq.n	8000afe <main+0x9e>
          ++count;
 8000b66:	3201      	adds	r2, #1
          p_node = p_node->next;
 8000b68:	685b      	ldr	r3, [r3, #4]
        while (p_node != &terminal_node)
 8000b6a:	e7f9      	b.n	8000b60 <main+0x100>
	  		  for (size_t i = 0; i < buttons.size(); i++)
 8000b6c:	2400      	movs	r4, #0
 8000b6e:	2c03      	cmp	r4, #3
 8000b70:	d8d1      	bhi.n	8000b16 <main+0xb6>
	  			  if(buttons[i]->risingEdge())
 8000b72:	4b63      	ldr	r3, [pc, #396]	; (8000d00 <main+0x2a0>)
 8000b74:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000b78:	f7ff fc40 	bl	80003fc <_ZNK13GpioInElement10risingEdgeEv>
 8000b7c:	b908      	cbnz	r0, 8000b82 <main+0x122>
	  		  for (size_t i = 0; i < buttons.size(); i++)
 8000b7e:	3401      	adds	r4, #1
 8000b80:	e7f5      	b.n	8000b6e <main+0x10e>
	  				  mission = Mission::FirstPressDetected;
 8000b82:	4b5d      	ldr	r3, [pc, #372]	; (8000cf8 <main+0x298>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
    void emplace_back(Args && ... args)
    {
#if defined(ETL_CHECK_PUSH_POP)
      ETL_ASSERT(!full(), ETL_ERROR(list_full));
#endif
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 8000b88:	4b5a      	ldr	r3, [pc, #360]	; (8000cf4 <main+0x294>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d02a      	beq.n	8000be6 <main+0x186>
    //*************************************************************************
    /// Create a data_node_t.
    //*************************************************************************
    data_node_t* create_data_node()
    {
      data_node_t* (etl::ipool::*func)() = &etl::ipool::allocate<data_node_t>;
 8000b90:	4a5e      	ldr	r2, [pc, #376]	; (8000d0c <main+0x2ac>)
 8000b92:	9200      	str	r2, [sp, #0]
 8000b94:	2200      	movs	r2, #0
 8000b96:	9201      	str	r2, [sp, #4]
      if (sizeof(T) > Item_Size)
 8000b98:	691a      	ldr	r2, [r3, #16]
 8000b9a:	2a0b      	cmp	r2, #11
 8000b9c:	d92a      	bls.n	8000bf4 <main+0x194>
      if (items_allocated < Max_Size)
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	6959      	ldr	r1, [r3, #20]
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	d22f      	bcs.n	8000c06 <main+0x1a6>
        if (items_initialised < Max_Size)
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	4291      	cmp	r1, r2
 8000baa:	d909      	bls.n	8000bc0 <main+0x160>
          char* p = p_buffer + (items_initialised * Item_Size);
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	691d      	ldr	r5, [r3, #16]
 8000bb0:	fb05 f202 	mul.w	r2, r5, r2
 8000bb4:	1881      	adds	r1, r0, r2
          char* np = p + Item_Size;
 8000bb6:	4429      	add	r1, r5
          *reinterpret_cast<char**>(p) = np;
 8000bb8:	5081      	str	r1, [r0, r2]
          ++items_initialised;
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	3201      	adds	r2, #1
 8000bbe:	60da      	str	r2, [r3, #12]
        p_value = p_next;
 8000bc0:	685a      	ldr	r2, [r3, #4]
        ++items_allocated;
 8000bc2:	6899      	ldr	r1, [r3, #8]
 8000bc4:	3101      	adds	r1, #1
 8000bc6:	6099      	str	r1, [r3, #8]
        if (items_allocated < Max_Size)
 8000bc8:	6958      	ldr	r0, [r3, #20]
 8000bca:	4281      	cmp	r1, r0
 8000bcc:	d218      	bcs.n	8000c00 <main+0x1a0>
          p_next = *reinterpret_cast<char**>(p_next);
 8000bce:	6811      	ldr	r1, [r2, #0]
 8000bd0:	6059      	str	r1, [r3, #4]
      ::new (&(p_data_node->value)) T(etl::forward<Args>(args)...);
 8000bd2:	6094      	str	r4, [r2, #8]
      join(*position.previous, node);
 8000bd4:	4947      	ldr	r1, [pc, #284]	; (8000cf4 <main+0x294>)
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	f853 0f04 	ldr.w	r0, [r3, #4]!
      left.next      = &right;
 8000bdc:	6042      	str	r2, [r0, #4]
      right.previous = &left;
 8000bde:	6010      	str	r0, [r2, #0]
      left.next      = &right;
 8000be0:	6053      	str	r3, [r2, #4]
      right.previous = &left;
 8000be2:	604a      	str	r2, [r1, #4]
    }
 8000be4:	e797      	b.n	8000b16 <main+0xb6>
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 8000be6:	4b4a      	ldr	r3, [pc, #296]	; (8000d10 <main+0x2b0>)
 8000be8:	4a4a      	ldr	r2, [pc, #296]	; (8000d14 <main+0x2b4>)
 8000bea:	f240 31e1 	movw	r1, #993	; 0x3e1
 8000bee:	484a      	ldr	r0, [pc, #296]	; (8000d18 <main+0x2b8>)
 8000bf0:	f003 fa9c 	bl	800412c <__assert_func>
        ETL_ASSERT(false, ETL_ERROR(etl::pool_element_size));
 8000bf4:	4b49      	ldr	r3, [pc, #292]	; (8000d1c <main+0x2bc>)
 8000bf6:	4a4a      	ldr	r2, [pc, #296]	; (8000d20 <main+0x2c0>)
 8000bf8:	2175      	movs	r1, #117	; 0x75
 8000bfa:	484a      	ldr	r0, [pc, #296]	; (8000d24 <main+0x2c4>)
 8000bfc:	f003 fa96 	bl	800412c <__assert_func>
          p_next = ETL_NULLPTR;
 8000c00:	2100      	movs	r1, #0
 8000c02:	6059      	str	r1, [r3, #4]
 8000c04:	e7e5      	b.n	8000bd2 <main+0x172>
        ETL_ASSERT(false, ETL_ERROR(pool_no_allocation));
 8000c06:	4b45      	ldr	r3, [pc, #276]	; (8000d1c <main+0x2bc>)
 8000c08:	4a47      	ldr	r2, [pc, #284]	; (8000d28 <main+0x2c8>)
 8000c0a:	f240 1171 	movw	r1, #369	; 0x171
 8000c0e:	4845      	ldr	r0, [pc, #276]	; (8000d24 <main+0x2c4>)
 8000c10:	f003 fa8c 	bl	800412c <__assert_func>
      return *terminal_node.next;
 8000c14:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <main+0x294>)
 8000c16:	689b      	ldr	r3, [r3, #8]
	  		  if(buttons[pressed_buttons_i.front()]->fallingEdge())
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	4b39      	ldr	r3, [pc, #228]	; (8000d00 <main+0x2a0>)
 8000c1c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000c20:	f7ff fbf1 	bl	8000406 <_ZNK13GpioInElement11fallingEdgeEv>
 8000c24:	2800      	cmp	r0, #0
 8000c26:	f000 808a 	beq.w	8000d3e <main+0x2de>
 8000c2a:	4c32      	ldr	r4, [pc, #200]	; (8000cf4 <main+0x294>)
 8000c2c:	68a3      	ldr	r3, [r4, #8]
	  			  sendStates(PUTM_CAN::scrollStates::scroll_1, PUTM_CAN::scrollStates::scroll_1, PUTM_CAN::buttonStates(state + 1));
 8000c2e:	7a1a      	ldrb	r2, [r3, #8]
 8000c30:	3201      	adds	r2, #1
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	2100      	movs	r1, #0
 8000c36:	4608      	mov	r0, r1
 8000c38:	f7ff fea0 	bl	800097c <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE>
      if (this->p_node_pool != ETL_NULLPTR)
 8000c3c:	6822      	ldr	r2, [r4, #0]
 8000c3e:	b15a      	cbz	r2, 8000c58 <main+0x1f8>
      return (terminal_node.next == &terminal_node);
 8000c40:	4623      	mov	r3, r4
 8000c42:	68a1      	ldr	r1, [r4, #8]
        if (!empty())
 8000c44:	3304      	adds	r3, #4
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d006      	beq.n	8000c58 <main+0x1f8>
      return pool_is_shared;
 8000c4a:	7c25      	ldrb	r5, [r4, #16]
          if (etl::is_trivially_destructible<T>::value && !has_shared_pool())
 8000c4c:	bb55      	cbnz	r5, 8000ca4 <main+0x244>
      items_allocated = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	6093      	str	r3, [r2, #8]
      items_initialised = 0;
 8000c52:	60d3      	str	r3, [r2, #12]
      p_next = p_buffer;
 8000c54:	6813      	ldr	r3, [r2, #0]
 8000c56:	6053      	str	r3, [r2, #4]
      left.next      = &right;
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <main+0x294>)
 8000c5a:	1d1a      	adds	r2, r3, #4
 8000c5c:	609a      	str	r2, [r3, #8]
      right.previous = &left;
 8000c5e:	605a      	str	r2, [r3, #4]
	  			  mission = Mission::Waiting;
 8000c60:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <main+0x298>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
	  			  break;
 8000c66:	e756      	b.n	8000b16 <main+0xb6>
    //*************************************************************************
    /// Destroy a data_node_t.
    //*************************************************************************
    void destroy_data_node(data_node_t& node)
    {
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 8000c68:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <main+0x2b0>)
 8000c6a:	4a30      	ldr	r2, [pc, #192]	; (8000d2c <main+0x2cc>)
 8000c6c:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8000c70:	4829      	ldr	r0, [pc, #164]	; (8000d18 <main+0x2b8>)
 8000c72:	f003 fa5b 	bl	800412c <__assert_func>
    //*************************************************************************
    bool is_item_in_pool(const char* p) const
    {
      // Within the range of the buffer?
      intptr_t distance = p - p_buffer;
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000c76:	2000      	movs	r0, #0

      // Modulus and division can be slow on some architectures, so only do this in debug.
#if ETL_IS_DEBUG_BUILD
      // Is the address on a valid object boundary?
      bool is_valid_address = ((distance % Item_Size) == 0);
 8000c78:	691c      	ldr	r4, [r3, #16]
 8000c7a:	fbb2 fcf4 	udiv	ip, r2, r4
 8000c7e:	fb04 221c 	mls	r2, r4, ip, r2
#else
      bool is_valid_address = true;
#endif

      return is_within_range && is_valid_address;
 8000c82:	b120      	cbz	r0, 8000c8e <main+0x22e>
 8000c84:	b122      	cbz	r2, 8000c90 <main+0x230>
 8000c86:	2000      	movs	r0, #0
 8000c88:	e002      	b.n	8000c90 <main+0x230>
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	e7f4      	b.n	8000c78 <main+0x218>
      return is_within_range && is_valid_address;
 8000c8e:	2000      	movs	r0, #0
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 8000c90:	b1d8      	cbz	r0, 8000cca <main+0x26a>
      if (p_next != ETL_NULLPTR)
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	d04f      	beq.n	8000d38 <main+0x2d8>
        *(uintptr_t*)p_value = reinterpret_cast<uintptr_t>(p_next);
 8000c98:	600a      	str	r2, [r1, #0]
      p_next = p_value;
 8000c9a:	6059      	str	r1, [r3, #4]
      --items_allocated;
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	3a01      	subs	r2, #1
 8000ca0:	609a      	str	r2, [r3, #8]
              p_first = p_first->next;                                // Move to the next node.
 8000ca2:	6849      	ldr	r1, [r1, #4]
            while (p_first != p_last)
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <main+0x2a8>)
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	d0d6      	beq.n	8000c58 <main+0x1f8>
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 8000caa:	3b04      	subs	r3, #4
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d0da      	beq.n	8000c68 <main+0x208>
      intptr_t distance = p - p_buffer;
 8000cb2:	681a      	ldr	r2, [r3, #0]
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000cb4:	1a8a      	subs	r2, r1, r2
 8000cb6:	d4de      	bmi.n	8000c76 <main+0x216>
 8000cb8:	6958      	ldr	r0, [r3, #20]
 8000cba:	691c      	ldr	r4, [r3, #16]
 8000cbc:	3801      	subs	r0, #1
 8000cbe:	fb04 f000 	mul.w	r0, r4, r0
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	dde1      	ble.n	8000c8a <main+0x22a>
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	e7d6      	b.n	8000c78 <main+0x218>
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <main+0x2d0>)
 8000ccc:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <main+0x2d4>)
 8000cce:	f240 117d 	movw	r1, #381	; 0x17d
 8000cd2:	4814      	ldr	r0, [pc, #80]	; (8000d24 <main+0x2c4>)
 8000cd4:	f003 fa2a 	bl	800412c <__assert_func>
 8000cd8:	200002e8 	.word	0x200002e8
 8000cdc:	200002f8 	.word	0x200002f8
 8000ce0:	20000308 	.word	0x20000308
 8000ce4:	20000318 	.word	0x20000318
 8000ce8:	2000053c 	.word	0x2000053c
 8000cec:	200004dc 	.word	0x200004dc
 8000cf0:	20000490 	.word	0x20000490
 8000cf4:	200004f8 	.word	0x200004f8
 8000cf8:	200004f4 	.word	0x200004f4
 8000cfc:	200004d4 	.word	0x200004d4
 8000d00:	08005558 	.word	0x08005558
 8000d04:	08005568 	.word	0x08005568
 8000d08:	200004fc 	.word	0x200004fc
 8000d0c:	08000785 	.word	0x08000785
 8000d10:	08005268 	.word	0x08005268
 8000d14:	08005284 	.word	0x08005284
 8000d18:	080052e4 	.word	0x080052e4
 8000d1c:	080051d8 	.word	0x080051d8
 8000d20:	080051e0 	.word	0x080051e0
 8000d24:	0800522c 	.word	0x0800522c
 8000d28:	08005244 	.word	0x08005244
 8000d2c:	080052fc 	.word	0x080052fc
 8000d30:	08005358 	.word	0x08005358
 8000d34:	08005374 	.word	0x08005374
        *((uintptr_t*)p_value) = 0;
 8000d38:	2200      	movs	r2, #0
 8000d3a:	600a      	str	r2, [r1, #0]
 8000d3c:	e7ad      	b.n	8000c9a <main+0x23a>
	  		  for (size_t i = 0; i < buttons.size(); i++)
 8000d3e:	2400      	movs	r4, #0
 8000d40:	e017      	b.n	8000d72 <main+0x312>
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 8000d42:	4b6c      	ldr	r3, [pc, #432]	; (8000ef4 <main+0x494>)
 8000d44:	4a6c      	ldr	r2, [pc, #432]	; (8000ef8 <main+0x498>)
 8000d46:	f240 31e1 	movw	r1, #993	; 0x3e1
 8000d4a:	486c      	ldr	r0, [pc, #432]	; (8000efc <main+0x49c>)
 8000d4c:	f003 f9ee 	bl	800412c <__assert_func>
        ETL_ASSERT(false, ETL_ERROR(etl::pool_element_size));
 8000d50:	4b6b      	ldr	r3, [pc, #428]	; (8000f00 <main+0x4a0>)
 8000d52:	4a6c      	ldr	r2, [pc, #432]	; (8000f04 <main+0x4a4>)
 8000d54:	2175      	movs	r1, #117	; 0x75
 8000d56:	486c      	ldr	r0, [pc, #432]	; (8000f08 <main+0x4a8>)
 8000d58:	f003 f9e8 	bl	800412c <__assert_func>
          p_next = ETL_NULLPTR;
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	6059      	str	r1, [r3, #4]
 8000d60:	e03e      	b.n	8000de0 <main+0x380>
        ETL_ASSERT(false, ETL_ERROR(pool_no_allocation));
 8000d62:	4b67      	ldr	r3, [pc, #412]	; (8000f00 <main+0x4a0>)
 8000d64:	4a69      	ldr	r2, [pc, #420]	; (8000f0c <main+0x4ac>)
 8000d66:	f240 1171 	movw	r1, #369	; 0x171
 8000d6a:	4867      	ldr	r0, [pc, #412]	; (8000f08 <main+0x4a8>)
 8000d6c:	f003 f9de 	bl	800412c <__assert_func>
 8000d70:	3401      	adds	r4, #1
 8000d72:	2c03      	cmp	r4, #3
 8000d74:	f63f aecf 	bhi.w	8000b16 <main+0xb6>
      return *terminal_node.next;
 8000d78:	4b65      	ldr	r3, [pc, #404]	; (8000f10 <main+0x4b0>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
	  			  if(i == pressed_buttons_i.front()) continue;
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	42a3      	cmp	r3, r4
 8000d80:	d0f6      	beq.n	8000d70 <main+0x310>
				  if(buttons[i]->risingEdge())
 8000d82:	4b64      	ldr	r3, [pc, #400]	; (8000f14 <main+0x4b4>)
 8000d84:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000d88:	f7ff fb38 	bl	80003fc <_ZNK13GpioInElement10risingEdgeEv>
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d0ef      	beq.n	8000d70 <main+0x310>
					  mission = Mission::SecondPressDetected;
 8000d90:	4b61      	ldr	r3, [pc, #388]	; (8000f18 <main+0x4b8>)
 8000d92:	2202      	movs	r2, #2
 8000d94:	701a      	strb	r2, [r3, #0]
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 8000d96:	4b5e      	ldr	r3, [pc, #376]	; (8000f10 <main+0x4b0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0d1      	beq.n	8000d42 <main+0x2e2>
      data_node_t* (etl::ipool::*func)() = &etl::ipool::allocate<data_node_t>;
 8000d9e:	4a5f      	ldr	r2, [pc, #380]	; (8000f1c <main+0x4bc>)
 8000da0:	9200      	str	r2, [sp, #0]
 8000da2:	2200      	movs	r2, #0
 8000da4:	9201      	str	r2, [sp, #4]
      if (sizeof(T) > Item_Size)
 8000da6:	691a      	ldr	r2, [r3, #16]
 8000da8:	2a0b      	cmp	r2, #11
 8000daa:	d9d1      	bls.n	8000d50 <main+0x2f0>
      if (items_allocated < Max_Size)
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	6959      	ldr	r1, [r3, #20]
 8000db0:	428a      	cmp	r2, r1
 8000db2:	d2d6      	bcs.n	8000d62 <main+0x302>
        if (items_initialised < Max_Size)
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	4291      	cmp	r1, r2
 8000db8:	d909      	bls.n	8000dce <main+0x36e>
          char* p = p_buffer + (items_initialised * Item_Size);
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	691d      	ldr	r5, [r3, #16]
 8000dbe:	fb05 f202 	mul.w	r2, r5, r2
 8000dc2:	1881      	adds	r1, r0, r2
          char* np = p + Item_Size;
 8000dc4:	4429      	add	r1, r5
          *reinterpret_cast<char**>(p) = np;
 8000dc6:	5081      	str	r1, [r0, r2]
          ++items_initialised;
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	3201      	adds	r2, #1
 8000dcc:	60da      	str	r2, [r3, #12]
        p_value = p_next;
 8000dce:	685a      	ldr	r2, [r3, #4]
        ++items_allocated;
 8000dd0:	6899      	ldr	r1, [r3, #8]
 8000dd2:	3101      	adds	r1, #1
 8000dd4:	6099      	str	r1, [r3, #8]
        if (items_allocated < Max_Size)
 8000dd6:	6958      	ldr	r0, [r3, #20]
 8000dd8:	4281      	cmp	r1, r0
 8000dda:	d2bf      	bcs.n	8000d5c <main+0x2fc>
          p_next = *reinterpret_cast<char**>(p_next);
 8000ddc:	6811      	ldr	r1, [r2, #0]
 8000dde:	6059      	str	r1, [r3, #4]
      ::new (&(p_data_node->value)) T(etl::forward<Args>(args)...);
 8000de0:	6094      	str	r4, [r2, #8]
      join(*position.previous, node);
 8000de2:	4b4b      	ldr	r3, [pc, #300]	; (8000f10 <main+0x4b0>)
 8000de4:	4619      	mov	r1, r3
 8000de6:	f851 0f04 	ldr.w	r0, [r1, #4]!
      left.next      = &right;
 8000dea:	6042      	str	r2, [r0, #4]
      right.previous = &left;
 8000dec:	6010      	str	r0, [r2, #0]
      left.next      = &right;
 8000dee:	6051      	str	r1, [r2, #4]
      right.previous = &left;
 8000df0:	605a      	str	r2, [r3, #4]
      return *terminal_node.next;
 8000df2:	689b      	ldr	r3, [r3, #8]
		  			  size_t state_1 = pressed_buttons_i.front();
 8000df4:	689b      	ldr	r3, [r3, #8]
		  			  size_t state_2 = pressed_buttons_i.back();
 8000df6:	6891      	ldr	r1, [r2, #8]
		  			  size_t state = state_1 + state_2 + 4;
 8000df8:	1858      	adds	r0, r3, r1
 8000dfa:	1d02      	adds	r2, r0, #4
		  			  if(state >= 7 && state_1 != 0 && state_2 != 0) state += 1;
 8000dfc:	2a06      	cmp	r2, #6
 8000dfe:	d902      	bls.n	8000e06 <main+0x3a6>
 8000e00:	b10b      	cbz	r3, 8000e06 <main+0x3a6>
 8000e02:	b101      	cbz	r1, 8000e06 <main+0x3a6>
 8000e04:	1d42      	adds	r2, r0, #5
		  			  sendStates(PUTM_CAN::scrollStates::scroll_1, PUTM_CAN::scrollStates::scroll_1, PUTM_CAN::buttonStates(state));
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	f7ff fdb6 	bl	800097c <_Z10sendStatesN8PUTM_CAN12scrollStatesES0_NS_12buttonStatesE>
					  break;
 8000e10:	e681      	b.n	8000b16 <main+0xb6>
	  switch (mission)
 8000e12:	4c40      	ldr	r4, [pc, #256]	; (8000f14 <main+0x4b4>)
			  for (auto & btn : buttons) btn->fallingEdge();
 8000e14:	4b42      	ldr	r3, [pc, #264]	; (8000f20 <main+0x4c0>)
 8000e16:	429c      	cmp	r4, r3
 8000e18:	d004      	beq.n	8000e24 <main+0x3c4>
 8000e1a:	f854 0b04 	ldr.w	r0, [r4], #4
 8000e1e:	f7ff faf2 	bl	8000406 <_ZNK13GpioInElement11fallingEdgeEv>
 8000e22:	e7f7      	b.n	8000e14 <main+0x3b4>
 8000e24:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <main+0x4b0>)
 8000e26:	689b      	ldr	r3, [r3, #8]
			  if(!buttons[pressed_buttons_i.front()]->isActive() && !buttons[pressed_buttons_i.back()]->isActive())
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	4b3a      	ldr	r3, [pc, #232]	; (8000f14 <main+0x4b4>)
 8000e2c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000e30:	f7ff fae2 	bl	80003f8 <_ZNK13GpioInElement8isActiveEv>
 8000e34:	2800      	cmp	r0, #0
 8000e36:	f47f ae6e 	bne.w	8000b16 <main+0xb6>
      return *terminal_node.previous;
 8000e3a:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <main+0x4b0>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <main+0x4b4>)
 8000e42:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000e46:	f7ff fad7 	bl	80003f8 <_ZNK13GpioInElement8isActiveEv>
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	f47f ae62 	bne.w	8000b16 <main+0xb6>
      if (this->p_node_pool != ETL_NULLPTR)
 8000e52:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <main+0x4b0>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	b15a      	cbz	r2, 8000e70 <main+0x410>
      return (terminal_node.next == &terminal_node);
 8000e58:	6899      	ldr	r1, [r3, #8]
        if (!empty())
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d007      	beq.n	8000e70 <main+0x410>
      return pool_is_shared;
 8000e60:	3b04      	subs	r3, #4
 8000e62:	7c1e      	ldrb	r6, [r3, #16]
          if (etl::is_trivially_destructible<T>::value && !has_shared_pool())
 8000e64:	bb4e      	cbnz	r6, 8000eba <main+0x45a>
      items_allocated = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	6093      	str	r3, [r2, #8]
      items_initialised = 0;
 8000e6a:	60d3      	str	r3, [r2, #12]
      p_next = p_buffer;
 8000e6c:	6813      	ldr	r3, [r2, #0]
 8000e6e:	6053      	str	r3, [r2, #4]
      left.next      = &right;
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <main+0x4b0>)
 8000e72:	1d1a      	adds	r2, r3, #4
 8000e74:	609a      	str	r2, [r3, #8]
      right.previous = &left;
 8000e76:	605a      	str	r2, [r3, #4]
	  			  mission = Mission::Waiting;
 8000e78:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <main+0x4b8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	e64a      	b.n	8000b16 <main+0xb6>
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <main+0x494>)
 8000e82:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <main+0x4c4>)
 8000e84:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8000e88:	481c      	ldr	r0, [pc, #112]	; (8000efc <main+0x49c>)
 8000e8a:	f003 f94f 	bl	800412c <__assert_func>
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000e8e:	4620      	mov	r0, r4
      bool is_valid_address = ((distance % Item_Size) == 0);
 8000e90:	691d      	ldr	r5, [r3, #16]
 8000e92:	fbb2 fef5 	udiv	lr, r2, r5
 8000e96:	fb05 221e 	mls	r2, r5, lr, r2
      return is_within_range && is_valid_address;
 8000e9a:	b120      	cbz	r0, 8000ea6 <main+0x446>
 8000e9c:	b122      	cbz	r2, 8000ea8 <main+0x448>
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	e002      	b.n	8000ea8 <main+0x448>
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	e7f4      	b.n	8000e90 <main+0x430>
      return is_within_range && is_valid_address;
 8000ea6:	4620      	mov	r0, r4
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 8000ea8:	b1d0      	cbz	r0, 8000ee0 <main+0x480>
      if (p_next != ETL_NULLPTR)
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	b1fa      	cbz	r2, 8000eee <main+0x48e>
        *(uintptr_t*)p_value = reinterpret_cast<uintptr_t>(p_next);
 8000eae:	600a      	str	r2, [r1, #0]
      p_next = p_value;
 8000eb0:	6059      	str	r1, [r3, #4]
      --items_allocated;
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	3a01      	subs	r2, #1
 8000eb6:	609a      	str	r2, [r3, #8]
              p_first = p_first->next;                                // Move to the next node.
 8000eb8:	6849      	ldr	r1, [r1, #4]
            while (p_first != p_last)
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <main+0x4c8>)
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d0d7      	beq.n	8000e70 <main+0x410>
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 8000ec0:	3b04      	subs	r3, #4
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0db      	beq.n	8000e80 <main+0x420>
      intptr_t distance = p - p_buffer;
 8000ec8:	681a      	ldr	r2, [r3, #0]
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000eca:	1a8a      	subs	r2, r1, r2
 8000ecc:	d4df      	bmi.n	8000e8e <main+0x42e>
 8000ece:	6958      	ldr	r0, [r3, #20]
 8000ed0:	691d      	ldr	r5, [r3, #16]
 8000ed2:	3801      	subs	r0, #1
 8000ed4:	fb05 f000 	mul.w	r0, r5, r0
 8000ed8:	4282      	cmp	r2, r0
 8000eda:	dde2      	ble.n	8000ea2 <main+0x442>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e7d7      	b.n	8000e90 <main+0x430>
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <main+0x4cc>)
 8000ee2:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <main+0x4d0>)
 8000ee4:	f240 117d 	movw	r1, #381	; 0x17d
 8000ee8:	4807      	ldr	r0, [pc, #28]	; (8000f08 <main+0x4a8>)
 8000eea:	f003 f91f 	bl	800412c <__assert_func>
        *((uintptr_t*)p_value) = 0;
 8000eee:	2200      	movs	r2, #0
 8000ef0:	600a      	str	r2, [r1, #0]
 8000ef2:	e7dd      	b.n	8000eb0 <main+0x450>
 8000ef4:	08005268 	.word	0x08005268
 8000ef8:	08005284 	.word	0x08005284
 8000efc:	080052e4 	.word	0x080052e4
 8000f00:	080051d8 	.word	0x080051d8
 8000f04:	080051e0 	.word	0x080051e0
 8000f08:	0800522c 	.word	0x0800522c
 8000f0c:	08005244 	.word	0x08005244
 8000f10:	200004f8 	.word	0x200004f8
 8000f14:	08005558 	.word	0x08005558
 8000f18:	200004f4 	.word	0x200004f4
 8000f1c:	08000785 	.word	0x08000785
 8000f20:	08005568 	.word	0x08005568
 8000f24:	080052fc 	.word	0x080052fc
 8000f28:	200004fc 	.word	0x200004fc
 8000f2c:	08005358 	.word	0x08005358
 8000f30:	08005374 	.word	0x08005374

08000f34 <_ZN3etl5ilistIjE10initialiseEv>:
      if (this->p_node_pool != ETL_NULLPTR)
 8000f34:	6803      	ldr	r3, [r0, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d04a      	beq.n	8000fd0 <_ZN3etl5ilistIjE10initialiseEv+0x9c>
      return (terminal_node.next == &terminal_node);
 8000f3a:	6881      	ldr	r1, [r0, #8]
 8000f3c:	1d02      	adds	r2, r0, #4
        if (!empty())
 8000f3e:	428a      	cmp	r2, r1
 8000f40:	d046      	beq.n	8000fd0 <_ZN3etl5ilistIjE10initialiseEv+0x9c>
    void initialise()
 8000f42:	b570      	push	{r4, r5, r6, lr}
      return pool_is_shared;
 8000f44:	7c05      	ldrb	r5, [r0, #16]
          if (etl::is_trivially_destructible<T>::value && !has_shared_pool())
 8000f46:	b945      	cbnz	r5, 8000f5a <_ZN3etl5ilistIjE10initialiseEv+0x26>
      items_allocated = 0;
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
      items_initialised = 0;
 8000f4c:	60da      	str	r2, [r3, #12]
      p_next = p_buffer;
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
      join(terminal_node, terminal_node);
 8000f52:	1d03      	adds	r3, r0, #4
      left.next      = &right;
 8000f54:	6083      	str	r3, [r0, #8]
      right.previous = &left;
 8000f56:	6043      	str	r3, [r0, #4]
    }
 8000f58:	bd70      	pop	{r4, r5, r6, pc}
            node_t* p_last = &terminal_node;
 8000f5a:	f100 0c04 	add.w	ip, r0, #4
 8000f5e:	e01c      	b.n	8000f9a <_ZN3etl5ilistIjE10initialiseEv+0x66>
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <_ZN3etl5ilistIjE10initialiseEv+0xa4>)
 8000f62:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <_ZN3etl5ilistIjE10initialiseEv+0xa8>)
 8000f64:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8000f68:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <_ZN3etl5ilistIjE10initialiseEv+0xac>)
 8000f6a:	f003 f8df 	bl	800412c <__assert_func>
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000f6e:	2400      	movs	r4, #0
      bool is_valid_address = ((distance % Item_Size) == 0);
 8000f70:	691e      	ldr	r6, [r3, #16]
 8000f72:	fbb2 fef6 	udiv	lr, r2, r6
 8000f76:	fb06 221e 	mls	r2, r6, lr, r2
      return is_within_range && is_valid_address;
 8000f7a:	b124      	cbz	r4, 8000f86 <_ZN3etl5ilistIjE10initialiseEv+0x52>
 8000f7c:	b122      	cbz	r2, 8000f88 <_ZN3etl5ilistIjE10initialiseEv+0x54>
 8000f7e:	2400      	movs	r4, #0
 8000f80:	e002      	b.n	8000f88 <_ZN3etl5ilistIjE10initialiseEv+0x54>
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000f82:	462c      	mov	r4, r5
 8000f84:	e7f4      	b.n	8000f70 <_ZN3etl5ilistIjE10initialiseEv+0x3c>
      return is_within_range && is_valid_address;
 8000f86:	2400      	movs	r4, #0
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 8000f88:	b1c4      	cbz	r4, 8000fbc <_ZN3etl5ilistIjE10initialiseEv+0x88>
      if (p_next != ETL_NULLPTR)
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	b1ea      	cbz	r2, 8000fca <_ZN3etl5ilistIjE10initialiseEv+0x96>
        *(uintptr_t*)p_value = reinterpret_cast<uintptr_t>(p_next);
 8000f8e:	600a      	str	r2, [r1, #0]
      p_next = p_value;
 8000f90:	6059      	str	r1, [r3, #4]
      --items_allocated;
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	3a01      	subs	r2, #1
 8000f96:	609a      	str	r2, [r3, #8]
              p_first = p_first->next;                                // Move to the next node.
 8000f98:	6849      	ldr	r1, [r1, #4]
            while (p_first != p_last)
 8000f9a:	4561      	cmp	r1, ip
 8000f9c:	d0d9      	beq.n	8000f52 <_ZN3etl5ilistIjE10initialiseEv+0x1e>
      ETL_ASSERT(p_node_pool != ETL_NULLPTR, ETL_ERROR(list_no_pool));
 8000f9e:	6803      	ldr	r3, [r0, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0dd      	beq.n	8000f60 <_ZN3etl5ilistIjE10initialiseEv+0x2c>
      intptr_t distance = p - p_buffer;
 8000fa4:	681a      	ldr	r2, [r3, #0]
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8000fa6:	1a8a      	subs	r2, r1, r2
 8000fa8:	d4e1      	bmi.n	8000f6e <_ZN3etl5ilistIjE10initialiseEv+0x3a>
 8000faa:	695c      	ldr	r4, [r3, #20]
 8000fac:	3c01      	subs	r4, #1
 8000fae:	691e      	ldr	r6, [r3, #16]
 8000fb0:	fb06 f404 	mul.w	r4, r6, r4
 8000fb4:	42a2      	cmp	r2, r4
 8000fb6:	dde4      	ble.n	8000f82 <_ZN3etl5ilistIjE10initialiseEv+0x4e>
 8000fb8:	2400      	movs	r4, #0
 8000fba:	e7d9      	b.n	8000f70 <_ZN3etl5ilistIjE10initialiseEv+0x3c>
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <_ZN3etl5ilistIjE10initialiseEv+0xb0>)
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <_ZN3etl5ilistIjE10initialiseEv+0xb4>)
 8000fc0:	f240 117d 	movw	r1, #381	; 0x17d
 8000fc4:	4809      	ldr	r0, [pc, #36]	; (8000fec <_ZN3etl5ilistIjE10initialiseEv+0xb8>)
 8000fc6:	f003 f8b1 	bl	800412c <__assert_func>
        *((uintptr_t*)p_value) = 0;
 8000fca:	2200      	movs	r2, #0
 8000fcc:	600a      	str	r2, [r1, #0]
 8000fce:	e7df      	b.n	8000f90 <_ZN3etl5ilistIjE10initialiseEv+0x5c>
      join(terminal_node, terminal_node);
 8000fd0:	1d03      	adds	r3, r0, #4
      left.next      = &right;
 8000fd2:	6083      	str	r3, [r0, #8]
      right.previous = &left;
 8000fd4:	6043      	str	r3, [r0, #4]
 8000fd6:	4770      	bx	lr
 8000fd8:	08005268 	.word	0x08005268
 8000fdc:	080052fc 	.word	0x080052fc
 8000fe0:	080052e4 	.word	0x080052e4
 8000fe4:	08005358 	.word	0x08005358
 8000fe8:	08005374 	.word	0x08005374
 8000fec:	0800522c 	.word	0x0800522c

08000ff0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000ff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ff4:	4604      	mov	r4, r0
 8000ff6:	460d      	mov	r5, r1
 8000ff8:	2801      	cmp	r0, #1
 8000ffa:	d007      	beq.n	800100c <_Z41__static_initialization_and_destruction_0ii+0x1c>
Timer heartbeat_timer(100);
 8000ffc:	b924      	cbnz	r4, 8001008 <_Z41__static_initialization_and_destruction_0ii+0x18>
 8000ffe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001002:	429d      	cmp	r5, r3
 8001004:	f000 80dc 	beq.w	80011c0 <_Z41__static_initialization_and_destruction_0ii+0x1d0>
}
 8001008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800100c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001010:	4299      	cmp	r1, r3
 8001012:	d1f3      	bne.n	8000ffc <_Z41__static_initialization_and_destruction_0ii+0xc>
const GpioInElement sw1_1(SW1_1_GPIO_Port, SW1_1_Pin, config.rotary_inverted);
 8001014:	4e8c      	ldr	r6, [pc, #560]	; (8001248 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8001016:	2300      	movs	r3, #0
 8001018:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800101c:	4631      	mov	r1, r6
 800101e:	488b      	ldr	r0, [pc, #556]	; (800124c <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8001020:	f7ff f9dc 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw1_2(SW1_2_GPIO_Port, SW1_2_Pin, config.rotary_inverted);
 8001024:	2300      	movs	r3, #0
 8001026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800102a:	4631      	mov	r1, r6
 800102c:	4888      	ldr	r0, [pc, #544]	; (8001250 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800102e:	f7ff f9d5 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw1_3(SW1_3_GPIO_Port, SW1_3_Pin, config.rotary_inverted);
 8001032:	2300      	movs	r3, #0
 8001034:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001038:	4631      	mov	r1, r6
 800103a:	4886      	ldr	r0, [pc, #536]	; (8001254 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800103c:	f7ff f9ce 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw1_4(SW1_4_GPIO_Port, SW1_4_Pin, config.rotary_inverted);
 8001040:	2300      	movs	r3, #0
 8001042:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001046:	4631      	mov	r1, r6
 8001048:	4883      	ldr	r0, [pc, #524]	; (8001258 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 800104a:	f7ff f9c7 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw2_1(SW2_1_GPIO_Port, SW2_1_Pin, config.rotary_inverted);
 800104e:	4f83      	ldr	r7, [pc, #524]	; (800125c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8001050:	2300      	movs	r3, #0
 8001052:	2240      	movs	r2, #64	; 0x40
 8001054:	4639      	mov	r1, r7
 8001056:	4882      	ldr	r0, [pc, #520]	; (8001260 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8001058:	f7ff f9c0 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw2_2(SW2_2_GPIO_Port, SW2_2_Pin, config.rotary_inverted);
 800105c:	2300      	movs	r3, #0
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	4639      	mov	r1, r7
 8001062:	4880      	ldr	r0, [pc, #512]	; (8001264 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8001064:	f7ff f9ba 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw2_3(SW2_3_GPIO_Port, SW2_3_Pin, config.rotary_inverted);
 8001068:	2300      	movs	r3, #0
 800106a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800106e:	4639      	mov	r1, r7
 8001070:	487d      	ldr	r0, [pc, #500]	; (8001268 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8001072:	f7ff f9b3 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw2_4(SW2_4_GPIO_Port, SW2_4_Pin, config.rotary_inverted);
 8001076:	2300      	movs	r3, #0
 8001078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107c:	4639      	mov	r1, r7
 800107e:	487b      	ldr	r0, [pc, #492]	; (800126c <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8001080:	f7ff f9ac 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw3(SW3_GPIO_Port, SW3_Pin, config.buttons_inverted);
 8001084:	2300      	movs	r3, #0
 8001086:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800108a:	4639      	mov	r1, r7
 800108c:	4878      	ldr	r0, [pc, #480]	; (8001270 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 800108e:	f7ff f9a5 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw4(SW4_GPIO_Port, SW4_Pin, config.buttons_inverted);
 8001092:	f8df 822c 	ldr.w	r8, [pc, #556]	; 80012c0 <_Z41__static_initialization_and_destruction_0ii+0x2d0>
 8001096:	2300      	movs	r3, #0
 8001098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800109c:	4639      	mov	r1, r7
 800109e:	4640      	mov	r0, r8
 80010a0:	f7ff f99c 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw5(SW5_GPIO_Port, SW5_Pin, config.buttons_inverted);
 80010a4:	2300      	movs	r3, #0
 80010a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010aa:	4639      	mov	r1, r7
 80010ac:	4871      	ldr	r0, [pc, #452]	; (8001274 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 80010ae:	f7ff f995 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw6(SW6_GPIO_Port, SW6_Pin, config.buttons_inverted);
 80010b2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80012bc <_Z41__static_initialization_and_destruction_0ii+0x2cc>
 80010b6:	2300      	movs	r3, #0
 80010b8:	2204      	movs	r2, #4
 80010ba:	496f      	ldr	r1, [pc, #444]	; (8001278 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 80010bc:	4648      	mov	r0, r9
 80010be:	f7ff f98d 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw7(SW7_GPIO_Port, SW7_Pin, config.buttons_inverted);
 80010c2:	2300      	movs	r3, #0
 80010c4:	2202      	movs	r2, #2
 80010c6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80010ca:	486c      	ldr	r0, [pc, #432]	; (800127c <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 80010cc:	f7ff f986 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw8(SW8_GPIO_Port, SW8_Pin, config.buttons_inverted);
 80010d0:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 80012b8 <_Z41__static_initialization_and_destruction_0ii+0x2c8>
 80010d4:	2300      	movs	r3, #0
 80010d6:	2204      	movs	r2, #4
 80010d8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80010dc:	4650      	mov	r0, sl
 80010de:	f7ff f97d 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw9(SW9_GPIO_Port, SW9_Pin, config.buttons_inverted);
 80010e2:	4f67      	ldr	r7, [pc, #412]	; (8001280 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 80010e4:	2300      	movs	r3, #0
 80010e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ea:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80010ee:	4638      	mov	r0, r7
 80010f0:	f7ff f974 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioInElement sw10(SW10_GPIO_Port, SW10_Pin, config.buttons_inverted);
 80010f4:	2300      	movs	r3, #0
 80010f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010fa:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80010fe:	4861      	ldr	r0, [pc, #388]	; (8001284 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8001100:	f7ff f96c 	bl	80003dc <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
const GpioOutElement debug_led_1(ControlLed1_GPIO_Port, ControlLed1_Pin, config.leds_inverted);
 8001104:	2301      	movs	r3, #1
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	4631      	mov	r1, r6
 800110a:	485f      	ldr	r0, [pc, #380]	; (8001288 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 800110c:	f7ff f944 	bl	8000398 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
const GpioOutElement debug_led_2(ControlLed2_GPIO_Port, ControlLed2_Pin, config.leds_inverted);
 8001110:	2301      	movs	r3, #1
 8001112:	2240      	movs	r2, #64	; 0x40
 8001114:	4631      	mov	r1, r6
 8001116:	485d      	ldr	r0, [pc, #372]	; (800128c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8001118:	f7ff f93e 	bl	8000398 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
const GpioOutElement debug_led_3(ControlLed3_GPIO_Port, ControlLed3_Pin, config.leds_inverted);
 800111c:	2301      	movs	r3, #1
 800111e:	2220      	movs	r2, #32
 8001120:	4631      	mov	r1, r6
 8001122:	485b      	ldr	r0, [pc, #364]	; (8001290 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8001124:	f7ff f938 	bl	8000398 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
const GpioOutElement debug_led_4(ControlLed4_GPIO_Port, ControlLed4_Pin, config.leds_inverted);
 8001128:	2301      	movs	r3, #1
 800112a:	2210      	movs	r2, #16
 800112c:	4631      	mov	r1, r6
 800112e:	4859      	ldr	r0, [pc, #356]	; (8001294 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8001130:	f7ff f932 	bl	8000398 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
        pool_is_shared(pool_is_shared_)
 8001134:	4b58      	ldr	r3, [pc, #352]	; (8001298 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8001136:	f103 0214 	add.w	r2, r3, #20
 800113a:	601a      	str	r2, [r3, #0]
          next(ETL_NULLPTR)
 800113c:	2200      	movs	r2, #0
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
        pool_is_shared(pool_is_shared_)
 8001142:	2102      	movs	r1, #2
 8001144:	60d9      	str	r1, [r3, #12]
 8001146:	741a      	strb	r2, [r3, #16]
      left.next      = &right;
 8001148:	1d18      	adds	r0, r3, #4
 800114a:	6098      	str	r0, [r3, #8]
      right.previous = &left;
 800114c:	6058      	str	r0, [r3, #4]
      Max_Size(max_size_)
 800114e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8001152:	6158      	str	r0, [r3, #20]
 8001154:	6198      	str	r0, [r3, #24]
 8001156:	61da      	str	r2, [r3, #28]
 8001158:	621a      	str	r2, [r3, #32]
 800115a:	220c      	movs	r2, #12
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
 800115e:	6299      	str	r1, [r3, #40]	; 0x28
Rotary left_rotary(rot1_arr);
 8001160:	f8df b160 	ldr.w	fp, [pc, #352]	; 80012c4 <_Z41__static_initialization_and_destruction_0ii+0x2d4>
 8001164:	494d      	ldr	r1, [pc, #308]	; (800129c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8001166:	4658      	mov	r0, fp
 8001168:	f000 f8be 	bl	80012e8 <_ZN6RotaryC1ERKSt5arrayIPK13GpioInElementLj4EE>
Rotary right_rotary(rot2_arr);
 800116c:	4e4c      	ldr	r6, [pc, #304]	; (80012a0 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800116e:	494d      	ldr	r1, [pc, #308]	; (80012a4 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8001170:	4630      	mov	r0, r6
 8001172:	f000 f8b9 	bl	80012e8 <_ZN6RotaryC1ERKSt5arrayIPK13GpioInElementLj4EE>
{
 8001176:	4650      	mov	r0, sl
 8001178:	f7ff f94a 	bl	8000410 <_ZNK13GpioInElement24getStateConstRefForDebugEv>
 800117c:	f8df a148 	ldr.w	sl, [pc, #328]	; 80012c8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>
 8001180:	f8ca 0000 	str.w	r0, [sl]
 8001184:	4648      	mov	r0, r9
 8001186:	f7ff f943 	bl	8000410 <_ZNK13GpioInElement24getStateConstRefForDebugEv>
 800118a:	f8ca 0004 	str.w	r0, [sl, #4]
 800118e:	4638      	mov	r0, r7
 8001190:	f7ff f93e 	bl	8000410 <_ZNK13GpioInElement24getStateConstRefForDebugEv>
 8001194:	f8ca 0008 	str.w	r0, [sl, #8]
 8001198:	4640      	mov	r0, r8
 800119a:	f7ff f939 	bl	8000410 <_ZNK13GpioInElement24getStateConstRefForDebugEv>
 800119e:	f8ca 000c 	str.w	r0, [sl, #12]
 80011a2:	4658      	mov	r0, fp
 80011a4:	f000 f8f6 	bl	8001394 <_ZNK6Rotary27getRotationConstRefForDebugEv>
 80011a8:	f8ca 0010 	str.w	r0, [sl, #16]
 80011ac:	4630      	mov	r0, r6
 80011ae:	f000 f8f1 	bl	8001394 <_ZNK6Rotary27getRotationConstRefForDebugEv>
 80011b2:	f8ca 0014 	str.w	r0, [sl, #20]
Timer heartbeat_timer(100);
 80011b6:	2164      	movs	r1, #100	; 0x64
 80011b8:	483b      	ldr	r0, [pc, #236]	; (80012a8 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 80011ba:	f000 fb1d 	bl	80017f8 <_ZN5TimerC1Em>
 80011be:	e71d      	b.n	8000ffc <_Z41__static_initialization_and_destruction_0ii+0xc>
    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~list()
    {
      this->initialise();
 80011c0:	4835      	ldr	r0, [pc, #212]	; (8001298 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80011c2:	f7ff feb7 	bl	8000f34 <_ZN3etl5ilistIjE10initialiseEv>
		~GpioOutElement() { };
 80011c6:	4933      	ldr	r1, [pc, #204]	; (8001294 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80011c8:	4a38      	ldr	r2, [pc, #224]	; (80012ac <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80011ca:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 80011cc:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80011ce:	600b      	str	r3, [r1, #0]
		~GpioOutElement() { };
 80011d0:	492f      	ldr	r1, [pc, #188]	; (8001290 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80011d2:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 80011d4:	600b      	str	r3, [r1, #0]
		~GpioOutElement() { };
 80011d6:	492d      	ldr	r1, [pc, #180]	; (800128c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80011d8:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 80011da:	600b      	str	r3, [r1, #0]
		~GpioOutElement() { };
 80011dc:	492a      	ldr	r1, [pc, #168]	; (8001288 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 80011de:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 80011e0:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 80011e2:	4928      	ldr	r1, [pc, #160]	; (8001284 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 80011e4:	4a33      	ldr	r2, [pc, #204]	; (80012b4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 80011e6:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 80011e8:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 80011ea:	4925      	ldr	r1, [pc, #148]	; (8001280 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 80011ec:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 80011ee:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 80011f0:	4931      	ldr	r1, [pc, #196]	; (80012b8 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 80011f2:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 80011f4:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 80011f6:	4921      	ldr	r1, [pc, #132]	; (800127c <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 80011f8:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 80011fa:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 80011fc:	492f      	ldr	r1, [pc, #188]	; (80012bc <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80011fe:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8001200:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8001202:	491c      	ldr	r1, [pc, #112]	; (8001274 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8001204:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8001206:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8001208:	492d      	ldr	r1, [pc, #180]	; (80012c0 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800120a:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 800120c:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 800120e:	4918      	ldr	r1, [pc, #96]	; (8001270 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8001210:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8001212:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8001214:	4915      	ldr	r1, [pc, #84]	; (800126c <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8001216:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8001218:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 800121a:	4913      	ldr	r1, [pc, #76]	; (8001268 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 800121c:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 800121e:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8001220:	4910      	ldr	r1, [pc, #64]	; (8001264 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8001222:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8001224:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8001226:	490e      	ldr	r1, [pc, #56]	; (8001260 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8001228:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 800122a:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 800122c:	490a      	ldr	r1, [pc, #40]	; (8001258 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 800122e:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8001230:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8001234:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8001236:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 8001238:	4905      	ldr	r1, [pc, #20]	; (8001250 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800123a:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 800123c:	600b      	str	r3, [r1, #0]
		~GpioInElement() { };
 800123e:	4903      	ldr	r1, [pc, #12]	; (800124c <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8001240:	600a      	str	r2, [r1, #0]
		virtual ~GpioElement() = default;
 8001242:	600b      	str	r3, [r1, #0]
}
 8001244:	e6e0      	b.n	8001008 <_Z41__static_initialization_and_destruction_0ii+0x18>
 8001246:	bf00      	nop
 8001248:	48000400 	.word	0x48000400
 800124c:	200003c8 	.word	0x200003c8
 8001250:	200003dc 	.word	0x200003dc
 8001254:	200003f0 	.word	0x200003f0
 8001258:	20000404 	.word	0x20000404
 800125c:	48000800 	.word	0x48000800
 8001260:	20000418 	.word	0x20000418
 8001264:	2000042c 	.word	0x2000042c
 8001268:	20000440 	.word	0x20000440
 800126c:	20000454 	.word	0x20000454
 8001270:	20000328 	.word	0x20000328
 8001274:	20000350 	.word	0x20000350
 8001278:	48000c00 	.word	0x48000c00
 800127c:	20000378 	.word	0x20000378
 8001280:	200003a0 	.word	0x200003a0
 8001284:	200003b4 	.word	0x200003b4
 8001288:	200002e8 	.word	0x200002e8
 800128c:	200002f8 	.word	0x200002f8
 8001290:	20000308 	.word	0x20000308
 8001294:	20000318 	.word	0x20000318
 8001298:	200004f8 	.word	0x200004f8
 800129c:	08005568 	.word	0x08005568
 80012a0:	2000053c 	.word	0x2000053c
 80012a4:	08005578 	.word	0x08005578
 80012a8:	200004d4 	.word	0x200004d4
 80012ac:	080051b8 	.word	0x080051b8
 80012b0:	080051a4 	.word	0x080051a4
 80012b4:	080051cc 	.word	0x080051cc
 80012b8:	2000038c 	.word	0x2000038c
 80012bc:	20000364 	.word	0x20000364
 80012c0:	2000033c 	.word	0x2000033c
 80012c4:	200004dc 	.word	0x200004dc
 80012c8:	20000490 	.word	0x20000490

080012cc <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 80012cc:	b508      	push	{r3, lr}
 80012ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff fe8c 	bl	8000ff0 <_Z41__static_initialization_and_destruction_0ii>
 80012d8:	bd08      	pop	{r3, pc}

080012da <_GLOBAL__sub_D__ZN8PUTM_CAN3canE>:
 80012da:	b508      	push	{r3, lr}
 80012dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fe85 	bl	8000ff0 <_Z41__static_initialization_and_destruction_0ii>
 80012e6:	bd08      	pop	{r3, pc}

080012e8 <_ZN6RotaryC1ERKSt5arrayIPK13GpioInElementLj4EE>:
 *      Author: pile
 */

#include "rotary.hpp"

Rotary::Rotary(std::array < GpioInElement const* , rotary_pin_count > const &in) : in(in) { }
 80012e8:	b500      	push	{lr}
 80012ea:	4684      	mov	ip, r0
 80012ec:	f100 0e04 	add.w	lr, r0, #4
 80012f0:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 80012f2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8cc 3014 	str.w	r3, [ip, #20]
 80012fc:	4660      	mov	r0, ip
 80012fe:	f85d fb04 	ldr.w	pc, [sp], #4

08001302 <_ZNK6Rotary6handleEv>:

void Rotary::handle() const
{
 8001302:	b570      	push	{r4, r5, r6, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	4605      	mov	r5, r0
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
 8001308:	1d04      	adds	r4, r0, #4
      { return const_iterator(data() + _Nm); }
 800130a:	f100 0614 	add.w	r6, r0, #20
 800130e:	e004      	b.n	800131a <_ZNK6Rotary6handleEv+0x18>
	for(auto ptr : in) ptr->handle();
 8001310:	f854 0b04 	ldr.w	r0, [r4], #4
 8001314:	6803      	ldr	r3, [r0, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4798      	blx	r3
 800131a:	42b4      	cmp	r4, r6
 800131c:	d1f8      	bne.n	8001310 <_ZNK6Rotary6handleEv+0xe>

	auto ret = RotationDirection::None;

	std::array< bool, rotary_pin_count > curr_states;
	for(size_t i = 0; i < rotary_pin_count; i++) curr_states[i] = in[i]->isActive();
 800131e:	2400      	movs	r4, #0
 8001320:	e00a      	b.n	8001338 <_ZNK6Rotary6handleEv+0x36>
 8001322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8001326:	6858      	ldr	r0, [r3, #4]
 8001328:	f7ff f866 	bl	80003f8 <_ZNK13GpioInElement8isActiveEv>
 800132c:	f104 0308 	add.w	r3, r4, #8
 8001330:	446b      	add	r3, sp
 8001332:	f803 0c04 	strb.w	r0, [r3, #-4]
 8001336:	3401      	adds	r4, #1
 8001338:	2c03      	cmp	r4, #3
 800133a:	d9f2      	bls.n	8001322 <_ZNK6Rotary6handleEv+0x20>

	for(int i = 0; i < int(rotary_pin_count); i++)
 800133c:	2300      	movs	r3, #0
 800133e:	e004      	b.n	800134a <_ZNK6Rotary6handleEv+0x48>
	{
		int im = i == 0 ? rotary_pin_count - 1 : i - 1;
 8001340:	2003      	movs	r0, #3
 8001342:	e007      	b.n	8001354 <_ZNK6Rotary6handleEv+0x52>
		int ip = i == rotary_pin_count - 1 ? 0 : i + 1;
 8001344:	2100      	movs	r1, #0
 8001346:	e008      	b.n	800135a <_ZNK6Rotary6handleEv+0x58>
	for(int i = 0; i < int(rotary_pin_count); i++)
 8001348:	3301      	adds	r3, #1
 800134a:	2b03      	cmp	r3, #3
 800134c:	dc17      	bgt.n	800137e <_ZNK6Rotary6handleEv+0x7c>
		int im = i == 0 ? rotary_pin_count - 1 : i - 1;
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f6      	beq.n	8001340 <_ZNK6Rotary6handleEv+0x3e>
 8001352:	1e58      	subs	r0, r3, #1
		int ip = i == rotary_pin_count - 1 ? 0 : i + 1;
 8001354:	2b03      	cmp	r3, #3
 8001356:	d0f5      	beq.n	8001344 <_ZNK6Rotary6handleEv+0x42>
 8001358:	1c59      	adds	r1, r3, #1

		if(curr_states[i] && prev_states[ip])
 800135a:	f103 0208 	add.w	r2, r3, #8
 800135e:	446a      	add	r2, sp
 8001360:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 8001364:	b112      	cbz	r2, 800136c <_ZNK6Rotary6handleEv+0x6a>
 8001366:	4429      	add	r1, r5
 8001368:	7d09      	ldrb	r1, [r1, #20]
 800136a:	b971      	cbnz	r1, 800138a <_ZNK6Rotary6handleEv+0x88>
		{
			ret = RotationDirection::Forward;
			break;
		}
		if(curr_states[i] && prev_states[im])
 800136c:	2a00      	cmp	r2, #0
 800136e:	d0eb      	beq.n	8001348 <_ZNK6Rotary6handleEv+0x46>
 8001370:	4428      	add	r0, r5
 8001372:	7d02      	ldrb	r2, [r0, #20]
 8001374:	2a00      	cmp	r2, #0
 8001376:	d0e7      	beq.n	8001348 <_ZNK6Rotary6handleEv+0x46>
		{
			ret = RotationDirection::Backwards;
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	e000      	b.n	8001380 <_ZNK6Rotary6handleEv+0x7e>
	auto ret = RotationDirection::None;
 800137e:	2200      	movs	r2, #0
			break;
		}
	}

	this->prev_states = curr_states;
 8001380:	9b01      	ldr	r3, [sp, #4]
 8001382:	616b      	str	r3, [r5, #20]
	this->rotation = ret;
 8001384:	702a      	strb	r2, [r5, #0]
}
 8001386:	b002      	add	sp, #8
 8001388:	bd70      	pop	{r4, r5, r6, pc}
			ret = RotationDirection::Forward;
 800138a:	2201      	movs	r2, #1
 800138c:	e7f8      	b.n	8001380 <_ZNK6Rotary6handleEv+0x7e>

0800138e <_ZN6Rotary11getRotationEv>:

RotationDirection Rotary::getRotation()
{
	return this->rotation;
}
 800138e:	f990 0000 	ldrsb.w	r0, [r0]
 8001392:	4770      	bx	lr

08001394 <_ZNK6Rotary27getRotationConstRefForDebugEv>:

RotationDirection const& Rotary::getRotationConstRefForDebug() const
{
	return this->rotation;
}
 8001394:	4770      	bx	lr
	...

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_MspInit+0x44>)
 80013a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_MspInit+0x44>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6613      	str	r3, [r2, #96]	; 0x60
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_MspInit+0x44>)
 80013ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_MspInit+0x44>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_MspInit+0x44>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	6593      	str	r3, [r2, #88]	; 0x58
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_MspInit+0x44>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000

080013e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a20      	ldr	r2, [pc, #128]	; (8001480 <HAL_CAN_MspInit+0xa0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d139      	bne.n	8001476 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_CAN_MspInit+0xa4>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	4a1f      	ldr	r2, [pc, #124]	; (8001484 <HAL_CAN_MspInit+0xa4>)
 8001408:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800140c:	6593      	str	r3, [r2, #88]	; 0x58
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <HAL_CAN_MspInit+0xa4>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <HAL_CAN_MspInit+0xa4>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a19      	ldr	r2, [pc, #100]	; (8001484 <HAL_CAN_MspInit+0xa4>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_CAN_MspInit+0xa4>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001432:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001444:	2309      	movs	r3, #9
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f001 f9a1 	bl	8002798 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2014      	movs	r0, #20
 800145c:	f001 f972 	bl	8002744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001460:	2014      	movs	r0, #20
 8001462:	f001 f98b 	bl	800277c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2015      	movs	r0, #21
 800146c:	f001 f96a 	bl	8002744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001470:	2015      	movs	r0, #21
 8001472:	f001 f983 	bl	800277c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	; 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40006400 	.word	0x40006400
 8001484:	40021000 	.word	0x40021000

08001488 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	; 0x30
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001496:	4b2e      	ldr	r3, [pc, #184]	; (8001550 <HAL_InitTick+0xc8>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	4a2d      	ldr	r2, [pc, #180]	; (8001550 <HAL_InitTick+0xc8>)
 800149c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014a0:	6613      	str	r3, [r2, #96]	; 0x60
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_InitTick+0xc8>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014ae:	f107 020c 	add.w	r2, r7, #12
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 fa6f 	bl	800399c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014be:	f002 fa57 	bl	8003970 <HAL_RCC_GetPCLK2Freq>
 80014c2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c6:	4a23      	ldr	r2, [pc, #140]	; (8001554 <HAL_InitTick+0xcc>)
 80014c8:	fba2 2303 	umull	r2, r3, r2, r3
 80014cc:	0c9b      	lsrs	r3, r3, #18
 80014ce:	3b01      	subs	r3, #1
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_InitTick+0xd0>)
 80014d4:	4a21      	ldr	r2, [pc, #132]	; (800155c <HAL_InitTick+0xd4>)
 80014d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <HAL_InitTick+0xd0>)
 80014da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014de:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_InitTick+0xd0>)
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_InitTick+0xd0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <HAL_InitTick+0xd0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_InitTick+0xd0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80014f8:	4817      	ldr	r0, [pc, #92]	; (8001558 <HAL_InitTick+0xd0>)
 80014fa:	f002 fb41 	bl	8003b80 <HAL_TIM_Base_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001504:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001508:	2b00      	cmp	r3, #0
 800150a:	d11b      	bne.n	8001544 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800150c:	4812      	ldr	r0, [pc, #72]	; (8001558 <HAL_InitTick+0xd0>)
 800150e:	f002 fb99 	bl	8003c44 <HAL_TIM_Base_Start_IT>
 8001512:	4603      	mov	r3, r0
 8001514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001518:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800151c:	2b00      	cmp	r3, #0
 800151e:	d111      	bne.n	8001544 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001520:	2019      	movs	r0, #25
 8001522:	f001 f92b 	bl	800277c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d808      	bhi.n	800153e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	2019      	movs	r0, #25
 8001532:	f001 f907 	bl	8002744 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <HAL_InitTick+0xd8>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	e002      	b.n	8001544 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001548:	4618      	mov	r0, r3
 800154a:	3730      	adds	r7, #48	; 0x30
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000
 8001554:	431bde83 	.word	0x431bde83
 8001558:	20000554 	.word	0x20000554
 800155c:	40012c00 	.word	0x40012c00
 8001560:	20000254 	.word	0x20000254

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <NMI_Handler+0x4>

0800156a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <HardFault_Handler+0x4>

08001570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <MemManage_Handler+0x4>

08001576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <BusFault_Handler+0x4>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <UsageFault_Handler+0x4>

08001582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <CAN1_RX0_IRQHandler+0x10>)
 80015c2:	f000 fdd8 	bl	8002176 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200004ac 	.word	0x200004ac

080015d0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <CAN1_RX1_IRQHandler+0x10>)
 80015d6:	f000 fdce 	bl	8002176 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200004ac 	.word	0x200004ac

080015e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INIT2_Pin);
 80015e8:	2020      	movs	r0, #32
 80015ea:	f001 fa97 	bl	8002b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015fa:	f002 fb93 	bl	8003d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000554 	.word	0x20000554

08001608 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
	return 1;
 800160c:	2301      	movs	r3, #1
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_kill>:

int _kill(int pid, int sig)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001622:	f002 fda1 	bl	8004168 <__errno>
 8001626:	4603      	mov	r3, r0
 8001628:	2216      	movs	r2, #22
 800162a:	601a      	str	r2, [r3, #0]
	return -1;
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_exit>:

void _exit (int status)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001640:	f04f 31ff 	mov.w	r1, #4294967295
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ffe7 	bl	8001618 <_kill>
	while (1) {}		/* Make sure we hang here */
 800164a:	e7fe      	b.n	800164a <_exit+0x12>

0800164c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	e00a      	b.n	8001674 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800165e:	f3af 8000 	nop.w
 8001662:	4601      	mov	r1, r0
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	60ba      	str	r2, [r7, #8]
 800166a:	b2ca      	uxtb	r2, r1
 800166c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3301      	adds	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	dbf0      	blt.n	800165e <_read+0x12>
	}

return len;
 800167c:	687b      	ldr	r3, [r7, #4]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e009      	b.n	80016ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	60ba      	str	r2, [r7, #8]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	dbf1      	blt.n	8001698 <_write+0x12>
	}
	return len;
 80016b4:	687b      	ldr	r3, [r7, #4]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <_close>:

int _close(int file)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
	return -1;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e6:	605a      	str	r2, [r3, #4]
	return 0;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <_isatty>:

int _isatty(int file)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
	return 1;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
	return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001730:	4a14      	ldr	r2, [pc, #80]	; (8001784 <_sbrk+0x5c>)
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <_sbrk+0x60>)
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <_sbrk+0x64>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <_sbrk+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	429a      	cmp	r2, r3
 8001756:	d207      	bcs.n	8001768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001758:	f002 fd06 	bl	8004168 <__errno>
 800175c:	4603      	mov	r3, r0
 800175e:	220c      	movs	r2, #12
 8001760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	e009      	b.n	800177c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <_sbrk+0x64>)
 8001778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20050000 	.word	0x20050000
 8001788:	00000400 	.word	0x00000400
 800178c:	200005a0 	.word	0x200005a0
 8001790:	200005b8 	.word	0x200005b8

08001794 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <SystemInit+0x5c>)
 800179a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179e:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <SystemInit+0x5c>)
 80017a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <SystemInit+0x60>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <SystemInit+0x60>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <SystemInit+0x60>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <SystemInit+0x60>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <SystemInit+0x60>)
 80017c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80017c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80017c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <SystemInit+0x60>)
 80017cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <SystemInit+0x60>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <SystemInit+0x60>)
 80017d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <SystemInit+0x60>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00
 80017f4:	40021000 	.word	0x40021000

080017f8 <_ZN5TimerC1Em>:
Timer::Timer()
{
	this->start_time = HAL_GetTick();
}

Timer::Timer(uint32_t timeout) : timeout(timeout)
 80017f8:	b510      	push	{r4, lr}
 80017fa:	4604      	mov	r4, r0
 80017fc:	6041      	str	r1, [r0, #4]
{
	this->start_time = HAL_GetTick();
 80017fe:	f000 f879 	bl	80018f4 <HAL_GetTick>
 8001802:	6020      	str	r0, [r4, #0]
}
 8001804:	4620      	mov	r0, r4
 8001806:	bd10      	pop	{r4, pc}

08001808 <_ZN5Timer7restartEv>:
{
	this->timeout = timeout;
}

void Timer::restart()
{
 8001808:	b510      	push	{r4, lr}
 800180a:	4604      	mov	r4, r0
	this->start_time = HAL_GetTick();
 800180c:	f000 f872 	bl	80018f4 <HAL_GetTick>
 8001810:	6020      	str	r0, [r4, #0]
}
 8001812:	bd10      	pop	{r4, pc}

08001814 <_ZN5Timer13getPassedTimeEv>:

	return false;
}

uint32_t Timer::getPassedTime()
{
 8001814:	b510      	push	{r4, lr}
 8001816:	4604      	mov	r4, r0
	return HAL_GetTick() - this->start_time;
 8001818:	f000 f86c 	bl	80018f4 <HAL_GetTick>
 800181c:	6823      	ldr	r3, [r4, #0]
}
 800181e:	1ac0      	subs	r0, r0, r3
 8001820:	bd10      	pop	{r4, pc}

08001822 <_ZN5Timer24checkIfTimedOutThenResetEv>:
	if(this->timeout == 0) return false;
 8001822:	6843      	ldr	r3, [r0, #4]
 8001824:	b90b      	cbnz	r3, 800182a <_ZN5Timer24checkIfTimedOutThenResetEv+0x8>
 8001826:	2000      	movs	r0, #0
}
 8001828:	4770      	bx	lr
{
 800182a:	b510      	push	{r4, lr}
 800182c:	4604      	mov	r4, r0
	if(this->getPassedTime() >= this->timeout)
 800182e:	f7ff fff1 	bl	8001814 <_ZN5Timer13getPassedTimeEv>
 8001832:	6863      	ldr	r3, [r4, #4]
 8001834:	4298      	cmp	r0, r3
 8001836:	d201      	bcs.n	800183c <_ZN5Timer24checkIfTimedOutThenResetEv+0x1a>
	return false;
 8001838:	2000      	movs	r0, #0
}
 800183a:	bd10      	pop	{r4, pc}
		this->restart();
 800183c:	4620      	mov	r0, r4
 800183e:	f7ff ffe3 	bl	8001808 <_ZN5Timer7restartEv>
		return true;
 8001842:	2001      	movs	r0, #1
 8001844:	e7f9      	b.n	800183a <_ZN5Timer24checkIfTimedOutThenResetEv+0x18>
	...

08001848 <Reset_Handler>:
 8001848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001880 <LoopForever+0x2>
 800184c:	f7ff ffa2 	bl	8001794 <SystemInit>
 8001850:	2100      	movs	r1, #0
 8001852:	e003      	b.n	800185c <LoopCopyDataInit>

08001854 <CopyDataInit>:
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <LoopForever+0x6>)
 8001856:	585b      	ldr	r3, [r3, r1]
 8001858:	5043      	str	r3, [r0, r1]
 800185a:	3104      	adds	r1, #4

0800185c <LoopCopyDataInit>:
 800185c:	480a      	ldr	r0, [pc, #40]	; (8001888 <LoopForever+0xa>)
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <LoopForever+0xe>)
 8001860:	1842      	adds	r2, r0, r1
 8001862:	429a      	cmp	r2, r3
 8001864:	d3f6      	bcc.n	8001854 <CopyDataInit>
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <LoopForever+0x12>)
 8001868:	e002      	b.n	8001870 <LoopFillZerobss>

0800186a <FillZerobss>:
 800186a:	2300      	movs	r3, #0
 800186c:	f842 3b04 	str.w	r3, [r2], #4

08001870 <LoopFillZerobss>:
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <LoopForever+0x16>)
 8001872:	429a      	cmp	r2, r3
 8001874:	d3f9      	bcc.n	800186a <FillZerobss>
 8001876:	f002 fc8f 	bl	8004198 <__libc_init_array>
 800187a:	f7ff f8f1 	bl	8000a60 <main>

0800187e <LoopForever>:
 800187e:	e7fe      	b.n	800187e <LoopForever>
 8001880:	20050000 	.word	0x20050000
 8001884:	080056fc 	.word	0x080056fc
 8001888:	20000000 	.word	0x20000000
 800188c:	200002c0 	.word	0x200002c0
 8001890:	200002c0 	.word	0x200002c0
 8001894:	200005b8 	.word	0x200005b8

08001898 <ADC1_2_IRQHandler>:
 8001898:	e7fe      	b.n	8001898 <ADC1_2_IRQHandler>

0800189a <HAL_Init>:
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	2300      	movs	r3, #0
 80018a2:	71fb      	strb	r3, [r7, #7]
 80018a4:	2003      	movs	r0, #3
 80018a6:	f000 ff42 	bl	800272e <HAL_NVIC_SetPriorityGrouping>
 80018aa:	200f      	movs	r0, #15
 80018ac:	f7ff fdec 	bl	8001488 <HAL_InitTick>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <HAL_Init+0x22>
 80018b6:	2301      	movs	r3, #1
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	e001      	b.n	80018c0 <HAL_Init+0x26>
 80018bc:	f7ff fd6c 	bl	8001398 <HAL_MspInit>
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_IncTick>:
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x20>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_IncTick+0x24>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <HAL_IncTick+0x24>)
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000258 	.word	0x20000258
 80018f0:	200005a4 	.word	0x200005a4

080018f4 <HAL_GetTick>:
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_GetTick+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	200005a4 	.word	0x200005a4

0800190c <HAL_Delay>:
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	f7ff ffee 	bl	80018f4 <HAL_GetTick>
 8001918:	60b8      	str	r0, [r7, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d005      	beq.n	8001932 <HAL_Delay+0x26>
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_Delay+0x44>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	bf00      	nop
 8001934:	f7ff ffde 	bl	80018f4 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	429a      	cmp	r2, r3
 8001942:	d8f7      	bhi.n	8001934 <HAL_Delay+0x28>
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000258 	.word	0x20000258

08001954 <HAL_CAN_Init>:
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_CAN_Init+0x12>
 8001962:	2301      	movs	r3, #1
 8001964:	e0ed      	b.n	8001b42 <HAL_CAN_Init+0x1ee>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d102      	bne.n	8001978 <HAL_CAN_Init+0x24>
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fd34 	bl	80013e0 <HAL_CAN_MspInit>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0201 	orr.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	f7ff ffb4 	bl	80018f4 <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	e012      	b.n	80019b6 <HAL_CAN_Init+0x62>
 8001990:	f7ff ffb0 	bl	80018f4 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b0a      	cmp	r3, #10
 800199c:	d90b      	bls.n	80019b6 <HAL_CAN_Init+0x62>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2205      	movs	r2, #5
 80019ae:	f883 2020 	strb.w	r2, [r3, #32]
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0c5      	b.n	8001b42 <HAL_CAN_Init+0x1ee>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0e5      	beq.n	8001990 <HAL_CAN_Init+0x3c>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0202 	bic.w	r2, r2, #2
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	f7ff ff8e 	bl	80018f4 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	e012      	b.n	8001a02 <HAL_CAN_Init+0xae>
 80019dc:	f7ff ff8a 	bl	80018f4 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b0a      	cmp	r3, #10
 80019e8:	d90b      	bls.n	8001a02 <HAL_CAN_Init+0xae>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2205      	movs	r2, #5
 80019fa:	f883 2020 	strb.w	r2, [r3, #32]
 80019fe:	2301      	movs	r3, #1
 8001a00:	e09f      	b.n	8001b42 <HAL_CAN_Init+0x1ee>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1e5      	bne.n	80019dc <HAL_CAN_Init+0x88>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7e1b      	ldrb	r3, [r3, #24]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d108      	bne.n	8001a2a <HAL_CAN_Init+0xd6>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e007      	b.n	8001a3a <HAL_CAN_Init+0xe6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7e5b      	ldrb	r3, [r3, #25]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d108      	bne.n	8001a54 <HAL_CAN_Init+0x100>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	e007      	b.n	8001a64 <HAL_CAN_Init+0x110>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7e9b      	ldrb	r3, [r3, #26]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d108      	bne.n	8001a7e <HAL_CAN_Init+0x12a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0220 	orr.w	r2, r2, #32
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	e007      	b.n	8001a8e <HAL_CAN_Init+0x13a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0220 	bic.w	r2, r2, #32
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7edb      	ldrb	r3, [r3, #27]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d108      	bne.n	8001aa8 <HAL_CAN_Init+0x154>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0210 	bic.w	r2, r2, #16
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e007      	b.n	8001ab8 <HAL_CAN_Init+0x164>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0210 	orr.w	r2, r2, #16
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7f1b      	ldrb	r3, [r3, #28]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d108      	bne.n	8001ad2 <HAL_CAN_Init+0x17e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0208 	orr.w	r2, r2, #8
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	e007      	b.n	8001ae2 <HAL_CAN_Init+0x18e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0208 	bic.w	r2, r2, #8
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	7f5b      	ldrb	r3, [r3, #29]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d108      	bne.n	8001afc <HAL_CAN_Init+0x1a8>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0204 	orr.w	r2, r2, #4
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	e007      	b.n	8001b0c <HAL_CAN_Init+0x1b8>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0204 	bic.w	r2, r2, #4
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	ea42 0103 	orr.w	r1, r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	1e5a      	subs	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	61da      	str	r2, [r3, #28]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2020 	strb.w	r2, [r3, #32]
 8001b40:	2300      	movs	r3, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_CAN_ConfigFilter>:
 8001b4a:	b480      	push	{r7}
 8001b4c:	b087      	sub	sp, #28
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b60:	74fb      	strb	r3, [r7, #19]
 8001b62:	7cfb      	ldrb	r3, [r7, #19]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d003      	beq.n	8001b70 <HAL_CAN_ConfigFilter+0x26>
 8001b68:	7cfb      	ldrb	r3, [r7, #19]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	f040 80aa 	bne.w	8001cc4 <HAL_CAN_ConfigFilter+0x17a>
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	2201      	movs	r2, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d123      	bne.n	8001bf2 <HAL_CAN_ConfigFilter+0xa8>
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	401a      	ands	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0419      	lsls	r1, r3, #16
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	6952      	ldr	r2, [r2, #20]
 8001bcc:	4319      	orrs	r1, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3248      	adds	r2, #72	; 0x48
 8001bd2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	0419      	lsls	r1, r3, #16
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	6979      	ldr	r1, [r7, #20]
 8001bea:	3348      	adds	r3, #72	; 0x48
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d122      	bne.n	8001c40 <HAL_CAN_ConfigFilter+0xf6>
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	0419      	lsls	r1, r3, #16
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	6952      	ldr	r2, [r2, #20]
 8001c1a:	4319      	orrs	r1, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	3248      	adds	r2, #72	; 0x48
 8001c20:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	0419      	lsls	r1, r3, #16
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	6979      	ldr	r1, [r7, #20]
 8001c38:	3348      	adds	r3, #72	; 0x48
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	440b      	add	r3, r1
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <HAL_CAN_ConfigFilter+0x112>
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c5a:	e007      	b.n	8001c6c <HAL_CAN_ConfigFilter+0x122>
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	431a      	orrs	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <HAL_CAN_ConfigFilter+0x13e>
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	401a      	ands	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c86:	e007      	b.n	8001c98 <HAL_CAN_ConfigFilter+0x14e>
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d107      	bne.n	8001cb0 <HAL_CAN_ConfigFilter+0x166>
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cb6:	f023 0201 	bic.w	r2, r3, #1
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e006      	b.n	8001cd2 <HAL_CAN_ConfigFilter+0x188>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HAL_CAN_Start>:
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d12e      	bne.n	8001d50 <HAL_CAN_Start+0x72>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f883 2020 	strb.w	r2, [r3, #32]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	f7ff fdf3 	bl	80018f4 <HAL_GetTick>
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	e012      	b.n	8001d38 <HAL_CAN_Start+0x5a>
 8001d12:	f7ff fdef 	bl	80018f4 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b0a      	cmp	r3, #10
 8001d1e:	d90b      	bls.n	8001d38 <HAL_CAN_Start+0x5a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2205      	movs	r2, #5
 8001d30:	f883 2020 	strb.w	r2, [r3, #32]
 8001d34:	2301      	movs	r3, #1
 8001d36:	e012      	b.n	8001d5e <HAL_CAN_Start+0x80>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1e5      	bne.n	8001d12 <HAL_CAN_Start+0x34>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e006      	b.n	8001d5e <HAL_CAN_Start+0x80>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_CAN_AddTxMessage>:
 8001d66:	b480      	push	{r7}
 8001d68:	b089      	sub	sp, #36	; 0x24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7a:	77fb      	strb	r3, [r7, #31]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
 8001d84:	7ffb      	ldrb	r3, [r7, #31]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d003      	beq.n	8001d92 <HAL_CAN_AddTxMessage+0x2c>
 8001d8a:	7ffb      	ldrb	r3, [r7, #31]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	f040 80ad 	bne.w	8001eec <HAL_CAN_AddTxMessage+0x186>
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10a      	bne.n	8001db2 <HAL_CAN_AddTxMessage+0x4c>
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d105      	bne.n	8001db2 <HAL_CAN_AddTxMessage+0x4c>
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 8095 	beq.w	8001edc <HAL_CAN_AddTxMessage+0x176>
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	0e1b      	lsrs	r3, r3, #24
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10d      	bne.n	8001dea <HAL_CAN_AddTxMessage+0x84>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	055a      	lsls	r2, r3, #21
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	68f9      	ldr	r1, [r7, #12]
 8001dda:	6809      	ldr	r1, [r1, #0]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3318      	adds	r3, #24
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	440b      	add	r3, r1
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e00f      	b.n	8001e0a <HAL_CAN_AddTxMessage+0xa4>
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	00da      	lsls	r2, r3, #3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	68f9      	ldr	r1, [r7, #12]
 8001dfc:	6809      	ldr	r1, [r1, #0]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3318      	adds	r3, #24
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	440b      	add	r3, r1
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6819      	ldr	r1, [r3, #0]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3318      	adds	r3, #24
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	440b      	add	r3, r1
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	7d1b      	ldrb	r3, [r3, #20]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d111      	bne.n	8001e4a <HAL_CAN_AddTxMessage+0xe4>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3318      	adds	r3, #24
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	4413      	add	r3, r2
 8001e32:	3304      	adds	r3, #4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	6811      	ldr	r1, [r2, #0]
 8001e3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3318      	adds	r3, #24
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	440b      	add	r3, r1
 8001e46:	3304      	adds	r3, #4
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3307      	adds	r3, #7
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	061a      	lsls	r2, r3, #24
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3306      	adds	r3, #6
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	041b      	lsls	r3, r3, #16
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3305      	adds	r3, #5
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	4313      	orrs	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	3204      	adds	r2, #4
 8001e6a:	7812      	ldrb	r2, [r2, #0]
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	6811      	ldr	r1, [r2, #0]
 8001e72:	ea43 0200 	orr.w	r2, r3, r0
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3303      	adds	r3, #3
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	061a      	lsls	r2, r3, #24
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	041b      	lsls	r3, r3, #16
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3301      	adds	r3, #1
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	7812      	ldrb	r2, [r2, #0]
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	6811      	ldr	r1, [r2, #0]
 8001ea8:	ea43 0200 	orr.w	r2, r3, r0
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	440b      	add	r3, r1
 8001eb2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3318      	adds	r3, #24
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	4413      	add	r3, r2
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	6811      	ldr	r1, [r2, #0]
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3318      	adds	r3, #24
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	440b      	add	r3, r1
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e00e      	b.n	8001efa <HAL_CAN_AddTxMessage+0x194>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e006      	b.n	8001efa <HAL_CAN_AddTxMessage+0x194>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ef8:	2301      	movs	r3, #1
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_CAN_GetRxMessage>:
 8001f06:	b480      	push	{r7}
 8001f08:	b087      	sub	sp, #28
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f1a:	75fb      	strb	r3, [r7, #23]
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d003      	beq.n	8001f2a <HAL_CAN_GetRxMessage+0x24>
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	f040 80f3 	bne.w	8002110 <HAL_CAN_GetRxMessage+0x20a>
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10e      	bne.n	8001f4e <HAL_CAN_GetRxMessage+0x48>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d116      	bne.n	8001f6c <HAL_CAN_GetRxMessage+0x66>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e0e7      	b.n	800211e <HAL_CAN_GetRxMessage+0x218>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <HAL_CAN_GetRxMessage+0x66>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0d8      	b.n	800211e <HAL_CAN_GetRxMessage+0x218>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	331b      	adds	r3, #27
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	4413      	add	r3, r2
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0204 	and.w	r2, r3, #4
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10c      	bne.n	8001fa4 <HAL_CAN_GetRxMessage+0x9e>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	331b      	adds	r3, #27
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	4413      	add	r3, r2
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0d5b      	lsrs	r3, r3, #21
 8001f9a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e00b      	b.n	8001fbc <HAL_CAN_GetRxMessage+0xb6>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	331b      	adds	r3, #27
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	4413      	add	r3, r2
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	08db      	lsrs	r3, r3, #3
 8001fb4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	331b      	adds	r3, #27
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	4413      	add	r3, r2
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0202 	and.w	r2, r3, #2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	331b      	adds	r3, #27
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	4413      	add	r3, r2
 8001fde:	3304      	adds	r3, #4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 020f 	and.w	r2, r3, #15
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	331b      	adds	r3, #27
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	619a      	str	r2, [r3, #24]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	331b      	adds	r3, #27
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	4413      	add	r3, r2
 800200e:	3304      	adds	r3, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0c1b      	lsrs	r3, r3, #16
 8002014:	b29a      	uxth	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	615a      	str	r2, [r3, #20]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	4413      	add	r3, r2
 8002024:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	4413      	add	r3, r2
 800203a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0a1a      	lsrs	r2, r3, #8
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	4413      	add	r3, r2
 8002054:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	0c1a      	lsrs	r2, r3, #16
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	3302      	adds	r3, #2
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	4413      	add	r3, r2
 800206e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0e1a      	lsrs	r2, r3, #24
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	3303      	adds	r3, #3
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	4413      	add	r3, r2
 8002088:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	3304      	adds	r3, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	4413      	add	r3, r2
 80020a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0a1a      	lsrs	r2, r3, #8
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	3305      	adds	r3, #5
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0c1a      	lsrs	r2, r3, #16
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	3306      	adds	r3, #6
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	0e1a      	lsrs	r2, r3, #24
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	3307      	adds	r3, #7
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d108      	bne.n	80020fc <HAL_CAN_GetRxMessage+0x1f6>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0220 	orr.w	r2, r2, #32
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	e007      	b.n	800210c <HAL_CAN_GetRxMessage+0x206>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0220 	orr.w	r2, r2, #32
 800210a:	611a      	str	r2, [r3, #16]
 800210c:	2300      	movs	r3, #0
 800210e:	e006      	b.n	800211e <HAL_CAN_GetRxMessage+0x218>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	625a      	str	r2, [r3, #36]	; 0x24
 800211c:	2301      	movs	r3, #1
 800211e:	4618      	mov	r0, r3
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_CAN_ActivateNotification>:
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3020 	ldrb.w	r3, [r3, #32]
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d002      	beq.n	8002148 <HAL_CAN_ActivateNotification+0x1e>
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d109      	bne.n	800215c <HAL_CAN_ActivateNotification+0x32>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6959      	ldr	r1, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	615a      	str	r2, [r3, #20]
 8002158:	2300      	movs	r3, #0
 800215a:	e006      	b.n	800216a <HAL_CAN_ActivateNotification+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	625a      	str	r2, [r3, #36]	; 0x24
 8002168:	2301      	movs	r3, #1
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_CAN_IRQHandler>:
 8002176:	b580      	push	{r7, lr}
 8002178:	b08a      	sub	sp, #40	; 0x28
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	623b      	str	r3, [r7, #32]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	61bb      	str	r3, [r7, #24]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d07c      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x140>
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d023      	beq.n	800220e <HAL_CAN_IRQHandler+0x98>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2201      	movs	r2, #1
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x6a>
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f983 	bl	80024e4 <HAL_CAN_TxMailbox0CompleteCallback>
 80021de:	e016      	b.n	800220e <HAL_CAN_IRQHandler+0x98>
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d004      	beq.n	80021f4 <HAL_CAN_IRQHandler+0x7e>
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
 80021f2:	e00c      	b.n	800220e <HAL_CAN_IRQHandler+0x98>
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <HAL_CAN_IRQHandler+0x92>
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
 8002206:	e002      	b.n	800220e <HAL_CAN_IRQHandler+0x98>
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f989 	bl	8002520 <HAL_CAN_TxMailbox0AbortCallback>
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d024      	beq.n	8002262 <HAL_CAN_IRQHandler+0xec>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_CAN_IRQHandler+0xbe>
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f963 	bl	80024f8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002232:	e016      	b.n	8002262 <HAL_CAN_IRQHandler+0xec>
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <HAL_CAN_IRQHandler+0xd2>
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	e00c      	b.n	8002262 <HAL_CAN_IRQHandler+0xec>
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800224e:	2b00      	cmp	r3, #0
 8002250:	d004      	beq.n	800225c <HAL_CAN_IRQHandler+0xe6>
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
 800225a:	e002      	b.n	8002262 <HAL_CAN_IRQHandler+0xec>
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f969 	bl	8002534 <HAL_CAN_TxMailbox1AbortCallback>
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d024      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x140>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_CAN_IRQHandler+0x112>
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f943 	bl	800250c <HAL_CAN_TxMailbox2CompleteCallback>
 8002286:	e016      	b.n	80022b6 <HAL_CAN_IRQHandler+0x140>
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <HAL_CAN_IRQHandler+0x126>
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
 800229a:	e00c      	b.n	80022b6 <HAL_CAN_IRQHandler+0x140>
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d004      	beq.n	80022b0 <HAL_CAN_IRQHandler+0x13a>
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
 80022ae:	e002      	b.n	80022b6 <HAL_CAN_IRQHandler+0x140>
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f949 	bl	8002548 <HAL_CAN_TxMailbox2AbortCallback>
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00c      	beq.n	80022da <HAL_CAN_IRQHandler+0x164>
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <HAL_CAN_IRQHandler+0x164>
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2210      	movs	r2, #16
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00b      	beq.n	80022fc <HAL_CAN_IRQHandler+0x186>
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <HAL_CAN_IRQHandler+0x186>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2208      	movs	r2, #8
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f930 	bl	800255c <HAL_CAN_RxFifo0FullCallback>
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_CAN_IRQHandler+0x1a4>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <HAL_CAN_IRQHandler+0x1a4>
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7fe fa6d 	bl	80007f4 <HAL_CAN_RxFifo0MsgPendingCallback>
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00c      	beq.n	800233e <HAL_CAN_IRQHandler+0x1c8>
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <HAL_CAN_IRQHandler+0x1c8>
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2210      	movs	r2, #16
 800233c:	611a      	str	r2, [r3, #16]
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00b      	beq.n	8002360 <HAL_CAN_IRQHandler+0x1ea>
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d006      	beq.n	8002360 <HAL_CAN_IRQHandler+0x1ea>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2208      	movs	r2, #8
 8002358:	611a      	str	r2, [r3, #16]
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f912 	bl	8002584 <HAL_CAN_RxFifo1FullCallback>
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_CAN_IRQHandler+0x208>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_CAN_IRQHandler+0x208>
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f8f9 	bl	8002570 <HAL_CAN_RxFifo1MsgPendingCallback>
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00b      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x22a>
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x22a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2210      	movs	r2, #16
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f8fc 	bl	8002598 <HAL_CAN_SleepCallback>
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_CAN_IRQHandler+0x24c>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <HAL_CAN_IRQHandler+0x24c>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2208      	movs	r2, #8
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f8f5 	bl	80025ac <HAL_CAN_WakeUpFromRxMsgCallback>
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d07b      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x34e>
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d072      	beq.n	80024bc <HAL_CAN_IRQHandler+0x346>
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_CAN_IRQHandler+0x27c>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_CAN_IRQHandler+0x27c>
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_CAN_IRQHandler+0x298>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_CAN_IRQHandler+0x298>
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_CAN_IRQHandler+0x2b4>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_CAN_IRQHandler+0x2b4>
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002430:	2b00      	cmp	r3, #0
 8002432:	d043      	beq.n	80024bc <HAL_CAN_IRQHandler+0x346>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800243a:	2b00      	cmp	r3, #0
 800243c:	d03e      	beq.n	80024bc <HAL_CAN_IRQHandler+0x346>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002444:	2b60      	cmp	r3, #96	; 0x60
 8002446:	d02b      	beq.n	80024a0 <HAL_CAN_IRQHandler+0x32a>
 8002448:	2b60      	cmp	r3, #96	; 0x60
 800244a:	d82e      	bhi.n	80024aa <HAL_CAN_IRQHandler+0x334>
 800244c:	2b50      	cmp	r3, #80	; 0x50
 800244e:	d022      	beq.n	8002496 <HAL_CAN_IRQHandler+0x320>
 8002450:	2b50      	cmp	r3, #80	; 0x50
 8002452:	d82a      	bhi.n	80024aa <HAL_CAN_IRQHandler+0x334>
 8002454:	2b40      	cmp	r3, #64	; 0x40
 8002456:	d019      	beq.n	800248c <HAL_CAN_IRQHandler+0x316>
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	d826      	bhi.n	80024aa <HAL_CAN_IRQHandler+0x334>
 800245c:	2b30      	cmp	r3, #48	; 0x30
 800245e:	d010      	beq.n	8002482 <HAL_CAN_IRQHandler+0x30c>
 8002460:	2b30      	cmp	r3, #48	; 0x30
 8002462:	d822      	bhi.n	80024aa <HAL_CAN_IRQHandler+0x334>
 8002464:	2b10      	cmp	r3, #16
 8002466:	d002      	beq.n	800246e <HAL_CAN_IRQHandler+0x2f8>
 8002468:	2b20      	cmp	r3, #32
 800246a:	d005      	beq.n	8002478 <HAL_CAN_IRQHandler+0x302>
 800246c:	e01d      	b.n	80024aa <HAL_CAN_IRQHandler+0x334>
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	f043 0308 	orr.w	r3, r3, #8
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	e019      	b.n	80024ac <HAL_CAN_IRQHandler+0x336>
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	f043 0310 	orr.w	r3, r3, #16
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
 8002480:	e014      	b.n	80024ac <HAL_CAN_IRQHandler+0x336>
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	f043 0320 	orr.w	r3, r3, #32
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
 800248a:	e00f      	b.n	80024ac <HAL_CAN_IRQHandler+0x336>
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
 8002494:	e00a      	b.n	80024ac <HAL_CAN_IRQHandler+0x336>
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
 800249e:	e005      	b.n	80024ac <HAL_CAN_IRQHandler+0x336>
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
 80024a8:	e000      	b.n	80024ac <HAL_CAN_IRQHandler+0x336>
 80024aa:	bf00      	nop
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024ba:	619a      	str	r2, [r3, #24]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2204      	movs	r2, #4
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_CAN_IRQHandler+0x366>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f872 	bl	80025c0 <HAL_CAN_ErrorCallback>
 80024dc:	bf00      	nop
 80024de:	3728      	adds	r7, #40	; 0x28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_CAN_TxMailbox0CompleteCallback>:
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_CAN_TxMailbox1CompleteCallback>:
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_CAN_TxMailbox2CompleteCallback>:
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_CAN_TxMailbox0AbortCallback>:
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_CAN_TxMailbox1AbortCallback>:
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_CAN_TxMailbox2AbortCallback>:
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_CAN_RxFifo0FullCallback>:
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_CAN_RxFifo1FullCallback>:
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_CAN_SleepCallback>:
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_CAN_WakeUpFromRxMsgCallback>:
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_CAN_ErrorCallback>:
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <__NVIC_SetPriorityGrouping>:
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f0:	4013      	ands	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	021a      	lsls	r2, r3, #8
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	4a04      	ldr	r2, [pc, #16]	; (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	60d3      	str	r3, [r2, #12]
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_GetPriorityGrouping>:
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <__NVIC_GetPriorityGrouping+0x18>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_EnableIRQ>:
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	2b00      	cmp	r3, #0
 8002648:	db0b      	blt.n	8002662 <__NVIC_EnableIRQ+0x2a>
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f003 021f 	and.w	r2, r3, #31
 8002650:	4907      	ldr	r1, [pc, #28]	; (8002670 <__NVIC_EnableIRQ+0x38>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2001      	movs	r0, #1
 800265a:	fa00 f202 	lsl.w	r2, r0, r2
 800265e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000e100 	.word	0xe000e100

08002674 <__NVIC_SetPriority>:
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	6039      	str	r1, [r7, #0]
 800267e:	71fb      	strb	r3, [r7, #7]
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	2b00      	cmp	r3, #0
 8002686:	db0a      	blt.n	800269e <__NVIC_SetPriority+0x2a>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	490c      	ldr	r1, [pc, #48]	; (80026c0 <__NVIC_SetPriority+0x4c>)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	0112      	lsls	r2, r2, #4
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	440b      	add	r3, r1
 8002698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800269c:	e00a      	b.n	80026b4 <__NVIC_SetPriority+0x40>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4908      	ldr	r1, [pc, #32]	; (80026c4 <__NVIC_SetPriority+0x50>)
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	3b04      	subs	r3, #4
 80026ac:	0112      	lsls	r2, r2, #4
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	440b      	add	r3, r1
 80026b2:	761a      	strb	r2, [r3, #24]
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000e100 	.word	0xe000e100
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <NVIC_EncodePriority>:
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f1c3 0307 	rsb	r3, r3, #7
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	bf28      	it	cs
 80026e6:	2304      	movcs	r3, #4
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3304      	adds	r3, #4
 80026ee:	2b06      	cmp	r3, #6
 80026f0:	d902      	bls.n	80026f8 <NVIC_EncodePriority+0x30>
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3b03      	subs	r3, #3
 80026f6:	e000      	b.n	80026fa <NVIC_EncodePriority+0x32>
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43da      	mvns	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	401a      	ands	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	409a      	lsls	r2, r3
 8002710:	f04f 31ff 	mov.w	r1, #4294967295
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	43d9      	mvns	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	400b      	ands	r3, r1
 8002720:	4313      	orrs	r3, r2
 8002722:	4618      	mov	r0, r3
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_NVIC_SetPriorityGrouping>:
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ff4c 	bl	80025d4 <__NVIC_SetPriorityGrouping>
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_NVIC_SetPriority>:
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	73fb      	strb	r3, [r7, #15]
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	f7ff ff61 	bl	800261c <__NVIC_GetPriorityGrouping>
 800275a:	6178      	str	r0, [r7, #20]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	6978      	ldr	r0, [r7, #20]
 8002762:	f7ff ffb1 	bl	80026c8 <NVIC_EncodePriority>
 8002766:	4602      	mov	r2, r0
 8002768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff ff80 	bl	8002674 <__NVIC_SetPriority>
 8002774:	bf00      	nop
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_NVIC_EnableIRQ>:
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ff54 	bl	8002638 <__NVIC_EnableIRQ>
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_GPIO_Init>:
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	e166      	b.n	8002a76 <HAL_GPIO_Init+0x2de>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	4013      	ands	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8158 	beq.w	8002a70 <HAL_GPIO_Init+0x2d8>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d005      	beq.n	80027d8 <HAL_GPIO_Init+0x40>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d130      	bne.n	800283a <HAL_GPIO_Init+0xa2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	2201      	movs	r2, #1
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	f003 0201 	and.w	r2, r3, #1
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b03      	cmp	r3, #3
 8002844:	d017      	beq.n	8002876 <HAL_GPIO_Init+0xde>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d123      	bne.n	80028ca <HAL_GPIO_Init+0x132>
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	08da      	lsrs	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3208      	adds	r2, #8
 800288a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	220f      	movs	r2, #15
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	08da      	lsrs	r2, r3, #3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3208      	adds	r2, #8
 80028c4:	6939      	ldr	r1, [r7, #16]
 80028c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 0203 	and.w	r2, r3, #3
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80b2 	beq.w	8002a70 <HAL_GPIO_Init+0x2d8>
 800290c:	4b61      	ldr	r3, [pc, #388]	; (8002a94 <HAL_GPIO_Init+0x2fc>)
 800290e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002910:	4a60      	ldr	r2, [pc, #384]	; (8002a94 <HAL_GPIO_Init+0x2fc>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6613      	str	r3, [r2, #96]	; 0x60
 8002918:	4b5e      	ldr	r3, [pc, #376]	; (8002a94 <HAL_GPIO_Init+0x2fc>)
 800291a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	4a5c      	ldr	r2, [pc, #368]	; (8002a98 <HAL_GPIO_Init+0x300>)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	089b      	lsrs	r3, r3, #2
 800292a:	3302      	adds	r3, #2
 800292c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	220f      	movs	r2, #15
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800294e:	d02b      	beq.n	80029a8 <HAL_GPIO_Init+0x210>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a52      	ldr	r2, [pc, #328]	; (8002a9c <HAL_GPIO_Init+0x304>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d025      	beq.n	80029a4 <HAL_GPIO_Init+0x20c>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a51      	ldr	r2, [pc, #324]	; (8002aa0 <HAL_GPIO_Init+0x308>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d01f      	beq.n	80029a0 <HAL_GPIO_Init+0x208>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a50      	ldr	r2, [pc, #320]	; (8002aa4 <HAL_GPIO_Init+0x30c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d019      	beq.n	800299c <HAL_GPIO_Init+0x204>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a4f      	ldr	r2, [pc, #316]	; (8002aa8 <HAL_GPIO_Init+0x310>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d013      	beq.n	8002998 <HAL_GPIO_Init+0x200>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a4e      	ldr	r2, [pc, #312]	; (8002aac <HAL_GPIO_Init+0x314>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d00d      	beq.n	8002994 <HAL_GPIO_Init+0x1fc>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a4d      	ldr	r2, [pc, #308]	; (8002ab0 <HAL_GPIO_Init+0x318>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d007      	beq.n	8002990 <HAL_GPIO_Init+0x1f8>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a4c      	ldr	r2, [pc, #304]	; (8002ab4 <HAL_GPIO_Init+0x31c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d101      	bne.n	800298c <HAL_GPIO_Init+0x1f4>
 8002988:	2307      	movs	r3, #7
 800298a:	e00e      	b.n	80029aa <HAL_GPIO_Init+0x212>
 800298c:	2308      	movs	r3, #8
 800298e:	e00c      	b.n	80029aa <HAL_GPIO_Init+0x212>
 8002990:	2306      	movs	r3, #6
 8002992:	e00a      	b.n	80029aa <HAL_GPIO_Init+0x212>
 8002994:	2305      	movs	r3, #5
 8002996:	e008      	b.n	80029aa <HAL_GPIO_Init+0x212>
 8002998:	2304      	movs	r3, #4
 800299a:	e006      	b.n	80029aa <HAL_GPIO_Init+0x212>
 800299c:	2303      	movs	r3, #3
 800299e:	e004      	b.n	80029aa <HAL_GPIO_Init+0x212>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e002      	b.n	80029aa <HAL_GPIO_Init+0x212>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_GPIO_Init+0x212>
 80029a8:	2300      	movs	r3, #0
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	f002 0203 	and.w	r2, r2, #3
 80029b0:	0092      	lsls	r2, r2, #2
 80029b2:	4093      	lsls	r3, r2
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	4937      	ldr	r1, [pc, #220]	; (8002a98 <HAL_GPIO_Init+0x300>)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80029c8:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_GPIO_Init+0x320>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x254>
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	4a32      	ldr	r2, [pc, #200]	; (8002ab8 <HAL_GPIO_Init+0x320>)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	6093      	str	r3, [r2, #8]
 80029f2:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <HAL_GPIO_Init+0x320>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x27e>
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	4a28      	ldr	r2, [pc, #160]	; (8002ab8 <HAL_GPIO_Init+0x320>)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	60d3      	str	r3, [r2, #12]
 8002a1c:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <HAL_GPIO_Init+0x320>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x2a8>
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	4a1d      	ldr	r2, [pc, #116]	; (8002ab8 <HAL_GPIO_Init+0x320>)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	6053      	str	r3, [r2, #4]
 8002a46:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <HAL_GPIO_Init+0x320>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4013      	ands	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x2d2>
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	4a13      	ldr	r2, [pc, #76]	; (8002ab8 <HAL_GPIO_Init+0x320>)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3301      	adds	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f47f ae91 	bne.w	80027a8 <HAL_GPIO_Init+0x10>
 8002a86:	bf00      	nop
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40010000 	.word	0x40010000
 8002a9c:	48000400 	.word	0x48000400
 8002aa0:	48000800 	.word	0x48000800
 8002aa4:	48000c00 	.word	0x48000c00
 8002aa8:	48001000 	.word	0x48001000
 8002aac:	48001400 	.word	0x48001400
 8002ab0:	48001800 	.word	0x48001800
 8002ab4:	48001c00 	.word	0x48001c00
 8002ab8:	40010400 	.word	0x40010400

08002abc <HAL_GPIO_ReadPin>:
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	807b      	strh	r3, [r7, #2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	887b      	ldrh	r3, [r7, #2]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_GPIO_ReadPin+0x1e>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
 8002ad8:	e001      	b.n	8002ade <HAL_GPIO_ReadPin+0x22>
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_GPIO_WritePin>:
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	807b      	strh	r3, [r7, #2]
 8002af8:	4613      	mov	r3, r2
 8002afa:	707b      	strb	r3, [r7, #1]
 8002afc:	787b      	ldrb	r3, [r7, #1]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_WritePin+0x1e>
 8002b02:	887a      	ldrh	r2, [r7, #2]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	619a      	str	r2, [r3, #24]
 8002b08:	e002      	b.n	8002b10 <HAL_GPIO_WritePin+0x24>
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_GPIO_EXTI_IRQHandler>:
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	80fb      	strh	r3, [r7, #6]
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d006      	beq.n	8002b40 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8002b32:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	6153      	str	r3, [r2, #20]
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fe8a 	bl	8000854 <HAL_GPIO_EXTI_Callback>
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40010400 	.word	0x40010400

08002b4c <HAL_PWREx_GetVoltageRange>:
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5c:	d102      	bne.n	8002b64 <HAL_PWREx_GetVoltageRange+0x18>
 8002b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b62:	e00b      	b.n	8002b7c <HAL_PWREx_GetVoltageRange+0x30>
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b72:	d102      	bne.n	8002b7a <HAL_PWREx_GetVoltageRange+0x2e>
 8002b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b78:	e000      	b.n	8002b7c <HAL_PWREx_GetVoltageRange+0x30>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40007000 	.word	0x40007000

08002b8c <HAL_PWREx_ControlVoltageScaling>:
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d141      	bne.n	8002c1e <HAL_PWREx_ControlVoltageScaling+0x92>
 8002b9a:	4b4b      	ldr	r3, [pc, #300]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba6:	d131      	bne.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x80>
 8002ba8:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bae:	4a46      	ldr	r2, [pc, #280]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002bb8:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bc0:	4a41      	ldr	r2, [pc, #260]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2232      	movs	r2, #50	; 0x32
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	4a3f      	ldr	r2, [pc, #252]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	0c9b      	lsrs	r3, r3, #18
 8002bda:	3301      	adds	r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	e002      	b.n	8002be6 <HAL_PWREx_ControlVoltageScaling+0x5a>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b38      	ldr	r3, [pc, #224]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf2:	d102      	bne.n	8002bfa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f2      	bne.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x54>
 8002bfa:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c06:	d158      	bne.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e057      	b.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x130>
 8002c0c:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c12:	4a2d      	ldr	r2, [pc, #180]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c1c:	e04d      	b.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c24:	d141      	bne.n	8002caa <HAL_PWREx_ControlVoltageScaling+0x11e>
 8002c26:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c32:	d131      	bne.n	8002c98 <HAL_PWREx_ControlVoltageScaling+0x10c>
 8002c34:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c3a:	4a23      	ldr	r2, [pc, #140]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c44:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2232      	movs	r2, #50	; 0x32
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	0c9b      	lsrs	r3, r3, #18
 8002c66:	3301      	adds	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	e002      	b.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0xe6>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7e:	d102      	bne.n	8002c86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f2      	bne.n	8002c6c <HAL_PWREx_ControlVoltageScaling+0xe0>
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c92:	d112      	bne.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
 8002c94:	2303      	movs	r3, #3
 8002c96:	e011      	b.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x130>
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ca8:	e007      	b.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cb2:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	20000250 	.word	0x20000250
 8002cd0:	431bde83 	.word	0x431bde83

08002cd4 <HAL_RCC_OscConfig>:
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x14>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f000 bc68 	b.w	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8002ce8:	4b97      	ldr	r3, [pc, #604]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	623b      	str	r3, [r7, #32]
 8002cf2:	4b95      	ldr	r3, [pc, #596]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80e6 	beq.w	8002ed6 <HAL_RCC_OscConfig+0x202>
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d007      	beq.n	8002d20 <HAL_RCC_OscConfig+0x4c>
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	f040 808d 	bne.w	8002e32 <HAL_RCC_OscConfig+0x15e>
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	f040 8089 	bne.w	8002e32 <HAL_RCC_OscConfig+0x15e>
 8002d20:	4b89      	ldr	r3, [pc, #548]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d006      	beq.n	8002d3a <HAL_RCC_OscConfig+0x66>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <HAL_RCC_OscConfig+0x66>
 8002d34:	2301      	movs	r3, #1
 8002d36:	f000 bc3f 	b.w	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d3e:	4b82      	ldr	r3, [pc, #520]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <HAL_RCC_OscConfig+0x80>
 8002d4a:	4b7f      	ldr	r3, [pc, #508]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d52:	e005      	b.n	8002d60 <HAL_RCC_OscConfig+0x8c>
 8002d54:	4b7c      	ldr	r3, [pc, #496]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d224      	bcs.n	8002dae <HAL_RCC_OscConfig+0xda>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fe49 	bl	8003a00 <RCC_SetFlashLatencyFromMSIRange>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <HAL_RCC_OscConfig+0xa6>
 8002d74:	2301      	movs	r3, #1
 8002d76:	f000 bc1f 	b.w	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8002d7a:	4b73      	ldr	r3, [pc, #460]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a72      	ldr	r2, [pc, #456]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002d80:	f043 0308 	orr.w	r3, r3, #8
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	496d      	ldr	r1, [pc, #436]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
 8002d98:	4b6b      	ldr	r3, [pc, #428]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	4968      	ldr	r1, [pc, #416]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
 8002dac:	e025      	b.n	8002dfa <HAL_RCC_OscConfig+0x126>
 8002dae:	4b66      	ldr	r3, [pc, #408]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a65      	ldr	r2, [pc, #404]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002db4:	f043 0308 	orr.w	r3, r3, #8
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	4b63      	ldr	r3, [pc, #396]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	4960      	ldr	r1, [pc, #384]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]
 8002dcc:	4b5e      	ldr	r3, [pc, #376]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	495b      	ldr	r1, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_RCC_OscConfig+0x126>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fe08 	bl	8003a00 <RCC_SetFlashLatencyFromMSIRange>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_OscConfig+0x126>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e3de      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8002dfa:	f000 fd21 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	4b51      	ldr	r3, [pc, #324]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	4950      	ldr	r1, [pc, #320]	; (8002f4c <HAL_RCC_OscConfig+0x278>)
 8002e0c:	5ccb      	ldrb	r3, [r1, r3]
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	fa22 f303 	lsr.w	r3, r2, r3
 8002e16:	4a4e      	ldr	r2, [pc, #312]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	4b4e      	ldr	r3, [pc, #312]	; (8002f54 <HAL_RCC_OscConfig+0x280>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe fb32 	bl	8001488 <HAL_InitTick>
 8002e24:	4603      	mov	r3, r0
 8002e26:	75fb      	strb	r3, [r7, #23]
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d052      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x200>
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	e3c2      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d032      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x1cc>
 8002e3a:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a42      	ldr	r2, [pc, #264]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	f7fe fd55 	bl	80018f4 <HAL_GetTick>
 8002e4a:	61b8      	str	r0, [r7, #24]
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x18c>
 8002e4e:	f7fe fd51 	bl	80018f4 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x18c>
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e3ab      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8002e60:	4b39      	ldr	r3, [pc, #228]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x17a>
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a35      	ldr	r2, [pc, #212]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002e72:	f043 0308 	orr.w	r3, r3, #8
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	4930      	ldr	r1, [pc, #192]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
 8002e8a:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	492b      	ldr	r1, [pc, #172]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
 8002e9e:	e01a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
 8002ea0:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a28      	ldr	r2, [pc, #160]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	f7fe fd22 	bl	80018f4 <HAL_GetTick>
 8002eb0:	61b8      	str	r0, [r7, #24]
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1f2>
 8002eb4:	f7fe fd1e 	bl	80018f4 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x1f2>
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e378      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8002ec6:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x1e0>
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
 8002ed4:	bf00      	nop
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d073      	beq.n	8002fca <HAL_RCC_OscConfig+0x2f6>
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x220>
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	2b0c      	cmp	r3, #12
 8002eec:	d10e      	bne.n	8002f0c <HAL_RCC_OscConfig+0x238>
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d10b      	bne.n	8002f0c <HAL_RCC_OscConfig+0x238>
 8002ef4:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d063      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x2f4>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d15f      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x2f4>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e355      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f14:	d106      	bne.n	8002f24 <HAL_RCC_OscConfig+0x250>
 8002f16:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e025      	b.n	8002f70 <HAL_RCC_OscConfig+0x29c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f2c:	d114      	bne.n	8002f58 <HAL_RCC_OscConfig+0x284>
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a02      	ldr	r2, [pc, #8]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e013      	b.n	8002f70 <HAL_RCC_OscConfig+0x29c>
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	080055d0 	.word	0x080055d0
 8002f50:	20000250 	.word	0x20000250
 8002f54:	20000254 	.word	0x20000254
 8002f58:	4b8f      	ldr	r3, [pc, #572]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a8e      	ldr	r2, [pc, #568]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b8c      	ldr	r3, [pc, #560]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a8b      	ldr	r2, [pc, #556]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x2cc>
 8002f78:	f7fe fcbc 	bl	80018f4 <HAL_GetTick>
 8002f7c:	61b8      	str	r0, [r7, #24]
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x2be>
 8002f80:	f7fe fcb8 	bl	80018f4 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x2be>
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e312      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8002f92:	4b81      	ldr	r3, [pc, #516]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x2ac>
 8002f9e:	e014      	b.n	8002fca <HAL_RCC_OscConfig+0x2f6>
 8002fa0:	f7fe fca8 	bl	80018f4 <HAL_GetTick>
 8002fa4:	61b8      	str	r0, [r7, #24]
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x2e6>
 8002fa8:	f7fe fca4 	bl	80018f4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x2e6>
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e2fe      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8002fba:	4b77      	ldr	r3, [pc, #476]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x2d4>
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x2f6>
 8002fc8:	bf00      	nop
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d060      	beq.n	8003098 <HAL_RCC_OscConfig+0x3c4>
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x314>
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d119      	bne.n	8003016 <HAL_RCC_OscConfig+0x342>
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d116      	bne.n	8003016 <HAL_RCC_OscConfig+0x342>
 8002fe8:	4b6b      	ldr	r3, [pc, #428]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_OscConfig+0x32c>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_OscConfig+0x32c>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e2db      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8003000:	4b65      	ldr	r3, [pc, #404]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	061b      	lsls	r3, r3, #24
 800300e:	4962      	ldr	r1, [pc, #392]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
 8003014:	e040      	b.n	8003098 <HAL_RCC_OscConfig+0x3c4>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d023      	beq.n	8003066 <HAL_RCC_OscConfig+0x392>
 800301e:	4b5e      	ldr	r3, [pc, #376]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a5d      	ldr	r2, [pc, #372]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	f7fe fc63 	bl	80018f4 <HAL_GetTick>
 800302e:	61b8      	str	r0, [r7, #24]
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x370>
 8003032:	f7fe fc5f 	bl	80018f4 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x370>
 8003040:	2303      	movs	r3, #3
 8003042:	e2b9      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8003044:	4b54      	ldr	r3, [pc, #336]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x35e>
 8003050:	4b51      	ldr	r3, [pc, #324]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	061b      	lsls	r3, r3, #24
 800305e:	494e      	ldr	r1, [pc, #312]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
 8003064:	e018      	b.n	8003098 <HAL_RCC_OscConfig+0x3c4>
 8003066:	4b4c      	ldr	r3, [pc, #304]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a4b      	ldr	r2, [pc, #300]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	f7fe fc3f 	bl	80018f4 <HAL_GetTick>
 8003076:	61b8      	str	r0, [r7, #24]
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x3b8>
 800307a:	f7fe fc3b 	bl	80018f4 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x3b8>
 8003088:	2303      	movs	r3, #3
 800308a:	e295      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 800308c:	4b42      	ldr	r3, [pc, #264]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x3a6>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8082 	beq.w	80031aa <HAL_RCC_OscConfig+0x4d6>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d05f      	beq.n	800316e <HAL_RCC_OscConfig+0x49a>
 80030ae:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d037      	beq.n	8003134 <HAL_RCC_OscConfig+0x460>
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <HAL_RCC_OscConfig+0x408>
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_OscConfig+0x408>
 80030d8:	2301      	movs	r3, #1
 80030da:	e26d      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01b      	beq.n	800311e <HAL_RCC_OscConfig+0x44a>
 80030e6:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ec:	4a2a      	ldr	r2, [pc, #168]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80030f6:	f7fe fbfd 	bl	80018f4 <HAL_GetTick>
 80030fa:	61b8      	str	r0, [r7, #24]
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x43c>
 80030fe:	f7fe fbf9 	bl	80018f4 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b11      	cmp	r3, #17
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x43c>
 800310c:	2303      	movs	r3, #3
 800310e:	e253      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8003110:	4b21      	ldr	r3, [pc, #132]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1ef      	bne.n	80030fe <HAL_RCC_OscConfig+0x42a>
 800311e:	4b1e      	ldr	r3, [pc, #120]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003124:	f023 0210 	bic.w	r2, r3, #16
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	491a      	ldr	r1, [pc, #104]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8003134:	4b18      	ldr	r3, [pc, #96]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313a:	4a17      	ldr	r2, [pc, #92]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003144:	f7fe fbd6 	bl	80018f4 <HAL_GetTick>
 8003148:	61b8      	str	r0, [r7, #24]
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x48a>
 800314c:	f7fe fbd2 	bl	80018f4 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b11      	cmp	r3, #17
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x48a>
 800315a:	2303      	movs	r3, #3
 800315c:	e22c      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0ef      	beq.n	800314c <HAL_RCC_OscConfig+0x478>
 800316c:	e01d      	b.n	80031aa <HAL_RCC_OscConfig+0x4d6>
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003174:	4a08      	ldr	r2, [pc, #32]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800317e:	f7fe fbb9 	bl	80018f4 <HAL_GetTick>
 8003182:	61b8      	str	r0, [r7, #24]
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x4c8>
 8003186:	f7fe fbb5 	bl	80018f4 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b11      	cmp	r3, #17
 8003192:	d903      	bls.n	800319c <HAL_RCC_OscConfig+0x4c8>
 8003194:	2303      	movs	r3, #3
 8003196:	e20f      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8003198:	40021000 	.word	0x40021000
 800319c:	4b83      	ldr	r3, [pc, #524]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 800319e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1ed      	bne.n	8003186 <HAL_RCC_OscConfig+0x4b2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 80bd 	beq.w	8003332 <HAL_RCC_OscConfig+0x65e>
 80031b8:	2300      	movs	r3, #0
 80031ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031be:	4b7b      	ldr	r3, [pc, #492]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10e      	bne.n	80031e8 <HAL_RCC_OscConfig+0x514>
 80031ca:	4b78      	ldr	r3, [pc, #480]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	4a77      	ldr	r2, [pc, #476]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6593      	str	r3, [r2, #88]	; 0x58
 80031d6:	4b75      	ldr	r3, [pc, #468]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031e8:	4b71      	ldr	r3, [pc, #452]	; (80033b0 <HAL_RCC_OscConfig+0x6dc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d118      	bne.n	8003226 <HAL_RCC_OscConfig+0x552>
 80031f4:	4b6e      	ldr	r3, [pc, #440]	; (80033b0 <HAL_RCC_OscConfig+0x6dc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a6d      	ldr	r2, [pc, #436]	; (80033b0 <HAL_RCC_OscConfig+0x6dc>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	f7fe fb78 	bl	80018f4 <HAL_GetTick>
 8003204:	61b8      	str	r0, [r7, #24]
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x546>
 8003208:	f7fe fb74 	bl	80018f4 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x546>
 8003216:	2303      	movs	r3, #3
 8003218:	e1ce      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 800321a:	4b65      	ldr	r3, [pc, #404]	; (80033b0 <HAL_RCC_OscConfig+0x6dc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x534>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d02c      	beq.n	800328c <HAL_RCC_OscConfig+0x5b8>
 8003232:	4b5e      	ldr	r3, [pc, #376]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	4959      	ldr	r1, [pc, #356]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d010      	beq.n	800327a <HAL_RCC_OscConfig+0x5a6>
 8003258:	4b54      	ldr	r3, [pc, #336]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	4a53      	ldr	r2, [pc, #332]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003268:	4b50      	ldr	r3, [pc, #320]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326e:	4a4f      	ldr	r2, [pc, #316]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003278:	e018      	b.n	80032ac <HAL_RCC_OscConfig+0x5d8>
 800327a:	4b4c      	ldr	r3, [pc, #304]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	4a4a      	ldr	r2, [pc, #296]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800328a:	e00f      	b.n	80032ac <HAL_RCC_OscConfig+0x5d8>
 800328c:	4b47      	ldr	r3, [pc, #284]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	4a46      	ldr	r2, [pc, #280]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800329c:	4b43      	ldr	r3, [pc, #268]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	4a42      	ldr	r2, [pc, #264]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 80032a4:	f023 0304 	bic.w	r3, r3, #4
 80032a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d016      	beq.n	80032e2 <HAL_RCC_OscConfig+0x60e>
 80032b4:	f7fe fb1e 	bl	80018f4 <HAL_GetTick>
 80032b8:	61b8      	str	r0, [r7, #24]
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_OscConfig+0x5fe>
 80032bc:	f7fe fb1a 	bl	80018f4 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x5fe>
 80032ce:	2303      	movs	r3, #3
 80032d0:	e172      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 80032d2:	4b36      	ldr	r3, [pc, #216]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0ed      	beq.n	80032bc <HAL_RCC_OscConfig+0x5e8>
 80032e0:	e01d      	b.n	800331e <HAL_RCC_OscConfig+0x64a>
 80032e2:	f7fe fb07 	bl	80018f4 <HAL_GetTick>
 80032e6:	61b8      	str	r0, [r7, #24]
 80032e8:	e00a      	b.n	8003300 <HAL_RCC_OscConfig+0x62c>
 80032ea:	f7fe fb03 	bl	80018f4 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x62c>
 80032fc:	2303      	movs	r3, #3
 80032fe:	e15b      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8003300:	4b2a      	ldr	r3, [pc, #168]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 8003302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1ed      	bne.n	80032ea <HAL_RCC_OscConfig+0x616>
 800330e:	4b27      	ldr	r3, [pc, #156]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003314:	4a25      	ldr	r2, [pc, #148]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 8003316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800331a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800331e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003322:	2b01      	cmp	r3, #1
 8003324:	d105      	bne.n	8003332 <HAL_RCC_OscConfig+0x65e>
 8003326:	4b21      	ldr	r3, [pc, #132]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	4a20      	ldr	r2, [pc, #128]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 800332c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003330:	6593      	str	r3, [r2, #88]	; 0x58
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b00      	cmp	r3, #0
 800333c:	d041      	beq.n	80033c2 <HAL_RCC_OscConfig+0x6ee>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01c      	beq.n	8003380 <HAL_RCC_OscConfig+0x6ac>
 8003346:	4b19      	ldr	r3, [pc, #100]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 8003348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800334c:	4a17      	ldr	r2, [pc, #92]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003356:	f7fe facd 	bl	80018f4 <HAL_GetTick>
 800335a:	61b8      	str	r0, [r7, #24]
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x69c>
 800335e:	f7fe fac9 	bl	80018f4 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x69c>
 800336c:	2303      	movs	r3, #3
 800336e:	e123      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 8003372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0ef      	beq.n	800335e <HAL_RCC_OscConfig+0x68a>
 800337e:	e020      	b.n	80033c2 <HAL_RCC_OscConfig+0x6ee>
 8003380:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 8003382:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003386:	4a09      	ldr	r2, [pc, #36]	; (80033ac <HAL_RCC_OscConfig+0x6d8>)
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003390:	f7fe fab0 	bl	80018f4 <HAL_GetTick>
 8003394:	61b8      	str	r0, [r7, #24]
 8003396:	e00d      	b.n	80033b4 <HAL_RCC_OscConfig+0x6e0>
 8003398:	f7fe faac 	bl	80018f4 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d906      	bls.n	80033b4 <HAL_RCC_OscConfig+0x6e0>
 80033a6:	2303      	movs	r3, #3
 80033a8:	e106      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40007000 	.word	0x40007000
 80033b4:	4b82      	ldr	r3, [pc, #520]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 80033b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ea      	bne.n	8003398 <HAL_RCC_OscConfig+0x6c4>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80f5 	beq.w	80035b6 <HAL_RCC_OscConfig+0x8e2>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	f040 80cb 	bne.w	800356c <HAL_RCC_OscConfig+0x898>
 80033d6:	4b7a      	ldr	r3, [pc, #488]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f003 0203 	and.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d12c      	bne.n	8003444 <HAL_RCC_OscConfig+0x770>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f4:	3b01      	subs	r3, #1
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d123      	bne.n	8003444 <HAL_RCC_OscConfig+0x770>
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	429a      	cmp	r2, r3
 800340a:	d11b      	bne.n	8003444 <HAL_RCC_OscConfig+0x770>
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	06db      	lsls	r3, r3, #27
 8003418:	429a      	cmp	r2, r3
 800341a:	d113      	bne.n	8003444 <HAL_RCC_OscConfig+0x770>
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	085b      	lsrs	r3, r3, #1
 8003428:	3b01      	subs	r3, #1
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	429a      	cmp	r2, r3
 800342e:	d109      	bne.n	8003444 <HAL_RCC_OscConfig+0x770>
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	085b      	lsrs	r3, r3, #1
 800343c:	3b01      	subs	r3, #1
 800343e:	065b      	lsls	r3, r3, #25
 8003440:	429a      	cmp	r2, r3
 8003442:	d06d      	beq.n	8003520 <HAL_RCC_OscConfig+0x84c>
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	2b0c      	cmp	r3, #12
 8003448:	d068      	beq.n	800351c <HAL_RCC_OscConfig+0x848>
 800344a:	4b5d      	ldr	r3, [pc, #372]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d105      	bne.n	8003462 <HAL_RCC_OscConfig+0x78e>
 8003456:	4b5a      	ldr	r3, [pc, #360]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_RCC_OscConfig+0x792>
 8003462:	2301      	movs	r3, #1
 8003464:	e0a8      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8003466:	4b56      	ldr	r3, [pc, #344]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a55      	ldr	r2, [pc, #340]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 800346c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	f7fe fa3f 	bl	80018f4 <HAL_GetTick>
 8003476:	61b8      	str	r0, [r7, #24]
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x7b8>
 800347a:	f7fe fa3b 	bl	80018f4 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x7b8>
 8003488:	2303      	movs	r3, #3
 800348a:	e095      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 800348c:	4b4c      	ldr	r3, [pc, #304]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f0      	bne.n	800347a <HAL_RCC_OscConfig+0x7a6>
 8003498:	4b49      	ldr	r3, [pc, #292]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	4b49      	ldr	r3, [pc, #292]	; (80035c4 <HAL_RCC_OscConfig+0x8f0>)
 800349e:	4013      	ands	r3, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034a8:	3a01      	subs	r2, #1
 80034aa:	0112      	lsls	r2, r2, #4
 80034ac:	4311      	orrs	r1, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034b2:	0212      	lsls	r2, r2, #8
 80034b4:	4311      	orrs	r1, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034ba:	0852      	lsrs	r2, r2, #1
 80034bc:	3a01      	subs	r2, #1
 80034be:	0552      	lsls	r2, r2, #21
 80034c0:	4311      	orrs	r1, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034c6:	0852      	lsrs	r2, r2, #1
 80034c8:	3a01      	subs	r2, #1
 80034ca:	0652      	lsls	r2, r2, #25
 80034cc:	4311      	orrs	r1, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034d2:	06d2      	lsls	r2, r2, #27
 80034d4:	430a      	orrs	r2, r1
 80034d6:	493a      	ldr	r1, [pc, #232]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	60cb      	str	r3, [r1, #12]
 80034dc:	4b38      	ldr	r3, [pc, #224]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a37      	ldr	r2, [pc, #220]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 80034e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b35      	ldr	r3, [pc, #212]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a34      	ldr	r2, [pc, #208]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 80034ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f2:	60d3      	str	r3, [r2, #12]
 80034f4:	f7fe f9fe 	bl	80018f4 <HAL_GetTick>
 80034f8:	61b8      	str	r0, [r7, #24]
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x83a>
 80034fc:	f7fe f9fa 	bl	80018f4 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x83a>
 800350a:	2303      	movs	r3, #3
 800350c:	e054      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 800350e:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x828>
 800351a:	e04c      	b.n	80035b6 <HAL_RCC_OscConfig+0x8e2>
 800351c:	2301      	movs	r3, #1
 800351e:	e04b      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8003520:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d144      	bne.n	80035b6 <HAL_RCC_OscConfig+0x8e2>
 800352c:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a23      	ldr	r2, [pc, #140]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 8003532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4a20      	ldr	r2, [pc, #128]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 800353e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003542:	60d3      	str	r3, [r2, #12]
 8003544:	f7fe f9d6 	bl	80018f4 <HAL_GetTick>
 8003548:	61b8      	str	r0, [r7, #24]
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x88a>
 800354c:	f7fe f9d2 	bl	80018f4 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x88a>
 800355a:	2303      	movs	r3, #3
 800355c:	e02c      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 800355e:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x878>
 800356a:	e024      	b.n	80035b6 <HAL_RCC_OscConfig+0x8e2>
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d01f      	beq.n	80035b2 <HAL_RCC_OscConfig+0x8de>
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a12      	ldr	r2, [pc, #72]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 8003578:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	f7fe f9b9 	bl	80018f4 <HAL_GetTick>
 8003582:	61b8      	str	r0, [r7, #24]
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x8c4>
 8003586:	f7fe f9b5 	bl	80018f4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x8c4>
 8003594:	2303      	movs	r3, #3
 8003596:	e00f      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f0      	bne.n	8003586 <HAL_RCC_OscConfig+0x8b2>
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	4905      	ldr	r1, [pc, #20]	; (80035c0 <HAL_RCC_OscConfig+0x8ec>)
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <HAL_RCC_OscConfig+0x8f4>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	60cb      	str	r3, [r1, #12]
 80035b0:	e001      	b.n	80035b6 <HAL_RCC_OscConfig+0x8e2>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_RCC_OscConfig+0x8e4>
 80035b6:	2300      	movs	r3, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	3728      	adds	r7, #40	; 0x28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000
 80035c4:	019d800c 	.word	0x019d800c
 80035c8:	feeefffc 	.word	0xfeeefffc

080035cc <HAL_RCC_ClockConfig>:
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x18>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e11d      	b.n	8003820 <HAL_RCC_ClockConfig+0x254>
 80035e4:	4b90      	ldr	r3, [pc, #576]	; (8003828 <HAL_RCC_ClockConfig+0x25c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d910      	bls.n	8003614 <HAL_RCC_ClockConfig+0x48>
 80035f2:	4b8d      	ldr	r3, [pc, #564]	; (8003828 <HAL_RCC_ClockConfig+0x25c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 020f 	bic.w	r2, r3, #15
 80035fa:	498b      	ldr	r1, [pc, #556]	; (8003828 <HAL_RCC_ClockConfig+0x25c>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]
 8003602:	4b89      	ldr	r3, [pc, #548]	; (8003828 <HAL_RCC_ClockConfig+0x25c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x48>
 8003610:	2301      	movs	r3, #1
 8003612:	e105      	b.n	8003820 <HAL_RCC_ClockConfig+0x254>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d010      	beq.n	8003642 <HAL_RCC_ClockConfig+0x76>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	4b81      	ldr	r3, [pc, #516]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800362c:	429a      	cmp	r2, r3
 800362e:	d908      	bls.n	8003642 <HAL_RCC_ClockConfig+0x76>
 8003630:	4b7e      	ldr	r3, [pc, #504]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	497b      	ldr	r1, [pc, #492]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d079      	beq.n	8003742 <HAL_RCC_ClockConfig+0x176>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b03      	cmp	r3, #3
 8003654:	d11e      	bne.n	8003694 <HAL_RCC_ClockConfig+0xc8>
 8003656:	4b75      	ldr	r3, [pc, #468]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_ClockConfig+0x9a>
 8003662:	2301      	movs	r3, #1
 8003664:	e0dc      	b.n	8003820 <HAL_RCC_ClockConfig+0x254>
 8003666:	f000 fa25 	bl	8003ab4 <RCC_GetSysClockFreqFromPLLSource>
 800366a:	4603      	mov	r3, r0
 800366c:	4a70      	ldr	r2, [pc, #448]	; (8003830 <HAL_RCC_ClockConfig+0x264>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d946      	bls.n	8003700 <HAL_RCC_ClockConfig+0x134>
 8003672:	4b6e      	ldr	r3, [pc, #440]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d140      	bne.n	8003700 <HAL_RCC_ClockConfig+0x134>
 800367e:	4b6b      	ldr	r3, [pc, #428]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003686:	4a69      	ldr	r2, [pc, #420]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 8003688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800368c:	6093      	str	r3, [r2, #8]
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e035      	b.n	8003700 <HAL_RCC_ClockConfig+0x134>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d107      	bne.n	80036ac <HAL_RCC_ClockConfig+0xe0>
 800369c:	4b63      	ldr	r3, [pc, #396]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d115      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x108>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0b9      	b.n	8003820 <HAL_RCC_ClockConfig+0x254>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d107      	bne.n	80036c4 <HAL_RCC_ClockConfig+0xf8>
 80036b4:	4b5d      	ldr	r3, [pc, #372]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x108>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0ad      	b.n	8003820 <HAL_RCC_ClockConfig+0x254>
 80036c4:	4b59      	ldr	r3, [pc, #356]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x108>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0a5      	b.n	8003820 <HAL_RCC_ClockConfig+0x254>
 80036d4:	f000 f8b4 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 80036d8:	4603      	mov	r3, r0
 80036da:	4a55      	ldr	r2, [pc, #340]	; (8003830 <HAL_RCC_ClockConfig+0x264>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d90f      	bls.n	8003700 <HAL_RCC_ClockConfig+0x134>
 80036e0:	4b52      	ldr	r3, [pc, #328]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <HAL_RCC_ClockConfig+0x134>
 80036ec:	4b4f      	ldr	r3, [pc, #316]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036f4:	4a4d      	ldr	r2, [pc, #308]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 80036f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fa:	6093      	str	r3, [r2, #8]
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	4b4a      	ldr	r3, [pc, #296]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f023 0203 	bic.w	r2, r3, #3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4947      	ldr	r1, [pc, #284]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
 8003712:	f7fe f8ef 	bl	80018f4 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]
 8003718:	e00a      	b.n	8003730 <HAL_RCC_ClockConfig+0x164>
 800371a:	f7fe f8eb 	bl	80018f4 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f241 3288 	movw	r2, #5000	; 0x1388
 8003728:	4293      	cmp	r3, r2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_ClockConfig+0x164>
 800372c:	2303      	movs	r3, #3
 800372e:	e077      	b.n	8003820 <HAL_RCC_ClockConfig+0x254>
 8003730:	4b3e      	ldr	r3, [pc, #248]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 020c 	and.w	r2, r3, #12
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	429a      	cmp	r2, r3
 8003740:	d1eb      	bne.n	800371a <HAL_RCC_ClockConfig+0x14e>
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b80      	cmp	r3, #128	; 0x80
 8003746:	d105      	bne.n	8003754 <HAL_RCC_ClockConfig+0x188>
 8003748:	4b38      	ldr	r3, [pc, #224]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4a37      	ldr	r2, [pc, #220]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 800374e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003752:	6093      	str	r3, [r2, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <HAL_RCC_ClockConfig+0x1b6>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	4b31      	ldr	r3, [pc, #196]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800376c:	429a      	cmp	r2, r3
 800376e:	d208      	bcs.n	8003782 <HAL_RCC_ClockConfig+0x1b6>
 8003770:	4b2e      	ldr	r3, [pc, #184]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	492b      	ldr	r1, [pc, #172]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
 8003782:	4b29      	ldr	r3, [pc, #164]	; (8003828 <HAL_RCC_ClockConfig+0x25c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d210      	bcs.n	80037b2 <HAL_RCC_ClockConfig+0x1e6>
 8003790:	4b25      	ldr	r3, [pc, #148]	; (8003828 <HAL_RCC_ClockConfig+0x25c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 020f 	bic.w	r2, r3, #15
 8003798:	4923      	ldr	r1, [pc, #140]	; (8003828 <HAL_RCC_ClockConfig+0x25c>)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	4313      	orrs	r3, r2
 800379e:	600b      	str	r3, [r1, #0]
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <HAL_RCC_ClockConfig+0x25c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x1e6>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e036      	b.n	8003820 <HAL_RCC_ClockConfig+0x254>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d008      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x204>
 80037be:	4b1b      	ldr	r3, [pc, #108]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4918      	ldr	r1, [pc, #96]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x224>
 80037dc:	4b13      	ldr	r3, [pc, #76]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4910      	ldr	r1, [pc, #64]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	608b      	str	r3, [r1, #8]
 80037f0:	f000 f826 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <HAL_RCC_ClockConfig+0x260>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	490c      	ldr	r1, [pc, #48]	; (8003834 <HAL_RCC_ClockConfig+0x268>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
 800380c:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <HAL_RCC_ClockConfig+0x26c>)
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <HAL_RCC_ClockConfig+0x270>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7fd fe37 	bl	8001488 <HAL_InitTick>
 800381a:	4603      	mov	r3, r0
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40022000 	.word	0x40022000
 800382c:	40021000 	.word	0x40021000
 8003830:	04c4b400 	.word	0x04c4b400
 8003834:	080055d0 	.word	0x080055d0
 8003838:	20000250 	.word	0x20000250
 800383c:	20000254 	.word	0x20000254

08003840 <HAL_RCC_GetSysClockFreq>:
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	4b3e      	ldr	r3, [pc, #248]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x34>
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d121      	bne.n	80038b2 <HAL_RCC_GetSysClockFreq+0x72>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d11e      	bne.n	80038b2 <HAL_RCC_GetSysClockFreq+0x72>
 8003874:	4b34      	ldr	r3, [pc, #208]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d107      	bne.n	8003890 <HAL_RCC_GetSysClockFreq+0x50>
 8003880:	4b31      	ldr	r3, [pc, #196]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	e005      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x5c>
 8003890:	4b2d      	ldr	r3, [pc, #180]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	4a2b      	ldr	r2, [pc, #172]	; (800394c <HAL_RCC_GetSysClockFreq+0x10c>)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10d      	bne.n	80038c8 <HAL_RCC_GetSysClockFreq+0x88>
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x88>
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d102      	bne.n	80038be <HAL_RCC_GetSysClockFreq+0x7e>
 80038b8:	4b25      	ldr	r3, [pc, #148]	; (8003950 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e004      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x88>
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_GetSysClockFreq+0x88>
 80038c4:	4b23      	ldr	r3, [pc, #140]	; (8003954 <HAL_RCC_GetSysClockFreq+0x114>)
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	d134      	bne.n	8003938 <HAL_RCC_GetSysClockFreq+0xf8>
 80038ce:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d003      	beq.n	80038e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d003      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0xac>
 80038e4:	e005      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0xb2>
 80038e6:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <HAL_RCC_GetSysClockFreq+0x110>)
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e005      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0xb8>
 80038ec:	4b19      	ldr	r3, [pc, #100]	; (8003954 <HAL_RCC_GetSysClockFreq+0x114>)
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	e002      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0xb8>
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	bf00      	nop
 80038f8:	4b13      	ldr	r3, [pc, #76]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	3301      	adds	r3, #1
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	4b10      	ldr	r3, [pc, #64]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	fb03 f202 	mul.w	r2, r3, r2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	0e5b      	lsrs	r3, r3, #25
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	3301      	adds	r3, #1
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	4618      	mov	r0, r3
 800393c:	3724      	adds	r7, #36	; 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	080055e8 	.word	0x080055e8
 8003950:	00f42400 	.word	0x00f42400
 8003954:	007a1200 	.word	0x007a1200

08003958 <HAL_RCC_GetHCLKFreq>:
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <HAL_RCC_GetHCLKFreq+0x14>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	20000250 	.word	0x20000250

08003970 <HAL_RCC_GetPCLK2Freq>:
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
 8003974:	f7ff fff0 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCC_GetPCLK2Freq+0x24>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	0adb      	lsrs	r3, r3, #11
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4904      	ldr	r1, [pc, #16]	; (8003998 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000
 8003998:	080055e0 	.word	0x080055e0

0800399c <HAL_RCC_GetClockConfig>:
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	220f      	movs	r2, #15
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <HAL_RCC_GetClockConfig+0x5c>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 0203 	and.w	r2, r3, #3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <HAL_RCC_GetClockConfig+0x5c>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <HAL_RCC_GetClockConfig+0x5c>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60da      	str	r2, [r3, #12]
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_RCC_GetClockConfig+0x5c>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	08db      	lsrs	r3, r3, #3
 80039d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	611a      	str	r2, [r3, #16]
 80039de:	4b07      	ldr	r3, [pc, #28]	; (80039fc <HAL_RCC_GetClockConfig+0x60>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 020f 	and.w	r2, r3, #15
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40022000 	.word	0x40022000

08003a00 <RCC_SetFlashLatencyFromMSIRange>:
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	4b27      	ldr	r3, [pc, #156]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <RCC_SetFlashLatencyFromMSIRange+0x20>
 8003a18:	f7ff f898 	bl	8002b4c <HAL_PWREx_GetVoltageRange>
 8003a1c:	6178      	str	r0, [r7, #20]
 8003a1e:	e014      	b.n	8003a4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
 8003a20:	4b22      	ldr	r3, [pc, #136]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	4a21      	ldr	r2, [pc, #132]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a2c:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f7ff f888 	bl	8002b4c <HAL_PWREx_GetVoltageRange>
 8003a3c:	6178      	str	r0, [r7, #20]
 8003a3e:	4b1b      	ldr	r3, [pc, #108]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a42:	4a1a      	ldr	r2, [pc, #104]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a48:	6593      	str	r3, [r2, #88]	; 0x58
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a50:	d10b      	bne.n	8003a6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b80      	cmp	r3, #128	; 0x80
 8003a56:	d913      	bls.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x80>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2ba0      	cmp	r3, #160	; 0xa0
 8003a5c:	d902      	bls.n	8003a64 <RCC_SetFlashLatencyFromMSIRange+0x64>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	e00d      	b.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x80>
 8003a64:	2301      	movs	r3, #1
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	e00a      	b.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x80>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a6e:	d902      	bls.n	8003a76 <RCC_SetFlashLatencyFromMSIRange+0x76>
 8003a70:	2302      	movs	r3, #2
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	e004      	b.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x80>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b70      	cmp	r3, #112	; 0x70
 8003a7a:	d101      	bne.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x80>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 020f 	bic.w	r2, r3, #15
 8003a88:	4909      	ldr	r1, [pc, #36]	; (8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d001      	beq.n	8003aa2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40022000 	.word	0x40022000

08003ab4 <RCC_GetSysClockFreqFromPLLSource>:
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4b2d      	ldr	r3, [pc, #180]	; (8003b70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d00b      	beq.n	8003ae2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d825      	bhi.n	8003b1c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d008      	beq.n	8003ae8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d11f      	bne.n	8003b1c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003adc:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	e01f      	b.n	8003b22 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8003ae2:	4b25      	ldr	r3, [pc, #148]	; (8003b78 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	e01c      	b.n	8003b22 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8003ae8:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d107      	bne.n	8003b04 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003af4:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	e005      	b.n	8003b10 <RCC_GetSysClockFreqFromPLLSource+0x5c>
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	4a1a      	ldr	r2, [pc, #104]	; (8003b7c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	e002      	b.n	8003b22 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	bf00      	nop
 8003b22:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	0a1b      	lsrs	r3, r3, #8
 8003b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	fb03 f202 	mul.w	r2, r3, r2
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	0e5b      	lsrs	r3, r3, #25
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	3301      	adds	r3, #1
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	603b      	str	r3, [r7, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	40021000 	.word	0x40021000
 8003b74:	00f42400 	.word	0x00f42400
 8003b78:	007a1200 	.word	0x007a1200
 8003b7c:	080055e8 	.word	0x080055e8

08003b80 <HAL_TIM_Base_Init>:
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_TIM_Base_Init+0x12>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e049      	b.n	8003c26 <HAL_TIM_Base_Init+0xa6>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_TIM_Base_Init+0x2c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f841 	bl	8003c2e <HAL_TIM_Base_MspInit>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f000 f9f8 	bl	8003fb4 <TIM_Base_SetConfig>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c24:	2300      	movs	r3, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_TIM_Base_MspInit>:
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_TIM_Base_Start_IT>:
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d001      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x18>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e04f      	b.n	8003cfc <HAL_TIM_Base_Start_IT+0xb8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	60da      	str	r2, [r3, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a23      	ldr	r2, [pc, #140]	; (8003d08 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01d      	beq.n	8003cba <HAL_TIM_Base_Start_IT+0x76>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c86:	d018      	beq.n	8003cba <HAL_TIM_Base_Start_IT+0x76>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1f      	ldr	r2, [pc, #124]	; (8003d0c <HAL_TIM_Base_Start_IT+0xc8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_TIM_Base_Start_IT+0x76>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1e      	ldr	r2, [pc, #120]	; (8003d10 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00e      	beq.n	8003cba <HAL_TIM_Base_Start_IT+0x76>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_TIM_Base_Start_IT+0x76>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1b      	ldr	r2, [pc, #108]	; (8003d18 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <HAL_TIM_Base_Start_IT+0x76>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a19      	ldr	r2, [pc, #100]	; (8003d1c <HAL_TIM_Base_Start_IT+0xd8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d115      	bne.n	8003ce6 <HAL_TIM_Base_Start_IT+0xa2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	4b17      	ldr	r3, [pc, #92]	; (8003d20 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b06      	cmp	r3, #6
 8003cca:	d015      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0xb4>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd2:	d011      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0xb4>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e008      	b.n	8003cf8 <HAL_TIM_Base_Start_IT+0xb4>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e000      	b.n	8003cfa <HAL_TIM_Base_Start_IT+0xb6>
 8003cf8:	bf00      	nop
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40012c00 	.word	0x40012c00
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40000800 	.word	0x40000800
 8003d14:	40000c00 	.word	0x40000c00
 8003d18:	40013400 	.word	0x40013400
 8003d1c:	40014000 	.word	0x40014000
 8003d20:	00010007 	.word	0x00010007

08003d24 <HAL_TIM_IRQHandler>:
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d122      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x5c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d11b      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x5c>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0202 	mvn.w	r2, #2
 8003d50:	611a      	str	r2, [r3, #16]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	771a      	strb	r2, [r3, #28]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_TIM_IRQHandler+0x4a>
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f905 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003d6c:	e005      	b.n	8003d7a <HAL_TIM_IRQHandler+0x56>
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f8f7 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f908 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	771a      	strb	r2, [r3, #28]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d122      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0xb0>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0xb0>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0204 	mvn.w	r2, #4
 8003da4:	611a      	str	r2, [r3, #16]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2202      	movs	r2, #2
 8003daa:	771a      	strb	r2, [r3, #28]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0x9e>
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f8db 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003dc0:	e005      	b.n	8003dce <HAL_TIM_IRQHandler+0xaa>
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f8cd 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f8de 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	771a      	strb	r2, [r3, #28]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d122      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x104>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d11b      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x104>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0208 	mvn.w	r2, #8
 8003df8:	611a      	str	r2, [r3, #16]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	771a      	strb	r2, [r3, #28]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_TIM_IRQHandler+0xf2>
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f8b1 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003e14:	e005      	b.n	8003e22 <HAL_TIM_IRQHandler+0xfe>
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8a3 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f8b4 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	771a      	strb	r2, [r3, #28]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	2b10      	cmp	r3, #16
 8003e34:	d122      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x158>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d11b      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x158>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0210 	mvn.w	r2, #16
 8003e4c:	611a      	str	r2, [r3, #16]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2208      	movs	r2, #8
 8003e52:	771a      	strb	r2, [r3, #28]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_TIM_IRQHandler+0x146>
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f887 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003e68:	e005      	b.n	8003e76 <HAL_TIM_IRQHandler+0x152>
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f879 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f88a 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	771a      	strb	r2, [r3, #28]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d10e      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x184>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d107      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x184>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0201 	mvn.w	r2, #1
 8003ea0:	611a      	str	r2, [r3, #16]
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fc fcd8 	bl	8000858 <HAL_TIM_PeriodElapsedCallback>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb2:	2b80      	cmp	r3, #128	; 0x80
 8003eb4:	d10e      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x1b0>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec0:	2b80      	cmp	r3, #128	; 0x80
 8003ec2:	d107      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x1b0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ecc:	611a      	str	r2, [r3, #16]
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f914 	bl	80040fc <HAL_TIMEx_BreakCallback>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee2:	d10e      	bne.n	8003f02 <HAL_TIM_IRQHandler+0x1de>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	2b80      	cmp	r3, #128	; 0x80
 8003ef0:	d107      	bne.n	8003f02 <HAL_TIM_IRQHandler+0x1de>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003efa:	611a      	str	r2, [r3, #16]
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f907 	bl	8004110 <HAL_TIMEx_Break2Callback>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d10e      	bne.n	8003f2e <HAL_TIM_IRQHandler+0x20a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d107      	bne.n	8003f2e <HAL_TIM_IRQHandler+0x20a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f26:	611a      	str	r2, [r3, #16]
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f838 	bl	8003f9e <HAL_TIM_TriggerCallback>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d10e      	bne.n	8003f5a <HAL_TIM_IRQHandler+0x236>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d107      	bne.n	8003f5a <HAL_TIM_IRQHandler+0x236>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f06f 0220 	mvn.w	r2, #32
 8003f52:	611a      	str	r2, [r3, #16]
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f8c7 	bl	80040e8 <HAL_TIMEx_CommutCallback>
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_TIM_OC_DelayElapsedCallback>:
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_TIM_IC_CaptureCallback>:
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_TIM_PWM_PulseFinishedCallback>:
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIM_TriggerCallback>:
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <TIM_Base_SetConfig>:
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a40      	ldr	r2, [pc, #256]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d00f      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a3d      	ldr	r2, [pc, #244]	; (80040cc <TIM_Base_SetConfig+0x118>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00b      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a3c      	ldr	r2, [pc, #240]	; (80040d0 <TIM_Base_SetConfig+0x11c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d007      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a3b      	ldr	r2, [pc, #236]	; (80040d4 <TIM_Base_SetConfig+0x120>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3a      	ldr	r2, [pc, #232]	; (80040d8 <TIM_Base_SetConfig+0x124>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d108      	bne.n	8004006 <TIM_Base_SetConfig+0x52>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2f      	ldr	r2, [pc, #188]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d01f      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d01b      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <TIM_Base_SetConfig+0x118>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d017      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2b      	ldr	r2, [pc, #172]	; (80040d0 <TIM_Base_SetConfig+0x11c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d013      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <TIM_Base_SetConfig+0x120>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00f      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <TIM_Base_SetConfig+0x124>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00b      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a28      	ldr	r2, [pc, #160]	; (80040dc <TIM_Base_SetConfig+0x128>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d007      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a27      	ldr	r2, [pc, #156]	; (80040e0 <TIM_Base_SetConfig+0x12c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d003      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <TIM_Base_SetConfig+0x130>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d108      	bne.n	8004060 <TIM_Base_SetConfig+0xac>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	629a      	str	r2, [r3, #40]	; 0x28
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a10      	ldr	r2, [pc, #64]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00f      	beq.n	80040ac <TIM_Base_SetConfig+0xf8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a12      	ldr	r2, [pc, #72]	; (80040d8 <TIM_Base_SetConfig+0x124>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00b      	beq.n	80040ac <TIM_Base_SetConfig+0xf8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a11      	ldr	r2, [pc, #68]	; (80040dc <TIM_Base_SetConfig+0x128>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d007      	beq.n	80040ac <TIM_Base_SetConfig+0xf8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <TIM_Base_SetConfig+0x12c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d003      	beq.n	80040ac <TIM_Base_SetConfig+0xf8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a0f      	ldr	r2, [pc, #60]	; (80040e4 <TIM_Base_SetConfig+0x130>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d103      	bne.n	80040b4 <TIM_Base_SetConfig+0x100>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	615a      	str	r2, [r3, #20]
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40012c00 	.word	0x40012c00
 80040cc:	40000400 	.word	0x40000400
 80040d0:	40000800 	.word	0x40000800
 80040d4:	40000c00 	.word	0x40000c00
 80040d8:	40013400 	.word	0x40013400
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40014400 	.word	0x40014400
 80040e4:	40014800 	.word	0x40014800

080040e8 <HAL_TIMEx_CommutCallback>:
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_TIMEx_BreakCallback>:
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_TIMEx_Break2Callback>:
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <_ZdlPvj>:
 8004124:	f000 b800 	b.w	8004128 <_ZdlPv>

08004128 <_ZdlPv>:
 8004128:	f000 b85a 	b.w	80041e0 <free>

0800412c <__assert_func>:
 800412c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800412e:	4614      	mov	r4, r2
 8004130:	461a      	mov	r2, r3
 8004132:	4b09      	ldr	r3, [pc, #36]	; (8004158 <__assert_func+0x2c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4605      	mov	r5, r0
 8004138:	68d8      	ldr	r0, [r3, #12]
 800413a:	b14c      	cbz	r4, 8004150 <__assert_func+0x24>
 800413c:	4b07      	ldr	r3, [pc, #28]	; (800415c <__assert_func+0x30>)
 800413e:	9100      	str	r1, [sp, #0]
 8004140:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004144:	4906      	ldr	r1, [pc, #24]	; (8004160 <__assert_func+0x34>)
 8004146:	462b      	mov	r3, r5
 8004148:	f000 f814 	bl	8004174 <fiprintf>
 800414c:	f000 fcf6 	bl	8004b3c <abort>
 8004150:	4b04      	ldr	r3, [pc, #16]	; (8004164 <__assert_func+0x38>)
 8004152:	461c      	mov	r4, r3
 8004154:	e7f3      	b.n	800413e <__assert_func+0x12>
 8004156:	bf00      	nop
 8004158:	2000025c 	.word	0x2000025c
 800415c:	08005618 	.word	0x08005618
 8004160:	08005625 	.word	0x08005625
 8004164:	08005653 	.word	0x08005653

08004168 <__errno>:
 8004168:	4b01      	ldr	r3, [pc, #4]	; (8004170 <__errno+0x8>)
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	2000025c 	.word	0x2000025c

08004174 <fiprintf>:
 8004174:	b40e      	push	{r1, r2, r3}
 8004176:	b503      	push	{r0, r1, lr}
 8004178:	4601      	mov	r1, r0
 800417a:	ab03      	add	r3, sp, #12
 800417c:	4805      	ldr	r0, [pc, #20]	; (8004194 <fiprintf+0x20>)
 800417e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004182:	6800      	ldr	r0, [r0, #0]
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	f000 f945 	bl	8004414 <_vfiprintf_r>
 800418a:	b002      	add	sp, #8
 800418c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004190:	b003      	add	sp, #12
 8004192:	4770      	bx	lr
 8004194:	2000025c 	.word	0x2000025c

08004198 <__libc_init_array>:
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	4d0d      	ldr	r5, [pc, #52]	; (80041d0 <__libc_init_array+0x38>)
 800419c:	4c0d      	ldr	r4, [pc, #52]	; (80041d4 <__libc_init_array+0x3c>)
 800419e:	1b64      	subs	r4, r4, r5
 80041a0:	10a4      	asrs	r4, r4, #2
 80041a2:	2600      	movs	r6, #0
 80041a4:	42a6      	cmp	r6, r4
 80041a6:	d109      	bne.n	80041bc <__libc_init_array+0x24>
 80041a8:	4d0b      	ldr	r5, [pc, #44]	; (80041d8 <__libc_init_array+0x40>)
 80041aa:	4c0c      	ldr	r4, [pc, #48]	; (80041dc <__libc_init_array+0x44>)
 80041ac:	f000 ffea 	bl	8005184 <_init>
 80041b0:	1b64      	subs	r4, r4, r5
 80041b2:	10a4      	asrs	r4, r4, #2
 80041b4:	2600      	movs	r6, #0
 80041b6:	42a6      	cmp	r6, r4
 80041b8:	d105      	bne.n	80041c6 <__libc_init_array+0x2e>
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c0:	4798      	blx	r3
 80041c2:	3601      	adds	r6, #1
 80041c4:	e7ee      	b.n	80041a4 <__libc_init_array+0xc>
 80041c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ca:	4798      	blx	r3
 80041cc:	3601      	adds	r6, #1
 80041ce:	e7f2      	b.n	80041b6 <__libc_init_array+0x1e>
 80041d0:	080056ec 	.word	0x080056ec
 80041d4:	080056ec 	.word	0x080056ec
 80041d8:	080056ec 	.word	0x080056ec
 80041dc:	080056f4 	.word	0x080056f4

080041e0 <free>:
 80041e0:	4b02      	ldr	r3, [pc, #8]	; (80041ec <free+0xc>)
 80041e2:	4601      	mov	r1, r0
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	f000 b80b 	b.w	8004200 <_free_r>
 80041ea:	bf00      	nop
 80041ec:	2000025c 	.word	0x2000025c

080041f0 <memset>:
 80041f0:	4402      	add	r2, r0
 80041f2:	4603      	mov	r3, r0
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d100      	bne.n	80041fa <memset+0xa>
 80041f8:	4770      	bx	lr
 80041fa:	f803 1b01 	strb.w	r1, [r3], #1
 80041fe:	e7f9      	b.n	80041f4 <memset+0x4>

08004200 <_free_r>:
 8004200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004202:	2900      	cmp	r1, #0
 8004204:	d044      	beq.n	8004290 <_free_r+0x90>
 8004206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800420a:	9001      	str	r0, [sp, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f1a1 0404 	sub.w	r4, r1, #4
 8004212:	bfb8      	it	lt
 8004214:	18e4      	addlt	r4, r4, r3
 8004216:	f000 feb9 	bl	8004f8c <__malloc_lock>
 800421a:	4a1e      	ldr	r2, [pc, #120]	; (8004294 <_free_r+0x94>)
 800421c:	9801      	ldr	r0, [sp, #4]
 800421e:	6813      	ldr	r3, [r2, #0]
 8004220:	b933      	cbnz	r3, 8004230 <_free_r+0x30>
 8004222:	6063      	str	r3, [r4, #4]
 8004224:	6014      	str	r4, [r2, #0]
 8004226:	b003      	add	sp, #12
 8004228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800422c:	f000 beb4 	b.w	8004f98 <__malloc_unlock>
 8004230:	42a3      	cmp	r3, r4
 8004232:	d908      	bls.n	8004246 <_free_r+0x46>
 8004234:	6825      	ldr	r5, [r4, #0]
 8004236:	1961      	adds	r1, r4, r5
 8004238:	428b      	cmp	r3, r1
 800423a:	bf01      	itttt	eq
 800423c:	6819      	ldreq	r1, [r3, #0]
 800423e:	685b      	ldreq	r3, [r3, #4]
 8004240:	1949      	addeq	r1, r1, r5
 8004242:	6021      	streq	r1, [r4, #0]
 8004244:	e7ed      	b.n	8004222 <_free_r+0x22>
 8004246:	461a      	mov	r2, r3
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	b10b      	cbz	r3, 8004250 <_free_r+0x50>
 800424c:	42a3      	cmp	r3, r4
 800424e:	d9fa      	bls.n	8004246 <_free_r+0x46>
 8004250:	6811      	ldr	r1, [r2, #0]
 8004252:	1855      	adds	r5, r2, r1
 8004254:	42a5      	cmp	r5, r4
 8004256:	d10b      	bne.n	8004270 <_free_r+0x70>
 8004258:	6824      	ldr	r4, [r4, #0]
 800425a:	4421      	add	r1, r4
 800425c:	1854      	adds	r4, r2, r1
 800425e:	42a3      	cmp	r3, r4
 8004260:	6011      	str	r1, [r2, #0]
 8004262:	d1e0      	bne.n	8004226 <_free_r+0x26>
 8004264:	681c      	ldr	r4, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	6053      	str	r3, [r2, #4]
 800426a:	4421      	add	r1, r4
 800426c:	6011      	str	r1, [r2, #0]
 800426e:	e7da      	b.n	8004226 <_free_r+0x26>
 8004270:	d902      	bls.n	8004278 <_free_r+0x78>
 8004272:	230c      	movs	r3, #12
 8004274:	6003      	str	r3, [r0, #0]
 8004276:	e7d6      	b.n	8004226 <_free_r+0x26>
 8004278:	6825      	ldr	r5, [r4, #0]
 800427a:	1961      	adds	r1, r4, r5
 800427c:	428b      	cmp	r3, r1
 800427e:	bf04      	itt	eq
 8004280:	6819      	ldreq	r1, [r3, #0]
 8004282:	685b      	ldreq	r3, [r3, #4]
 8004284:	6063      	str	r3, [r4, #4]
 8004286:	bf04      	itt	eq
 8004288:	1949      	addeq	r1, r1, r5
 800428a:	6021      	streq	r1, [r4, #0]
 800428c:	6054      	str	r4, [r2, #4]
 800428e:	e7ca      	b.n	8004226 <_free_r+0x26>
 8004290:	b003      	add	sp, #12
 8004292:	bd30      	pop	{r4, r5, pc}
 8004294:	200005a8 	.word	0x200005a8

08004298 <sbrk_aligned>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	4e0e      	ldr	r6, [pc, #56]	; (80042d4 <sbrk_aligned+0x3c>)
 800429c:	460c      	mov	r4, r1
 800429e:	6831      	ldr	r1, [r6, #0]
 80042a0:	4605      	mov	r5, r0
 80042a2:	b911      	cbnz	r1, 80042aa <sbrk_aligned+0x12>
 80042a4:	f000 fb7a 	bl	800499c <_sbrk_r>
 80042a8:	6030      	str	r0, [r6, #0]
 80042aa:	4621      	mov	r1, r4
 80042ac:	4628      	mov	r0, r5
 80042ae:	f000 fb75 	bl	800499c <_sbrk_r>
 80042b2:	1c43      	adds	r3, r0, #1
 80042b4:	d00a      	beq.n	80042cc <sbrk_aligned+0x34>
 80042b6:	1cc4      	adds	r4, r0, #3
 80042b8:	f024 0403 	bic.w	r4, r4, #3
 80042bc:	42a0      	cmp	r0, r4
 80042be:	d007      	beq.n	80042d0 <sbrk_aligned+0x38>
 80042c0:	1a21      	subs	r1, r4, r0
 80042c2:	4628      	mov	r0, r5
 80042c4:	f000 fb6a 	bl	800499c <_sbrk_r>
 80042c8:	3001      	adds	r0, #1
 80042ca:	d101      	bne.n	80042d0 <sbrk_aligned+0x38>
 80042cc:	f04f 34ff 	mov.w	r4, #4294967295
 80042d0:	4620      	mov	r0, r4
 80042d2:	bd70      	pop	{r4, r5, r6, pc}
 80042d4:	200005ac 	.word	0x200005ac

080042d8 <_malloc_r>:
 80042d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042dc:	1ccd      	adds	r5, r1, #3
 80042de:	f025 0503 	bic.w	r5, r5, #3
 80042e2:	3508      	adds	r5, #8
 80042e4:	2d0c      	cmp	r5, #12
 80042e6:	bf38      	it	cc
 80042e8:	250c      	movcc	r5, #12
 80042ea:	2d00      	cmp	r5, #0
 80042ec:	4607      	mov	r7, r0
 80042ee:	db01      	blt.n	80042f4 <_malloc_r+0x1c>
 80042f0:	42a9      	cmp	r1, r5
 80042f2:	d905      	bls.n	8004300 <_malloc_r+0x28>
 80042f4:	230c      	movs	r3, #12
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	2600      	movs	r6, #0
 80042fa:	4630      	mov	r0, r6
 80042fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004300:	4e2e      	ldr	r6, [pc, #184]	; (80043bc <_malloc_r+0xe4>)
 8004302:	f000 fe43 	bl	8004f8c <__malloc_lock>
 8004306:	6833      	ldr	r3, [r6, #0]
 8004308:	461c      	mov	r4, r3
 800430a:	bb34      	cbnz	r4, 800435a <_malloc_r+0x82>
 800430c:	4629      	mov	r1, r5
 800430e:	4638      	mov	r0, r7
 8004310:	f7ff ffc2 	bl	8004298 <sbrk_aligned>
 8004314:	1c43      	adds	r3, r0, #1
 8004316:	4604      	mov	r4, r0
 8004318:	d14d      	bne.n	80043b6 <_malloc_r+0xde>
 800431a:	6834      	ldr	r4, [r6, #0]
 800431c:	4626      	mov	r6, r4
 800431e:	2e00      	cmp	r6, #0
 8004320:	d140      	bne.n	80043a4 <_malloc_r+0xcc>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	4631      	mov	r1, r6
 8004326:	4638      	mov	r0, r7
 8004328:	eb04 0803 	add.w	r8, r4, r3
 800432c:	f000 fb36 	bl	800499c <_sbrk_r>
 8004330:	4580      	cmp	r8, r0
 8004332:	d13a      	bne.n	80043aa <_malloc_r+0xd2>
 8004334:	6821      	ldr	r1, [r4, #0]
 8004336:	3503      	adds	r5, #3
 8004338:	1a6d      	subs	r5, r5, r1
 800433a:	f025 0503 	bic.w	r5, r5, #3
 800433e:	3508      	adds	r5, #8
 8004340:	2d0c      	cmp	r5, #12
 8004342:	bf38      	it	cc
 8004344:	250c      	movcc	r5, #12
 8004346:	4629      	mov	r1, r5
 8004348:	4638      	mov	r0, r7
 800434a:	f7ff ffa5 	bl	8004298 <sbrk_aligned>
 800434e:	3001      	adds	r0, #1
 8004350:	d02b      	beq.n	80043aa <_malloc_r+0xd2>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	442b      	add	r3, r5
 8004356:	6023      	str	r3, [r4, #0]
 8004358:	e00e      	b.n	8004378 <_malloc_r+0xa0>
 800435a:	6822      	ldr	r2, [r4, #0]
 800435c:	1b52      	subs	r2, r2, r5
 800435e:	d41e      	bmi.n	800439e <_malloc_r+0xc6>
 8004360:	2a0b      	cmp	r2, #11
 8004362:	d916      	bls.n	8004392 <_malloc_r+0xba>
 8004364:	1961      	adds	r1, r4, r5
 8004366:	42a3      	cmp	r3, r4
 8004368:	6025      	str	r5, [r4, #0]
 800436a:	bf18      	it	ne
 800436c:	6059      	strne	r1, [r3, #4]
 800436e:	6863      	ldr	r3, [r4, #4]
 8004370:	bf08      	it	eq
 8004372:	6031      	streq	r1, [r6, #0]
 8004374:	5162      	str	r2, [r4, r5]
 8004376:	604b      	str	r3, [r1, #4]
 8004378:	4638      	mov	r0, r7
 800437a:	f104 060b 	add.w	r6, r4, #11
 800437e:	f000 fe0b 	bl	8004f98 <__malloc_unlock>
 8004382:	f026 0607 	bic.w	r6, r6, #7
 8004386:	1d23      	adds	r3, r4, #4
 8004388:	1af2      	subs	r2, r6, r3
 800438a:	d0b6      	beq.n	80042fa <_malloc_r+0x22>
 800438c:	1b9b      	subs	r3, r3, r6
 800438e:	50a3      	str	r3, [r4, r2]
 8004390:	e7b3      	b.n	80042fa <_malloc_r+0x22>
 8004392:	6862      	ldr	r2, [r4, #4]
 8004394:	42a3      	cmp	r3, r4
 8004396:	bf0c      	ite	eq
 8004398:	6032      	streq	r2, [r6, #0]
 800439a:	605a      	strne	r2, [r3, #4]
 800439c:	e7ec      	b.n	8004378 <_malloc_r+0xa0>
 800439e:	4623      	mov	r3, r4
 80043a0:	6864      	ldr	r4, [r4, #4]
 80043a2:	e7b2      	b.n	800430a <_malloc_r+0x32>
 80043a4:	4634      	mov	r4, r6
 80043a6:	6876      	ldr	r6, [r6, #4]
 80043a8:	e7b9      	b.n	800431e <_malloc_r+0x46>
 80043aa:	230c      	movs	r3, #12
 80043ac:	603b      	str	r3, [r7, #0]
 80043ae:	4638      	mov	r0, r7
 80043b0:	f000 fdf2 	bl	8004f98 <__malloc_unlock>
 80043b4:	e7a1      	b.n	80042fa <_malloc_r+0x22>
 80043b6:	6025      	str	r5, [r4, #0]
 80043b8:	e7de      	b.n	8004378 <_malloc_r+0xa0>
 80043ba:	bf00      	nop
 80043bc:	200005a8 	.word	0x200005a8

080043c0 <__sfputc_r>:
 80043c0:	6893      	ldr	r3, [r2, #8]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	b410      	push	{r4}
 80043c8:	6093      	str	r3, [r2, #8]
 80043ca:	da08      	bge.n	80043de <__sfputc_r+0x1e>
 80043cc:	6994      	ldr	r4, [r2, #24]
 80043ce:	42a3      	cmp	r3, r4
 80043d0:	db01      	blt.n	80043d6 <__sfputc_r+0x16>
 80043d2:	290a      	cmp	r1, #10
 80043d4:	d103      	bne.n	80043de <__sfputc_r+0x1e>
 80043d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043da:	f000 baef 	b.w	80049bc <__swbuf_r>
 80043de:	6813      	ldr	r3, [r2, #0]
 80043e0:	1c58      	adds	r0, r3, #1
 80043e2:	6010      	str	r0, [r2, #0]
 80043e4:	7019      	strb	r1, [r3, #0]
 80043e6:	4608      	mov	r0, r1
 80043e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <__sfputs_r>:
 80043ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f0:	4606      	mov	r6, r0
 80043f2:	460f      	mov	r7, r1
 80043f4:	4614      	mov	r4, r2
 80043f6:	18d5      	adds	r5, r2, r3
 80043f8:	42ac      	cmp	r4, r5
 80043fa:	d101      	bne.n	8004400 <__sfputs_r+0x12>
 80043fc:	2000      	movs	r0, #0
 80043fe:	e007      	b.n	8004410 <__sfputs_r+0x22>
 8004400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004404:	463a      	mov	r2, r7
 8004406:	4630      	mov	r0, r6
 8004408:	f7ff ffda 	bl	80043c0 <__sfputc_r>
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	d1f3      	bne.n	80043f8 <__sfputs_r+0xa>
 8004410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004414 <_vfiprintf_r>:
 8004414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004418:	460d      	mov	r5, r1
 800441a:	b09d      	sub	sp, #116	; 0x74
 800441c:	4614      	mov	r4, r2
 800441e:	4698      	mov	r8, r3
 8004420:	4606      	mov	r6, r0
 8004422:	b118      	cbz	r0, 800442c <_vfiprintf_r+0x18>
 8004424:	6983      	ldr	r3, [r0, #24]
 8004426:	b90b      	cbnz	r3, 800442c <_vfiprintf_r+0x18>
 8004428:	f000 fcaa 	bl	8004d80 <__sinit>
 800442c:	4b89      	ldr	r3, [pc, #548]	; (8004654 <_vfiprintf_r+0x240>)
 800442e:	429d      	cmp	r5, r3
 8004430:	d11b      	bne.n	800446a <_vfiprintf_r+0x56>
 8004432:	6875      	ldr	r5, [r6, #4]
 8004434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004436:	07d9      	lsls	r1, r3, #31
 8004438:	d405      	bmi.n	8004446 <_vfiprintf_r+0x32>
 800443a:	89ab      	ldrh	r3, [r5, #12]
 800443c:	059a      	lsls	r2, r3, #22
 800443e:	d402      	bmi.n	8004446 <_vfiprintf_r+0x32>
 8004440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004442:	f000 fd3b 	bl	8004ebc <__retarget_lock_acquire_recursive>
 8004446:	89ab      	ldrh	r3, [r5, #12]
 8004448:	071b      	lsls	r3, r3, #28
 800444a:	d501      	bpl.n	8004450 <_vfiprintf_r+0x3c>
 800444c:	692b      	ldr	r3, [r5, #16]
 800444e:	b9eb      	cbnz	r3, 800448c <_vfiprintf_r+0x78>
 8004450:	4629      	mov	r1, r5
 8004452:	4630      	mov	r0, r6
 8004454:	f000 fb04 	bl	8004a60 <__swsetup_r>
 8004458:	b1c0      	cbz	r0, 800448c <_vfiprintf_r+0x78>
 800445a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800445c:	07dc      	lsls	r4, r3, #31
 800445e:	d50e      	bpl.n	800447e <_vfiprintf_r+0x6a>
 8004460:	f04f 30ff 	mov.w	r0, #4294967295
 8004464:	b01d      	add	sp, #116	; 0x74
 8004466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446a:	4b7b      	ldr	r3, [pc, #492]	; (8004658 <_vfiprintf_r+0x244>)
 800446c:	429d      	cmp	r5, r3
 800446e:	d101      	bne.n	8004474 <_vfiprintf_r+0x60>
 8004470:	68b5      	ldr	r5, [r6, #8]
 8004472:	e7df      	b.n	8004434 <_vfiprintf_r+0x20>
 8004474:	4b79      	ldr	r3, [pc, #484]	; (800465c <_vfiprintf_r+0x248>)
 8004476:	429d      	cmp	r5, r3
 8004478:	bf08      	it	eq
 800447a:	68f5      	ldreq	r5, [r6, #12]
 800447c:	e7da      	b.n	8004434 <_vfiprintf_r+0x20>
 800447e:	89ab      	ldrh	r3, [r5, #12]
 8004480:	0598      	lsls	r0, r3, #22
 8004482:	d4ed      	bmi.n	8004460 <_vfiprintf_r+0x4c>
 8004484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004486:	f000 fd1a 	bl	8004ebe <__retarget_lock_release_recursive>
 800448a:	e7e9      	b.n	8004460 <_vfiprintf_r+0x4c>
 800448c:	2300      	movs	r3, #0
 800448e:	9309      	str	r3, [sp, #36]	; 0x24
 8004490:	2320      	movs	r3, #32
 8004492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004496:	f8cd 800c 	str.w	r8, [sp, #12]
 800449a:	2330      	movs	r3, #48	; 0x30
 800449c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004660 <_vfiprintf_r+0x24c>
 80044a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044a4:	f04f 0901 	mov.w	r9, #1
 80044a8:	4623      	mov	r3, r4
 80044aa:	469a      	mov	sl, r3
 80044ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044b0:	b10a      	cbz	r2, 80044b6 <_vfiprintf_r+0xa2>
 80044b2:	2a25      	cmp	r2, #37	; 0x25
 80044b4:	d1f9      	bne.n	80044aa <_vfiprintf_r+0x96>
 80044b6:	ebba 0b04 	subs.w	fp, sl, r4
 80044ba:	d00b      	beq.n	80044d4 <_vfiprintf_r+0xc0>
 80044bc:	465b      	mov	r3, fp
 80044be:	4622      	mov	r2, r4
 80044c0:	4629      	mov	r1, r5
 80044c2:	4630      	mov	r0, r6
 80044c4:	f7ff ff93 	bl	80043ee <__sfputs_r>
 80044c8:	3001      	adds	r0, #1
 80044ca:	f000 80aa 	beq.w	8004622 <_vfiprintf_r+0x20e>
 80044ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044d0:	445a      	add	r2, fp
 80044d2:	9209      	str	r2, [sp, #36]	; 0x24
 80044d4:	f89a 3000 	ldrb.w	r3, [sl]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80a2 	beq.w	8004622 <_vfiprintf_r+0x20e>
 80044de:	2300      	movs	r3, #0
 80044e0:	f04f 32ff 	mov.w	r2, #4294967295
 80044e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044e8:	f10a 0a01 	add.w	sl, sl, #1
 80044ec:	9304      	str	r3, [sp, #16]
 80044ee:	9307      	str	r3, [sp, #28]
 80044f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044f4:	931a      	str	r3, [sp, #104]	; 0x68
 80044f6:	4654      	mov	r4, sl
 80044f8:	2205      	movs	r2, #5
 80044fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044fe:	4858      	ldr	r0, [pc, #352]	; (8004660 <_vfiprintf_r+0x24c>)
 8004500:	f7fb fe7e 	bl	8000200 <memchr>
 8004504:	9a04      	ldr	r2, [sp, #16]
 8004506:	b9d8      	cbnz	r0, 8004540 <_vfiprintf_r+0x12c>
 8004508:	06d1      	lsls	r1, r2, #27
 800450a:	bf44      	itt	mi
 800450c:	2320      	movmi	r3, #32
 800450e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004512:	0713      	lsls	r3, r2, #28
 8004514:	bf44      	itt	mi
 8004516:	232b      	movmi	r3, #43	; 0x2b
 8004518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800451c:	f89a 3000 	ldrb.w	r3, [sl]
 8004520:	2b2a      	cmp	r3, #42	; 0x2a
 8004522:	d015      	beq.n	8004550 <_vfiprintf_r+0x13c>
 8004524:	9a07      	ldr	r2, [sp, #28]
 8004526:	4654      	mov	r4, sl
 8004528:	2000      	movs	r0, #0
 800452a:	f04f 0c0a 	mov.w	ip, #10
 800452e:	4621      	mov	r1, r4
 8004530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004534:	3b30      	subs	r3, #48	; 0x30
 8004536:	2b09      	cmp	r3, #9
 8004538:	d94e      	bls.n	80045d8 <_vfiprintf_r+0x1c4>
 800453a:	b1b0      	cbz	r0, 800456a <_vfiprintf_r+0x156>
 800453c:	9207      	str	r2, [sp, #28]
 800453e:	e014      	b.n	800456a <_vfiprintf_r+0x156>
 8004540:	eba0 0308 	sub.w	r3, r0, r8
 8004544:	fa09 f303 	lsl.w	r3, r9, r3
 8004548:	4313      	orrs	r3, r2
 800454a:	9304      	str	r3, [sp, #16]
 800454c:	46a2      	mov	sl, r4
 800454e:	e7d2      	b.n	80044f6 <_vfiprintf_r+0xe2>
 8004550:	9b03      	ldr	r3, [sp, #12]
 8004552:	1d19      	adds	r1, r3, #4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	9103      	str	r1, [sp, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	bfbb      	ittet	lt
 800455c:	425b      	neglt	r3, r3
 800455e:	f042 0202 	orrlt.w	r2, r2, #2
 8004562:	9307      	strge	r3, [sp, #28]
 8004564:	9307      	strlt	r3, [sp, #28]
 8004566:	bfb8      	it	lt
 8004568:	9204      	strlt	r2, [sp, #16]
 800456a:	7823      	ldrb	r3, [r4, #0]
 800456c:	2b2e      	cmp	r3, #46	; 0x2e
 800456e:	d10c      	bne.n	800458a <_vfiprintf_r+0x176>
 8004570:	7863      	ldrb	r3, [r4, #1]
 8004572:	2b2a      	cmp	r3, #42	; 0x2a
 8004574:	d135      	bne.n	80045e2 <_vfiprintf_r+0x1ce>
 8004576:	9b03      	ldr	r3, [sp, #12]
 8004578:	1d1a      	adds	r2, r3, #4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	9203      	str	r2, [sp, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	bfb8      	it	lt
 8004582:	f04f 33ff 	movlt.w	r3, #4294967295
 8004586:	3402      	adds	r4, #2
 8004588:	9305      	str	r3, [sp, #20]
 800458a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004670 <_vfiprintf_r+0x25c>
 800458e:	7821      	ldrb	r1, [r4, #0]
 8004590:	2203      	movs	r2, #3
 8004592:	4650      	mov	r0, sl
 8004594:	f7fb fe34 	bl	8000200 <memchr>
 8004598:	b140      	cbz	r0, 80045ac <_vfiprintf_r+0x198>
 800459a:	2340      	movs	r3, #64	; 0x40
 800459c:	eba0 000a 	sub.w	r0, r0, sl
 80045a0:	fa03 f000 	lsl.w	r0, r3, r0
 80045a4:	9b04      	ldr	r3, [sp, #16]
 80045a6:	4303      	orrs	r3, r0
 80045a8:	3401      	adds	r4, #1
 80045aa:	9304      	str	r3, [sp, #16]
 80045ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045b0:	482c      	ldr	r0, [pc, #176]	; (8004664 <_vfiprintf_r+0x250>)
 80045b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045b6:	2206      	movs	r2, #6
 80045b8:	f7fb fe22 	bl	8000200 <memchr>
 80045bc:	2800      	cmp	r0, #0
 80045be:	d03f      	beq.n	8004640 <_vfiprintf_r+0x22c>
 80045c0:	4b29      	ldr	r3, [pc, #164]	; (8004668 <_vfiprintf_r+0x254>)
 80045c2:	bb1b      	cbnz	r3, 800460c <_vfiprintf_r+0x1f8>
 80045c4:	9b03      	ldr	r3, [sp, #12]
 80045c6:	3307      	adds	r3, #7
 80045c8:	f023 0307 	bic.w	r3, r3, #7
 80045cc:	3308      	adds	r3, #8
 80045ce:	9303      	str	r3, [sp, #12]
 80045d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d2:	443b      	add	r3, r7
 80045d4:	9309      	str	r3, [sp, #36]	; 0x24
 80045d6:	e767      	b.n	80044a8 <_vfiprintf_r+0x94>
 80045d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80045dc:	460c      	mov	r4, r1
 80045de:	2001      	movs	r0, #1
 80045e0:	e7a5      	b.n	800452e <_vfiprintf_r+0x11a>
 80045e2:	2300      	movs	r3, #0
 80045e4:	3401      	adds	r4, #1
 80045e6:	9305      	str	r3, [sp, #20]
 80045e8:	4619      	mov	r1, r3
 80045ea:	f04f 0c0a 	mov.w	ip, #10
 80045ee:	4620      	mov	r0, r4
 80045f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045f4:	3a30      	subs	r2, #48	; 0x30
 80045f6:	2a09      	cmp	r2, #9
 80045f8:	d903      	bls.n	8004602 <_vfiprintf_r+0x1ee>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0c5      	beq.n	800458a <_vfiprintf_r+0x176>
 80045fe:	9105      	str	r1, [sp, #20]
 8004600:	e7c3      	b.n	800458a <_vfiprintf_r+0x176>
 8004602:	fb0c 2101 	mla	r1, ip, r1, r2
 8004606:	4604      	mov	r4, r0
 8004608:	2301      	movs	r3, #1
 800460a:	e7f0      	b.n	80045ee <_vfiprintf_r+0x1da>
 800460c:	ab03      	add	r3, sp, #12
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	462a      	mov	r2, r5
 8004612:	4b16      	ldr	r3, [pc, #88]	; (800466c <_vfiprintf_r+0x258>)
 8004614:	a904      	add	r1, sp, #16
 8004616:	4630      	mov	r0, r6
 8004618:	f3af 8000 	nop.w
 800461c:	4607      	mov	r7, r0
 800461e:	1c78      	adds	r0, r7, #1
 8004620:	d1d6      	bne.n	80045d0 <_vfiprintf_r+0x1bc>
 8004622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004624:	07d9      	lsls	r1, r3, #31
 8004626:	d405      	bmi.n	8004634 <_vfiprintf_r+0x220>
 8004628:	89ab      	ldrh	r3, [r5, #12]
 800462a:	059a      	lsls	r2, r3, #22
 800462c:	d402      	bmi.n	8004634 <_vfiprintf_r+0x220>
 800462e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004630:	f000 fc45 	bl	8004ebe <__retarget_lock_release_recursive>
 8004634:	89ab      	ldrh	r3, [r5, #12]
 8004636:	065b      	lsls	r3, r3, #25
 8004638:	f53f af12 	bmi.w	8004460 <_vfiprintf_r+0x4c>
 800463c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800463e:	e711      	b.n	8004464 <_vfiprintf_r+0x50>
 8004640:	ab03      	add	r3, sp, #12
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	462a      	mov	r2, r5
 8004646:	4b09      	ldr	r3, [pc, #36]	; (800466c <_vfiprintf_r+0x258>)
 8004648:	a904      	add	r1, sp, #16
 800464a:	4630      	mov	r0, r6
 800464c:	f000 f880 	bl	8004750 <_printf_i>
 8004650:	e7e4      	b.n	800461c <_vfiprintf_r+0x208>
 8004652:	bf00      	nop
 8004654:	080056ac 	.word	0x080056ac
 8004658:	080056cc 	.word	0x080056cc
 800465c:	0800568c 	.word	0x0800568c
 8004660:	08005658 	.word	0x08005658
 8004664:	08005662 	.word	0x08005662
 8004668:	00000000 	.word	0x00000000
 800466c:	080043ef 	.word	0x080043ef
 8004670:	0800565e 	.word	0x0800565e

08004674 <_printf_common>:
 8004674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004678:	4616      	mov	r6, r2
 800467a:	4699      	mov	r9, r3
 800467c:	688a      	ldr	r2, [r1, #8]
 800467e:	690b      	ldr	r3, [r1, #16]
 8004680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004684:	4293      	cmp	r3, r2
 8004686:	bfb8      	it	lt
 8004688:	4613      	movlt	r3, r2
 800468a:	6033      	str	r3, [r6, #0]
 800468c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004690:	4607      	mov	r7, r0
 8004692:	460c      	mov	r4, r1
 8004694:	b10a      	cbz	r2, 800469a <_printf_common+0x26>
 8004696:	3301      	adds	r3, #1
 8004698:	6033      	str	r3, [r6, #0]
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	0699      	lsls	r1, r3, #26
 800469e:	bf42      	ittt	mi
 80046a0:	6833      	ldrmi	r3, [r6, #0]
 80046a2:	3302      	addmi	r3, #2
 80046a4:	6033      	strmi	r3, [r6, #0]
 80046a6:	6825      	ldr	r5, [r4, #0]
 80046a8:	f015 0506 	ands.w	r5, r5, #6
 80046ac:	d106      	bne.n	80046bc <_printf_common+0x48>
 80046ae:	f104 0a19 	add.w	sl, r4, #25
 80046b2:	68e3      	ldr	r3, [r4, #12]
 80046b4:	6832      	ldr	r2, [r6, #0]
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	42ab      	cmp	r3, r5
 80046ba:	dc26      	bgt.n	800470a <_printf_common+0x96>
 80046bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046c0:	1e13      	subs	r3, r2, #0
 80046c2:	6822      	ldr	r2, [r4, #0]
 80046c4:	bf18      	it	ne
 80046c6:	2301      	movne	r3, #1
 80046c8:	0692      	lsls	r2, r2, #26
 80046ca:	d42b      	bmi.n	8004724 <_printf_common+0xb0>
 80046cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046d0:	4649      	mov	r1, r9
 80046d2:	4638      	mov	r0, r7
 80046d4:	47c0      	blx	r8
 80046d6:	3001      	adds	r0, #1
 80046d8:	d01e      	beq.n	8004718 <_printf_common+0xa4>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	68e5      	ldr	r5, [r4, #12]
 80046de:	6832      	ldr	r2, [r6, #0]
 80046e0:	f003 0306 	and.w	r3, r3, #6
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	bf08      	it	eq
 80046e8:	1aad      	subeq	r5, r5, r2
 80046ea:	68a3      	ldr	r3, [r4, #8]
 80046ec:	6922      	ldr	r2, [r4, #16]
 80046ee:	bf0c      	ite	eq
 80046f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046f4:	2500      	movne	r5, #0
 80046f6:	4293      	cmp	r3, r2
 80046f8:	bfc4      	itt	gt
 80046fa:	1a9b      	subgt	r3, r3, r2
 80046fc:	18ed      	addgt	r5, r5, r3
 80046fe:	2600      	movs	r6, #0
 8004700:	341a      	adds	r4, #26
 8004702:	42b5      	cmp	r5, r6
 8004704:	d11a      	bne.n	800473c <_printf_common+0xc8>
 8004706:	2000      	movs	r0, #0
 8004708:	e008      	b.n	800471c <_printf_common+0xa8>
 800470a:	2301      	movs	r3, #1
 800470c:	4652      	mov	r2, sl
 800470e:	4649      	mov	r1, r9
 8004710:	4638      	mov	r0, r7
 8004712:	47c0      	blx	r8
 8004714:	3001      	adds	r0, #1
 8004716:	d103      	bne.n	8004720 <_printf_common+0xac>
 8004718:	f04f 30ff 	mov.w	r0, #4294967295
 800471c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004720:	3501      	adds	r5, #1
 8004722:	e7c6      	b.n	80046b2 <_printf_common+0x3e>
 8004724:	18e1      	adds	r1, r4, r3
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	2030      	movs	r0, #48	; 0x30
 800472a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800472e:	4422      	add	r2, r4
 8004730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004738:	3302      	adds	r3, #2
 800473a:	e7c7      	b.n	80046cc <_printf_common+0x58>
 800473c:	2301      	movs	r3, #1
 800473e:	4622      	mov	r2, r4
 8004740:	4649      	mov	r1, r9
 8004742:	4638      	mov	r0, r7
 8004744:	47c0      	blx	r8
 8004746:	3001      	adds	r0, #1
 8004748:	d0e6      	beq.n	8004718 <_printf_common+0xa4>
 800474a:	3601      	adds	r6, #1
 800474c:	e7d9      	b.n	8004702 <_printf_common+0x8e>
	...

08004750 <_printf_i>:
 8004750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004754:	7e0f      	ldrb	r7, [r1, #24]
 8004756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004758:	2f78      	cmp	r7, #120	; 0x78
 800475a:	4691      	mov	r9, r2
 800475c:	4680      	mov	r8, r0
 800475e:	460c      	mov	r4, r1
 8004760:	469a      	mov	sl, r3
 8004762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004766:	d807      	bhi.n	8004778 <_printf_i+0x28>
 8004768:	2f62      	cmp	r7, #98	; 0x62
 800476a:	d80a      	bhi.n	8004782 <_printf_i+0x32>
 800476c:	2f00      	cmp	r7, #0
 800476e:	f000 80d8 	beq.w	8004922 <_printf_i+0x1d2>
 8004772:	2f58      	cmp	r7, #88	; 0x58
 8004774:	f000 80a3 	beq.w	80048be <_printf_i+0x16e>
 8004778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800477c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004780:	e03a      	b.n	80047f8 <_printf_i+0xa8>
 8004782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004786:	2b15      	cmp	r3, #21
 8004788:	d8f6      	bhi.n	8004778 <_printf_i+0x28>
 800478a:	a101      	add	r1, pc, #4	; (adr r1, 8004790 <_printf_i+0x40>)
 800478c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004790:	080047e9 	.word	0x080047e9
 8004794:	080047fd 	.word	0x080047fd
 8004798:	08004779 	.word	0x08004779
 800479c:	08004779 	.word	0x08004779
 80047a0:	08004779 	.word	0x08004779
 80047a4:	08004779 	.word	0x08004779
 80047a8:	080047fd 	.word	0x080047fd
 80047ac:	08004779 	.word	0x08004779
 80047b0:	08004779 	.word	0x08004779
 80047b4:	08004779 	.word	0x08004779
 80047b8:	08004779 	.word	0x08004779
 80047bc:	08004909 	.word	0x08004909
 80047c0:	0800482d 	.word	0x0800482d
 80047c4:	080048eb 	.word	0x080048eb
 80047c8:	08004779 	.word	0x08004779
 80047cc:	08004779 	.word	0x08004779
 80047d0:	0800492b 	.word	0x0800492b
 80047d4:	08004779 	.word	0x08004779
 80047d8:	0800482d 	.word	0x0800482d
 80047dc:	08004779 	.word	0x08004779
 80047e0:	08004779 	.word	0x08004779
 80047e4:	080048f3 	.word	0x080048f3
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	1d1a      	adds	r2, r3, #4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	602a      	str	r2, [r5, #0]
 80047f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0a3      	b.n	8004944 <_printf_i+0x1f4>
 80047fc:	6820      	ldr	r0, [r4, #0]
 80047fe:	6829      	ldr	r1, [r5, #0]
 8004800:	0606      	lsls	r6, r0, #24
 8004802:	f101 0304 	add.w	r3, r1, #4
 8004806:	d50a      	bpl.n	800481e <_printf_i+0xce>
 8004808:	680e      	ldr	r6, [r1, #0]
 800480a:	602b      	str	r3, [r5, #0]
 800480c:	2e00      	cmp	r6, #0
 800480e:	da03      	bge.n	8004818 <_printf_i+0xc8>
 8004810:	232d      	movs	r3, #45	; 0x2d
 8004812:	4276      	negs	r6, r6
 8004814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004818:	485e      	ldr	r0, [pc, #376]	; (8004994 <_printf_i+0x244>)
 800481a:	230a      	movs	r3, #10
 800481c:	e019      	b.n	8004852 <_printf_i+0x102>
 800481e:	680e      	ldr	r6, [r1, #0]
 8004820:	602b      	str	r3, [r5, #0]
 8004822:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004826:	bf18      	it	ne
 8004828:	b236      	sxthne	r6, r6
 800482a:	e7ef      	b.n	800480c <_printf_i+0xbc>
 800482c:	682b      	ldr	r3, [r5, #0]
 800482e:	6820      	ldr	r0, [r4, #0]
 8004830:	1d19      	adds	r1, r3, #4
 8004832:	6029      	str	r1, [r5, #0]
 8004834:	0601      	lsls	r1, r0, #24
 8004836:	d501      	bpl.n	800483c <_printf_i+0xec>
 8004838:	681e      	ldr	r6, [r3, #0]
 800483a:	e002      	b.n	8004842 <_printf_i+0xf2>
 800483c:	0646      	lsls	r6, r0, #25
 800483e:	d5fb      	bpl.n	8004838 <_printf_i+0xe8>
 8004840:	881e      	ldrh	r6, [r3, #0]
 8004842:	4854      	ldr	r0, [pc, #336]	; (8004994 <_printf_i+0x244>)
 8004844:	2f6f      	cmp	r7, #111	; 0x6f
 8004846:	bf0c      	ite	eq
 8004848:	2308      	moveq	r3, #8
 800484a:	230a      	movne	r3, #10
 800484c:	2100      	movs	r1, #0
 800484e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004852:	6865      	ldr	r5, [r4, #4]
 8004854:	60a5      	str	r5, [r4, #8]
 8004856:	2d00      	cmp	r5, #0
 8004858:	bfa2      	ittt	ge
 800485a:	6821      	ldrge	r1, [r4, #0]
 800485c:	f021 0104 	bicge.w	r1, r1, #4
 8004860:	6021      	strge	r1, [r4, #0]
 8004862:	b90e      	cbnz	r6, 8004868 <_printf_i+0x118>
 8004864:	2d00      	cmp	r5, #0
 8004866:	d04d      	beq.n	8004904 <_printf_i+0x1b4>
 8004868:	4615      	mov	r5, r2
 800486a:	fbb6 f1f3 	udiv	r1, r6, r3
 800486e:	fb03 6711 	mls	r7, r3, r1, r6
 8004872:	5dc7      	ldrb	r7, [r0, r7]
 8004874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004878:	4637      	mov	r7, r6
 800487a:	42bb      	cmp	r3, r7
 800487c:	460e      	mov	r6, r1
 800487e:	d9f4      	bls.n	800486a <_printf_i+0x11a>
 8004880:	2b08      	cmp	r3, #8
 8004882:	d10b      	bne.n	800489c <_printf_i+0x14c>
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	07de      	lsls	r6, r3, #31
 8004888:	d508      	bpl.n	800489c <_printf_i+0x14c>
 800488a:	6923      	ldr	r3, [r4, #16]
 800488c:	6861      	ldr	r1, [r4, #4]
 800488e:	4299      	cmp	r1, r3
 8004890:	bfde      	ittt	le
 8004892:	2330      	movle	r3, #48	; 0x30
 8004894:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004898:	f105 35ff 	addle.w	r5, r5, #4294967295
 800489c:	1b52      	subs	r2, r2, r5
 800489e:	6122      	str	r2, [r4, #16]
 80048a0:	f8cd a000 	str.w	sl, [sp]
 80048a4:	464b      	mov	r3, r9
 80048a6:	aa03      	add	r2, sp, #12
 80048a8:	4621      	mov	r1, r4
 80048aa:	4640      	mov	r0, r8
 80048ac:	f7ff fee2 	bl	8004674 <_printf_common>
 80048b0:	3001      	adds	r0, #1
 80048b2:	d14c      	bne.n	800494e <_printf_i+0x1fe>
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295
 80048b8:	b004      	add	sp, #16
 80048ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048be:	4835      	ldr	r0, [pc, #212]	; (8004994 <_printf_i+0x244>)
 80048c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048c4:	6829      	ldr	r1, [r5, #0]
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80048cc:	6029      	str	r1, [r5, #0]
 80048ce:	061d      	lsls	r5, r3, #24
 80048d0:	d514      	bpl.n	80048fc <_printf_i+0x1ac>
 80048d2:	07df      	lsls	r7, r3, #31
 80048d4:	bf44      	itt	mi
 80048d6:	f043 0320 	orrmi.w	r3, r3, #32
 80048da:	6023      	strmi	r3, [r4, #0]
 80048dc:	b91e      	cbnz	r6, 80048e6 <_printf_i+0x196>
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	f023 0320 	bic.w	r3, r3, #32
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	2310      	movs	r3, #16
 80048e8:	e7b0      	b.n	800484c <_printf_i+0xfc>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	f043 0320 	orr.w	r3, r3, #32
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	2378      	movs	r3, #120	; 0x78
 80048f4:	4828      	ldr	r0, [pc, #160]	; (8004998 <_printf_i+0x248>)
 80048f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048fa:	e7e3      	b.n	80048c4 <_printf_i+0x174>
 80048fc:	0659      	lsls	r1, r3, #25
 80048fe:	bf48      	it	mi
 8004900:	b2b6      	uxthmi	r6, r6
 8004902:	e7e6      	b.n	80048d2 <_printf_i+0x182>
 8004904:	4615      	mov	r5, r2
 8004906:	e7bb      	b.n	8004880 <_printf_i+0x130>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	6826      	ldr	r6, [r4, #0]
 800490c:	6961      	ldr	r1, [r4, #20]
 800490e:	1d18      	adds	r0, r3, #4
 8004910:	6028      	str	r0, [r5, #0]
 8004912:	0635      	lsls	r5, r6, #24
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	d501      	bpl.n	800491c <_printf_i+0x1cc>
 8004918:	6019      	str	r1, [r3, #0]
 800491a:	e002      	b.n	8004922 <_printf_i+0x1d2>
 800491c:	0670      	lsls	r0, r6, #25
 800491e:	d5fb      	bpl.n	8004918 <_printf_i+0x1c8>
 8004920:	8019      	strh	r1, [r3, #0]
 8004922:	2300      	movs	r3, #0
 8004924:	6123      	str	r3, [r4, #16]
 8004926:	4615      	mov	r5, r2
 8004928:	e7ba      	b.n	80048a0 <_printf_i+0x150>
 800492a:	682b      	ldr	r3, [r5, #0]
 800492c:	1d1a      	adds	r2, r3, #4
 800492e:	602a      	str	r2, [r5, #0]
 8004930:	681d      	ldr	r5, [r3, #0]
 8004932:	6862      	ldr	r2, [r4, #4]
 8004934:	2100      	movs	r1, #0
 8004936:	4628      	mov	r0, r5
 8004938:	f7fb fc62 	bl	8000200 <memchr>
 800493c:	b108      	cbz	r0, 8004942 <_printf_i+0x1f2>
 800493e:	1b40      	subs	r0, r0, r5
 8004940:	6060      	str	r0, [r4, #4]
 8004942:	6863      	ldr	r3, [r4, #4]
 8004944:	6123      	str	r3, [r4, #16]
 8004946:	2300      	movs	r3, #0
 8004948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800494c:	e7a8      	b.n	80048a0 <_printf_i+0x150>
 800494e:	6923      	ldr	r3, [r4, #16]
 8004950:	462a      	mov	r2, r5
 8004952:	4649      	mov	r1, r9
 8004954:	4640      	mov	r0, r8
 8004956:	47d0      	blx	sl
 8004958:	3001      	adds	r0, #1
 800495a:	d0ab      	beq.n	80048b4 <_printf_i+0x164>
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	079b      	lsls	r3, r3, #30
 8004960:	d413      	bmi.n	800498a <_printf_i+0x23a>
 8004962:	68e0      	ldr	r0, [r4, #12]
 8004964:	9b03      	ldr	r3, [sp, #12]
 8004966:	4298      	cmp	r0, r3
 8004968:	bfb8      	it	lt
 800496a:	4618      	movlt	r0, r3
 800496c:	e7a4      	b.n	80048b8 <_printf_i+0x168>
 800496e:	2301      	movs	r3, #1
 8004970:	4632      	mov	r2, r6
 8004972:	4649      	mov	r1, r9
 8004974:	4640      	mov	r0, r8
 8004976:	47d0      	blx	sl
 8004978:	3001      	adds	r0, #1
 800497a:	d09b      	beq.n	80048b4 <_printf_i+0x164>
 800497c:	3501      	adds	r5, #1
 800497e:	68e3      	ldr	r3, [r4, #12]
 8004980:	9903      	ldr	r1, [sp, #12]
 8004982:	1a5b      	subs	r3, r3, r1
 8004984:	42ab      	cmp	r3, r5
 8004986:	dcf2      	bgt.n	800496e <_printf_i+0x21e>
 8004988:	e7eb      	b.n	8004962 <_printf_i+0x212>
 800498a:	2500      	movs	r5, #0
 800498c:	f104 0619 	add.w	r6, r4, #25
 8004990:	e7f5      	b.n	800497e <_printf_i+0x22e>
 8004992:	bf00      	nop
 8004994:	08005669 	.word	0x08005669
 8004998:	0800567a 	.word	0x0800567a

0800499c <_sbrk_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4d06      	ldr	r5, [pc, #24]	; (80049b8 <_sbrk_r+0x1c>)
 80049a0:	2300      	movs	r3, #0
 80049a2:	4604      	mov	r4, r0
 80049a4:	4608      	mov	r0, r1
 80049a6:	602b      	str	r3, [r5, #0]
 80049a8:	f7fc febe 	bl	8001728 <_sbrk>
 80049ac:	1c43      	adds	r3, r0, #1
 80049ae:	d102      	bne.n	80049b6 <_sbrk_r+0x1a>
 80049b0:	682b      	ldr	r3, [r5, #0]
 80049b2:	b103      	cbz	r3, 80049b6 <_sbrk_r+0x1a>
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	bd38      	pop	{r3, r4, r5, pc}
 80049b8:	200005b4 	.word	0x200005b4

080049bc <__swbuf_r>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	460e      	mov	r6, r1
 80049c0:	4614      	mov	r4, r2
 80049c2:	4605      	mov	r5, r0
 80049c4:	b118      	cbz	r0, 80049ce <__swbuf_r+0x12>
 80049c6:	6983      	ldr	r3, [r0, #24]
 80049c8:	b90b      	cbnz	r3, 80049ce <__swbuf_r+0x12>
 80049ca:	f000 f9d9 	bl	8004d80 <__sinit>
 80049ce:	4b21      	ldr	r3, [pc, #132]	; (8004a54 <__swbuf_r+0x98>)
 80049d0:	429c      	cmp	r4, r3
 80049d2:	d12b      	bne.n	8004a2c <__swbuf_r+0x70>
 80049d4:	686c      	ldr	r4, [r5, #4]
 80049d6:	69a3      	ldr	r3, [r4, #24]
 80049d8:	60a3      	str	r3, [r4, #8]
 80049da:	89a3      	ldrh	r3, [r4, #12]
 80049dc:	071a      	lsls	r2, r3, #28
 80049de:	d52f      	bpl.n	8004a40 <__swbuf_r+0x84>
 80049e0:	6923      	ldr	r3, [r4, #16]
 80049e2:	b36b      	cbz	r3, 8004a40 <__swbuf_r+0x84>
 80049e4:	6923      	ldr	r3, [r4, #16]
 80049e6:	6820      	ldr	r0, [r4, #0]
 80049e8:	1ac0      	subs	r0, r0, r3
 80049ea:	6963      	ldr	r3, [r4, #20]
 80049ec:	b2f6      	uxtb	r6, r6
 80049ee:	4283      	cmp	r3, r0
 80049f0:	4637      	mov	r7, r6
 80049f2:	dc04      	bgt.n	80049fe <__swbuf_r+0x42>
 80049f4:	4621      	mov	r1, r4
 80049f6:	4628      	mov	r0, r5
 80049f8:	f000 f92e 	bl	8004c58 <_fflush_r>
 80049fc:	bb30      	cbnz	r0, 8004a4c <__swbuf_r+0x90>
 80049fe:	68a3      	ldr	r3, [r4, #8]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	60a3      	str	r3, [r4, #8]
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	6022      	str	r2, [r4, #0]
 8004a0a:	701e      	strb	r6, [r3, #0]
 8004a0c:	6963      	ldr	r3, [r4, #20]
 8004a0e:	3001      	adds	r0, #1
 8004a10:	4283      	cmp	r3, r0
 8004a12:	d004      	beq.n	8004a1e <__swbuf_r+0x62>
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	07db      	lsls	r3, r3, #31
 8004a18:	d506      	bpl.n	8004a28 <__swbuf_r+0x6c>
 8004a1a:	2e0a      	cmp	r6, #10
 8004a1c:	d104      	bne.n	8004a28 <__swbuf_r+0x6c>
 8004a1e:	4621      	mov	r1, r4
 8004a20:	4628      	mov	r0, r5
 8004a22:	f000 f919 	bl	8004c58 <_fflush_r>
 8004a26:	b988      	cbnz	r0, 8004a4c <__swbuf_r+0x90>
 8004a28:	4638      	mov	r0, r7
 8004a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <__swbuf_r+0x9c>)
 8004a2e:	429c      	cmp	r4, r3
 8004a30:	d101      	bne.n	8004a36 <__swbuf_r+0x7a>
 8004a32:	68ac      	ldr	r4, [r5, #8]
 8004a34:	e7cf      	b.n	80049d6 <__swbuf_r+0x1a>
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <__swbuf_r+0xa0>)
 8004a38:	429c      	cmp	r4, r3
 8004a3a:	bf08      	it	eq
 8004a3c:	68ec      	ldreq	r4, [r5, #12]
 8004a3e:	e7ca      	b.n	80049d6 <__swbuf_r+0x1a>
 8004a40:	4621      	mov	r1, r4
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 f80c 	bl	8004a60 <__swsetup_r>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d0cb      	beq.n	80049e4 <__swbuf_r+0x28>
 8004a4c:	f04f 37ff 	mov.w	r7, #4294967295
 8004a50:	e7ea      	b.n	8004a28 <__swbuf_r+0x6c>
 8004a52:	bf00      	nop
 8004a54:	080056ac 	.word	0x080056ac
 8004a58:	080056cc 	.word	0x080056cc
 8004a5c:	0800568c 	.word	0x0800568c

08004a60 <__swsetup_r>:
 8004a60:	4b32      	ldr	r3, [pc, #200]	; (8004b2c <__swsetup_r+0xcc>)
 8004a62:	b570      	push	{r4, r5, r6, lr}
 8004a64:	681d      	ldr	r5, [r3, #0]
 8004a66:	4606      	mov	r6, r0
 8004a68:	460c      	mov	r4, r1
 8004a6a:	b125      	cbz	r5, 8004a76 <__swsetup_r+0x16>
 8004a6c:	69ab      	ldr	r3, [r5, #24]
 8004a6e:	b913      	cbnz	r3, 8004a76 <__swsetup_r+0x16>
 8004a70:	4628      	mov	r0, r5
 8004a72:	f000 f985 	bl	8004d80 <__sinit>
 8004a76:	4b2e      	ldr	r3, [pc, #184]	; (8004b30 <__swsetup_r+0xd0>)
 8004a78:	429c      	cmp	r4, r3
 8004a7a:	d10f      	bne.n	8004a9c <__swsetup_r+0x3c>
 8004a7c:	686c      	ldr	r4, [r5, #4]
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a84:	0719      	lsls	r1, r3, #28
 8004a86:	d42c      	bmi.n	8004ae2 <__swsetup_r+0x82>
 8004a88:	06dd      	lsls	r5, r3, #27
 8004a8a:	d411      	bmi.n	8004ab0 <__swsetup_r+0x50>
 8004a8c:	2309      	movs	r3, #9
 8004a8e:	6033      	str	r3, [r6, #0]
 8004a90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a94:	81a3      	strh	r3, [r4, #12]
 8004a96:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9a:	e03e      	b.n	8004b1a <__swsetup_r+0xba>
 8004a9c:	4b25      	ldr	r3, [pc, #148]	; (8004b34 <__swsetup_r+0xd4>)
 8004a9e:	429c      	cmp	r4, r3
 8004aa0:	d101      	bne.n	8004aa6 <__swsetup_r+0x46>
 8004aa2:	68ac      	ldr	r4, [r5, #8]
 8004aa4:	e7eb      	b.n	8004a7e <__swsetup_r+0x1e>
 8004aa6:	4b24      	ldr	r3, [pc, #144]	; (8004b38 <__swsetup_r+0xd8>)
 8004aa8:	429c      	cmp	r4, r3
 8004aaa:	bf08      	it	eq
 8004aac:	68ec      	ldreq	r4, [r5, #12]
 8004aae:	e7e6      	b.n	8004a7e <__swsetup_r+0x1e>
 8004ab0:	0758      	lsls	r0, r3, #29
 8004ab2:	d512      	bpl.n	8004ada <__swsetup_r+0x7a>
 8004ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ab6:	b141      	cbz	r1, 8004aca <__swsetup_r+0x6a>
 8004ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004abc:	4299      	cmp	r1, r3
 8004abe:	d002      	beq.n	8004ac6 <__swsetup_r+0x66>
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f7ff fb9d 	bl	8004200 <_free_r>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	6363      	str	r3, [r4, #52]	; 0x34
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ad0:	81a3      	strh	r3, [r4, #12]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	6063      	str	r3, [r4, #4]
 8004ad6:	6923      	ldr	r3, [r4, #16]
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	f043 0308 	orr.w	r3, r3, #8
 8004ae0:	81a3      	strh	r3, [r4, #12]
 8004ae2:	6923      	ldr	r3, [r4, #16]
 8004ae4:	b94b      	cbnz	r3, 8004afa <__swsetup_r+0x9a>
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af0:	d003      	beq.n	8004afa <__swsetup_r+0x9a>
 8004af2:	4621      	mov	r1, r4
 8004af4:	4630      	mov	r0, r6
 8004af6:	f000 fa09 	bl	8004f0c <__smakebuf_r>
 8004afa:	89a0      	ldrh	r0, [r4, #12]
 8004afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b00:	f010 0301 	ands.w	r3, r0, #1
 8004b04:	d00a      	beq.n	8004b1c <__swsetup_r+0xbc>
 8004b06:	2300      	movs	r3, #0
 8004b08:	60a3      	str	r3, [r4, #8]
 8004b0a:	6963      	ldr	r3, [r4, #20]
 8004b0c:	425b      	negs	r3, r3
 8004b0e:	61a3      	str	r3, [r4, #24]
 8004b10:	6923      	ldr	r3, [r4, #16]
 8004b12:	b943      	cbnz	r3, 8004b26 <__swsetup_r+0xc6>
 8004b14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b18:	d1ba      	bne.n	8004a90 <__swsetup_r+0x30>
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}
 8004b1c:	0781      	lsls	r1, r0, #30
 8004b1e:	bf58      	it	pl
 8004b20:	6963      	ldrpl	r3, [r4, #20]
 8004b22:	60a3      	str	r3, [r4, #8]
 8004b24:	e7f4      	b.n	8004b10 <__swsetup_r+0xb0>
 8004b26:	2000      	movs	r0, #0
 8004b28:	e7f7      	b.n	8004b1a <__swsetup_r+0xba>
 8004b2a:	bf00      	nop
 8004b2c:	2000025c 	.word	0x2000025c
 8004b30:	080056ac 	.word	0x080056ac
 8004b34:	080056cc 	.word	0x080056cc
 8004b38:	0800568c 	.word	0x0800568c

08004b3c <abort>:
 8004b3c:	b508      	push	{r3, lr}
 8004b3e:	2006      	movs	r0, #6
 8004b40:	f000 fa58 	bl	8004ff4 <raise>
 8004b44:	2001      	movs	r0, #1
 8004b46:	f7fc fd77 	bl	8001638 <_exit>
	...

08004b4c <__sflush_r>:
 8004b4c:	898a      	ldrh	r2, [r1, #12]
 8004b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b52:	4605      	mov	r5, r0
 8004b54:	0710      	lsls	r0, r2, #28
 8004b56:	460c      	mov	r4, r1
 8004b58:	d458      	bmi.n	8004c0c <__sflush_r+0xc0>
 8004b5a:	684b      	ldr	r3, [r1, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	dc05      	bgt.n	8004b6c <__sflush_r+0x20>
 8004b60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	dc02      	bgt.n	8004b6c <__sflush_r+0x20>
 8004b66:	2000      	movs	r0, #0
 8004b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b6e:	2e00      	cmp	r6, #0
 8004b70:	d0f9      	beq.n	8004b66 <__sflush_r+0x1a>
 8004b72:	2300      	movs	r3, #0
 8004b74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b78:	682f      	ldr	r7, [r5, #0]
 8004b7a:	602b      	str	r3, [r5, #0]
 8004b7c:	d032      	beq.n	8004be4 <__sflush_r+0x98>
 8004b7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	075a      	lsls	r2, r3, #29
 8004b84:	d505      	bpl.n	8004b92 <__sflush_r+0x46>
 8004b86:	6863      	ldr	r3, [r4, #4]
 8004b88:	1ac0      	subs	r0, r0, r3
 8004b8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b8c:	b10b      	cbz	r3, 8004b92 <__sflush_r+0x46>
 8004b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b90:	1ac0      	subs	r0, r0, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	4602      	mov	r2, r0
 8004b96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b98:	6a21      	ldr	r1, [r4, #32]
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	47b0      	blx	r6
 8004b9e:	1c43      	adds	r3, r0, #1
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	d106      	bne.n	8004bb2 <__sflush_r+0x66>
 8004ba4:	6829      	ldr	r1, [r5, #0]
 8004ba6:	291d      	cmp	r1, #29
 8004ba8:	d82c      	bhi.n	8004c04 <__sflush_r+0xb8>
 8004baa:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <__sflush_r+0x108>)
 8004bac:	40ca      	lsrs	r2, r1
 8004bae:	07d6      	lsls	r6, r2, #31
 8004bb0:	d528      	bpl.n	8004c04 <__sflush_r+0xb8>
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	6062      	str	r2, [r4, #4]
 8004bb6:	04d9      	lsls	r1, r3, #19
 8004bb8:	6922      	ldr	r2, [r4, #16]
 8004bba:	6022      	str	r2, [r4, #0]
 8004bbc:	d504      	bpl.n	8004bc8 <__sflush_r+0x7c>
 8004bbe:	1c42      	adds	r2, r0, #1
 8004bc0:	d101      	bne.n	8004bc6 <__sflush_r+0x7a>
 8004bc2:	682b      	ldr	r3, [r5, #0]
 8004bc4:	b903      	cbnz	r3, 8004bc8 <__sflush_r+0x7c>
 8004bc6:	6560      	str	r0, [r4, #84]	; 0x54
 8004bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bca:	602f      	str	r7, [r5, #0]
 8004bcc:	2900      	cmp	r1, #0
 8004bce:	d0ca      	beq.n	8004b66 <__sflush_r+0x1a>
 8004bd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bd4:	4299      	cmp	r1, r3
 8004bd6:	d002      	beq.n	8004bde <__sflush_r+0x92>
 8004bd8:	4628      	mov	r0, r5
 8004bda:	f7ff fb11 	bl	8004200 <_free_r>
 8004bde:	2000      	movs	r0, #0
 8004be0:	6360      	str	r0, [r4, #52]	; 0x34
 8004be2:	e7c1      	b.n	8004b68 <__sflush_r+0x1c>
 8004be4:	6a21      	ldr	r1, [r4, #32]
 8004be6:	2301      	movs	r3, #1
 8004be8:	4628      	mov	r0, r5
 8004bea:	47b0      	blx	r6
 8004bec:	1c41      	adds	r1, r0, #1
 8004bee:	d1c7      	bne.n	8004b80 <__sflush_r+0x34>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0c4      	beq.n	8004b80 <__sflush_r+0x34>
 8004bf6:	2b1d      	cmp	r3, #29
 8004bf8:	d001      	beq.n	8004bfe <__sflush_r+0xb2>
 8004bfa:	2b16      	cmp	r3, #22
 8004bfc:	d101      	bne.n	8004c02 <__sflush_r+0xb6>
 8004bfe:	602f      	str	r7, [r5, #0]
 8004c00:	e7b1      	b.n	8004b66 <__sflush_r+0x1a>
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	e7ad      	b.n	8004b68 <__sflush_r+0x1c>
 8004c0c:	690f      	ldr	r7, [r1, #16]
 8004c0e:	2f00      	cmp	r7, #0
 8004c10:	d0a9      	beq.n	8004b66 <__sflush_r+0x1a>
 8004c12:	0793      	lsls	r3, r2, #30
 8004c14:	680e      	ldr	r6, [r1, #0]
 8004c16:	bf08      	it	eq
 8004c18:	694b      	ldreq	r3, [r1, #20]
 8004c1a:	600f      	str	r7, [r1, #0]
 8004c1c:	bf18      	it	ne
 8004c1e:	2300      	movne	r3, #0
 8004c20:	eba6 0807 	sub.w	r8, r6, r7
 8004c24:	608b      	str	r3, [r1, #8]
 8004c26:	f1b8 0f00 	cmp.w	r8, #0
 8004c2a:	dd9c      	ble.n	8004b66 <__sflush_r+0x1a>
 8004c2c:	6a21      	ldr	r1, [r4, #32]
 8004c2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c30:	4643      	mov	r3, r8
 8004c32:	463a      	mov	r2, r7
 8004c34:	4628      	mov	r0, r5
 8004c36:	47b0      	blx	r6
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	dc06      	bgt.n	8004c4a <__sflush_r+0xfe>
 8004c3c:	89a3      	ldrh	r3, [r4, #12]
 8004c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c42:	81a3      	strh	r3, [r4, #12]
 8004c44:	f04f 30ff 	mov.w	r0, #4294967295
 8004c48:	e78e      	b.n	8004b68 <__sflush_r+0x1c>
 8004c4a:	4407      	add	r7, r0
 8004c4c:	eba8 0800 	sub.w	r8, r8, r0
 8004c50:	e7e9      	b.n	8004c26 <__sflush_r+0xda>
 8004c52:	bf00      	nop
 8004c54:	20400001 	.word	0x20400001

08004c58 <_fflush_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	690b      	ldr	r3, [r1, #16]
 8004c5c:	4605      	mov	r5, r0
 8004c5e:	460c      	mov	r4, r1
 8004c60:	b913      	cbnz	r3, 8004c68 <_fflush_r+0x10>
 8004c62:	2500      	movs	r5, #0
 8004c64:	4628      	mov	r0, r5
 8004c66:	bd38      	pop	{r3, r4, r5, pc}
 8004c68:	b118      	cbz	r0, 8004c72 <_fflush_r+0x1a>
 8004c6a:	6983      	ldr	r3, [r0, #24]
 8004c6c:	b90b      	cbnz	r3, 8004c72 <_fflush_r+0x1a>
 8004c6e:	f000 f887 	bl	8004d80 <__sinit>
 8004c72:	4b14      	ldr	r3, [pc, #80]	; (8004cc4 <_fflush_r+0x6c>)
 8004c74:	429c      	cmp	r4, r3
 8004c76:	d11b      	bne.n	8004cb0 <_fflush_r+0x58>
 8004c78:	686c      	ldr	r4, [r5, #4]
 8004c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0ef      	beq.n	8004c62 <_fflush_r+0xa>
 8004c82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c84:	07d0      	lsls	r0, r2, #31
 8004c86:	d404      	bmi.n	8004c92 <_fflush_r+0x3a>
 8004c88:	0599      	lsls	r1, r3, #22
 8004c8a:	d402      	bmi.n	8004c92 <_fflush_r+0x3a>
 8004c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c8e:	f000 f915 	bl	8004ebc <__retarget_lock_acquire_recursive>
 8004c92:	4628      	mov	r0, r5
 8004c94:	4621      	mov	r1, r4
 8004c96:	f7ff ff59 	bl	8004b4c <__sflush_r>
 8004c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c9c:	07da      	lsls	r2, r3, #31
 8004c9e:	4605      	mov	r5, r0
 8004ca0:	d4e0      	bmi.n	8004c64 <_fflush_r+0xc>
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	059b      	lsls	r3, r3, #22
 8004ca6:	d4dd      	bmi.n	8004c64 <_fflush_r+0xc>
 8004ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004caa:	f000 f908 	bl	8004ebe <__retarget_lock_release_recursive>
 8004cae:	e7d9      	b.n	8004c64 <_fflush_r+0xc>
 8004cb0:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <_fflush_r+0x70>)
 8004cb2:	429c      	cmp	r4, r3
 8004cb4:	d101      	bne.n	8004cba <_fflush_r+0x62>
 8004cb6:	68ac      	ldr	r4, [r5, #8]
 8004cb8:	e7df      	b.n	8004c7a <_fflush_r+0x22>
 8004cba:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <_fflush_r+0x74>)
 8004cbc:	429c      	cmp	r4, r3
 8004cbe:	bf08      	it	eq
 8004cc0:	68ec      	ldreq	r4, [r5, #12]
 8004cc2:	e7da      	b.n	8004c7a <_fflush_r+0x22>
 8004cc4:	080056ac 	.word	0x080056ac
 8004cc8:	080056cc 	.word	0x080056cc
 8004ccc:	0800568c 	.word	0x0800568c

08004cd0 <std>:
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	b510      	push	{r4, lr}
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8004cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cde:	6083      	str	r3, [r0, #8]
 8004ce0:	8181      	strh	r1, [r0, #12]
 8004ce2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ce4:	81c2      	strh	r2, [r0, #14]
 8004ce6:	6183      	str	r3, [r0, #24]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	2208      	movs	r2, #8
 8004cec:	305c      	adds	r0, #92	; 0x5c
 8004cee:	f7ff fa7f 	bl	80041f0 <memset>
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <std+0x38>)
 8004cf4:	6263      	str	r3, [r4, #36]	; 0x24
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <std+0x3c>)
 8004cf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <std+0x40>)
 8004cfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cfe:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <std+0x44>)
 8004d00:	6224      	str	r4, [r4, #32]
 8004d02:	6323      	str	r3, [r4, #48]	; 0x30
 8004d04:	bd10      	pop	{r4, pc}
 8004d06:	bf00      	nop
 8004d08:	0800502d 	.word	0x0800502d
 8004d0c:	0800504f 	.word	0x0800504f
 8004d10:	08005087 	.word	0x08005087
 8004d14:	080050ab 	.word	0x080050ab

08004d18 <_cleanup_r>:
 8004d18:	4901      	ldr	r1, [pc, #4]	; (8004d20 <_cleanup_r+0x8>)
 8004d1a:	f000 b8af 	b.w	8004e7c <_fwalk_reent>
 8004d1e:	bf00      	nop
 8004d20:	08004c59 	.word	0x08004c59

08004d24 <__sfmoreglue>:
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	2268      	movs	r2, #104	; 0x68
 8004d28:	1e4d      	subs	r5, r1, #1
 8004d2a:	4355      	muls	r5, r2
 8004d2c:	460e      	mov	r6, r1
 8004d2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d32:	f7ff fad1 	bl	80042d8 <_malloc_r>
 8004d36:	4604      	mov	r4, r0
 8004d38:	b140      	cbz	r0, 8004d4c <__sfmoreglue+0x28>
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	e9c0 1600 	strd	r1, r6, [r0]
 8004d40:	300c      	adds	r0, #12
 8004d42:	60a0      	str	r0, [r4, #8]
 8004d44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d48:	f7ff fa52 	bl	80041f0 <memset>
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}

08004d50 <__sfp_lock_acquire>:
 8004d50:	4801      	ldr	r0, [pc, #4]	; (8004d58 <__sfp_lock_acquire+0x8>)
 8004d52:	f000 b8b3 	b.w	8004ebc <__retarget_lock_acquire_recursive>
 8004d56:	bf00      	nop
 8004d58:	200005b1 	.word	0x200005b1

08004d5c <__sfp_lock_release>:
 8004d5c:	4801      	ldr	r0, [pc, #4]	; (8004d64 <__sfp_lock_release+0x8>)
 8004d5e:	f000 b8ae 	b.w	8004ebe <__retarget_lock_release_recursive>
 8004d62:	bf00      	nop
 8004d64:	200005b1 	.word	0x200005b1

08004d68 <__sinit_lock_acquire>:
 8004d68:	4801      	ldr	r0, [pc, #4]	; (8004d70 <__sinit_lock_acquire+0x8>)
 8004d6a:	f000 b8a7 	b.w	8004ebc <__retarget_lock_acquire_recursive>
 8004d6e:	bf00      	nop
 8004d70:	200005b2 	.word	0x200005b2

08004d74 <__sinit_lock_release>:
 8004d74:	4801      	ldr	r0, [pc, #4]	; (8004d7c <__sinit_lock_release+0x8>)
 8004d76:	f000 b8a2 	b.w	8004ebe <__retarget_lock_release_recursive>
 8004d7a:	bf00      	nop
 8004d7c:	200005b2 	.word	0x200005b2

08004d80 <__sinit>:
 8004d80:	b510      	push	{r4, lr}
 8004d82:	4604      	mov	r4, r0
 8004d84:	f7ff fff0 	bl	8004d68 <__sinit_lock_acquire>
 8004d88:	69a3      	ldr	r3, [r4, #24]
 8004d8a:	b11b      	cbz	r3, 8004d94 <__sinit+0x14>
 8004d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d90:	f7ff bff0 	b.w	8004d74 <__sinit_lock_release>
 8004d94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d98:	6523      	str	r3, [r4, #80]	; 0x50
 8004d9a:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <__sinit+0x68>)
 8004d9c:	4a13      	ldr	r2, [pc, #76]	; (8004dec <__sinit+0x6c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004da2:	42a3      	cmp	r3, r4
 8004da4:	bf04      	itt	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	61a3      	streq	r3, [r4, #24]
 8004daa:	4620      	mov	r0, r4
 8004dac:	f000 f820 	bl	8004df0 <__sfp>
 8004db0:	6060      	str	r0, [r4, #4]
 8004db2:	4620      	mov	r0, r4
 8004db4:	f000 f81c 	bl	8004df0 <__sfp>
 8004db8:	60a0      	str	r0, [r4, #8]
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f000 f818 	bl	8004df0 <__sfp>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	60e0      	str	r0, [r4, #12]
 8004dc4:	2104      	movs	r1, #4
 8004dc6:	6860      	ldr	r0, [r4, #4]
 8004dc8:	f7ff ff82 	bl	8004cd0 <std>
 8004dcc:	68a0      	ldr	r0, [r4, #8]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	2109      	movs	r1, #9
 8004dd2:	f7ff ff7d 	bl	8004cd0 <std>
 8004dd6:	68e0      	ldr	r0, [r4, #12]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	2112      	movs	r1, #18
 8004ddc:	f7ff ff78 	bl	8004cd0 <std>
 8004de0:	2301      	movs	r3, #1
 8004de2:	61a3      	str	r3, [r4, #24]
 8004de4:	e7d2      	b.n	8004d8c <__sinit+0xc>
 8004de6:	bf00      	nop
 8004de8:	08005654 	.word	0x08005654
 8004dec:	08004d19 	.word	0x08004d19

08004df0 <__sfp>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	4607      	mov	r7, r0
 8004df4:	f7ff ffac 	bl	8004d50 <__sfp_lock_acquire>
 8004df8:	4b1e      	ldr	r3, [pc, #120]	; (8004e74 <__sfp+0x84>)
 8004dfa:	681e      	ldr	r6, [r3, #0]
 8004dfc:	69b3      	ldr	r3, [r6, #24]
 8004dfe:	b913      	cbnz	r3, 8004e06 <__sfp+0x16>
 8004e00:	4630      	mov	r0, r6
 8004e02:	f7ff ffbd 	bl	8004d80 <__sinit>
 8004e06:	3648      	adds	r6, #72	; 0x48
 8004e08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	d503      	bpl.n	8004e18 <__sfp+0x28>
 8004e10:	6833      	ldr	r3, [r6, #0]
 8004e12:	b30b      	cbz	r3, 8004e58 <__sfp+0x68>
 8004e14:	6836      	ldr	r6, [r6, #0]
 8004e16:	e7f7      	b.n	8004e08 <__sfp+0x18>
 8004e18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e1c:	b9d5      	cbnz	r5, 8004e54 <__sfp+0x64>
 8004e1e:	4b16      	ldr	r3, [pc, #88]	; (8004e78 <__sfp+0x88>)
 8004e20:	60e3      	str	r3, [r4, #12]
 8004e22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e26:	6665      	str	r5, [r4, #100]	; 0x64
 8004e28:	f000 f847 	bl	8004eba <__retarget_lock_init_recursive>
 8004e2c:	f7ff ff96 	bl	8004d5c <__sfp_lock_release>
 8004e30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e38:	6025      	str	r5, [r4, #0]
 8004e3a:	61a5      	str	r5, [r4, #24]
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	4629      	mov	r1, r5
 8004e40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e44:	f7ff f9d4 	bl	80041f0 <memset>
 8004e48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e50:	4620      	mov	r0, r4
 8004e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e54:	3468      	adds	r4, #104	; 0x68
 8004e56:	e7d9      	b.n	8004e0c <__sfp+0x1c>
 8004e58:	2104      	movs	r1, #4
 8004e5a:	4638      	mov	r0, r7
 8004e5c:	f7ff ff62 	bl	8004d24 <__sfmoreglue>
 8004e60:	4604      	mov	r4, r0
 8004e62:	6030      	str	r0, [r6, #0]
 8004e64:	2800      	cmp	r0, #0
 8004e66:	d1d5      	bne.n	8004e14 <__sfp+0x24>
 8004e68:	f7ff ff78 	bl	8004d5c <__sfp_lock_release>
 8004e6c:	230c      	movs	r3, #12
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	e7ee      	b.n	8004e50 <__sfp+0x60>
 8004e72:	bf00      	nop
 8004e74:	08005654 	.word	0x08005654
 8004e78:	ffff0001 	.word	0xffff0001

08004e7c <_fwalk_reent>:
 8004e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e80:	4606      	mov	r6, r0
 8004e82:	4688      	mov	r8, r1
 8004e84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e88:	2700      	movs	r7, #0
 8004e8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e8e:	f1b9 0901 	subs.w	r9, r9, #1
 8004e92:	d505      	bpl.n	8004ea0 <_fwalk_reent+0x24>
 8004e94:	6824      	ldr	r4, [r4, #0]
 8004e96:	2c00      	cmp	r4, #0
 8004e98:	d1f7      	bne.n	8004e8a <_fwalk_reent+0xe>
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ea0:	89ab      	ldrh	r3, [r5, #12]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d907      	bls.n	8004eb6 <_fwalk_reent+0x3a>
 8004ea6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	d003      	beq.n	8004eb6 <_fwalk_reent+0x3a>
 8004eae:	4629      	mov	r1, r5
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	47c0      	blx	r8
 8004eb4:	4307      	orrs	r7, r0
 8004eb6:	3568      	adds	r5, #104	; 0x68
 8004eb8:	e7e9      	b.n	8004e8e <_fwalk_reent+0x12>

08004eba <__retarget_lock_init_recursive>:
 8004eba:	4770      	bx	lr

08004ebc <__retarget_lock_acquire_recursive>:
 8004ebc:	4770      	bx	lr

08004ebe <__retarget_lock_release_recursive>:
 8004ebe:	4770      	bx	lr

08004ec0 <__swhatbuf_r>:
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	460e      	mov	r6, r1
 8004ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	b096      	sub	sp, #88	; 0x58
 8004ecc:	4614      	mov	r4, r2
 8004ece:	461d      	mov	r5, r3
 8004ed0:	da08      	bge.n	8004ee4 <__swhatbuf_r+0x24>
 8004ed2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	602a      	str	r2, [r5, #0]
 8004eda:	061a      	lsls	r2, r3, #24
 8004edc:	d410      	bmi.n	8004f00 <__swhatbuf_r+0x40>
 8004ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ee2:	e00e      	b.n	8004f02 <__swhatbuf_r+0x42>
 8004ee4:	466a      	mov	r2, sp
 8004ee6:	f000 f907 	bl	80050f8 <_fstat_r>
 8004eea:	2800      	cmp	r0, #0
 8004eec:	dbf1      	blt.n	8004ed2 <__swhatbuf_r+0x12>
 8004eee:	9a01      	ldr	r2, [sp, #4]
 8004ef0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ef4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ef8:	425a      	negs	r2, r3
 8004efa:	415a      	adcs	r2, r3
 8004efc:	602a      	str	r2, [r5, #0]
 8004efe:	e7ee      	b.n	8004ede <__swhatbuf_r+0x1e>
 8004f00:	2340      	movs	r3, #64	; 0x40
 8004f02:	2000      	movs	r0, #0
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	b016      	add	sp, #88	; 0x58
 8004f08:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f0c <__smakebuf_r>:
 8004f0c:	898b      	ldrh	r3, [r1, #12]
 8004f0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f10:	079d      	lsls	r5, r3, #30
 8004f12:	4606      	mov	r6, r0
 8004f14:	460c      	mov	r4, r1
 8004f16:	d507      	bpl.n	8004f28 <__smakebuf_r+0x1c>
 8004f18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	6123      	str	r3, [r4, #16]
 8004f20:	2301      	movs	r3, #1
 8004f22:	6163      	str	r3, [r4, #20]
 8004f24:	b002      	add	sp, #8
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	ab01      	add	r3, sp, #4
 8004f2a:	466a      	mov	r2, sp
 8004f2c:	f7ff ffc8 	bl	8004ec0 <__swhatbuf_r>
 8004f30:	9900      	ldr	r1, [sp, #0]
 8004f32:	4605      	mov	r5, r0
 8004f34:	4630      	mov	r0, r6
 8004f36:	f7ff f9cf 	bl	80042d8 <_malloc_r>
 8004f3a:	b948      	cbnz	r0, 8004f50 <__smakebuf_r+0x44>
 8004f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f40:	059a      	lsls	r2, r3, #22
 8004f42:	d4ef      	bmi.n	8004f24 <__smakebuf_r+0x18>
 8004f44:	f023 0303 	bic.w	r3, r3, #3
 8004f48:	f043 0302 	orr.w	r3, r3, #2
 8004f4c:	81a3      	strh	r3, [r4, #12]
 8004f4e:	e7e3      	b.n	8004f18 <__smakebuf_r+0xc>
 8004f50:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <__smakebuf_r+0x7c>)
 8004f52:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	6020      	str	r0, [r4, #0]
 8004f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5c:	81a3      	strh	r3, [r4, #12]
 8004f5e:	9b00      	ldr	r3, [sp, #0]
 8004f60:	6163      	str	r3, [r4, #20]
 8004f62:	9b01      	ldr	r3, [sp, #4]
 8004f64:	6120      	str	r0, [r4, #16]
 8004f66:	b15b      	cbz	r3, 8004f80 <__smakebuf_r+0x74>
 8004f68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f000 f8d5 	bl	800511c <_isatty_r>
 8004f72:	b128      	cbz	r0, 8004f80 <__smakebuf_r+0x74>
 8004f74:	89a3      	ldrh	r3, [r4, #12]
 8004f76:	f023 0303 	bic.w	r3, r3, #3
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	81a3      	strh	r3, [r4, #12]
 8004f80:	89a0      	ldrh	r0, [r4, #12]
 8004f82:	4305      	orrs	r5, r0
 8004f84:	81a5      	strh	r5, [r4, #12]
 8004f86:	e7cd      	b.n	8004f24 <__smakebuf_r+0x18>
 8004f88:	08004d19 	.word	0x08004d19

08004f8c <__malloc_lock>:
 8004f8c:	4801      	ldr	r0, [pc, #4]	; (8004f94 <__malloc_lock+0x8>)
 8004f8e:	f7ff bf95 	b.w	8004ebc <__retarget_lock_acquire_recursive>
 8004f92:	bf00      	nop
 8004f94:	200005b0 	.word	0x200005b0

08004f98 <__malloc_unlock>:
 8004f98:	4801      	ldr	r0, [pc, #4]	; (8004fa0 <__malloc_unlock+0x8>)
 8004f9a:	f7ff bf90 	b.w	8004ebe <__retarget_lock_release_recursive>
 8004f9e:	bf00      	nop
 8004fa0:	200005b0 	.word	0x200005b0

08004fa4 <_raise_r>:
 8004fa4:	291f      	cmp	r1, #31
 8004fa6:	b538      	push	{r3, r4, r5, lr}
 8004fa8:	4604      	mov	r4, r0
 8004faa:	460d      	mov	r5, r1
 8004fac:	d904      	bls.n	8004fb8 <_raise_r+0x14>
 8004fae:	2316      	movs	r3, #22
 8004fb0:	6003      	str	r3, [r0, #0]
 8004fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004fba:	b112      	cbz	r2, 8004fc2 <_raise_r+0x1e>
 8004fbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004fc0:	b94b      	cbnz	r3, 8004fd6 <_raise_r+0x32>
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f000 f830 	bl	8005028 <_getpid_r>
 8004fc8:	462a      	mov	r2, r5
 8004fca:	4601      	mov	r1, r0
 8004fcc:	4620      	mov	r0, r4
 8004fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fd2:	f000 b817 	b.w	8005004 <_kill_r>
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d00a      	beq.n	8004ff0 <_raise_r+0x4c>
 8004fda:	1c59      	adds	r1, r3, #1
 8004fdc:	d103      	bne.n	8004fe6 <_raise_r+0x42>
 8004fde:	2316      	movs	r3, #22
 8004fe0:	6003      	str	r3, [r0, #0]
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	e7e7      	b.n	8004fb6 <_raise_r+0x12>
 8004fe6:	2400      	movs	r4, #0
 8004fe8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004fec:	4628      	mov	r0, r5
 8004fee:	4798      	blx	r3
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e7e0      	b.n	8004fb6 <_raise_r+0x12>

08004ff4 <raise>:
 8004ff4:	4b02      	ldr	r3, [pc, #8]	; (8005000 <raise+0xc>)
 8004ff6:	4601      	mov	r1, r0
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	f7ff bfd3 	b.w	8004fa4 <_raise_r>
 8004ffe:	bf00      	nop
 8005000:	2000025c 	.word	0x2000025c

08005004 <_kill_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4d07      	ldr	r5, [pc, #28]	; (8005024 <_kill_r+0x20>)
 8005008:	2300      	movs	r3, #0
 800500a:	4604      	mov	r4, r0
 800500c:	4608      	mov	r0, r1
 800500e:	4611      	mov	r1, r2
 8005010:	602b      	str	r3, [r5, #0]
 8005012:	f7fc fb01 	bl	8001618 <_kill>
 8005016:	1c43      	adds	r3, r0, #1
 8005018:	d102      	bne.n	8005020 <_kill_r+0x1c>
 800501a:	682b      	ldr	r3, [r5, #0]
 800501c:	b103      	cbz	r3, 8005020 <_kill_r+0x1c>
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	bd38      	pop	{r3, r4, r5, pc}
 8005022:	bf00      	nop
 8005024:	200005b4 	.word	0x200005b4

08005028 <_getpid_r>:
 8005028:	f7fc baee 	b.w	8001608 <_getpid>

0800502c <__sread>:
 800502c:	b510      	push	{r4, lr}
 800502e:	460c      	mov	r4, r1
 8005030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005034:	f000 f894 	bl	8005160 <_read_r>
 8005038:	2800      	cmp	r0, #0
 800503a:	bfab      	itete	ge
 800503c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800503e:	89a3      	ldrhlt	r3, [r4, #12]
 8005040:	181b      	addge	r3, r3, r0
 8005042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005046:	bfac      	ite	ge
 8005048:	6563      	strge	r3, [r4, #84]	; 0x54
 800504a:	81a3      	strhlt	r3, [r4, #12]
 800504c:	bd10      	pop	{r4, pc}

0800504e <__swrite>:
 800504e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005052:	461f      	mov	r7, r3
 8005054:	898b      	ldrh	r3, [r1, #12]
 8005056:	05db      	lsls	r3, r3, #23
 8005058:	4605      	mov	r5, r0
 800505a:	460c      	mov	r4, r1
 800505c:	4616      	mov	r6, r2
 800505e:	d505      	bpl.n	800506c <__swrite+0x1e>
 8005060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005064:	2302      	movs	r3, #2
 8005066:	2200      	movs	r2, #0
 8005068:	f000 f868 	bl	800513c <_lseek_r>
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005076:	81a3      	strh	r3, [r4, #12]
 8005078:	4632      	mov	r2, r6
 800507a:	463b      	mov	r3, r7
 800507c:	4628      	mov	r0, r5
 800507e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005082:	f000 b817 	b.w	80050b4 <_write_r>

08005086 <__sseek>:
 8005086:	b510      	push	{r4, lr}
 8005088:	460c      	mov	r4, r1
 800508a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508e:	f000 f855 	bl	800513c <_lseek_r>
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	bf15      	itete	ne
 8005098:	6560      	strne	r0, [r4, #84]	; 0x54
 800509a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800509e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050a2:	81a3      	strheq	r3, [r4, #12]
 80050a4:	bf18      	it	ne
 80050a6:	81a3      	strhne	r3, [r4, #12]
 80050a8:	bd10      	pop	{r4, pc}

080050aa <__sclose>:
 80050aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ae:	f000 b813 	b.w	80050d8 <_close_r>
	...

080050b4 <_write_r>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	4d07      	ldr	r5, [pc, #28]	; (80050d4 <_write_r+0x20>)
 80050b8:	4604      	mov	r4, r0
 80050ba:	4608      	mov	r0, r1
 80050bc:	4611      	mov	r1, r2
 80050be:	2200      	movs	r2, #0
 80050c0:	602a      	str	r2, [r5, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f7fc fadf 	bl	8001686 <_write>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d102      	bne.n	80050d2 <_write_r+0x1e>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	b103      	cbz	r3, 80050d2 <_write_r+0x1e>
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
 80050d4:	200005b4 	.word	0x200005b4

080050d8 <_close_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	4d06      	ldr	r5, [pc, #24]	; (80050f4 <_close_r+0x1c>)
 80050dc:	2300      	movs	r3, #0
 80050de:	4604      	mov	r4, r0
 80050e0:	4608      	mov	r0, r1
 80050e2:	602b      	str	r3, [r5, #0]
 80050e4:	f7fc faeb 	bl	80016be <_close>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d102      	bne.n	80050f2 <_close_r+0x1a>
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	b103      	cbz	r3, 80050f2 <_close_r+0x1a>
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	200005b4 	.word	0x200005b4

080050f8 <_fstat_r>:
 80050f8:	b538      	push	{r3, r4, r5, lr}
 80050fa:	4d07      	ldr	r5, [pc, #28]	; (8005118 <_fstat_r+0x20>)
 80050fc:	2300      	movs	r3, #0
 80050fe:	4604      	mov	r4, r0
 8005100:	4608      	mov	r0, r1
 8005102:	4611      	mov	r1, r2
 8005104:	602b      	str	r3, [r5, #0]
 8005106:	f7fc fae6 	bl	80016d6 <_fstat>
 800510a:	1c43      	adds	r3, r0, #1
 800510c:	d102      	bne.n	8005114 <_fstat_r+0x1c>
 800510e:	682b      	ldr	r3, [r5, #0]
 8005110:	b103      	cbz	r3, 8005114 <_fstat_r+0x1c>
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	bd38      	pop	{r3, r4, r5, pc}
 8005116:	bf00      	nop
 8005118:	200005b4 	.word	0x200005b4

0800511c <_isatty_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4d06      	ldr	r5, [pc, #24]	; (8005138 <_isatty_r+0x1c>)
 8005120:	2300      	movs	r3, #0
 8005122:	4604      	mov	r4, r0
 8005124:	4608      	mov	r0, r1
 8005126:	602b      	str	r3, [r5, #0]
 8005128:	f7fc fae5 	bl	80016f6 <_isatty>
 800512c:	1c43      	adds	r3, r0, #1
 800512e:	d102      	bne.n	8005136 <_isatty_r+0x1a>
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	b103      	cbz	r3, 8005136 <_isatty_r+0x1a>
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	bd38      	pop	{r3, r4, r5, pc}
 8005138:	200005b4 	.word	0x200005b4

0800513c <_lseek_r>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	4d07      	ldr	r5, [pc, #28]	; (800515c <_lseek_r+0x20>)
 8005140:	4604      	mov	r4, r0
 8005142:	4608      	mov	r0, r1
 8005144:	4611      	mov	r1, r2
 8005146:	2200      	movs	r2, #0
 8005148:	602a      	str	r2, [r5, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	f7fc fade 	bl	800170c <_lseek>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d102      	bne.n	800515a <_lseek_r+0x1e>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	b103      	cbz	r3, 800515a <_lseek_r+0x1e>
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	200005b4 	.word	0x200005b4

08005160 <_read_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	4d07      	ldr	r5, [pc, #28]	; (8005180 <_read_r+0x20>)
 8005164:	4604      	mov	r4, r0
 8005166:	4608      	mov	r0, r1
 8005168:	4611      	mov	r1, r2
 800516a:	2200      	movs	r2, #0
 800516c:	602a      	str	r2, [r5, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	f7fc fa6c 	bl	800164c <_read>
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	d102      	bne.n	800517e <_read_r+0x1e>
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	b103      	cbz	r3, 800517e <_read_r+0x1e>
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	bd38      	pop	{r3, r4, r5, pc}
 8005180:	200005b4 	.word	0x200005b4

08005184 <_init>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	bf00      	nop
 8005188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518a:	bc08      	pop	{r3}
 800518c:	469e      	mov	lr, r3
 800518e:	4770      	bx	lr

08005190 <_fini>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	bf00      	nop
 8005194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005196:	bc08      	pop	{r3}
 8005198:	469e      	mov	lr, r3
 800519a:	4770      	bx	lr
