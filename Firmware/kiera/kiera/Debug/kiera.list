
kiera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005558  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005714  08005714  00015714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800578c  0800578c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800578c  0800578c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800578c  0800578c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000000c  080057a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  080057a0  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019871  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c95  00000000  00000000  000398ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000047b  00000000  00000000  0003c542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  0003c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012d8  00000000  00000000  0003dd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030854  00000000  00000000  0003f040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014be3  00000000  00000000  0006f894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012bae8  00000000  00000000  00084477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001aff5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005138  00000000  00000000  001affb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080056fc 	.word	0x080056fc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080056fc 	.word	0x080056fc

080001fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80001fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000200:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000202:	2400      	movs	r4, #0
 8000204:	9405      	str	r4, [sp, #20]
 8000206:	9406      	str	r4, [sp, #24]
 8000208:	9407      	str	r4, [sp, #28]
 800020a:	9408      	str	r4, [sp, #32]
 800020c:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800020e:	4b46      	ldr	r3, [pc, #280]	; (8000328 <_ZL12MX_GPIO_Initv+0x12c>)
 8000210:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000212:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000216:	64da      	str	r2, [r3, #76]	; 0x4c
 8000218:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800021a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800021e:	9200      	str	r2, [sp, #0]
 8000220:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000224:	f042 0201 	orr.w	r2, r2, #1
 8000228:	64da      	str	r2, [r3, #76]	; 0x4c
 800022a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800022c:	f002 0201 	and.w	r2, r2, #1
 8000230:	9201      	str	r2, [sp, #4]
 8000232:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000236:	f042 0204 	orr.w	r2, r2, #4
 800023a:	64da      	str	r2, [r3, #76]	; 0x4c
 800023c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800023e:	f002 0204 	and.w	r2, r2, #4
 8000242:	9202      	str	r2, [sp, #8]
 8000244:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000248:	f042 0208 	orr.w	r2, r2, #8
 800024c:	64da      	str	r2, [r3, #76]	; 0x4c
 800024e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000250:	f002 0208 	and.w	r2, r2, #8
 8000254:	9203      	str	r2, [sp, #12]
 8000256:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025a:	f042 0202 	orr.w	r2, r2, #2
 800025e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000262:	f003 0302 	and.w	r3, r3, #2
 8000266:	9304      	str	r3, [sp, #16]
 8000268:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin, GPIO_PIN_RESET);
 800026a:	4d30      	ldr	r5, [pc, #192]	; (800032c <_ZL12MX_GPIO_Initv+0x130>)
 800026c:	4622      	mov	r2, r4
 800026e:	21f0      	movs	r1, #240	; 0xf0
 8000270:	4628      	mov	r0, r5
 8000272:	f003 f98d 	bl	8003590 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000276:	26f0      	movs	r6, #240	; 0xf0
 8000278:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800027a:	2302      	movs	r3, #2
 800027c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000280:	2303      	movs	r3, #3
 8000282:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000284:	2305      	movs	r3, #5
 8000286:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000288:	a905      	add	r1, sp, #20
 800028a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028e:	f002 ffed 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000292:	2330      	movs	r3, #48	; 0x30
 8000294:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000296:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800029a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800029e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8000334 <_ZL12MX_GPIO_Initv+0x138>
 80002a2:	a905      	add	r1, sp, #20
 80002a4:	4640      	mov	r0, r8
 80002a6:	f002 ffe1 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW3_Pin SW4_Pin SW5_Pin */
  GPIO_InitStruct.Pin = SW3_Pin|SW4_Pin|SW5_Pin;
 80002aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80002ae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002b0:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80002b4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002b8:	a905      	add	r1, sp, #20
 80002ba:	4640      	mov	r0, r8
 80002bc:	f002 ffd6 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW6_Pin */
  GPIO_InitStruct.Pin = SW6_Pin;
 80002c0:	2304      	movs	r3, #4
 80002c2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002c4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SW6_GPIO_Port, &GPIO_InitStruct);
 80002c8:	a905      	add	r1, sp, #20
 80002ca:	4819      	ldr	r0, [pc, #100]	; (8000330 <_ZL12MX_GPIO_Initv+0x134>)
 80002cc:	f002 ffce 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : ControlLed4_Pin ControlLed3_Pin ControlLed2_Pin ControlLed1_Pin */
  GPIO_InitStruct.Pin = ControlLed4_Pin|ControlLed3_Pin|ControlLed2_Pin|ControlLed1_Pin;
 80002d0:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	2301      	movs	r3, #1
 80002d4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002da:	a905      	add	r1, sp, #20
 80002dc:	4628      	mov	r0, r5
 80002de:	f002 ffc5 	bl	800326c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80002e2:	4622      	mov	r2, r4
 80002e4:	4621      	mov	r1, r4
 80002e6:	2008      	movs	r0, #8
 80002e8:	f002 fd24 	bl	8002d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80002ec:	2008      	movs	r0, #8
 80002ee:	f002 fd3d 	bl	8002d6c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80002f2:	4622      	mov	r2, r4
 80002f4:	4621      	mov	r1, r4
 80002f6:	200a      	movs	r0, #10
 80002f8:	f002 fd1c 	bl	8002d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80002fc:	200a      	movs	r0, #10
 80002fe:	f002 fd35 	bl	8002d6c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000302:	4622      	mov	r2, r4
 8000304:	4621      	mov	r1, r4
 8000306:	2017      	movs	r0, #23
 8000308:	f002 fd14 	bl	8002d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800030c:	2017      	movs	r0, #23
 800030e:	f002 fd2d 	bl	8002d6c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000312:	4622      	mov	r2, r4
 8000314:	4621      	mov	r1, r4
 8000316:	2028      	movs	r0, #40	; 0x28
 8000318:	f002 fd0c 	bl	8002d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800031c:	2028      	movs	r0, #40	; 0x28
 800031e:	f002 fd25 	bl	8002d6c <HAL_NVIC_EnableIRQ>

}
 8000322:	b00a      	add	sp, #40	; 0x28
 8000324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000328:	40021000 	.word	0x40021000
 800032c:	48000400 	.word	0x48000400
 8000330:	48000c00 	.word	0x48000c00
 8000334:	48000800 	.word	0x48000800

08000338 <_ZL11MX_DMA_Initv>:
{
 8000338:	b500      	push	{lr}
 800033a:	b085      	sub	sp, #20
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800033c:	4b17      	ldr	r3, [pc, #92]	; (800039c <_ZL11MX_DMA_Initv+0x64>)
 800033e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000340:	f042 0204 	orr.w	r2, r2, #4
 8000344:	649a      	str	r2, [r3, #72]	; 0x48
 8000346:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000348:	f002 0204 	and.w	r2, r2, #4
 800034c:	9201      	str	r2, [sp, #4]
 800034e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000350:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000352:	f042 0201 	orr.w	r2, r2, #1
 8000356:	649a      	str	r2, [r3, #72]	; 0x48
 8000358:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800035a:	f002 0201 	and.w	r2, r2, #1
 800035e:	9202      	str	r2, [sp, #8]
 8000360:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000364:	f042 0202 	orr.w	r2, r2, #2
 8000368:	649a      	str	r2, [r3, #72]	; 0x48
 800036a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800036c:	f003 0302 	and.w	r3, r3, #2
 8000370:	9303      	str	r3, [sp, #12]
 8000372:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000374:	2200      	movs	r2, #0
 8000376:	4611      	mov	r1, r2
 8000378:	2010      	movs	r0, #16
 800037a:	f002 fcdb 	bl	8002d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800037e:	2010      	movs	r0, #16
 8000380:	f002 fcf4 	bl	8002d6c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8000384:	2200      	movs	r2, #0
 8000386:	4611      	mov	r1, r2
 8000388:	2045      	movs	r0, #69	; 0x45
 800038a:	f002 fcd3 	bl	8002d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 800038e:	2045      	movs	r0, #69	; 0x45
 8000390:	f002 fcec 	bl	8002d6c <HAL_NVIC_EnableIRQ>
}
 8000394:	b005      	add	sp, #20
 8000396:	f85d fb04 	ldr.w	pc, [sp], #4
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000

080003a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003a0:	b510      	push	{r4, lr}
 80003a2:	4604      	mov	r4, r0
	timer = HAL_GetTick();
 80003a4:	f000 fdc0 	bl	8000f28 <HAL_GetTick>
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <HAL_GPIO_EXTI_Callback+0x44>)
 80003aa:	6018      	str	r0, [r3, #0]

	if (GPIO_Pin == SW3_Pin)
 80003ac:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80003b0:	d00b      	beq.n	80003ca <HAL_GPIO_EXTI_Callback+0x2a>
	{
		sw3_pressed = 1;
//		HAL_GPIO_TogglePin(ControlLed4_GPIO_Port, ControlLed4_Pin);
	} else if (GPIO_Pin == SW4_Pin)
 80003b2:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 80003b6:	d00c      	beq.n	80003d2 <HAL_GPIO_EXTI_Callback+0x32>
	{
		sw4_pressed = 1;
//		HAL_GPIO_TogglePin(ControlLed3_GPIO_Port, ControlLed3_Pin);
	} else if (GPIO_Pin == SW5_Pin)
 80003b8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80003bc:	d00d      	beq.n	80003da <HAL_GPIO_EXTI_Callback+0x3a>
	{
		sw5_pressed = 1;
//		HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
	} else if (GPIO_Pin == SW6_Pin)
 80003be:	2c04      	cmp	r4, #4
 80003c0:	d106      	bne.n	80003d0 <HAL_GPIO_EXTI_Callback+0x30>
	{
		sw6_pressed = 1;
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <HAL_GPIO_EXTI_Callback+0x48>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	701a      	strb	r2, [r3, #0]
//		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
	}
}
 80003c8:	e002      	b.n	80003d0 <HAL_GPIO_EXTI_Callback+0x30>
		sw3_pressed = 1;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <HAL_GPIO_EXTI_Callback+0x4c>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	701a      	strb	r2, [r3, #0]
}
 80003d0:	bd10      	pop	{r4, pc}
		sw4_pressed = 1;
 80003d2:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <HAL_GPIO_EXTI_Callback+0x50>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	701a      	strb	r2, [r3, #0]
 80003d8:	e7fa      	b.n	80003d0 <HAL_GPIO_EXTI_Callback+0x30>
		sw5_pressed = 1;
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <HAL_GPIO_EXTI_Callback+0x54>)
 80003dc:	2201      	movs	r2, #1
 80003de:	701a      	strb	r2, [r3, #0]
 80003e0:	e7f6      	b.n	80003d0 <HAL_GPIO_EXTI_Callback+0x30>
 80003e2:	bf00      	nop
 80003e4:	2000021c 	.word	0x2000021c
 80003e8:	2000021b 	.word	0x2000021b
 80003ec:	20000218 	.word	0x20000218
 80003f0:	20000219 	.word	0x20000219
 80003f4:	2000021a 	.word	0x2000021a

080003f8 <heartbeat>:

void heartbeat()
{
 80003f8:	b510      	push	{r4, lr}
 80003fa:	b08a      	sub	sp, #40	; 0x28

	PUTM_CAN::Steering_Wheel_main pcb_alive{0, PUTM_CAN::Steering_Wheel_states::OK};
 80003fc:	2300      	movs	r3, #0
 80003fe:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8000402:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  CAN_TxHeaderTypeDef header;
  uint8_t buff[max_dlc_size];

  constexpr Can_tx_message(const T &data,
                           const CAN_TxHeaderTypeDef &message_header)
      : header{message_header} {
 8000406:	f10d 0c04 	add.w	ip, sp, #4
 800040a:	4c0b      	ldr	r4, [pc, #44]	; (8000438 <heartbeat+0x40>)
 800040c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800040e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000412:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000416:	e88c 0003 	stmia.w	ip, {r0, r1}
    static_assert(std::is_standard_layout<T>(), "Object must by C like struct");
    static_assert(std::is_trivially_copyable<T>(),
                  "Object must by C like struct");
    static_assert(sizeof(T) <= max_dlc_size,
                  "Object size must be less than 8bytes");
    std::memcpy(this->buff, &data, sizeof(T));
 800041a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800041c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000420:	0c1b      	lsrs	r3, r3, #16
 8000422:	f88d 301e 	strb.w	r3, [sp, #30]
  }

  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
    static uint32_t TxMailbox(0);
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <heartbeat+0x44>)
 8000428:	aa07      	add	r2, sp, #28
 800042a:	a901      	add	r1, sp, #4
 800042c:	4804      	ldr	r0, [pc, #16]	; (8000440 <heartbeat+0x48>)
 800042e:	f002 fad2 	bl	80029d6 <HAL_CAN_AddTxMessage>

	auto steering_wheel_heartbeat = PUTM_CAN::Can_tx_message<PUTM_CAN::Steering_Wheel_main>
	(pcb_alive, PUTM_CAN::can_tx_header_STEERING_WHEEL_MAIN);

 	steering_wheel_heartbeat.send(hcan1);
}
 8000432:	b00a      	add	sp, #40	; 0x28
 8000434:	bd10      	pop	{r4, pc}
 8000436:	bf00      	nop
 8000438:	08005714 	.word	0x08005714
 800043c:	2000002c 	.word	0x2000002c
 8000440:	20000100 	.word	0x20000100

08000444 <choose_left_scroll_state>:
	reset_flags();

}

void choose_left_scroll_state()
{
 8000444:	b510      	push	{r4, lr}
	float average_adc = 0;

	//	  calculate average adc
	for (int i = 0; i < 10; i++) {
 8000446:	2300      	movs	r3, #0
	float average_adc = 0;
 8000448:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8000544 <choose_left_scroll_state+0x100>
 800044c:	e009      	b.n	8000462 <choose_left_scroll_state+0x1e>
		average_adc = average_adc + left_adc_reading[i];
 800044e:	4a3e      	ldr	r2, [pc, #248]	; (8000548 <choose_left_scroll_state+0x104>)
 8000450:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000454:	ee07 2a90 	vmov	s15, r2
 8000458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800045c:	ee37 7a27 	vadd.f32	s14, s14, s15
	for (int i = 0; i < 10; i++) {
 8000460:	3301      	adds	r3, #1
 8000462:	2b09      	cmp	r3, #9
 8000464:	ddf3      	ble.n	800044e <choose_left_scroll_state+0xa>
	}

	average_adc = average_adc / 10;
 8000466:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800046a:	eec7 7a26 	vdiv.f32	s15, s14, s13

	int lss = 0; // Left Scroll State

	if (1110 < average_adc && average_adc < 1115)
 800046e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800054c <choose_left_scroll_state+0x108>
 8000472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800047a:	dd06      	ble.n	800048a <choose_left_scroll_state+0x46>
 800047c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8000550 <choose_left_scroll_state+0x10c>
 8000480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000488:	d42b      	bmi.n	80004e2 <choose_left_scroll_state+0x9e>
	{
		lss = 1;
	} else if (3129 < average_adc && average_adc < 3133)
 800048a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000554 <choose_left_scroll_state+0x110>
 800048e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000496:	dd06      	ble.n	80004a6 <choose_left_scroll_state+0x62>
 8000498:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000558 <choose_left_scroll_state+0x114>
 800049c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004a4:	d429      	bmi.n	80004fa <choose_left_scroll_state+0xb6>
	{
		lss = 2;
	} else if (3715 < average_adc && average_adc < 3721)
 80004a6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800055c <choose_left_scroll_state+0x118>
 80004aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004b2:	dd06      	ble.n	80004c2 <choose_left_scroll_state+0x7e>
 80004b4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000560 <choose_left_scroll_state+0x11c>
 80004b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004c0:	d41d      	bmi.n	80004fe <choose_left_scroll_state+0xba>
	{
		lss = 3;
	} else if (3970 < average_adc && average_adc < 3975)
 80004c2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000564 <choose_left_scroll_state+0x120>
 80004c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004ce:	dd18      	ble.n	8000502 <choose_left_scroll_state+0xbe>
 80004d0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000568 <choose_left_scroll_state+0x124>
 80004d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004dc:	d413      	bmi.n	8000506 <choose_left_scroll_state+0xc2>
	int lss = 0; // Left Scroll State
 80004de:	2400      	movs	r4, #0
 80004e0:	e000      	b.n	80004e4 <choose_left_scroll_state+0xa0>
		lss = 1;
 80004e2:	2401      	movs	r4, #1
	{
		lss = 4;
	}


	if (lss != left_last_state)
 80004e4:	4b21      	ldr	r3, [pc, #132]	; (800056c <choose_left_scroll_state+0x128>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	42a3      	cmp	r3, r4
 80004ea:	d014      	beq.n	8000516 <choose_left_scroll_state+0xd2>
	{
		switch (lss)
 80004ec:	1e63      	subs	r3, r4, #1
 80004ee:	2b03      	cmp	r3, #3
 80004f0:	d811      	bhi.n	8000516 <choose_left_scroll_state+0xd2>
 80004f2:	e8df f003 	tbb	[pc, r3]
 80004f6:	110a      	.short	0x110a
 80004f8:	1f18      	.short	0x1f18
		lss = 2;
 80004fa:	2402      	movs	r4, #2
 80004fc:	e7f2      	b.n	80004e4 <choose_left_scroll_state+0xa0>
		lss = 3;
 80004fe:	2403      	movs	r4, #3
 8000500:	e7f0      	b.n	80004e4 <choose_left_scroll_state+0xa0>
	int lss = 0; // Left Scroll State
 8000502:	2400      	movs	r4, #0
 8000504:	e7ee      	b.n	80004e4 <choose_left_scroll_state+0xa0>
		lss = 4;
 8000506:	2404      	movs	r4, #4
 8000508:	e7ec      	b.n	80004e4 <choose_left_scroll_state+0xa0>
		{
		case 1:
			HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	4818      	ldr	r0, [pc, #96]	; (8000570 <choose_left_scroll_state+0x12c>)
 800050e:	f003 f857 	bl	80035c0 <HAL_GPIO_TogglePin>
//			HAL_Delay(200);
			left_last_state = lss;
 8000512:	4b16      	ldr	r3, [pc, #88]	; (800056c <choose_left_scroll_state+0x128>)
 8000514:	601c      	str	r4, [r3, #0]
//			HAL_Delay(200);
			left_last_state = lss;
			break;
		}
	}
}
 8000516:	bd10      	pop	{r4, pc}
			HAL_GPIO_TogglePin(ControlLed2_GPIO_Port, ControlLed2_Pin);
 8000518:	2140      	movs	r1, #64	; 0x40
 800051a:	4815      	ldr	r0, [pc, #84]	; (8000570 <choose_left_scroll_state+0x12c>)
 800051c:	f003 f850 	bl	80035c0 <HAL_GPIO_TogglePin>
			left_last_state = lss;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <choose_left_scroll_state+0x128>)
 8000522:	601c      	str	r4, [r3, #0]
			break;
 8000524:	e7f7      	b.n	8000516 <choose_left_scroll_state+0xd2>
			HAL_GPIO_TogglePin(ControlLed3_GPIO_Port, ControlLed3_Pin);
 8000526:	2120      	movs	r1, #32
 8000528:	4811      	ldr	r0, [pc, #68]	; (8000570 <choose_left_scroll_state+0x12c>)
 800052a:	f003 f849 	bl	80035c0 <HAL_GPIO_TogglePin>
			left_last_state = lss;
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <choose_left_scroll_state+0x128>)
 8000530:	601c      	str	r4, [r3, #0]
			break;
 8000532:	e7f0      	b.n	8000516 <choose_left_scroll_state+0xd2>
			HAL_GPIO_TogglePin(ControlLed4_GPIO_Port, ControlLed4_Pin);
 8000534:	2110      	movs	r1, #16
 8000536:	480e      	ldr	r0, [pc, #56]	; (8000570 <choose_left_scroll_state+0x12c>)
 8000538:	f003 f842 	bl	80035c0 <HAL_GPIO_TogglePin>
			left_last_state = lss;
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <choose_left_scroll_state+0x128>)
 800053e:	601c      	str	r4, [r3, #0]
}
 8000540:	e7e9      	b.n	8000516 <choose_left_scroll_state+0xd2>
 8000542:	bf00      	nop
 8000544:	00000000 	.word	0x00000000
 8000548:	200001ec 	.word	0x200001ec
 800054c:	448ac000 	.word	0x448ac000
 8000550:	448b6000 	.word	0x448b6000
 8000554:	45439000 	.word	0x45439000
 8000558:	4543d000 	.word	0x4543d000
 800055c:	45683000 	.word	0x45683000
 8000560:	45689000 	.word	0x45689000
 8000564:	45782000 	.word	0x45782000
 8000568:	45787000 	.word	0x45787000
 800056c:	20000200 	.word	0x20000200
 8000570:	48000400 	.word	0x48000400

08000574 <reset_flags>:
	}
}

void reset_flags()
{
	sw3_pressed = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	4a04      	ldr	r2, [pc, #16]	; (8000588 <reset_flags+0x14>)
 8000578:	7013      	strb	r3, [r2, #0]
	sw4_pressed = 0;
 800057a:	4a04      	ldr	r2, [pc, #16]	; (800058c <reset_flags+0x18>)
 800057c:	7013      	strb	r3, [r2, #0]
	sw5_pressed = 0;
 800057e:	4a04      	ldr	r2, [pc, #16]	; (8000590 <reset_flags+0x1c>)
 8000580:	7013      	strb	r3, [r2, #0]
	sw6_pressed = 0;
 8000582:	4a04      	ldr	r2, [pc, #16]	; (8000594 <reset_flags+0x20>)
 8000584:	7013      	strb	r3, [r2, #0]
}
 8000586:	4770      	bx	lr
 8000588:	20000218 	.word	0x20000218
 800058c:	20000219 	.word	0x20000219
 8000590:	2000021a 	.word	0x2000021a
 8000594:	2000021b 	.word	0x2000021b

08000598 <wait_for_second_button>:
{
 8000598:	b510      	push	{r4, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
	HAL_Delay(500);
 800059c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005a0:	f000 fcce 	bl	8000f40 <HAL_Delay>
	PUTM_CAN::Steering_Wheel_event button_pressed{};
 80005a4:	2300      	movs	r3, #0
 80005a6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80005aa:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	if (sw3_pressed && sw4_pressed)
 80005ae:	4b3f      	ldr	r3, [pc, #252]	; (80006ac <wait_for_second_button+0x114>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b1fb      	cbz	r3, 80005f4 <wait_for_second_button+0x5c>
 80005b4:	4a3e      	ldr	r2, [pc, #248]	; (80006b0 <wait_for_second_button+0x118>)
 80005b6:	7812      	ldrb	r2, [r2, #0]
 80005b8:	b1e2      	cbz	r2, 80005f4 <wait_for_second_button+0x5c>
		button_pressed.button = PUTM_CAN::buttonStates::button1_2;
 80005ba:	2305      	movs	r3, #5
 80005bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      : header{message_header} {
 80005c0:	f10d 0c04 	add.w	ip, sp, #4
 80005c4:	4c3b      	ldr	r4, [pc, #236]	; (80006b4 <wait_for_second_button+0x11c>)
 80005c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80005cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005d0:	e88c 0003 	stmia.w	ip, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80005d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80005d6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80005da:	0c1b      	lsrs	r3, r3, #16
 80005dc:	f88d 301e 	strb.w	r3, [sp, #30]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80005e0:	4b35      	ldr	r3, [pc, #212]	; (80006b8 <wait_for_second_button+0x120>)
 80005e2:	aa07      	add	r2, sp, #28
 80005e4:	a901      	add	r1, sp, #4
 80005e6:	4835      	ldr	r0, [pc, #212]	; (80006bc <wait_for_second_button+0x124>)
 80005e8:	f002 f9f5 	bl	80029d6 <HAL_CAN_AddTxMessage>
	reset_flags();
 80005ec:	f7ff ffc2 	bl	8000574 <reset_flags>
}
 80005f0:	b00a      	add	sp, #40	; 0x28
 80005f2:	bd10      	pop	{r4, pc}
	} else if (sw3_pressed && sw5_pressed)
 80005f4:	b133      	cbz	r3, 8000604 <wait_for_second_button+0x6c>
 80005f6:	4a32      	ldr	r2, [pc, #200]	; (80006c0 <wait_for_second_button+0x128>)
 80005f8:	7812      	ldrb	r2, [r2, #0]
 80005fa:	b11a      	cbz	r2, 8000604 <wait_for_second_button+0x6c>
		button_pressed.button = PUTM_CAN::buttonStates::button1_3;
 80005fc:	2306      	movs	r3, #6
 80005fe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000602:	e7dd      	b.n	80005c0 <wait_for_second_button+0x28>
	} else if (sw3_pressed && sw6_pressed)
 8000604:	b113      	cbz	r3, 800060c <wait_for_second_button+0x74>
 8000606:	4a2f      	ldr	r2, [pc, #188]	; (80006c4 <wait_for_second_button+0x12c>)
 8000608:	7812      	ldrb	r2, [r2, #0]
 800060a:	b96a      	cbnz	r2, 8000628 <wait_for_second_button+0x90>
	} else if (sw4_pressed && sw5_pressed)
 800060c:	4a28      	ldr	r2, [pc, #160]	; (80006b0 <wait_for_second_button+0x118>)
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	b112      	cbz	r2, 8000618 <wait_for_second_button+0x80>
 8000612:	492b      	ldr	r1, [pc, #172]	; (80006c0 <wait_for_second_button+0x128>)
 8000614:	7809      	ldrb	r1, [r1, #0]
 8000616:	b979      	cbnz	r1, 8000638 <wait_for_second_button+0xa0>
	} else if (sw4_pressed && sw6_pressed)
 8000618:	b1b2      	cbz	r2, 8000648 <wait_for_second_button+0xb0>
 800061a:	492a      	ldr	r1, [pc, #168]	; (80006c4 <wait_for_second_button+0x12c>)
 800061c:	7809      	ldrb	r1, [r1, #0]
 800061e:	b199      	cbz	r1, 8000648 <wait_for_second_button+0xb0>
		button_pressed.button = PUTM_CAN::buttonStates::button2_4;
 8000620:	2309      	movs	r3, #9
 8000622:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000626:	e7cb      	b.n	80005c0 <wait_for_second_button+0x28>
		button_pressed.button = PUTM_CAN::buttonStates::button1_4;
 8000628:	2307      	movs	r3, #7
 800062a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		HAL_GPIO_TogglePin(ControlLed4_GPIO_Port, ControlLed4_Pin);
 800062e:	2110      	movs	r1, #16
 8000630:	4825      	ldr	r0, [pc, #148]	; (80006c8 <wait_for_second_button+0x130>)
 8000632:	f002 ffc5 	bl	80035c0 <HAL_GPIO_TogglePin>
 8000636:	e7c3      	b.n	80005c0 <wait_for_second_button+0x28>
		button_pressed.button = PUTM_CAN::buttonStates::button2_3;
 8000638:	2308      	movs	r3, #8
 800063a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	4821      	ldr	r0, [pc, #132]	; (80006c8 <wait_for_second_button+0x130>)
 8000642:	f002 ffbd 	bl	80035c0 <HAL_GPIO_TogglePin>
 8000646:	e7bb      	b.n	80005c0 <wait_for_second_button+0x28>
	} else if (sw5_pressed && sw6_pressed)
 8000648:	491d      	ldr	r1, [pc, #116]	; (80006c0 <wait_for_second_button+0x128>)
 800064a:	7809      	ldrb	r1, [r1, #0]
 800064c:	b131      	cbz	r1, 800065c <wait_for_second_button+0xc4>
 800064e:	481d      	ldr	r0, [pc, #116]	; (80006c4 <wait_for_second_button+0x12c>)
 8000650:	7800      	ldrb	r0, [r0, #0]
 8000652:	b118      	cbz	r0, 800065c <wait_for_second_button+0xc4>
		button_pressed.button = PUTM_CAN::buttonStates::button3_4;
 8000654:	230a      	movs	r3, #10
 8000656:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800065a:	e7b1      	b.n	80005c0 <wait_for_second_button+0x28>
	} else if (sw3_pressed) {
 800065c:	b11b      	cbz	r3, 8000666 <wait_for_second_button+0xce>
		button_pressed.button = PUTM_CAN::buttonStates::button1;
 800065e:	2301      	movs	r3, #1
 8000660:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000664:	e7ac      	b.n	80005c0 <wait_for_second_button+0x28>
	} else if (sw4_pressed) {
 8000666:	b962      	cbnz	r2, 8000682 <wait_for_second_button+0xea>
	} else if (sw5_pressed) {
 8000668:	b999      	cbnz	r1, 8000692 <wait_for_second_button+0xfa>
	} else if (sw6_pressed) {
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <wait_for_second_button+0x12c>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0a6      	beq.n	80005c0 <wait_for_second_button+0x28>
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 8000672:	2180      	movs	r1, #128	; 0x80
 8000674:	4814      	ldr	r0, [pc, #80]	; (80006c8 <wait_for_second_button+0x130>)
 8000676:	f002 ffa3 	bl	80035c0 <HAL_GPIO_TogglePin>
		button_pressed.button = PUTM_CAN::buttonStates::button4;
 800067a:	2304      	movs	r3, #4
 800067c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000680:	e79e      	b.n	80005c0 <wait_for_second_button+0x28>
		button_pressed.button = PUTM_CAN::buttonStates::button2;
 8000682:	2302      	movs	r3, #2
 8000684:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 8000688:	2180      	movs	r1, #128	; 0x80
 800068a:	480f      	ldr	r0, [pc, #60]	; (80006c8 <wait_for_second_button+0x130>)
 800068c:	f002 ff98 	bl	80035c0 <HAL_GPIO_TogglePin>
 8000690:	e796      	b.n	80005c0 <wait_for_second_button+0x28>
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 8000692:	4c0d      	ldr	r4, [pc, #52]	; (80006c8 <wait_for_second_button+0x130>)
 8000694:	2180      	movs	r1, #128	; 0x80
 8000696:	4620      	mov	r0, r4
 8000698:	f002 ff92 	bl	80035c0 <HAL_GPIO_TogglePin>
		button_pressed.button = PUTM_CAN::buttonStates::button3;
 800069c:	2303      	movs	r3, #3
 800069e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		HAL_GPIO_TogglePin(ControlLed1_GPIO_Port, ControlLed1_Pin);
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	4620      	mov	r0, r4
 80006a6:	f002 ff8b 	bl	80035c0 <HAL_GPIO_TogglePin>
 80006aa:	e789      	b.n	80005c0 <wait_for_second_button+0x28>
 80006ac:	20000218 	.word	0x20000218
 80006b0:	20000219 	.word	0x20000219
 80006b4:	0800572c 	.word	0x0800572c
 80006b8:	20000028 	.word	0x20000028
 80006bc:	20000100 	.word	0x20000100
 80006c0:	2000021a 	.word	0x2000021a
 80006c4:	2000021b 	.word	0x2000021b
 80006c8:	48000400 	.word	0x48000400

080006cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006ce:	6802      	ldr	r2, [r0, #0]
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d000      	beq.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006d6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80006d8:	f000 fc12 	bl	8000f00 <HAL_IncTick>
}
 80006dc:	e7fb      	b.n	80006d6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80006de:	bf00      	nop
 80006e0:	40012c00 	.word	0x40012c00

080006e4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <Error_Handler+0x2>

080006e8 <_ZL12MX_CAN1_Initv>:
{
 80006e8:	b508      	push	{r3, lr}
  hcan1.Instance = CAN1;
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <_ZL12MX_CAN1_Initv+0x34>)
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <_ZL12MX_CAN1_Initv+0x38>)
 80006ee:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 26;
 80006f0:	231a      	movs	r3, #26
 80006f2:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006f8:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80006fa:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80006fe:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000700:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000702:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000704:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000706:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000708:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800070a:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800070c:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800070e:	f001 ff59 	bl	80025c4 <HAL_CAN_Init>
 8000712:	b900      	cbnz	r0, 8000716 <_ZL12MX_CAN1_Initv+0x2e>
}
 8000714:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000716:	f7ff ffe5 	bl	80006e4 <Error_Handler>
 800071a:	bf00      	nop
 800071c:	20000100 	.word	0x20000100
 8000720:	40006400 	.word	0x40006400

08000724 <_ZL12MX_ADC1_Initv>:
{
 8000724:	b500      	push	{lr}
 8000726:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8000728:	2300      	movs	r3, #0
 800072a:	9307      	str	r3, [sp, #28]
 800072c:	9308      	str	r3, [sp, #32]
 800072e:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	9303      	str	r3, [sp, #12]
 8000736:	9304      	str	r3, [sp, #16]
 8000738:	9305      	str	r3, [sp, #20]
 800073a:	9306      	str	r3, [sp, #24]
  hadc1.Instance = ADC1;
 800073c:	481d      	ldr	r0, [pc, #116]	; (80007b4 <_ZL12MX_ADC1_Initv+0x90>)
 800073e:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <_ZL12MX_ADC1_Initv+0x94>)
 8000740:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000742:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 8000746:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000748:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074a:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074c:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	2204      	movs	r2, #4
 8000750:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000752:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000754:	2201      	movs	r2, #1
 8000756:	7642      	strb	r2, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000758:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075a:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075e:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000760:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000762:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000766:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000768:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076c:	f000 fdf4 	bl	8001358 <HAL_ADC_Init>
 8000770:	b9d0      	cbnz	r0, 80007a8 <_ZL12MX_ADC1_Initv+0x84>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000772:	2300      	movs	r3, #0
 8000774:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000776:	a907      	add	r1, sp, #28
 8000778:	480e      	ldr	r0, [pc, #56]	; (80007b4 <_ZL12MX_ADC1_Initv+0x90>)
 800077a:	f001 fe7f 	bl	800247c <HAL_ADCEx_MultiModeConfigChannel>
 800077e:	b9a8      	cbnz	r0, 80007ac <_ZL12MX_ADC1_Initv+0x88>
  sConfig.Channel = ADC_CHANNEL_6;
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <_ZL12MX_ADC1_Initv+0x98>)
 8000782:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000784:	2306      	movs	r3, #6
 8000786:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000788:	2307      	movs	r3, #7
 800078a:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800078c:	237f      	movs	r3, #127	; 0x7f
 800078e:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000790:	2304      	movs	r3, #4
 8000792:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000798:	a901      	add	r1, sp, #4
 800079a:	4806      	ldr	r0, [pc, #24]	; (80007b4 <_ZL12MX_ADC1_Initv+0x90>)
 800079c:	f001 f932 	bl	8001a04 <HAL_ADC_ConfigChannel>
 80007a0:	b930      	cbnz	r0, 80007b0 <_ZL12MX_ADC1_Initv+0x8c>
}
 80007a2:	b00b      	add	sp, #44	; 0x2c
 80007a4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80007a8:	f7ff ff9c 	bl	80006e4 <Error_Handler>
    Error_Handler();
 80007ac:	f7ff ff9a 	bl	80006e4 <Error_Handler>
    Error_Handler();
 80007b0:	f7ff ff98 	bl	80006e4 <Error_Handler>
 80007b4:	20000030 	.word	0x20000030
 80007b8:	50040000 	.word	0x50040000
 80007bc:	19200040 	.word	0x19200040

080007c0 <_ZL12MX_ADC2_Initv>:
{
 80007c0:	b500      	push	{lr}
 80007c2:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 80007c4:	2300      	movs	r3, #0
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	9302      	str	r3, [sp, #8]
 80007cc:	9303      	str	r3, [sp, #12]
 80007ce:	9304      	str	r3, [sp, #16]
 80007d0:	9305      	str	r3, [sp, #20]
  hadc2.Instance = ADC2;
 80007d2:	4819      	ldr	r0, [pc, #100]	; (8000838 <_ZL12MX_ADC2_Initv+0x78>)
 80007d4:	4a19      	ldr	r2, [pc, #100]	; (800083c <_ZL12MX_ADC2_Initv+0x7c>)
 80007d6:	6002      	str	r2, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 80007d8:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 80007dc:	6042      	str	r2, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007de:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e0:	60c3      	str	r3, [r0, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e2:	6103      	str	r3, [r0, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e4:	2204      	movs	r2, #4
 80007e6:	6142      	str	r2, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007e8:	7603      	strb	r3, [r0, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007ea:	2201      	movs	r2, #1
 80007ec:	7642      	strb	r2, [r0, #25]
  hadc2.Init.NbrOfConversion = 1;
 80007ee:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007f0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	6283      	str	r3, [r0, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80007f8:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fc:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80007fe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000802:	f000 fda9 	bl	8001358 <HAL_ADC_Init>
 8000806:	b990      	cbnz	r0, 800082e <_ZL12MX_ADC2_Initv+0x6e>
  sConfig.Channel = ADC_CHANNEL_7;
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <_ZL12MX_ADC2_Initv+0x80>)
 800080a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800080c:	2306      	movs	r3, #6
 800080e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000810:	2300      	movs	r3, #0
 8000812:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000814:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <_ZL12MX_ADC2_Initv+0x84>)
 8000816:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000818:	2204      	movs	r2, #4
 800081a:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 800081c:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800081e:	4669      	mov	r1, sp
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <_ZL12MX_ADC2_Initv+0x78>)
 8000822:	f001 f8ef 	bl	8001a04 <HAL_ADC_ConfigChannel>
 8000826:	b920      	cbnz	r0, 8000832 <_ZL12MX_ADC2_Initv+0x72>
}
 8000828:	b007      	add	sp, #28
 800082a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800082e:	f7ff ff59 	bl	80006e4 <Error_Handler>
    Error_Handler();
 8000832:	f7ff ff57 	bl	80006e4 <Error_Handler>
 8000836:	bf00      	nop
 8000838:	20000098 	.word	0x20000098
 800083c:	50040100 	.word	0x50040100
 8000840:	1d500080 	.word	0x1d500080
 8000844:	407f0000 	.word	0x407f0000

08000848 <_Z18SystemClock_Configv>:
{
 8000848:	b500      	push	{lr}
 800084a:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084c:	2248      	movs	r2, #72	; 0x48
 800084e:	2100      	movs	r1, #0
 8000850:	a806      	add	r0, sp, #24
 8000852:	f004 ff4b 	bl	80056ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000856:	2000      	movs	r0, #0
 8000858:	9001      	str	r0, [sp, #4]
 800085a:	9002      	str	r0, [sp, #8]
 800085c:	9003      	str	r0, [sp, #12]
 800085e:	9004      	str	r0, [sp, #16]
 8000860:	9005      	str	r0, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000862:	f002 feff 	bl	8003664 <HAL_PWREx_ControlVoltageScaling>
 8000866:	bb20      	cbnz	r0, 80008b2 <_Z18SystemClock_Configv+0x6a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000868:	2310      	movs	r3, #16
 800086a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800086c:	2201      	movs	r2, #1
 800086e:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000874:	2360      	movs	r3, #96	; 0x60
 8000876:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000878:	2302      	movs	r3, #2
 800087a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800087c:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800087e:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000880:	223c      	movs	r2, #60	; 0x3c
 8000882:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000884:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000886:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000888:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	a806      	add	r0, sp, #24
 800088c:	f002 ff8e 	bl	80037ac <HAL_RCC_OscConfig>
 8000890:	b988      	cbnz	r0, 80008b6 <_Z18SystemClock_Configv+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	230f      	movs	r3, #15
 8000894:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2303      	movs	r3, #3
 8000898:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800089e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a0:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008a2:	2105      	movs	r1, #5
 80008a4:	a801      	add	r0, sp, #4
 80008a6:	f003 fbfd 	bl	80040a4 <HAL_RCC_ClockConfig>
 80008aa:	b930      	cbnz	r0, 80008ba <_Z18SystemClock_Configv+0x72>
}
 80008ac:	b019      	add	sp, #100	; 0x64
 80008ae:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80008b2:	f7ff ff17 	bl	80006e4 <Error_Handler>
    Error_Handler();
 80008b6:	f7ff ff15 	bl	80006e4 <Error_Handler>
    Error_Handler();
 80008ba:	f7ff ff13 	bl	80006e4 <Error_Handler>

080008be <_Z24PeriphCommonClock_Configv>:
{
 80008be:	b500      	push	{lr}
 80008c0:	b0a7      	sub	sp, #156	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c2:	2298      	movs	r2, #152	; 0x98
 80008c4:	2100      	movs	r1, #0
 80008c6:	4668      	mov	r0, sp
 80008c8:	f004 ff10 	bl	80056ec <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008d0:	9300      	str	r3, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008d6:	9320      	str	r3, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008d8:	2301      	movs	r3, #1
 80008da:	9301      	str	r3, [sp, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008dc:	9302      	str	r3, [sp, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80008de:	2310      	movs	r3, #16
 80008e0:	9303      	str	r3, [sp, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	9304      	str	r3, [sp, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008e6:	9305      	str	r3, [sp, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008e8:	9306      	str	r3, [sp, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008ee:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f0:	4668      	mov	r0, sp
 80008f2:	f003 feb1 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 80008f6:	b910      	cbnz	r0, 80008fe <_Z24PeriphCommonClock_Configv+0x40>
}
 80008f8:	b027      	add	sp, #156	; 0x9c
 80008fa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80008fe:	f7ff fef1 	bl	80006e4 <Error_Handler>
	...

08000904 <main>:
{
 8000904:	b530      	push	{r4, r5, lr}
 8000906:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000908:	f000 fae1 	bl	8000ece <HAL_Init>
  SystemClock_Config();
 800090c:	f7ff ff9c 	bl	8000848 <_Z18SystemClock_Configv>
  PeriphCommonClock_Config();
 8000910:	f7ff ffd5 	bl	80008be <_Z24PeriphCommonClock_Configv>
  MX_GPIO_Init();
 8000914:	f7ff fc72 	bl	80001fc <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 8000918:	f7ff fee6 	bl	80006e8 <_ZL12MX_CAN1_Initv>
  MX_DMA_Init();
 800091c:	f7ff fd0c 	bl	8000338 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8000920:	f7ff ff00 	bl	8000724 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000924:	f7ff ff4c 	bl	80007c0 <_ZL12MX_ADC2_Initv>
    HAL_ADC_Start_IT(&hadc1);
 8000928:	482c      	ldr	r0, [pc, #176]	; (80009dc <main+0xd8>)
 800092a:	f000 fe67 	bl	80015fc <HAL_ADC_Start_IT>
  sFilterConfig.FilterBank = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	9305      	str	r3, [sp, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000932:	9306      	str	r3, [sp, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000934:	2201      	movs	r2, #1
 8000936:	9207      	str	r2, [sp, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000938:	9300      	str	r3, [sp, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800093a:	9301      	str	r3, [sp, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800093c:	9302      	str	r3, [sp, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800093e:	9303      	str	r3, [sp, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000940:	9304      	str	r3, [sp, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000942:	9208      	str	r2, [sp, #32]
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000944:	4669      	mov	r1, sp
 8000946:	4826      	ldr	r0, [pc, #152]	; (80009e0 <main+0xdc>)
 8000948:	f001 ff37 	bl	80027ba <HAL_CAN_ConfigFilter>
 800094c:	b108      	cbz	r0, 8000952 <main+0x4e>
		Error_Handler();
 800094e:	f7ff fec9 	bl	80006e4 <Error_Handler>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000952:	4823      	ldr	r0, [pc, #140]	; (80009e0 <main+0xdc>)
 8000954:	f001 fffb 	bl	800294e <HAL_CAN_Start>
 8000958:	b108      	cbz	r0, 800095e <main+0x5a>
		Error_Handler();
 800095a:	f7ff fec3 	bl	80006e4 <Error_Handler>
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 800095e:	2103      	movs	r1, #3
 8000960:	481f      	ldr	r0, [pc, #124]	; (80009e0 <main+0xdc>)
 8000962:	f002 f908 	bl	8002b76 <HAL_CAN_ActivateNotification>
 8000966:	b108      	cbz	r0, 800096c <main+0x68>
		Error_Handler();
 8000968:	f7ff febc 	bl	80006e4 <Error_Handler>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)left_adc_reading, 10);
 800096c:	4c1b      	ldr	r4, [pc, #108]	; (80009dc <main+0xd8>)
 800096e:	220a      	movs	r2, #10
 8000970:	491c      	ldr	r1, [pc, #112]	; (80009e4 <main+0xe0>)
 8000972:	4620      	mov	r0, r4
 8000974:	f000 ff74 	bl	8001860 <HAL_ADC_Start_DMA>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000978:	2102      	movs	r1, #2
 800097a:	4819      	ldr	r0, [pc, #100]	; (80009e0 <main+0xdc>)
 800097c:	f002 f8fb 	bl	8002b76 <HAL_CAN_ActivateNotification>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)right_adc_reading, 10);
 8000980:	220a      	movs	r2, #10
 8000982:	4919      	ldr	r1, [pc, #100]	; (80009e8 <main+0xe4>)
 8000984:	4620      	mov	r0, r4
 8000986:	f000 ff6b 	bl	8001860 <HAL_ADC_Start_DMA>
  uint32_t timer = HAL_GetTick();
 800098a:	f000 facd 	bl	8000f28 <HAL_GetTick>
 800098e:	4605      	mov	r5, r0
 8000990:	e007      	b.n	80009a2 <main+0x9e>
		  wait_for_second_button();
 8000992:	f7ff fe01 	bl	8000598 <wait_for_second_button>
	  if (timer + 500 < HAL_GetTick())
 8000996:	f505 74fa 	add.w	r4, r5, #500	; 0x1f4
 800099a:	f000 fac5 	bl	8000f28 <HAL_GetTick>
 800099e:	4284      	cmp	r4, r0
 80009a0:	d316      	bcc.n	80009d0 <main+0xcc>
	  i++;
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <main+0xe8>)
 80009a4:	6813      	ldr	r3, [r2, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	6013      	str	r3, [r2, #0]
	  choose_left_scroll_state();
 80009aa:	f7ff fd4b 	bl	8000444 <choose_left_scroll_state>
	  if (sw3_pressed or sw4_pressed or sw5_pressed or sw6_pressed) {
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <main+0xec>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1ed      	bne.n	8000992 <main+0x8e>
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <main+0xf0>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1e9      	bne.n	8000992 <main+0x8e>
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <main+0xf4>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1e5      	bne.n	8000992 <main+0x8e>
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <main+0xf8>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d0e3      	beq.n	8000996 <main+0x92>
 80009ce:	e7e0      	b.n	8000992 <main+0x8e>
		  heartbeat();
 80009d0:	f7ff fd12 	bl	80003f8 <heartbeat>
		  timer = HAL_GetTick();
 80009d4:	f000 faa8 	bl	8000f28 <HAL_GetTick>
 80009d8:	4605      	mov	r5, r0
 80009da:	e7e2      	b.n	80009a2 <main+0x9e>
 80009dc:	20000030 	.word	0x20000030
 80009e0:	20000100 	.word	0x20000100
 80009e4:	200001ec 	.word	0x200001ec
 80009e8:	20000204 	.word	0x20000204
 80009ec:	200001e8 	.word	0x200001e8
 80009f0:	20000218 	.word	0x20000218
 80009f4:	20000219 	.word	0x20000219
 80009f8:	2000021a 	.word	0x2000021a
 80009fc:	2000021b 	.word	0x2000021b

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x44>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <HAL_MspInit+0x44>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6613      	str	r3, [r2, #96]	; 0x60
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x44>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a5f      	ldr	r2, [pc, #380]	; (8000be4 <HAL_ADC_MspInit+0x19c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d159      	bne.n	8000b1e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000a6a:	4b5f      	ldr	r3, [pc, #380]	; (8000be8 <HAL_ADC_MspInit+0x1a0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a5d      	ldr	r2, [pc, #372]	; (8000be8 <HAL_ADC_MspInit+0x1a0>)
 8000a72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000a74:	4b5c      	ldr	r3, [pc, #368]	; (8000be8 <HAL_ADC_MspInit+0x1a0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d10b      	bne.n	8000a94 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000a7c:	4b5b      	ldr	r3, [pc, #364]	; (8000bec <HAL_ADC_MspInit+0x1a4>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a80:	4a5a      	ldr	r2, [pc, #360]	; (8000bec <HAL_ADC_MspInit+0x1a4>)
 8000a82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a88:	4b58      	ldr	r3, [pc, #352]	; (8000bec <HAL_ADC_MspInit+0x1a4>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a90:	61bb      	str	r3, [r7, #24]
 8000a92:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	4b55      	ldr	r3, [pc, #340]	; (8000bec <HAL_ADC_MspInit+0x1a4>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a98:	4a54      	ldr	r2, [pc, #336]	; (8000bec <HAL_ADC_MspInit+0x1a4>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa0:	4b52      	ldr	r3, [pc, #328]	; (8000bec <HAL_ADC_MspInit+0x1a4>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = SW1_Pin;
 8000aac:	2302      	movs	r3, #2
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ab0:	230b      	movs	r3, #11
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac2:	f002 fbd3 	bl	800326c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel6;
 8000ac6:	4b4a      	ldr	r3, [pc, #296]	; (8000bf0 <HAL_ADC_MspInit+0x1a8>)
 8000ac8:	4a4a      	ldr	r2, [pc, #296]	; (8000bf4 <HAL_ADC_MspInit+0x1ac>)
 8000aca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000acc:	4b48      	ldr	r3, [pc, #288]	; (8000bf0 <HAL_ADC_MspInit+0x1a8>)
 8000ace:	2205      	movs	r2, #5
 8000ad0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ad2:	4b47      	ldr	r3, [pc, #284]	; (8000bf0 <HAL_ADC_MspInit+0x1a8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad8:	4b45      	ldr	r3, [pc, #276]	; (8000bf0 <HAL_ADC_MspInit+0x1a8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ade:	4b44      	ldr	r3, [pc, #272]	; (8000bf0 <HAL_ADC_MspInit+0x1a8>)
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ae4:	4b42      	ldr	r3, [pc, #264]	; (8000bf0 <HAL_ADC_MspInit+0x1a8>)
 8000ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aec:	4b40      	ldr	r3, [pc, #256]	; (8000bf0 <HAL_ADC_MspInit+0x1a8>)
 8000aee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000af2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000af4:	4b3e      	ldr	r3, [pc, #248]	; (8000bf0 <HAL_ADC_MspInit+0x1a8>)
 8000af6:	2220      	movs	r2, #32
 8000af8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000afa:	4b3d      	ldr	r3, [pc, #244]	; (8000bf0 <HAL_ADC_MspInit+0x1a8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b00:	483b      	ldr	r0, [pc, #236]	; (8000bf0 <HAL_ADC_MspInit+0x1a8>)
 8000b02:	f002 f941 	bl	8002d88 <HAL_DMA_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000b0c:	f7ff fdea 	bl	80006e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a37      	ldr	r2, [pc, #220]	; (8000bf0 <HAL_ADC_MspInit+0x1a8>)
 8000b14:	651a      	str	r2, [r3, #80]	; 0x50
 8000b16:	4a36      	ldr	r2, [pc, #216]	; (8000bf0 <HAL_ADC_MspInit+0x1a8>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000b1c:	e05d      	b.n	8000bda <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a35      	ldr	r2, [pc, #212]	; (8000bf8 <HAL_ADC_MspInit+0x1b0>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d158      	bne.n	8000bda <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000b28:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <HAL_ADC_MspInit+0x1a0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <HAL_ADC_MspInit+0x1a0>)
 8000b30:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000b32:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <HAL_ADC_MspInit+0x1a0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d10b      	bne.n	8000b52 <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <HAL_ADC_MspInit+0x1a4>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	4a2b      	ldr	r2, [pc, #172]	; (8000bec <HAL_ADC_MspInit+0x1a4>)
 8000b40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b46:	4b29      	ldr	r3, [pc, #164]	; (8000bec <HAL_ADC_MspInit+0x1a4>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b26      	ldr	r3, [pc, #152]	; (8000bec <HAL_ADC_MspInit+0x1a4>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	4a25      	ldr	r2, [pc, #148]	; (8000bec <HAL_ADC_MspInit+0x1a4>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5e:	4b23      	ldr	r3, [pc, #140]	; (8000bec <HAL_ADC_MspInit+0x1a4>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SW2_Pin|GPIO_PIN_3;
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b6e:	230b      	movs	r3, #11
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b80:	f002 fb74 	bl	800326c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel7;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <HAL_ADC_MspInit+0x1b4>)
 8000b86:	4a1e      	ldr	r2, [pc, #120]	; (8000c00 <HAL_ADC_MspInit+0x1b8>)
 8000b88:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_ADC_MspInit+0x1b4>)
 8000b8c:	2206      	movs	r2, #6
 8000b8e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_ADC_MspInit+0x1b4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <HAL_ADC_MspInit+0x1b4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <HAL_ADC_MspInit+0x1b4>)
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <HAL_ADC_MspInit+0x1b4>)
 8000ba4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_ADC_MspInit+0x1b4>)
 8000bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_ADC_MspInit+0x1b4>)
 8000bb4:	2220      	movs	r2, #32
 8000bb6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_ADC_MspInit+0x1b4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000bbe:	480f      	ldr	r0, [pc, #60]	; (8000bfc <HAL_ADC_MspInit+0x1b4>)
 8000bc0:	f002 f8e2 	bl	8002d88 <HAL_DMA_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_ADC_MspInit+0x186>
      Error_Handler();
 8000bca:	f7ff fd8b 	bl	80006e4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_ADC_MspInit+0x1b4>)
 8000bd2:	651a      	str	r2, [r3, #80]	; 0x50
 8000bd4:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <HAL_ADC_MspInit+0x1b4>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000bda:	bf00      	nop
 8000bdc:	3730      	adds	r7, #48	; 0x30
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	50040000 	.word	0x50040000
 8000be8:	20000220 	.word	0x20000220
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	20000128 	.word	0x20000128
 8000bf4:	4002006c 	.word	0x4002006c
 8000bf8:	50040100 	.word	0x50040100
 8000bfc:	20000188 	.word	0x20000188
 8000c00:	40020480 	.word	0x40020480

08000c04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a18      	ldr	r2, [pc, #96]	; (8000c84 <HAL_CAN_MspInit+0x80>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d129      	bne.n	8000c7a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_CAN_MspInit+0x84>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_CAN_MspInit+0x84>)
 8000c2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c30:	6593      	str	r3, [r2, #88]	; 0x58
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_CAN_MspInit+0x84>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_CAN_MspInit+0x84>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <HAL_CAN_MspInit+0x84>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_CAN_MspInit+0x84>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c68:	2309      	movs	r3, #9
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c76:	f002 faf9 	bl	800326c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40006400 	.word	0x40006400
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	2019      	movs	r0, #25
 8000ca2:	f002 f847 	bl	8002d34 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ca6:	2019      	movs	r0, #25
 8000ca8:	f002 f860 	bl	8002d6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <HAL_InitTick+0x9c>)
 8000cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb0:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <HAL_InitTick+0x9c>)
 8000cb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cb6:	6613      	str	r3, [r2, #96]	; 0x60
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <HAL_InitTick+0x9c>)
 8000cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc4:	f107 0210 	add.w	r2, r7, #16
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fbd0 	bl	8004474 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cd4:	f003 fbb8 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 8000cd8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cdc:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <HAL_InitTick+0xa0>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	0c9b      	lsrs	r3, r3, #18
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_InitTick+0xa4>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <HAL_InitTick+0xa8>)
 8000cec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_InitTick+0xa4>)
 8000cf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_InitTick+0xa4>)
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_InitTick+0xa4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_InitTick+0xa4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <HAL_InitTick+0xa4>)
 8000d0a:	f004 f9f9 	bl	8005100 <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d104      	bne.n	8000d1e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <HAL_InitTick+0xa4>)
 8000d16:	f004 fa55 	bl	80051c4 <HAL_TIM_Base_Start_IT>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3730      	adds	r7, #48	; 0x30
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	431bde83 	.word	0x431bde83
 8000d30:	20000224 	.word	0x20000224
 8000d34:	40012c00 	.word	0x40012c00

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW6_Pin);
 8000d92:	2004      	movs	r0, #4
 8000d94:	f002 fc2e 	bl	80035f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000da0:	2010      	movs	r0, #16
 8000da2:	f002 fc27 	bl	80035f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <DMA1_Channel6_IRQHandler+0x10>)
 8000db2:	f002 f90c 	bl	8002fce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000128 	.word	0x20000128

08000dc0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000dc4:	2020      	movs	r0, #32
 8000dc6:	f002 fc15 	bl	80035f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000dd6:	f004 fa65 	bl	80052a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000224 	.word	0x20000224

08000de4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 8000de8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000dec:	f002 fc02 	bl	80035f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW4_Pin);
 8000df0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000df4:	f002 fbfe 	bl	80035f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW5_Pin);
 8000df8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000dfc:	f002 fbfa 	bl	80035f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <DMA2_Channel7_IRQHandler+0x10>)
 8000e0a:	f002 f8e0 	bl	8002fce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000188 	.word	0x20000188

08000e18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <SystemInit+0x5c>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e22:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <SystemInit+0x5c>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <SystemInit+0x60>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <SystemInit+0x60>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <SystemInit+0x60>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <SystemInit+0x60>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <SystemInit+0x60>)
 8000e44:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e48:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <SystemInit+0x60>)
 8000e50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <SystemInit+0x60>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <SystemInit+0x60>)
 8000e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SystemInit+0x60>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00
 8000e78:	40021000 	.word	0x40021000

08000e7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e80:	f7ff ffca 	bl	8000e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e86:	e003      	b.n	8000e90 <LoopCopyDataInit>

08000e88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e8e:	3104      	adds	r1, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e90:	480a      	ldr	r0, [pc, #40]	; (8000ebc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e98:	d3f6      	bcc.n	8000e88 <CopyDataInit>
	ldr	r2, =_sbss
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e9c:	e002      	b.n	8000ea4 <LoopFillZerobss>

08000e9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ea0:	f842 3b04 	str.w	r3, [r2], #4

08000ea4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <LoopForever+0x16>)
	cmp	r2, r3
 8000ea6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ea8:	d3f9      	bcc.n	8000e9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f004 fbfb 	bl	80056a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eae:	f7ff fd29 	bl	8000904 <main>

08000eb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb2:	e7fe      	b.n	8000eb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb4:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000eb8:	08005794 	.word	0x08005794
	ldr	r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ec0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ec4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ec8:	20000274 	.word	0x20000274

08000ecc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC1_2_IRQHandler>

08000ece <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f001 ff20 	bl	8002d1e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ede:	200f      	movs	r0, #15
 8000ee0:	f7ff fed4 	bl	8000c8c <HAL_InitTick>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	e001      	b.n	8000ef4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef0:	f7ff fd86 	bl	8000a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x20>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <HAL_IncTick+0x24>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000270 	.word	0x20000270

08000f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <HAL_GetTick+0x14>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000270 	.word	0x20000270

08000f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff ffee 	bl	8000f28 <HAL_GetTick>
 8000f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f58:	d005      	beq.n	8000f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <HAL_Delay+0x44>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f66:	bf00      	nop
 8000f68:	f7ff ffde 	bl	8000f28 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d8f7      	bhi.n	8000f68 <HAL_Delay+0x28>
  {
  }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008

08000f88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3360      	adds	r3, #96	; 0x60
 8001002:	461a      	mov	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <LL_ADC_SetOffset+0x44>)
 8001012:	4013      	ands	r3, r2
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	4313      	orrs	r3, r2
 8001020:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001028:	bf00      	nop
 800102a:	371c      	adds	r7, #28
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	03fff000 	.word	0x03fff000

08001038 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3360      	adds	r3, #96	; 0x60
 8001046:	461a      	mov	r2, r3
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001058:	4618      	mov	r0, r3
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3360      	adds	r3, #96	; 0x60
 8001074:	461a      	mov	r2, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	431a      	orrs	r2, r3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800108e:	bf00      	nop
 8001090:	371c      	adds	r7, #28
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	615a      	str	r2, [r3, #20]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b087      	sub	sp, #28
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3330      	adds	r3, #48	; 0x30
 80010f6:	461a      	mov	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	0a1b      	lsrs	r3, r3, #8
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	4413      	add	r3, r2
 8001104:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f003 031f 	and.w	r3, r3, #31
 8001110:	211f      	movs	r1, #31
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	401a      	ands	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	0e9b      	lsrs	r3, r3, #26
 800111e:	f003 011f 	and.w	r1, r3, #31
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	431a      	orrs	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001132:	bf00      	nop
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800113e:	b480      	push	{r7}
 8001140:	b087      	sub	sp, #28
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3314      	adds	r3, #20
 800114e:	461a      	mov	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	0e5b      	lsrs	r3, r3, #25
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	4413      	add	r3, r2
 800115c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	0d1b      	lsrs	r3, r3, #20
 8001166:	f003 031f 	and.w	r3, r3, #31
 800116a:	2107      	movs	r1, #7
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	401a      	ands	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	0d1b      	lsrs	r3, r3, #20
 8001178:	f003 031f 	and.w	r3, r3, #31
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	431a      	orrs	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001188:	bf00      	nop
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ac:	43db      	mvns	r3, r3
 80011ae:	401a      	ands	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0318 	and.w	r3, r3, #24
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011b8:	40d9      	lsrs	r1, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	400b      	ands	r3, r1
 80011be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011c2:	431a      	orrs	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	0007ffff 	.word	0x0007ffff

080011dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 031f 	and.w	r3, r3, #31
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001208:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6093      	str	r3, [r2, #8]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800122c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001230:	d101      	bne.n	8001236 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001258:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001280:	d101      	bne.n	8001286 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <LL_ADC_IsEnabled+0x18>
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <LL_ADC_IsEnabled+0x1a>
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012f6:	f043 0204 	orr.w	r2, r3, #4
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	2b04      	cmp	r3, #4
 800131c:	d101      	bne.n	8001322 <LL_ADC_REG_IsConversionOngoing+0x18>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	2b08      	cmp	r3, #8
 8001342:	d101      	bne.n	8001348 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e134      	b.n	80015dc <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137c:	2b00      	cmp	r3, #0
 800137e:	d109      	bne.n	8001394 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fb61 	bl	8000a48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff3f 	bl	800121c <LL_ADC_IsDeepPowerDownEnabled>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff25 	bl	80011f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff5a 	bl	800126c <LL_ADC_IsInternalRegulatorEnabled>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d115      	bne.n	80013ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff3e 	bl	8001244 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013c8:	4b86      	ldr	r3, [pc, #536]	; (80015e4 <HAL_ADC_Init+0x28c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	099b      	lsrs	r3, r3, #6
 80013ce:	4a86      	ldr	r2, [pc, #536]	; (80015e8 <HAL_ADC_Init+0x290>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	099b      	lsrs	r3, r3, #6
 80013d6:	3301      	adds	r3, #1
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013dc:	e002      	b.n	80013e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f9      	bne.n	80013de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff3c 	bl	800126c <LL_ADC_IsInternalRegulatorEnabled>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10d      	bne.n	8001416 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fe:	f043 0210 	orr.w	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140a:	f043 0201 	orr.w	r2, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff75 	bl	800130a <LL_ADC_REG_IsConversionOngoing>
 8001420:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	2b00      	cmp	r3, #0
 800142c:	f040 80cd 	bne.w	80015ca <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f040 80c9 	bne.w	80015ca <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001440:	f043 0202 	orr.w	r2, r3, #2
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff35 	bl	80012bc <LL_ADC_IsEnabled>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d110      	bne.n	800147a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001458:	4864      	ldr	r0, [pc, #400]	; (80015ec <HAL_ADC_Init+0x294>)
 800145a:	f7ff ff2f 	bl	80012bc <LL_ADC_IsEnabled>
 800145e:	4604      	mov	r4, r0
 8001460:	4863      	ldr	r0, [pc, #396]	; (80015f0 <HAL_ADC_Init+0x298>)
 8001462:	f7ff ff2b 	bl	80012bc <LL_ADC_IsEnabled>
 8001466:	4603      	mov	r3, r0
 8001468:	4323      	orrs	r3, r4
 800146a:	2b00      	cmp	r3, #0
 800146c:	d105      	bne.n	800147a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4619      	mov	r1, r3
 8001474:	485f      	ldr	r0, [pc, #380]	; (80015f4 <HAL_ADC_Init+0x29c>)
 8001476:	f7ff fd87 	bl	8000f88 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7e5b      	ldrb	r3, [r3, #25]
 800147e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001484:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800148a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001490:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001498:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d106      	bne.n	80014b6 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	3b01      	subs	r3, #1
 80014ae:	045b      	lsls	r3, r3, #17
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c2:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ca:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <HAL_ADC_Init+0x2a0>)
 80014da:	4013      	ands	r3, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	69b9      	ldr	r1, [r7, #24]
 80014e2:	430b      	orrs	r3, r1
 80014e4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff0d 	bl	800130a <LL_ADC_REG_IsConversionOngoing>
 80014f0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ff1a 	bl	8001330 <LL_ADC_INJ_IsConversionOngoing>
 80014fc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d140      	bne.n	8001586 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d13d      	bne.n	8001586 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7e1b      	ldrb	r3, [r3, #24]
 8001512:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001514:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800151c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800152c:	f023 0306 	bic.w	r3, r3, #6
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	69b9      	ldr	r1, [r7, #24]
 8001536:	430b      	orrs	r3, r1
 8001538:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001540:	2b01      	cmp	r3, #1
 8001542:	d118      	bne.n	8001576 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800154e:	f023 0304 	bic.w	r3, r3, #4
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800155a:	4311      	orrs	r1, r2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001560:	4311      	orrs	r1, r2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001566:	430a      	orrs	r2, r1
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0201 	orr.w	r2, r2, #1
 8001572:	611a      	str	r2, [r3, #16]
 8001574:	e007      	b.n	8001586 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0201 	bic.w	r2, r2, #1
 8001584:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d10c      	bne.n	80015a8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	f023 010f 	bic.w	r1, r3, #15
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	1e5a      	subs	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
 80015a6:	e007      	b.n	80015b8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 020f 	bic.w	r2, r2, #15
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	f023 0303 	bic.w	r3, r3, #3
 80015c0:	f043 0201 	orr.w	r2, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	659a      	str	r2, [r3, #88]	; 0x58
 80015c8:	e007      	b.n	80015da <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	f043 0210 	orr.w	r2, r3, #16
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015da:	7ffb      	ldrb	r3, [r7, #31]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3724      	adds	r7, #36	; 0x24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd90      	pop	{r4, r7, pc}
 80015e4:	20000000 	.word	0x20000000
 80015e8:	053e2d63 	.word	0x053e2d63
 80015ec:	50040000 	.word	0x50040000
 80015f0:	50040100 	.word	0x50040100
 80015f4:	50040300 	.word	0x50040300
 80015f8:	fff0c007 	.word	0xfff0c007

080015fc <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001604:	4893      	ldr	r0, [pc, #588]	; (8001854 <HAL_ADC_Start_IT+0x258>)
 8001606:	f7ff fde9 	bl	80011dc <LL_ADC_GetMultimode>
 800160a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fe7a 	bl	800130a <LL_ADC_REG_IsConversionOngoing>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	f040 8111 	bne.w	8001840 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_ADC_Start_IT+0x30>
 8001628:	2302      	movs	r3, #2
 800162a:	e10e      	b.n	800184a <HAL_ADC_Start_IT+0x24e>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 fde1 	bl	80021fc <ADC_Enable>
 800163a:	4603      	mov	r3, r0
 800163c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f040 80f8 	bne.w	8001836 <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a7e      	ldr	r2, [pc, #504]	; (8001858 <HAL_ADC_Start_IT+0x25c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d002      	beq.n	800166a <HAL_ADC_Start_IT+0x6e>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	e000      	b.n	800166c <HAL_ADC_Start_IT+0x70>
 800166a:	4b7c      	ldr	r3, [pc, #496]	; (800185c <HAL_ADC_Start_IT+0x260>)
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	4293      	cmp	r3, r2
 8001672:	d002      	beq.n	800167a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d105      	bne.n	8001686 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d006      	beq.n	80016a0 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001696:	f023 0206 	bic.w	r2, r3, #6
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	65da      	str	r2, [r3, #92]	; 0x5c
 800169e:	e002      	b.n	80016a6 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	221c      	movs	r2, #28
 80016ac:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 021c 	bic.w	r2, r2, #28
 80016c4:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d108      	bne.n	80016e0 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 0208 	orr.w	r2, r2, #8
 80016dc:	605a      	str	r2, [r3, #4]
          break;
 80016de:	e008      	b.n	80016f2 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0204 	orr.w	r2, r2, #4
 80016ee:	605a      	str	r2, [r3, #4]
          break;
 80016f0:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d107      	bne.n	800170a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0210 	orr.w	r2, r2, #16
 8001708:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a52      	ldr	r2, [pc, #328]	; (8001858 <HAL_ADC_Start_IT+0x25c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d002      	beq.n	800171a <HAL_ADC_Start_IT+0x11e>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	e000      	b.n	800171c <HAL_ADC_Start_IT+0x120>
 800171a:	4b50      	ldr	r3, [pc, #320]	; (800185c <HAL_ADC_Start_IT+0x260>)
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	4293      	cmp	r3, r2
 8001722:	d008      	beq.n	8001736 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d005      	beq.n	8001736 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d002      	beq.n	8001736 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b09      	cmp	r3, #9
 8001734:	d13b      	bne.n	80017ae <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d02d      	beq.n	80017a0 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800174c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	659a      	str	r2, [r3, #88]	; 0x58

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	2b08      	cmp	r3, #8
 800175a:	d110      	bne.n	800177e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0220 	bic.w	r2, r2, #32
 800176a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800177a:	605a      	str	r2, [r3, #4]
              break;
 800177c:	e011      	b.n	80017a2 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800178c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0220 	orr.w	r2, r2, #32
 800179c:	605a      	str	r2, [r3, #4]
              break;
 800179e:	e000      	b.n	80017a2 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 80017a0:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fd9b 	bl	80012e2 <LL_ADC_REG_StartConversion>
 80017ac:	e04c      	b.n	8001848 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a26      	ldr	r2, [pc, #152]	; (8001858 <HAL_ADC_Start_IT+0x25c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d002      	beq.n	80017ca <HAL_ADC_Start_IT+0x1ce>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	e000      	b.n	80017cc <HAL_ADC_Start_IT+0x1d0>
 80017ca:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_ADC_Start_IT+0x260>)
 80017cc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d035      	beq.n	8001846 <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	659a      	str	r2, [r3, #88]	; 0x58
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d110      	bne.n	8001814 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0220 	bic.w	r2, r2, #32
 8001800:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001810:	605a      	str	r2, [r3, #4]
              break;
 8001812:	e019      	b.n	8001848 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001822:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 0220 	orr.w	r2, r2, #32
 8001832:	605a      	str	r2, [r3, #4]
              break;
 8001834:	e008      	b.n	8001848 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800183e:	e003      	b.n	8001848 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001840:	2302      	movs	r3, #2
 8001842:	75fb      	strb	r3, [r7, #23]
 8001844:	e000      	b.n	8001848 <HAL_ADC_Start_IT+0x24c>
        }
 8001846:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001848:	7dfb      	ldrb	r3, [r7, #23]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	50040300 	.word	0x50040300
 8001858:	50040100 	.word	0x50040100
 800185c:	50040000 	.word	0x50040000

08001860 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800186c:	4850      	ldr	r0, [pc, #320]	; (80019b0 <HAL_ADC_Start_DMA+0x150>)
 800186e:	f7ff fcb5 	bl	80011dc <LL_ADC_GetMultimode>
 8001872:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fd46 	bl	800130a <LL_ADC_REG_IsConversionOngoing>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	f040 808e 	bne.w	80019a2 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_ADC_Start_DMA+0x34>
 8001890:	2302      	movs	r3, #2
 8001892:	e089      	b.n	80019a8 <HAL_ADC_Start_DMA+0x148>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d005      	beq.n	80018ae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	d002      	beq.n	80018ae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	2b09      	cmp	r3, #9
 80018ac:	d172      	bne.n	8001994 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 fca4 	bl	80021fc <ADC_Enable>
 80018b4:	4603      	mov	r3, r0
 80018b6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d165      	bne.n	800198a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a37      	ldr	r2, [pc, #220]	; (80019b4 <HAL_ADC_Start_DMA+0x154>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d002      	beq.n	80018e2 <HAL_ADC_Start_DMA+0x82>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	e000      	b.n	80018e4 <HAL_ADC_Start_DMA+0x84>
 80018e2:	4b35      	ldr	r3, [pc, #212]	; (80019b8 <HAL_ADC_Start_DMA+0x158>)
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d002      	beq.n	80018f2 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d105      	bne.n	80018fe <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190e:	f023 0206 	bic.w	r2, r3, #6
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	65da      	str	r2, [r3, #92]	; 0x5c
 8001916:	e002      	b.n	800191e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001922:	4a26      	ldr	r2, [pc, #152]	; (80019bc <HAL_ADC_Start_DMA+0x15c>)
 8001924:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192a:	4a25      	ldr	r2, [pc, #148]	; (80019c0 <HAL_ADC_Start_DMA+0x160>)
 800192c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001932:	4a24      	ldr	r2, [pc, #144]	; (80019c4 <HAL_ADC_Start_DMA+0x164>)
 8001934:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	221c      	movs	r2, #28
 800193c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 0210 	orr.w	r2, r2, #16
 8001954:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0201 	orr.w	r2, r2, #1
 8001964:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	3340      	adds	r3, #64	; 0x40
 8001970:	4619      	mov	r1, r3
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f001 faaf 	bl	8002ed8 <HAL_DMA_Start_IT>
 800197a:	4603      	mov	r3, r0
 800197c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fcad 	bl	80012e2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001988:	e00d      	b.n	80019a6 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8001992:	e008      	b.n	80019a6 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80019a0:	e001      	b.n	80019a6 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019a2:	2302      	movs	r3, #2
 80019a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	50040300 	.word	0x50040300
 80019b4:	50040100 	.word	0x50040100
 80019b8:	50040000 	.word	0x50040000
 80019bc:	08002309 	.word	0x08002309
 80019c0:	080023e1 	.word	0x080023e1
 80019c4:	080023fd 	.word	0x080023fd

080019c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b0b6      	sub	sp, #216	; 0xd8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x22>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e3d5      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x7ce>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fc69 	bl	800130a <LL_ADC_REG_IsConversionOngoing>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f040 83ba 	bne.w	80021b4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b05      	cmp	r3, #5
 8001a46:	d824      	bhi.n	8001a92 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	3b02      	subs	r3, #2
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d81b      	bhi.n	8001a8a <HAL_ADC_ConfigChannel+0x86>
 8001a52:	a201      	add	r2, pc, #4	; (adr r2, 8001a58 <HAL_ADC_ConfigChannel+0x54>)
 8001a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a58:	08001a69 	.word	0x08001a69
 8001a5c:	08001a71 	.word	0x08001a71
 8001a60:	08001a79 	.word	0x08001a79
 8001a64:	08001a81 	.word	0x08001a81
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	605a      	str	r2, [r3, #4]
          break;
 8001a6e:	e011      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2212      	movs	r2, #18
 8001a74:	605a      	str	r2, [r3, #4]
          break;
 8001a76:	e00d      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2218      	movs	r2, #24
 8001a7c:	605a      	str	r2, [r3, #4]
          break;
 8001a7e:	e009      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a86:	605a      	str	r2, [r3, #4]
          break;
 8001a88:	e004      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2206      	movs	r2, #6
 8001a8e:	605a      	str	r2, [r3, #4]
          break;
 8001a90:	e000      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a92:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	f7ff fb20 	bl	80010e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fc2d 	bl	800130a <LL_ADC_REG_IsConversionOngoing>
 8001ab0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fc39 	bl	8001330 <LL_ADC_INJ_IsConversionOngoing>
 8001abe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ac2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 81c1 	bne.w	8001e4e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001acc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f040 81bc 	bne.w	8001e4e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ade:	d10f      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff fb27 	bl	800113e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff face 	bl	800109a <LL_ADC_SetSamplingTimeCommonConfig>
 8001afe:	e00e      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	6819      	ldr	r1, [r3, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f7ff fb16 	bl	800113e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fabe 	bl	800109a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	08db      	lsrs	r3, r3, #3
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d00a      	beq.n	8001b56 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	6919      	ldr	r1, [r3, #16]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b50:	f7ff fa4e 	bl	8000ff0 <LL_ADC_SetOffset>
 8001b54:	e17b      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fa6b 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10a      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x17e>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fa60 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	0e9b      	lsrs	r3, r3, #26
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	e01e      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x1bc>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fa55 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ba0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	e004      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001bb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bb8:	fab3 f383 	clz	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d105      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x1d4>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0e9b      	lsrs	r3, r3, #26
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	e018      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x206>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001bec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001bf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001bfc:	2320      	movs	r3, #32
 8001bfe:	e004      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001c00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d106      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fa24 	bl	8001064 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2101      	movs	r1, #1
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fa08 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10a      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x244>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2101      	movs	r1, #1
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff f9fd 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	0e9b      	lsrs	r3, r3, #26
 8001c42:	f003 021f 	and.w	r2, r3, #31
 8001c46:	e01e      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x282>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f9f2 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001c76:	2320      	movs	r3, #32
 8001c78:	e004      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x29a>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	0e9b      	lsrs	r3, r3, #26
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	e018      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x2cc>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001cb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001cba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001cc2:	2320      	movs	r3, #32
 8001cc4:	e004      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d106      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2101      	movs	r1, #1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff f9c1 	bl	8001064 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2102      	movs	r1, #2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff f9a5 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10a      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x30a>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2102      	movs	r1, #2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f99a 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	0e9b      	lsrs	r3, r3, #26
 8001d08:	f003 021f 	and.w	r2, r3, #31
 8001d0c:	e01e      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x348>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2102      	movs	r1, #2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff f98f 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001d3c:	2320      	movs	r3, #32
 8001d3e:	e004      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001d40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d105      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x360>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	0e9b      	lsrs	r3, r3, #26
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	e016      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x38e>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001d84:	2320      	movs	r3, #32
 8001d86:	e004      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d106      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f960 	bl	8001064 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2103      	movs	r1, #3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff f944 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10a      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x3cc>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2103      	movs	r1, #3
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff f939 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	0e9b      	lsrs	r3, r3, #26
 8001dca:	f003 021f 	and.w	r2, r3, #31
 8001dce:	e017      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x3fc>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2103      	movs	r1, #3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f92e 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001dec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001df2:	2320      	movs	r3, #32
 8001df4:	e003      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d105      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x414>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0e9b      	lsrs	r3, r3, #26
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	e011      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x438>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001e30:	2320      	movs	r3, #32
 8001e32:	e003      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d106      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2200      	movs	r2, #0
 8001e46:	2103      	movs	r1, #3
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff f90b 	bl	8001064 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fa32 	bl	80012bc <LL_ADC_IsEnabled>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 8140 	bne.w	80020e0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f7ff f991 	bl	8001194 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	4a8f      	ldr	r2, [pc, #572]	; (80020b4 <HAL_ADC_ConfigChannel+0x6b0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	f040 8131 	bne.w	80020e0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x4a2>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0e9b      	lsrs	r3, r3, #26
 8001e94:	3301      	adds	r3, #1
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2b09      	cmp	r3, #9
 8001e9c:	bf94      	ite	ls
 8001e9e:	2301      	movls	r3, #1
 8001ea0:	2300      	movhi	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	e019      	b.n	8001eda <HAL_ADC_ConfigChannel+0x4d6>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eb6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	e003      	b.n	8001eca <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	2b09      	cmp	r3, #9
 8001ed2:	bf94      	ite	ls
 8001ed4:	2301      	movls	r3, #1
 8001ed6:	2300      	movhi	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d079      	beq.n	8001fd2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d107      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x4f6>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	0e9b      	lsrs	r3, r3, #26
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	069b      	lsls	r3, r3, #26
 8001ef4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ef8:	e015      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x522>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001f12:	2320      	movs	r3, #32
 8001f14:	e003      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	069b      	lsls	r3, r3, #26
 8001f22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x542>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	0e9b      	lsrs	r3, r3, #26
 8001f38:	3301      	adds	r3, #1
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	e017      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x572>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001f5e:	2320      	movs	r3, #32
 8001f60:	e003      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	2101      	movs	r1, #1
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	ea42 0103 	orr.w	r1, r2, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10a      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x598>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	0e9b      	lsrs	r3, r3, #26
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f003 021f 	and.w	r2, r3, #31
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	051b      	lsls	r3, r3, #20
 8001f9a:	e018      	b.n	8001fce <HAL_ADC_ConfigChannel+0x5ca>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	e003      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f003 021f 	and.w	r2, r3, #31
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fce:	430b      	orrs	r3, r1
 8001fd0:	e081      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d107      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x5ea>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	0e9b      	lsrs	r3, r3, #26
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	069b      	lsls	r3, r3, #26
 8001fe8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fec:	e015      	b.n	800201a <HAL_ADC_ConfigChannel+0x616>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002006:	2320      	movs	r3, #32
 8002008:	e003      	b.n	8002012 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800200a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	3301      	adds	r3, #1
 8002014:	069b      	lsls	r3, r3, #26
 8002016:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <HAL_ADC_ConfigChannel+0x636>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	0e9b      	lsrs	r3, r3, #26
 800202c:	3301      	adds	r3, #1
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	2101      	movs	r1, #1
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	e017      	b.n	800206a <HAL_ADC_ConfigChannel+0x666>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	61fb      	str	r3, [r7, #28]
  return result;
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002052:	2320      	movs	r3, #32
 8002054:	e003      	b.n	800205e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	3301      	adds	r3, #1
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2101      	movs	r1, #1
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	ea42 0103 	orr.w	r1, r2, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10d      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x692>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	0e9b      	lsrs	r3, r3, #26
 8002080:	3301      	adds	r3, #1
 8002082:	f003 021f 	and.w	r2, r3, #31
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	3b1e      	subs	r3, #30
 800208e:	051b      	lsls	r3, r3, #20
 8002090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002094:	e01e      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x6d0>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	613b      	str	r3, [r7, #16]
  return result;
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d104      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80020ae:	2320      	movs	r3, #32
 80020b0:	e006      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x6bc>
 80020b2:	bf00      	nop
 80020b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	f003 021f 	and.w	r2, r3, #31
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	3b1e      	subs	r3, #30
 80020ce:	051b      	lsls	r3, r3, #20
 80020d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020d4:	430b      	orrs	r3, r1
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	6892      	ldr	r2, [r2, #8]
 80020da:	4619      	mov	r1, r3
 80020dc:	f7ff f82f 	bl	800113e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b3d      	ldr	r3, [pc, #244]	; (80021dc <HAL_ADC_ConfigChannel+0x7d8>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d06c      	beq.n	80021c6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020ec:	483c      	ldr	r0, [pc, #240]	; (80021e0 <HAL_ADC_ConfigChannel+0x7dc>)
 80020ee:	f7fe ff71 	bl	8000fd4 <LL_ADC_GetCommonPathInternalCh>
 80020f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a3a      	ldr	r2, [pc, #232]	; (80021e4 <HAL_ADC_ConfigChannel+0x7e0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d127      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d121      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a35      	ldr	r2, [pc, #212]	; (80021e8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d157      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800211a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800211e:	4619      	mov	r1, r3
 8002120:	482f      	ldr	r0, [pc, #188]	; (80021e0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002122:	f7fe ff44 	bl	8000fae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002126:	4b31      	ldr	r3, [pc, #196]	; (80021ec <HAL_ADC_ConfigChannel+0x7e8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	099b      	lsrs	r3, r3, #6
 800212c:	4a30      	ldr	r2, [pc, #192]	; (80021f0 <HAL_ADC_ConfigChannel+0x7ec>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	099b      	lsrs	r3, r3, #6
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002140:	e002      	b.n	8002148 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3b01      	subs	r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f9      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800214e:	e03a      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a27      	ldr	r2, [pc, #156]	; (80021f4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d113      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x77e>
 800215a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800215e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10d      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1f      	ldr	r2, [pc, #124]	; (80021e8 <HAL_ADC_ConfigChannel+0x7e4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d12a      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002170:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002174:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002178:	4619      	mov	r1, r3
 800217a:	4819      	ldr	r0, [pc, #100]	; (80021e0 <HAL_ADC_ConfigChannel+0x7dc>)
 800217c:	f7fe ff17 	bl	8000fae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002180:	e021      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d11c      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800218c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d116      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <HAL_ADC_ConfigChannel+0x7e4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d111      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021aa:	4619      	mov	r1, r3
 80021ac:	480c      	ldr	r0, [pc, #48]	; (80021e0 <HAL_ADC_ConfigChannel+0x7dc>)
 80021ae:	f7fe fefe 	bl	8000fae <LL_ADC_SetCommonPathInternalCh>
 80021b2:	e008      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	f043 0220 	orr.w	r2, r3, #32
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80021ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	37d8      	adds	r7, #216	; 0xd8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	80080000 	.word	0x80080000
 80021e0:	50040300 	.word	0x50040300
 80021e4:	c7520000 	.word	0xc7520000
 80021e8:	50040000 	.word	0x50040000
 80021ec:	20000000 	.word	0x20000000
 80021f0:	053e2d63 	.word	0x053e2d63
 80021f4:	cb840000 	.word	0xcb840000
 80021f8:	80000001 	.word	0x80000001

080021fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff f855 	bl	80012bc <LL_ADC_IsEnabled>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d169      	bne.n	80022ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <ADC_Enable+0xfc>)
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00d      	beq.n	8002242 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	f043 0210 	orr.w	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e055      	b.n	80022ee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff f824 	bl	8001294 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800224c:	482b      	ldr	r0, [pc, #172]	; (80022fc <ADC_Enable+0x100>)
 800224e:	f7fe fec1 	bl	8000fd4 <LL_ADC_GetCommonPathInternalCh>
 8002252:	4603      	mov	r3, r0
 8002254:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800225c:	4b28      	ldr	r3, [pc, #160]	; (8002300 <ADC_Enable+0x104>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	099b      	lsrs	r3, r3, #6
 8002262:	4a28      	ldr	r2, [pc, #160]	; (8002304 <ADC_Enable+0x108>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	099b      	lsrs	r3, r3, #6
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002276:	e002      	b.n	800227e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	3b01      	subs	r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f9      	bne.n	8002278 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002284:	f7fe fe50 	bl	8000f28 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800228a:	e028      	b.n	80022de <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff f813 	bl	80012bc <LL_ADC_IsEnabled>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d104      	bne.n	80022a6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe fff7 	bl	8001294 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022a6:	f7fe fe3f 	bl	8000f28 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d914      	bls.n	80022de <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d00d      	beq.n	80022de <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	f043 0210 	orr.w	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e007      	b.n	80022ee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d1cf      	bne.n	800228c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	8000003f 	.word	0x8000003f
 80022fc:	50040300 	.word	0x50040300
 8002300:	20000000 	.word	0x20000000
 8002304:	053e2d63 	.word	0x053e2d63

08002308 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800231e:	2b00      	cmp	r3, #0
 8002320:	d14b      	bne.n	80023ba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d021      	beq.n	8002380 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe febd 	bl	80010c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d032      	beq.n	80023b2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d12b      	bne.n	80023b2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d11f      	bne.n	80023b2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	659a      	str	r2, [r3, #88]	; 0x58
 800237e:	e018      	b.n	80023b2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d111      	bne.n	80023b2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d105      	bne.n	80023b2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	f043 0201 	orr.w	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f7ff fb08 	bl	80019c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023b8:	e00e      	b.n	80023d8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f7ff fb12 	bl	80019f0 <HAL_ADC_ErrorCallback>
}
 80023cc:	e004      	b.n	80023d8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4798      	blx	r3
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f7ff faf4 	bl	80019dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	f043 0204 	orr.w	r2, r3, #4
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f7ff fae4 	bl	80019f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <LL_ADC_IsEnabled>:
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <LL_ADC_IsEnabled+0x18>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <LL_ADC_IsEnabled+0x1a>
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_ADC_REG_IsConversionOngoing>:
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b04      	cmp	r3, #4
 8002468:	d101      	bne.n	800246e <LL_ADC_REG_IsConversionOngoing+0x18>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b0a1      	sub	sp, #132	; 0x84
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002496:	2302      	movs	r3, #2
 8002498:	e089      	b.n	80025ae <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80024a2:	2300      	movs	r3, #0
 80024a4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80024a6:	2300      	movs	r3, #0
 80024a8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a42      	ldr	r2, [pc, #264]	; (80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d102      	bne.n	80024ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024b4:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e001      	b.n	80024be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	f043 0220 	orr.w	r2, r3, #32
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e068      	b.n	80025ae <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ffb9 	bl	8002456 <LL_ADC_REG_IsConversionOngoing>
 80024e4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ffb3 	bl	8002456 <LL_ADC_REG_IsConversionOngoing>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d14a      	bne.n	800258c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80024f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d147      	bne.n	800258c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80024fc:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80024fe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d027      	beq.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800251a:	035b      	lsls	r3, r3, #13
 800251c:	430b      	orrs	r3, r1
 800251e:	431a      	orrs	r2, r3
 8002520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002522:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002524:	4824      	ldr	r0, [pc, #144]	; (80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002526:	f7ff ff83 	bl	8002430 <LL_ADC_IsEnabled>
 800252a:	4604      	mov	r4, r0
 800252c:	4823      	ldr	r0, [pc, #140]	; (80025bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800252e:	f7ff ff7f 	bl	8002430 <LL_ADC_IsEnabled>
 8002532:	4603      	mov	r3, r0
 8002534:	4323      	orrs	r3, r4
 8002536:	2b00      	cmp	r3, #0
 8002538:	d132      	bne.n	80025a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800253a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002542:	f023 030f 	bic.w	r3, r3, #15
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	6811      	ldr	r1, [r2, #0]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	6892      	ldr	r2, [r2, #8]
 800254e:	430a      	orrs	r2, r1
 8002550:	431a      	orrs	r2, r3
 8002552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002554:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002556:	e023      	b.n	80025a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002562:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002564:	4814      	ldr	r0, [pc, #80]	; (80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002566:	f7ff ff63 	bl	8002430 <LL_ADC_IsEnabled>
 800256a:	4604      	mov	r4, r0
 800256c:	4813      	ldr	r0, [pc, #76]	; (80025bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800256e:	f7ff ff5f 	bl	8002430 <LL_ADC_IsEnabled>
 8002572:	4603      	mov	r3, r0
 8002574:	4323      	orrs	r3, r4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d112      	bne.n	80025a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800257a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002582:	f023 030f 	bic.w	r3, r3, #15
 8002586:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002588:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800258a:	e009      	b.n	80025a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	f043 0220 	orr.w	r2, r3, #32
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800259e:	e000      	b.n	80025a2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80025aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3784      	adds	r7, #132	; 0x84
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd90      	pop	{r4, r7, pc}
 80025b6:	bf00      	nop
 80025b8:	50040000 	.word	0x50040000
 80025bc:	50040100 	.word	0x50040100
 80025c0:	50040300 	.word	0x50040300

080025c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0ed      	b.n	80027b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe fb0e 	bl	8000c04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025f8:	f7fe fc96 	bl	8000f28 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025fe:	e012      	b.n	8002626 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002600:	f7fe fc92 	bl	8000f28 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b0a      	cmp	r3, #10
 800260c:	d90b      	bls.n	8002626 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2205      	movs	r2, #5
 800261e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0c5      	b.n	80027b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0e5      	beq.n	8002600 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0202 	bic.w	r2, r2, #2
 8002642:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002644:	f7fe fc70 	bl	8000f28 <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800264a:	e012      	b.n	8002672 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800264c:	f7fe fc6c 	bl	8000f28 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b0a      	cmp	r3, #10
 8002658:	d90b      	bls.n	8002672 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2205      	movs	r2, #5
 800266a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e09f      	b.n	80027b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e5      	bne.n	800264c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7e1b      	ldrb	r3, [r3, #24]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d108      	bne.n	800269a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e007      	b.n	80026aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7e5b      	ldrb	r3, [r3, #25]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d108      	bne.n	80026c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e007      	b.n	80026d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	7e9b      	ldrb	r3, [r3, #26]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d108      	bne.n	80026ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0220 	orr.w	r2, r2, #32
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e007      	b.n	80026fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0220 	bic.w	r2, r2, #32
 80026fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	7edb      	ldrb	r3, [r3, #27]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d108      	bne.n	8002718 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0210 	bic.w	r2, r2, #16
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e007      	b.n	8002728 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0210 	orr.w	r2, r2, #16
 8002726:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7f1b      	ldrb	r3, [r3, #28]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d108      	bne.n	8002742 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0208 	orr.w	r2, r2, #8
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e007      	b.n	8002752 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0208 	bic.w	r2, r2, #8
 8002750:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	7f5b      	ldrb	r3, [r3, #29]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d108      	bne.n	800276c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0204 	orr.w	r2, r2, #4
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e007      	b.n	800277c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0204 	bic.w	r2, r2, #4
 800277a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	ea42 0103 	orr.w	r1, r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	1e5a      	subs	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b087      	sub	sp, #28
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027d0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80027d2:	7cfb      	ldrb	r3, [r7, #19]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d003      	beq.n	80027e0 <HAL_CAN_ConfigFilter+0x26>
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	f040 80aa 	bne.w	8002934 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027e6:	f043 0201 	orr.w	r2, r3, #1
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	2201      	movs	r2, #1
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	43db      	mvns	r3, r3
 800280a:	401a      	ands	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d123      	bne.n	8002862 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	43db      	mvns	r3, r3
 8002824:	401a      	ands	r2, r3
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800283c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	3248      	adds	r2, #72	; 0x48
 8002842:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002856:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002858:	6979      	ldr	r1, [r7, #20]
 800285a:	3348      	adds	r3, #72	; 0x48
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d122      	bne.n	80028b0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	431a      	orrs	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800288a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3248      	adds	r2, #72	; 0x48
 8002890:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028a6:	6979      	ldr	r1, [r7, #20]
 80028a8:	3348      	adds	r3, #72	; 0x48
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d109      	bne.n	80028cc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80028ca:	e007      	b.n	80028dc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	431a      	orrs	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	401a      	ands	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80028f6:	e007      	b.n	8002908 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	431a      	orrs	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d107      	bne.n	8002920 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	431a      	orrs	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002926:	f023 0201 	bic.w	r2, r3, #1
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	e006      	b.n	8002942 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
  }
}
 8002942:	4618      	mov	r0, r3
 8002944:	371c      	adds	r7, #28
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d12e      	bne.n	80029c0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0201 	bic.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800297a:	f7fe fad5 	bl	8000f28 <HAL_GetTick>
 800297e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002980:	e012      	b.n	80029a8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002982:	f7fe fad1 	bl	8000f28 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b0a      	cmp	r3, #10
 800298e:	d90b      	bls.n	80029a8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2205      	movs	r2, #5
 80029a0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e012      	b.n	80029ce <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e5      	bne.n	8002982 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	e006      	b.n	80029ce <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
  }
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b089      	sub	sp, #36	; 0x24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029f4:	7ffb      	ldrb	r3, [r7, #31]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d003      	beq.n	8002a02 <HAL_CAN_AddTxMessage+0x2c>
 80029fa:	7ffb      	ldrb	r3, [r7, #31]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	f040 80ad 	bne.w	8002b5c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d105      	bne.n	8002a22 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8095 	beq.w	8002b4c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	0e1b      	lsrs	r3, r3, #24
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	409a      	lsls	r2, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10d      	bne.n	8002a5a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a48:	68f9      	ldr	r1, [r7, #12]
 8002a4a:	6809      	ldr	r1, [r1, #0]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3318      	adds	r3, #24
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	440b      	add	r3, r1
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	e00f      	b.n	8002a7a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a64:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a6a:	68f9      	ldr	r1, [r7, #12]
 8002a6c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a6e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3318      	adds	r3, #24
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	440b      	add	r3, r1
 8002a78:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6819      	ldr	r1, [r3, #0]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	3318      	adds	r3, #24
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	440b      	add	r3, r1
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	7d1b      	ldrb	r3, [r3, #20]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d111      	bne.n	8002aba <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	3318      	adds	r3, #24
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	6811      	ldr	r1, [r2, #0]
 8002aaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	3318      	adds	r3, #24
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3307      	adds	r3, #7
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	061a      	lsls	r2, r3, #24
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3306      	adds	r3, #6
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	041b      	lsls	r3, r3, #16
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3305      	adds	r3, #5
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	3204      	adds	r2, #4
 8002ada:	7812      	ldrb	r2, [r2, #0]
 8002adc:	4610      	mov	r0, r2
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	6811      	ldr	r1, [r2, #0]
 8002ae2:	ea43 0200 	orr.w	r2, r3, r0
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	440b      	add	r3, r1
 8002aec:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002af0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3303      	adds	r3, #3
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	061a      	lsls	r2, r3, #24
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3302      	adds	r3, #2
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	041b      	lsls	r3, r3, #16
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3301      	adds	r3, #1
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	021b      	lsls	r3, r3, #8
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	7812      	ldrb	r2, [r2, #0]
 8002b12:	4610      	mov	r0, r2
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	6811      	ldr	r1, [r2, #0]
 8002b18:	ea43 0200 	orr.w	r2, r3, r0
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	440b      	add	r3, r1
 8002b22:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002b26:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	3318      	adds	r3, #24
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4413      	add	r3, r2
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	6811      	ldr	r1, [r2, #0]
 8002b3a:	f043 0201 	orr.w	r2, r3, #1
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	3318      	adds	r3, #24
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	440b      	add	r3, r1
 8002b46:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e00e      	b.n	8002b6a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e006      	b.n	8002b6a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
  }
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3724      	adds	r7, #36	; 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b085      	sub	sp, #20
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b86:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d002      	beq.n	8002b94 <HAL_CAN_ActivateNotification+0x1e>
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d109      	bne.n	8002ba8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6959      	ldr	r1, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e006      	b.n	8002bb6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002be0:	4013      	ands	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf6:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	60d3      	str	r3, [r2, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <__NVIC_GetPriorityGrouping+0x18>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	f003 0307 	and.w	r3, r3, #7
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	db0b      	blt.n	8002c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	4907      	ldr	r1, [pc, #28]	; (8002c60 <__NVIC_EnableIRQ+0x38>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2001      	movs	r0, #1
 8002c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000e100 	.word	0xe000e100

08002c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	6039      	str	r1, [r7, #0]
 8002c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	db0a      	blt.n	8002c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	490c      	ldr	r1, [pc, #48]	; (8002cb0 <__NVIC_SetPriority+0x4c>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	0112      	lsls	r2, r2, #4
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	440b      	add	r3, r1
 8002c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c8c:	e00a      	b.n	8002ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4908      	ldr	r1, [pc, #32]	; (8002cb4 <__NVIC_SetPriority+0x50>)
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	3b04      	subs	r3, #4
 8002c9c:	0112      	lsls	r2, r2, #4
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	761a      	strb	r2, [r3, #24]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000e100 	.word	0xe000e100
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	; 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f1c3 0307 	rsb	r3, r3, #7
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	bf28      	it	cs
 8002cd6:	2304      	movcs	r3, #4
 8002cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d902      	bls.n	8002ce8 <NVIC_EncodePriority+0x30>
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3b03      	subs	r3, #3
 8002ce6:	e000      	b.n	8002cea <NVIC_EncodePriority+0x32>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	43d9      	mvns	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	4313      	orrs	r3, r2
         );
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3724      	adds	r7, #36	; 0x24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ff4c 	bl	8002bc4 <__NVIC_SetPriorityGrouping>
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d46:	f7ff ff61 	bl	8002c0c <__NVIC_GetPriorityGrouping>
 8002d4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	6978      	ldr	r0, [r7, #20]
 8002d52:	f7ff ffb1 	bl	8002cb8 <NVIC_EncodePriority>
 8002d56:	4602      	mov	r2, r0
 8002d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ff80 	bl	8002c64 <__NVIC_SetPriority>
}
 8002d64:	bf00      	nop
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff ff54 	bl	8002c28 <__NVIC_EnableIRQ>
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e08d      	b.n	8002eb6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_DMA_Init+0x138>)
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d80f      	bhi.n	8002dc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	4b45      	ldr	r3, [pc, #276]	; (8002ec4 <HAL_DMA_Init+0x13c>)
 8002dae:	4413      	add	r3, r2
 8002db0:	4a45      	ldr	r2, [pc, #276]	; (8002ec8 <HAL_DMA_Init+0x140>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	009a      	lsls	r2, r3, #2
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a42      	ldr	r2, [pc, #264]	; (8002ecc <HAL_DMA_Init+0x144>)
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40
 8002dc4:	e00e      	b.n	8002de4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b40      	ldr	r3, [pc, #256]	; (8002ed0 <HAL_DMA_Init+0x148>)
 8002dce:	4413      	add	r3, r2
 8002dd0:	4a3d      	ldr	r2, [pc, #244]	; (8002ec8 <HAL_DMA_Init+0x140>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	009a      	lsls	r2, r3, #2
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a3c      	ldr	r2, [pc, #240]	; (8002ed4 <HAL_DMA_Init+0x14c>)
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f9b6 	bl	80031a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e44:	d102      	bne.n	8002e4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e60:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d010      	beq.n	8002e8c <HAL_DMA_Init+0x104>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d80c      	bhi.n	8002e8c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f9d6 	bl	8003224 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	e008      	b.n	8002e9e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40020407 	.word	0x40020407
 8002ec4:	bffdfff8 	.word	0xbffdfff8
 8002ec8:	cccccccd 	.word	0xcccccccd
 8002ecc:	40020000 	.word	0x40020000
 8002ed0:	bffdfbf8 	.word	0xbffdfbf8
 8002ed4:	40020400 	.word	0x40020400

08002ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_DMA_Start_IT+0x20>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e066      	b.n	8002fc6 <HAL_DMA_Start_IT+0xee>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d155      	bne.n	8002fb8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f8fb 	bl	800312c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 020e 	orr.w	r2, r2, #14
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e00f      	b.n	8002f70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0204 	bic.w	r2, r2, #4
 8002f5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 020a 	orr.w	r2, r2, #10
 8002f6e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f8c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	e005      	b.n	8002fc4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f003 031c 	and.w	r3, r3, #28
 8002fee:	2204      	movs	r2, #4
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d026      	beq.n	8003048 <HAL_DMA_IRQHandler+0x7a>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d021      	beq.n	8003048 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	d107      	bne.n	8003022 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0204 	bic.w	r2, r2, #4
 8003020:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	f003 021c 	and.w	r2, r3, #28
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2104      	movs	r1, #4
 8003030:	fa01 f202 	lsl.w	r2, r1, r2
 8003034:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	2b00      	cmp	r3, #0
 800303c:	d071      	beq.n	8003122 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003046:	e06c      	b.n	8003122 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	f003 031c 	and.w	r3, r3, #28
 8003050:	2202      	movs	r2, #2
 8003052:	409a      	lsls	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d02e      	beq.n	80030ba <HAL_DMA_IRQHandler+0xec>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d029      	beq.n	80030ba <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10b      	bne.n	800308c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 020a 	bic.w	r2, r2, #10
 8003082:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	f003 021c 	and.w	r2, r3, #28
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	2102      	movs	r1, #2
 800309a:	fa01 f202 	lsl.w	r2, r1, r2
 800309e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d038      	beq.n	8003122 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80030b8:	e033      	b.n	8003122 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	f003 031c 	and.w	r3, r3, #28
 80030c2:	2208      	movs	r2, #8
 80030c4:	409a      	lsls	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d02a      	beq.n	8003124 <HAL_DMA_IRQHandler+0x156>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d025      	beq.n	8003124 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 020e 	bic.w	r2, r2, #14
 80030e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	f003 021c 	and.w	r2, r3, #28
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	2101      	movs	r1, #1
 80030f6:	fa01 f202 	lsl.w	r2, r1, r2
 80030fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	2b00      	cmp	r3, #0
 8003118:	d004      	beq.n	8003124 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003122:	bf00      	nop
 8003124:	bf00      	nop
}
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003142:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	2b00      	cmp	r3, #0
 800314a:	d004      	beq.n	8003156 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003154:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f003 021c 	and.w	r2, r3, #28
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2101      	movs	r1, #1
 8003164:	fa01 f202 	lsl.w	r2, r1, r2
 8003168:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b10      	cmp	r3, #16
 8003178:	d108      	bne.n	800318c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800318a:	e007      	b.n	800319c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	60da      	str	r2, [r3, #12]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b17      	ldr	r3, [pc, #92]	; (8003214 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d80a      	bhi.n	80031d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031c8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6493      	str	r3, [r2, #72]	; 0x48
 80031d0:	e007      	b.n	80031e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	089b      	lsrs	r3, r3, #2
 80031d8:	009a      	lsls	r2, r3, #2
 80031da:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80031dc:	4413      	add	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	3b08      	subs	r3, #8
 80031ea:	4a0c      	ldr	r2, [pc, #48]	; (800321c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a0a      	ldr	r2, [pc, #40]	; (8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80031f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	2201      	movs	r2, #1
 8003202:	409a      	lsls	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	40020407 	.word	0x40020407
 8003218:	4002081c 	.word	0x4002081c
 800321c:	cccccccd 	.word	0xcccccccd
 8003220:	40020880 	.word	0x40020880

08003224 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	461a      	mov	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a08      	ldr	r2, [pc, #32]	; (8003268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003246:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3b01      	subs	r3, #1
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2201      	movs	r2, #1
 8003252:	409a      	lsls	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	1000823f 	.word	0x1000823f
 8003268:	40020940 	.word	0x40020940

0800326c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800327a:	e166      	b.n	800354a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	4013      	ands	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8158 	beq.w	8003544 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d005      	beq.n	80032ac <HAL_GPIO_Init+0x40>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d130      	bne.n	800330e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032e2:	2201      	movs	r2, #1
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4013      	ands	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	f003 0201 	and.w	r2, r3, #1
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b03      	cmp	r3, #3
 8003318:	d017      	beq.n	800334a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	2203      	movs	r2, #3
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d123      	bne.n	800339e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	08da      	lsrs	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3208      	adds	r2, #8
 800335e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003362:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	220f      	movs	r2, #15
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	08da      	lsrs	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3208      	adds	r2, #8
 8003398:	6939      	ldr	r1, [r7, #16]
 800339a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	2203      	movs	r2, #3
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0203 	and.w	r2, r3, #3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80b2 	beq.w	8003544 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e0:	4b61      	ldr	r3, [pc, #388]	; (8003568 <HAL_GPIO_Init+0x2fc>)
 80033e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e4:	4a60      	ldr	r2, [pc, #384]	; (8003568 <HAL_GPIO_Init+0x2fc>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6613      	str	r3, [r2, #96]	; 0x60
 80033ec:	4b5e      	ldr	r3, [pc, #376]	; (8003568 <HAL_GPIO_Init+0x2fc>)
 80033ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033f8:	4a5c      	ldr	r2, [pc, #368]	; (800356c <HAL_GPIO_Init+0x300>)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	089b      	lsrs	r3, r3, #2
 80033fe:	3302      	adds	r3, #2
 8003400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	220f      	movs	r2, #15
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003422:	d02b      	beq.n	800347c <HAL_GPIO_Init+0x210>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a52      	ldr	r2, [pc, #328]	; (8003570 <HAL_GPIO_Init+0x304>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d025      	beq.n	8003478 <HAL_GPIO_Init+0x20c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a51      	ldr	r2, [pc, #324]	; (8003574 <HAL_GPIO_Init+0x308>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d01f      	beq.n	8003474 <HAL_GPIO_Init+0x208>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a50      	ldr	r2, [pc, #320]	; (8003578 <HAL_GPIO_Init+0x30c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d019      	beq.n	8003470 <HAL_GPIO_Init+0x204>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a4f      	ldr	r2, [pc, #316]	; (800357c <HAL_GPIO_Init+0x310>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <HAL_GPIO_Init+0x200>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a4e      	ldr	r2, [pc, #312]	; (8003580 <HAL_GPIO_Init+0x314>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00d      	beq.n	8003468 <HAL_GPIO_Init+0x1fc>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a4d      	ldr	r2, [pc, #308]	; (8003584 <HAL_GPIO_Init+0x318>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <HAL_GPIO_Init+0x1f8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a4c      	ldr	r2, [pc, #304]	; (8003588 <HAL_GPIO_Init+0x31c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d101      	bne.n	8003460 <HAL_GPIO_Init+0x1f4>
 800345c:	2307      	movs	r3, #7
 800345e:	e00e      	b.n	800347e <HAL_GPIO_Init+0x212>
 8003460:	2308      	movs	r3, #8
 8003462:	e00c      	b.n	800347e <HAL_GPIO_Init+0x212>
 8003464:	2306      	movs	r3, #6
 8003466:	e00a      	b.n	800347e <HAL_GPIO_Init+0x212>
 8003468:	2305      	movs	r3, #5
 800346a:	e008      	b.n	800347e <HAL_GPIO_Init+0x212>
 800346c:	2304      	movs	r3, #4
 800346e:	e006      	b.n	800347e <HAL_GPIO_Init+0x212>
 8003470:	2303      	movs	r3, #3
 8003472:	e004      	b.n	800347e <HAL_GPIO_Init+0x212>
 8003474:	2302      	movs	r3, #2
 8003476:	e002      	b.n	800347e <HAL_GPIO_Init+0x212>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <HAL_GPIO_Init+0x212>
 800347c:	2300      	movs	r3, #0
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	f002 0203 	and.w	r2, r2, #3
 8003484:	0092      	lsls	r2, r2, #2
 8003486:	4093      	lsls	r3, r2
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800348e:	4937      	ldr	r1, [pc, #220]	; (800356c <HAL_GPIO_Init+0x300>)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	3302      	adds	r3, #2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800349c:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_GPIO_Init+0x320>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4013      	ands	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034c0:	4a32      	ldr	r2, [pc, #200]	; (800358c <HAL_GPIO_Init+0x320>)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034c6:	4b31      	ldr	r3, [pc, #196]	; (800358c <HAL_GPIO_Init+0x320>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4013      	ands	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034ea:	4a28      	ldr	r2, [pc, #160]	; (800358c <HAL_GPIO_Init+0x320>)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034f0:	4b26      	ldr	r3, [pc, #152]	; (800358c <HAL_GPIO_Init+0x320>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003514:	4a1d      	ldr	r2, [pc, #116]	; (800358c <HAL_GPIO_Init+0x320>)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800351a:	4b1c      	ldr	r3, [pc, #112]	; (800358c <HAL_GPIO_Init+0x320>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	43db      	mvns	r3, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4013      	ands	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800353e:	4a13      	ldr	r2, [pc, #76]	; (800358c <HAL_GPIO_Init+0x320>)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	3301      	adds	r3, #1
 8003548:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	f47f ae91 	bne.w	800327c <HAL_GPIO_Init+0x10>
  }
}
 800355a:	bf00      	nop
 800355c:	bf00      	nop
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	40021000 	.word	0x40021000
 800356c:	40010000 	.word	0x40010000
 8003570:	48000400 	.word	0x48000400
 8003574:	48000800 	.word	0x48000800
 8003578:	48000c00 	.word	0x48000c00
 800357c:	48001000 	.word	0x48001000
 8003580:	48001400 	.word	0x48001400
 8003584:	48001800 	.word	0x48001800
 8003588:	48001c00 	.word	0x48001c00
 800358c:	40010400 	.word	0x40010400

08003590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	807b      	strh	r3, [r7, #2]
 800359c:	4613      	mov	r3, r2
 800359e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035a0:	787b      	ldrb	r3, [r7, #1]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035a6:	887a      	ldrh	r2, [r7, #2]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035ac:	e002      	b.n	80035b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ae:	887a      	ldrh	r2, [r7, #2]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4013      	ands	r3, r2
 80035d8:	041a      	lsls	r2, r3, #16
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	43d9      	mvns	r1, r3
 80035de:	887b      	ldrh	r3, [r7, #2]
 80035e0:	400b      	ands	r3, r1
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	619a      	str	r2, [r3, #24]
}
 80035e8:	bf00      	nop
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800360a:	4a05      	ldr	r2, [pc, #20]	; (8003620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fc fec4 	bl	80003a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40010400 	.word	0x40010400

08003624 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003628:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <HAL_PWREx_GetVoltageRange+0x3c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003634:	d102      	bne.n	800363c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800363a:	e00b      	b.n	8003654 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800363c:	4b08      	ldr	r3, [pc, #32]	; (8003660 <HAL_PWREx_GetVoltageRange+0x3c>)
 800363e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364a:	d102      	bne.n	8003652 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800364c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003650:	e000      	b.n	8003654 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003652:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003654:	4618      	mov	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40007000 	.word	0x40007000

08003664 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d141      	bne.n	80036f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003672:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800367a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367e:	d131      	bne.n	80036e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003680:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003686:	4a46      	ldr	r2, [pc, #280]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800368c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003690:	4b43      	ldr	r3, [pc, #268]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003698:	4a41      	ldr	r2, [pc, #260]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800369e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80036a0:	4b40      	ldr	r3, [pc, #256]	; (80037a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2232      	movs	r2, #50	; 0x32
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	4a3f      	ldr	r2, [pc, #252]	; (80037a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036ac:	fba2 2303 	umull	r2, r3, r2, r3
 80036b0:	0c9b      	lsrs	r3, r3, #18
 80036b2:	3301      	adds	r3, #1
 80036b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b6:	e002      	b.n	80036be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036be:	4b38      	ldr	r3, [pc, #224]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ca:	d102      	bne.n	80036d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f2      	bne.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036d2:	4b33      	ldr	r3, [pc, #204]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036de:	d158      	bne.n	8003792 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e057      	b.n	8003794 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036e4:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ea:	4a2d      	ldr	r2, [pc, #180]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036f4:	e04d      	b.n	8003792 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fc:	d141      	bne.n	8003782 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036fe:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370a:	d131      	bne.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800370c:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003712:	4a23      	ldr	r2, [pc, #140]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003718:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800371c:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003724:	4a1e      	ldr	r2, [pc, #120]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800372a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800372c:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2232      	movs	r2, #50	; 0x32
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	0c9b      	lsrs	r3, r3, #18
 800373e:	3301      	adds	r3, #1
 8003740:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003742:	e002      	b.n	800374a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3b01      	subs	r3, #1
 8003748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800374a:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003756:	d102      	bne.n	800375e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f2      	bne.n	8003744 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800375e:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376a:	d112      	bne.n	8003792 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e011      	b.n	8003794 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003776:	4a0a      	ldr	r2, [pc, #40]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003780:	e007      	b.n	8003792 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003782:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800378a:	4a05      	ldr	r2, [pc, #20]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003790:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40007000 	.word	0x40007000
 80037a4:	20000000 	.word	0x20000000
 80037a8:	431bde83 	.word	0x431bde83

080037ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	; 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f000 bc68 	b.w	8004090 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c0:	4b97      	ldr	r3, [pc, #604]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037ca:	4b95      	ldr	r3, [pc, #596]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 80e6 	beq.w	80039ae <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d007      	beq.n	80037f8 <HAL_RCC_OscConfig+0x4c>
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	2b0c      	cmp	r3, #12
 80037ec:	f040 808d 	bne.w	800390a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	f040 8089 	bne.w	800390a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037f8:	4b89      	ldr	r3, [pc, #548]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d006      	beq.n	8003812 <HAL_RCC_OscConfig+0x66>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d102      	bne.n	8003812 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	f000 bc3f 	b.w	8004090 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003816:	4b82      	ldr	r3, [pc, #520]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <HAL_RCC_OscConfig+0x80>
 8003822:	4b7f      	ldr	r3, [pc, #508]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800382a:	e005      	b.n	8003838 <HAL_RCC_OscConfig+0x8c>
 800382c:	4b7c      	ldr	r3, [pc, #496]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 800382e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003838:	4293      	cmp	r3, r2
 800383a:	d224      	bcs.n	8003886 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fe49 	bl	80044d8 <RCC_SetFlashLatencyFromMSIRange>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f000 bc1f 	b.w	8004090 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003852:	4b73      	ldr	r3, [pc, #460]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a72      	ldr	r2, [pc, #456]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003858:	f043 0308 	orr.w	r3, r3, #8
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4b70      	ldr	r3, [pc, #448]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	496d      	ldr	r1, [pc, #436]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003870:	4b6b      	ldr	r3, [pc, #428]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	4968      	ldr	r1, [pc, #416]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
 8003884:	e025      	b.n	80038d2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003886:	4b66      	ldr	r3, [pc, #408]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a65      	ldr	r2, [pc, #404]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 800388c:	f043 0308 	orr.w	r3, r3, #8
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	4960      	ldr	r1, [pc, #384]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038a4:	4b5e      	ldr	r3, [pc, #376]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	495b      	ldr	r1, [pc, #364]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fe08 	bl	80044d8 <RCC_SetFlashLatencyFromMSIRange>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e3de      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038d2:	f000 fd21 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80038d6:	4602      	mov	r2, r0
 80038d8:	4b51      	ldr	r3, [pc, #324]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	4950      	ldr	r1, [pc, #320]	; (8003a24 <HAL_RCC_OscConfig+0x278>)
 80038e4:	5ccb      	ldrb	r3, [r1, r3]
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	fa22 f303 	lsr.w	r3, r2, r3
 80038ee:	4a4e      	ldr	r2, [pc, #312]	; (8003a28 <HAL_RCC_OscConfig+0x27c>)
 80038f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038f2:	4b4e      	ldr	r3, [pc, #312]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd f9c8 	bl	8000c8c <HAL_InitTick>
 80038fc:	4603      	mov	r3, r0
 80038fe:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d052      	beq.n	80039ac <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	e3c2      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d032      	beq.n	8003978 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003912:	4b43      	ldr	r3, [pc, #268]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a42      	ldr	r2, [pc, #264]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800391e:	f7fd fb03 	bl	8000f28 <HAL_GetTick>
 8003922:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003926:	f7fd faff 	bl	8000f28 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e3ab      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003938:	4b39      	ldr	r3, [pc, #228]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003944:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a35      	ldr	r2, [pc, #212]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 800394a:	f043 0308 	orr.w	r3, r3, #8
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b33      	ldr	r3, [pc, #204]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	4930      	ldr	r1, [pc, #192]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003962:	4b2f      	ldr	r3, [pc, #188]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	492b      	ldr	r1, [pc, #172]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
 8003976:	e01a      	b.n	80039ae <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003978:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a28      	ldr	r2, [pc, #160]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003984:	f7fd fad0 	bl	8000f28 <HAL_GetTick>
 8003988:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800398c:	f7fd facc 	bl	8000f28 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e378      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800399e:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x1e0>
 80039aa:	e000      	b.n	80039ae <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d073      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d005      	beq.n	80039cc <HAL_RCC_OscConfig+0x220>
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	2b0c      	cmp	r3, #12
 80039c4:	d10e      	bne.n	80039e4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d10b      	bne.n	80039e4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d063      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x2f4>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d15f      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e355      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ec:	d106      	bne.n	80039fc <HAL_RCC_OscConfig+0x250>
 80039ee:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a0b      	ldr	r2, [pc, #44]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e025      	b.n	8003a48 <HAL_RCC_OscConfig+0x29c>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a04:	d114      	bne.n	8003a30 <HAL_RCC_OscConfig+0x284>
 8003a06:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a05      	ldr	r2, [pc, #20]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a02      	ldr	r2, [pc, #8]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e013      	b.n	8003a48 <HAL_RCC_OscConfig+0x29c>
 8003a20:	40021000 	.word	0x40021000
 8003a24:	08005744 	.word	0x08005744
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	20000004 	.word	0x20000004
 8003a30:	4b8f      	ldr	r3, [pc, #572]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a8e      	ldr	r2, [pc, #568]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	4b8c      	ldr	r3, [pc, #560]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a8b      	ldr	r2, [pc, #556]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fd fa6a 	bl	8000f28 <HAL_GetTick>
 8003a54:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a58:	f7fd fa66 	bl	8000f28 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e312      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a6a:	4b81      	ldr	r3, [pc, #516]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x2ac>
 8003a76:	e014      	b.n	8003aa2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fd fa56 	bl	8000f28 <HAL_GetTick>
 8003a7c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a80:	f7fd fa52 	bl	8000f28 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	; 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e2fe      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a92:	4b77      	ldr	r3, [pc, #476]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x2d4>
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d060      	beq.n	8003b70 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x314>
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	2b0c      	cmp	r3, #12
 8003ab8:	d119      	bne.n	8003aee <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d116      	bne.n	8003aee <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac0:	4b6b      	ldr	r3, [pc, #428]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x32c>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e2db      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad8:	4b65      	ldr	r3, [pc, #404]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	4962      	ldr	r1, [pc, #392]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aec:	e040      	b.n	8003b70 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d023      	beq.n	8003b3e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af6:	4b5e      	ldr	r3, [pc, #376]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a5d      	ldr	r2, [pc, #372]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7fd fa11 	bl	8000f28 <HAL_GetTick>
 8003b06:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0a:	f7fd fa0d 	bl	8000f28 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e2b9      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b1c:	4b54      	ldr	r3, [pc, #336]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b28:	4b51      	ldr	r3, [pc, #324]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	061b      	lsls	r3, r3, #24
 8003b36:	494e      	ldr	r1, [pc, #312]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	604b      	str	r3, [r1, #4]
 8003b3c:	e018      	b.n	8003b70 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b3e:	4b4c      	ldr	r3, [pc, #304]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a4b      	ldr	r2, [pc, #300]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4a:	f7fd f9ed 	bl	8000f28 <HAL_GetTick>
 8003b4e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b52:	f7fd f9e9 	bl	8000f28 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e295      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b64:	4b42      	ldr	r3, [pc, #264]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1f0      	bne.n	8003b52 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8082 	beq.w	8003c82 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d05f      	beq.n	8003c46 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003b86:	4b3a      	ldr	r3, [pc, #232]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b8c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d037      	beq.n	8003c0c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d006      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e26d      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d01b      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003bbe:	4b2c      	ldr	r3, [pc, #176]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc4:	4a2a      	ldr	r2, [pc, #168]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bce:	f7fd f9ab 	bl	8000f28 <HAL_GetTick>
 8003bd2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7fd f9a7 	bl	8000f28 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b11      	cmp	r3, #17
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e253      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003be8:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1ef      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfc:	f023 0210 	bic.w	r2, r3, #16
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	491a      	ldr	r1, [pc, #104]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0c:	4b18      	ldr	r3, [pc, #96]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c12:	4a17      	ldr	r2, [pc, #92]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1c:	f7fd f984 	bl	8000f28 <HAL_GetTick>
 8003c20:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c24:	f7fd f980 	bl	8000f28 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b11      	cmp	r3, #17
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e22c      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c36:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0ef      	beq.n	8003c24 <HAL_RCC_OscConfig+0x478>
 8003c44:	e01d      	b.n	8003c82 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c46:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4c:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c56:	f7fd f967 	bl	8000f28 <HAL_GetTick>
 8003c5a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c5e:	f7fd f963 	bl	8000f28 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b11      	cmp	r3, #17
 8003c6a:	d903      	bls.n	8003c74 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e20f      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
 8003c70:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c74:	4b83      	ldr	r3, [pc, #524]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1ed      	bne.n	8003c5e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80bd 	beq.w	8003e0a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c90:	2300      	movs	r3, #0
 8003c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c96:	4b7b      	ldr	r3, [pc, #492]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10e      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca2:	4b78      	ldr	r3, [pc, #480]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca6:	4a77      	ldr	r2, [pc, #476]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cac:	6593      	str	r3, [r2, #88]	; 0x58
 8003cae:	4b75      	ldr	r3, [pc, #468]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc0:	4b71      	ldr	r3, [pc, #452]	; (8003e88 <HAL_RCC_OscConfig+0x6dc>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d118      	bne.n	8003cfe <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ccc:	4b6e      	ldr	r3, [pc, #440]	; (8003e88 <HAL_RCC_OscConfig+0x6dc>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a6d      	ldr	r2, [pc, #436]	; (8003e88 <HAL_RCC_OscConfig+0x6dc>)
 8003cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd8:	f7fd f926 	bl	8000f28 <HAL_GetTick>
 8003cdc:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce0:	f7fd f922 	bl	8000f28 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1ce      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf2:	4b65      	ldr	r3, [pc, #404]	; (8003e88 <HAL_RCC_OscConfig+0x6dc>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d02c      	beq.n	8003d64 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003d0a:	4b5e      	ldr	r3, [pc, #376]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1c:	4959      	ldr	r1, [pc, #356]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d010      	beq.n	8003d52 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d30:	4b54      	ldr	r3, [pc, #336]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d36:	4a53      	ldr	r2, [pc, #332]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003d38:	f043 0304 	orr.w	r3, r3, #4
 8003d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d40:	4b50      	ldr	r3, [pc, #320]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d46:	4a4f      	ldr	r2, [pc, #316]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d50:	e018      	b.n	8003d84 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d52:	4b4c      	ldr	r3, [pc, #304]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	4a4a      	ldr	r2, [pc, #296]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d62:	e00f      	b.n	8003d84 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d64:	4b47      	ldr	r3, [pc, #284]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	4a46      	ldr	r2, [pc, #280]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003d6c:	f023 0301 	bic.w	r3, r3, #1
 8003d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d74:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7a:	4a42      	ldr	r2, [pc, #264]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003d7c:	f023 0304 	bic.w	r3, r3, #4
 8003d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d016      	beq.n	8003dba <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fd f8cc 	bl	8000f28 <HAL_GetTick>
 8003d90:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d94:	f7fd f8c8 	bl	8000f28 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e172      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003daa:	4b36      	ldr	r3, [pc, #216]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ed      	beq.n	8003d94 <HAL_RCC_OscConfig+0x5e8>
 8003db8:	e01d      	b.n	8003df6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fd f8b5 	bl	8000f28 <HAL_GetTick>
 8003dbe:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dc0:	e00a      	b.n	8003dd8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fd f8b1 	bl	8000f28 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e15b      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dd8:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1ed      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003de6:	4b27      	ldr	r3, [pc, #156]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	4a25      	ldr	r2, [pc, #148]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d105      	bne.n	8003e0a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfe:	4b21      	ldr	r3, [pc, #132]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e02:	4a20      	ldr	r2, [pc, #128]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d041      	beq.n	8003e9a <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d01c      	beq.n	8003e58 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e1e:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e24:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2e:	f7fd f87b 	bl	8000f28 <HAL_GetTick>
 8003e32:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e36:	f7fd f877 	bl	8000f28 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e123      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0ef      	beq.n	8003e36 <HAL_RCC_OscConfig+0x68a>
 8003e56:	e020      	b.n	8003e9a <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e5e:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e68:	f7fd f85e 	bl	8000f28 <HAL_GetTick>
 8003e6c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e6e:	e00d      	b.n	8003e8c <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e70:	f7fd f85a 	bl	8000f28 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d906      	bls.n	8003e8c <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e106      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e8c:	4b82      	ldr	r3, [pc, #520]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8003e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1ea      	bne.n	8003e70 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80f5 	beq.w	800408e <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	f040 80cb 	bne.w	8004044 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003eae:	4b7a      	ldr	r3, [pc, #488]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0203 	and.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d12c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d123      	bne.n	8003f1c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d11b      	bne.n	8003f1c <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d113      	bne.n	8003f1c <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	3b01      	subs	r3, #1
 8003f02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d109      	bne.n	8003f1c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	3b01      	subs	r3, #1
 8003f16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d06d      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	2b0c      	cmp	r3, #12
 8003f20:	d068      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f22:	4b5d      	ldr	r3, [pc, #372]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d105      	bne.n	8003f3a <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f2e:	4b5a      	ldr	r3, [pc, #360]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e0a8      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f3e:	4b56      	ldr	r3, [pc, #344]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a55      	ldr	r2, [pc, #340]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8003f44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f4a:	f7fc ffed 	bl	8000f28 <HAL_GetTick>
 8003f4e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f52:	f7fc ffe9 	bl	8000f28 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e095      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f64:	4b4c      	ldr	r3, [pc, #304]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f0      	bne.n	8003f52 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f70:	4b49      	ldr	r3, [pc, #292]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	4b49      	ldr	r3, [pc, #292]	; (800409c <HAL_RCC_OscConfig+0x8f0>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f80:	3a01      	subs	r2, #1
 8003f82:	0112      	lsls	r2, r2, #4
 8003f84:	4311      	orrs	r1, r2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f8a:	0212      	lsls	r2, r2, #8
 8003f8c:	4311      	orrs	r1, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f92:	0852      	lsrs	r2, r2, #1
 8003f94:	3a01      	subs	r2, #1
 8003f96:	0552      	lsls	r2, r2, #21
 8003f98:	4311      	orrs	r1, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f9e:	0852      	lsrs	r2, r2, #1
 8003fa0:	3a01      	subs	r2, #1
 8003fa2:	0652      	lsls	r2, r2, #25
 8003fa4:	4311      	orrs	r1, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003faa:	06d2      	lsls	r2, r2, #27
 8003fac:	430a      	orrs	r2, r1
 8003fae:	493a      	ldr	r1, [pc, #232]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fb4:	4b38      	ldr	r3, [pc, #224]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a37      	ldr	r2, [pc, #220]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8003fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fc0:	4b35      	ldr	r3, [pc, #212]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4a34      	ldr	r2, [pc, #208]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8003fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fcc:	f7fc ffac 	bl	8000f28 <HAL_GetTick>
 8003fd0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7fc ffa8 	bl	8000f28 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e054      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe6:	4b2c      	ldr	r3, [pc, #176]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ff2:	e04c      	b.n	800408e <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e04b      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff8:	4b27      	ldr	r3, [pc, #156]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d144      	bne.n	800408e <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004004:	4b24      	ldr	r3, [pc, #144]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a23      	ldr	r2, [pc, #140]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 800400a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800400e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004010:	4b21      	ldr	r3, [pc, #132]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4a20      	ldr	r2, [pc, #128]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8004016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800401c:	f7fc ff84 	bl	8000f28 <HAL_GetTick>
 8004020:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004024:	f7fc ff80 	bl	8000f28 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e02c      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004036:	4b18      	ldr	r3, [pc, #96]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x878>
 8004042:	e024      	b.n	800408e <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	2b0c      	cmp	r3, #12
 8004048:	d01f      	beq.n	800408a <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404a:	4b13      	ldr	r3, [pc, #76]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a12      	ldr	r2, [pc, #72]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8004050:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7fc ff67 	bl	8000f28 <HAL_GetTick>
 800405a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405e:	f7fc ff63 	bl	8000f28 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e00f      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004070:	4b09      	ldr	r3, [pc, #36]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1f0      	bne.n	800405e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	4905      	ldr	r1, [pc, #20]	; (8004098 <HAL_RCC_OscConfig+0x8ec>)
 8004082:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <HAL_RCC_OscConfig+0x8f4>)
 8004084:	4013      	ands	r3, r2
 8004086:	60cb      	str	r3, [r1, #12]
 8004088:	e001      	b.n	800408e <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3728      	adds	r7, #40	; 0x28
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40021000 	.word	0x40021000
 800409c:	019d800c 	.word	0x019d800c
 80040a0:	feeefffc 	.word	0xfeeefffc

080040a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e11d      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040bc:	4b90      	ldr	r3, [pc, #576]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d910      	bls.n	80040ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b8d      	ldr	r3, [pc, #564]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 020f 	bic.w	r2, r3, #15
 80040d2:	498b      	ldr	r1, [pc, #556]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b89      	ldr	r3, [pc, #548]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e105      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d010      	beq.n	800411a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	4b81      	ldr	r3, [pc, #516]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004104:	429a      	cmp	r2, r3
 8004106:	d908      	bls.n	800411a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004108:	4b7e      	ldr	r3, [pc, #504]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	497b      	ldr	r1, [pc, #492]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d079      	beq.n	800421a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d11e      	bne.n	800416c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412e:	4b75      	ldr	r3, [pc, #468]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e0dc      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800413e:	f000 fa25 	bl	800458c <RCC_GetSysClockFreqFromPLLSource>
 8004142:	4603      	mov	r3, r0
 8004144:	4a70      	ldr	r2, [pc, #448]	; (8004308 <HAL_RCC_ClockConfig+0x264>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d946      	bls.n	80041d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800414a:	4b6e      	ldr	r3, [pc, #440]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d140      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004156:	4b6b      	ldr	r3, [pc, #428]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800415e:	4a69      	ldr	r2, [pc, #420]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004164:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004166:	2380      	movs	r3, #128	; 0x80
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	e035      	b.n	80041d8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d107      	bne.n	8004184 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004174:	4b63      	ldr	r3, [pc, #396]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d115      	bne.n	80041ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0b9      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d107      	bne.n	800419c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800418c:	4b5d      	ldr	r3, [pc, #372]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d109      	bne.n	80041ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0ad      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800419c:	4b59      	ldr	r3, [pc, #356]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0a5      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80041ac:	f000 f8b4 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80041b0:	4603      	mov	r3, r0
 80041b2:	4a55      	ldr	r2, [pc, #340]	; (8004308 <HAL_RCC_ClockConfig+0x264>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d90f      	bls.n	80041d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80041b8:	4b52      	ldr	r3, [pc, #328]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d109      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041c4:	4b4f      	ldr	r3, [pc, #316]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041cc:	4a4d      	ldr	r2, [pc, #308]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80041ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041d8:	4b4a      	ldr	r3, [pc, #296]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f023 0203 	bic.w	r2, r3, #3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	4947      	ldr	r1, [pc, #284]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ea:	f7fc fe9d 	bl	8000f28 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f0:	e00a      	b.n	8004208 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f2:	f7fc fe99 	bl	8000f28 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004200:	4293      	cmp	r3, r2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e077      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004208:	4b3e      	ldr	r3, [pc, #248]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 020c 	and.w	r2, r3, #12
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	429a      	cmp	r2, r3
 8004218:	d1eb      	bne.n	80041f2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b80      	cmp	r3, #128	; 0x80
 800421e:	d105      	bne.n	800422c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004220:	4b38      	ldr	r3, [pc, #224]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a37      	ldr	r2, [pc, #220]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800422a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d010      	beq.n	800425a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	4b31      	ldr	r3, [pc, #196]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004244:	429a      	cmp	r2, r3
 8004246:	d208      	bcs.n	800425a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004248:	4b2e      	ldr	r3, [pc, #184]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	492b      	ldr	r1, [pc, #172]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004256:	4313      	orrs	r3, r2
 8004258:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800425a:	4b29      	ldr	r3, [pc, #164]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d210      	bcs.n	800428a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004268:	4b25      	ldr	r3, [pc, #148]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 020f 	bic.w	r2, r3, #15
 8004270:	4923      	ldr	r1, [pc, #140]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	4313      	orrs	r3, r2
 8004276:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004278:	4b21      	ldr	r3, [pc, #132]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 030f 	and.w	r3, r3, #15
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d001      	beq.n	800428a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e036      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b00      	cmp	r3, #0
 8004294:	d008      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	4918      	ldr	r1, [pc, #96]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d009      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4910      	ldr	r1, [pc, #64]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042c8:	f000 f826 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	091b      	lsrs	r3, r3, #4
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	490c      	ldr	r1, [pc, #48]	; (800430c <HAL_RCC_ClockConfig+0x268>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
 80042e4:	4a0a      	ldr	r2, [pc, #40]	; (8004310 <HAL_RCC_ClockConfig+0x26c>)
 80042e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <HAL_RCC_ClockConfig+0x270>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fc fccd 	bl	8000c8c <HAL_InitTick>
 80042f2:	4603      	mov	r3, r0
 80042f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40022000 	.word	0x40022000
 8004304:	40021000 	.word	0x40021000
 8004308:	04c4b400 	.word	0x04c4b400
 800430c:	08005744 	.word	0x08005744
 8004310:	20000000 	.word	0x20000000
 8004314:	20000004 	.word	0x20000004

08004318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004318:	b480      	push	{r7}
 800431a:	b089      	sub	sp, #36	; 0x24
 800431c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004326:	4b3e      	ldr	r3, [pc, #248]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004330:	4b3b      	ldr	r3, [pc, #236]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x34>
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b0c      	cmp	r3, #12
 8004344:	d121      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d11e      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800434c:	4b34      	ldr	r3, [pc, #208]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d107      	bne.n	8004368 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004358:	4b31      	ldr	r3, [pc, #196]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 800435a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e005      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004368:	4b2d      	ldr	r3, [pc, #180]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004374:	4a2b      	ldr	r2, [pc, #172]	; (8004424 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10d      	bne.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004388:	e00a      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b04      	cmp	r3, #4
 800438e:	d102      	bne.n	8004396 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004390:	4b25      	ldr	r3, [pc, #148]	; (8004428 <HAL_RCC_GetSysClockFreq+0x110>)
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	e004      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b08      	cmp	r3, #8
 800439a:	d101      	bne.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800439c:	4b23      	ldr	r3, [pc, #140]	; (800442c <HAL_RCC_GetSysClockFreq+0x114>)
 800439e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b0c      	cmp	r3, #12
 80043a4:	d134      	bne.n	8004410 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043a6:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d003      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0xa6>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d003      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0xac>
 80043bc:	e005      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043be:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <HAL_RCC_GetSysClockFreq+0x110>)
 80043c0:	617b      	str	r3, [r7, #20]
      break;
 80043c2:	e005      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043c4:	4b19      	ldr	r3, [pc, #100]	; (800442c <HAL_RCC_GetSysClockFreq+0x114>)
 80043c6:	617b      	str	r3, [r7, #20]
      break;
 80043c8:	e002      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	617b      	str	r3, [r7, #20]
      break;
 80043ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	3301      	adds	r3, #1
 80043dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	0a1b      	lsrs	r3, r3, #8
 80043e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	fb03 f202 	mul.w	r2, r3, r2
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	0e5b      	lsrs	r3, r3, #25
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	3301      	adds	r3, #1
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004410:	69bb      	ldr	r3, [r7, #24]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3724      	adds	r7, #36	; 0x24
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000
 8004424:	0800575c 	.word	0x0800575c
 8004428:	00f42400 	.word	0x00f42400
 800442c:	007a1200 	.word	0x007a1200

08004430 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004434:	4b03      	ldr	r3, [pc, #12]	; (8004444 <HAL_RCC_GetHCLKFreq+0x14>)
 8004436:	681b      	ldr	r3, [r3, #0]
}
 8004438:	4618      	mov	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000000 	.word	0x20000000

08004448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800444c:	f7ff fff0 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	0adb      	lsrs	r3, r3, #11
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4904      	ldr	r1, [pc, #16]	; (8004470 <HAL_RCC_GetPCLK2Freq+0x28>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40021000 	.word	0x40021000
 8004470:	08005754 	.word	0x08005754

08004474 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	220f      	movs	r2, #15
 8004482:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004484:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0203 	and.w	r2, r3, #3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004490:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800449c:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <HAL_RCC_GetClockConfig+0x5c>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <HAL_RCC_GetClockConfig+0x5c>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	08db      	lsrs	r3, r3, #3
 80044ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80044b6:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <HAL_RCC_GetClockConfig+0x60>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 020f 	and.w	r2, r3, #15
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	601a      	str	r2, [r3, #0]
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40022000 	.word	0x40022000

080044d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044e0:	2300      	movs	r3, #0
 80044e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044e4:	4b27      	ldr	r3, [pc, #156]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044f0:	f7ff f898 	bl	8003624 <HAL_PWREx_GetVoltageRange>
 80044f4:	6178      	str	r0, [r7, #20]
 80044f6:	e014      	b.n	8004522 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044f8:	4b22      	ldr	r3, [pc, #136]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	4a21      	ldr	r2, [pc, #132]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004502:	6593      	str	r3, [r2, #88]	; 0x58
 8004504:	4b1f      	ldr	r3, [pc, #124]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004510:	f7ff f888 	bl	8003624 <HAL_PWREx_GetVoltageRange>
 8004514:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004516:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451a:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800451c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004520:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004528:	d10b      	bne.n	8004542 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b80      	cmp	r3, #128	; 0x80
 800452e:	d913      	bls.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2ba0      	cmp	r3, #160	; 0xa0
 8004534:	d902      	bls.n	800453c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004536:	2302      	movs	r3, #2
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	e00d      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800453c:	2301      	movs	r3, #1
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	e00a      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b7f      	cmp	r3, #127	; 0x7f
 8004546:	d902      	bls.n	800454e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004548:	2302      	movs	r3, #2
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	e004      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b70      	cmp	r3, #112	; 0x70
 8004552:	d101      	bne.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004554:	2301      	movs	r3, #1
 8004556:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f023 020f 	bic.w	r2, r3, #15
 8004560:	4909      	ldr	r1, [pc, #36]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	429a      	cmp	r2, r3
 8004574:	d001      	beq.n	800457a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000
 8004588:	40022000 	.word	0x40022000

0800458c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004592:	4b2d      	ldr	r3, [pc, #180]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d00b      	beq.n	80045ba <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d825      	bhi.n	80045f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d008      	beq.n	80045c0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d11f      	bne.n	80045f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80045b4:	4b25      	ldr	r3, [pc, #148]	; (800464c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80045b6:	613b      	str	r3, [r7, #16]
    break;
 80045b8:	e01f      	b.n	80045fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80045ba:	4b25      	ldr	r3, [pc, #148]	; (8004650 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80045bc:	613b      	str	r3, [r7, #16]
    break;
 80045be:	e01c      	b.n	80045fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045c0:	4b21      	ldr	r3, [pc, #132]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d107      	bne.n	80045dc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045cc:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	e005      	b.n	80045e8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	091b      	lsrs	r3, r3, #4
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80045e8:	4a1a      	ldr	r2, [pc, #104]	; (8004654 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f0:	613b      	str	r3, [r7, #16]
    break;
 80045f2:	e002      	b.n	80045fa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	613b      	str	r3, [r7, #16]
    break;
 80045f8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045fa:	4b13      	ldr	r3, [pc, #76]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	091b      	lsrs	r3, r3, #4
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	3301      	adds	r3, #1
 8004606:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	0a1b      	lsrs	r3, r3, #8
 800460e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	fb03 f202 	mul.w	r2, r3, r2
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	fbb2 f3f3 	udiv	r3, r2, r3
 800461e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004620:	4b09      	ldr	r3, [pc, #36]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	0e5b      	lsrs	r3, r3, #25
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	3301      	adds	r3, #1
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800463a:	683b      	ldr	r3, [r7, #0]
}
 800463c:	4618      	mov	r0, r3
 800463e:	371c      	adds	r7, #28
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	40021000 	.word	0x40021000
 800464c:	00f42400 	.word	0x00f42400
 8004650:	007a1200 	.word	0x007a1200
 8004654:	0800575c 	.word	0x0800575c

08004658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004660:	2300      	movs	r3, #0
 8004662:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004664:	2300      	movs	r3, #0
 8004666:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004670:	2b00      	cmp	r3, #0
 8004672:	d040      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004678:	2b80      	cmp	r3, #128	; 0x80
 800467a:	d02a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d825      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004680:	2b60      	cmp	r3, #96	; 0x60
 8004682:	d026      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004684:	2b60      	cmp	r3, #96	; 0x60
 8004686:	d821      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d006      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d81d      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d009      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004694:	2b20      	cmp	r3, #32
 8004696:	d010      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004698:	e018      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800469a:	4b89      	ldr	r3, [pc, #548]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	4a88      	ldr	r2, [pc, #544]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046a6:	e015      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3304      	adds	r3, #4
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fb3e 	bl	8004d30 <RCCEx_PLLSAI1_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046b8:	e00c      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3320      	adds	r3, #32
 80046be:	2100      	movs	r1, #0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fc29 	bl	8004f18 <RCCEx_PLLSAI2_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046ca:	e003      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	74fb      	strb	r3, [r7, #19]
      break;
 80046d0:	e000      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80046d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046da:	4b79      	ldr	r3, [pc, #484]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046e0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e8:	4975      	ldr	r1, [pc, #468]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80046f0:	e001      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f2:	7cfb      	ldrb	r3, [r7, #19]
 80046f4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d047      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470a:	d030      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800470c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004710:	d82a      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004716:	d02a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800471c:	d824      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800471e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004722:	d008      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004728:	d81e      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800472e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004732:	d010      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004734:	e018      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004736:	4b62      	ldr	r3, [pc, #392]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	4a61      	ldr	r2, [pc, #388]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800473c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004740:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004742:	e015      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f000 faf0 	bl	8004d30 <RCCEx_PLLSAI1_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004754:	e00c      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3320      	adds	r3, #32
 800475a:	2100      	movs	r1, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fbdb 	bl	8004f18 <RCCEx_PLLSAI2_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004766:	e003      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	74fb      	strb	r3, [r7, #19]
      break;
 800476c:	e000      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800476e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10b      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004776:	4b52      	ldr	r3, [pc, #328]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004778:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800477c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	494e      	ldr	r1, [pc, #312]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800478c:	e001      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 809f 	beq.w	80048de <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a0:	2300      	movs	r3, #0
 80047a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047a4:	4b46      	ldr	r3, [pc, #280]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80047b4:	2300      	movs	r3, #0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047be:	4a40      	ldr	r2, [pc, #256]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c4:	6593      	str	r3, [r2, #88]	; 0x58
 80047c6:	4b3e      	ldr	r3, [pc, #248]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d2:	2301      	movs	r3, #1
 80047d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d6:	4b3b      	ldr	r3, [pc, #236]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a3a      	ldr	r2, [pc, #232]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047e2:	f7fc fba1 	bl	8000f28 <HAL_GetTick>
 80047e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047e8:	e009      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ea:	f7fc fb9d 	bl	8000f28 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d902      	bls.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	74fb      	strb	r3, [r7, #19]
        break;
 80047fc:	e005      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047fe:	4b31      	ldr	r3, [pc, #196]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0ef      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d15b      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004810:	4b2b      	ldr	r3, [pc, #172]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01f      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	429a      	cmp	r2, r3
 800482c:	d019      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800482e:	4b24      	ldr	r3, [pc, #144]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004838:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800483a:	4b21      	ldr	r3, [pc, #132]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	4a1f      	ldr	r2, [pc, #124]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800484a:	4b1d      	ldr	r3, [pc, #116]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800484c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004850:	4a1b      	ldr	r2, [pc, #108]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800485a:	4a19      	ldr	r2, [pc, #100]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d016      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fc fb5c 	bl	8000f28 <HAL_GetTick>
 8004870:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004872:	e00b      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004874:	f7fc fb58 	bl	8000f28 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d902      	bls.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	74fb      	strb	r3, [r7, #19]
            break;
 800488a:	e006      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800488c:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0ec      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800489a:	7cfb      	ldrb	r3, [r7, #19]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10c      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048a0:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b0:	4903      	ldr	r1, [pc, #12]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048b8:	e008      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048ba:	7cfb      	ldrb	r3, [r7, #19]
 80048bc:	74bb      	strb	r3, [r7, #18]
 80048be:	e005      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c8:	7cfb      	ldrb	r3, [r7, #19]
 80048ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048cc:	7c7b      	ldrb	r3, [r7, #17]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d105      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d2:	4ba0      	ldr	r3, [pc, #640]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d6:	4a9f      	ldr	r2, [pc, #636]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ea:	4b9a      	ldr	r3, [pc, #616]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	f023 0203 	bic.w	r2, r3, #3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f8:	4996      	ldr	r1, [pc, #600]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800490c:	4b91      	ldr	r3, [pc, #580]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f023 020c 	bic.w	r2, r3, #12
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	498e      	ldr	r1, [pc, #568]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800492e:	4b89      	ldr	r3, [pc, #548]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493c:	4985      	ldr	r1, [pc, #532]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004950:	4b80      	ldr	r3, [pc, #512]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495e:	497d      	ldr	r1, [pc, #500]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004972:	4b78      	ldr	r3, [pc, #480]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004980:	4974      	ldr	r1, [pc, #464]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004994:	4b6f      	ldr	r3, [pc, #444]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a2:	496c      	ldr	r1, [pc, #432]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049b6:	4b67      	ldr	r3, [pc, #412]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049c4:	4963      	ldr	r1, [pc, #396]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049d8:	4b5e      	ldr	r3, [pc, #376]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e6:	495b      	ldr	r1, [pc, #364]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049fa:	4b56      	ldr	r3, [pc, #344]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a08:	4952      	ldr	r1, [pc, #328]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a1c:	4b4d      	ldr	r3, [pc, #308]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2a:	494a      	ldr	r1, [pc, #296]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a3e:	4b45      	ldr	r3, [pc, #276]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4c:	4941      	ldr	r1, [pc, #260]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a60:	4b3c      	ldr	r3, [pc, #240]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a66:	f023 0203 	bic.w	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a6e:	4939      	ldr	r1, [pc, #228]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d028      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a82:	4b34      	ldr	r3, [pc, #208]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a90:	4930      	ldr	r1, [pc, #192]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa0:	d106      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa2:	4b2c      	ldr	r3, [pc, #176]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	4a2b      	ldr	r2, [pc, #172]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aac:	60d3      	str	r3, [r2, #12]
 8004aae:	e011      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3304      	adds	r3, #4
 8004abe:	2101      	movs	r1, #1
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 f935 	bl	8004d30 <RCCEx_PLLSAI1_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004aca:	7cfb      	ldrb	r3, [r7, #19]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d04d      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae8:	d108      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004aea:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004af0:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004af6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004afa:	e012      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004afc:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b02:	4a14      	ldr	r2, [pc, #80]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004b0c:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b1a:	490e      	ldr	r1, [pc, #56]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b2a:	d106      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	4a08      	ldr	r2, [pc, #32]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b36:	60d3      	str	r3, [r2, #12]
 8004b38:	e020      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b42:	d109      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4a02      	ldr	r2, [pc, #8]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4e:	60d3      	str	r3, [r2, #12]
 8004b50:	e014      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b60:	d10c      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3304      	adds	r3, #4
 8004b66:	2101      	movs	r1, #1
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 f8e1 	bl	8004d30 <RCCEx_PLLSAI1_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b72:	7cfb      	ldrb	r3, [r7, #19]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d028      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b88:	4b68      	ldr	r3, [pc, #416]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b96:	4965      	ldr	r1, [pc, #404]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba8:	4b60      	ldr	r3, [pc, #384]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4a5f      	ldr	r2, [pc, #380]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bb2:	60d3      	str	r3, [r2, #12]
 8004bb4:	e011      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bbe:	d10c      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f8b2 	bl	8004d30 <RCCEx_PLLSAI1_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bd0:	7cfb      	ldrb	r3, [r7, #19]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004bd6:	7cfb      	ldrb	r3, [r7, #19]
 8004bd8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01e      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004be6:	4b51      	ldr	r3, [pc, #324]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bf6:	494d      	ldr	r1, [pc, #308]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	2102      	movs	r1, #2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f88d 	bl	8004d30 <RCCEx_PLLSAI1_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004c20:	7cfb      	ldrb	r3, [r7, #19]
 8004c22:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00b      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c30:	4b3e      	ldr	r3, [pc, #248]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c36:	f023 0204 	bic.w	r2, r3, #4
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c40:	493a      	ldr	r1, [pc, #232]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00b      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c54:	4b35      	ldr	r3, [pc, #212]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c5a:	f023 0218 	bic.w	r2, r3, #24
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c64:	4931      	ldr	r1, [pc, #196]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d035      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c78:	4b2c      	ldr	r3, [pc, #176]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a2b      	ldr	r2, [pc, #172]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c84:	f7fc f950 	bl	8000f28 <HAL_GetTick>
 8004c88:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c8a:	e009      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c8c:	f7fc f94c 	bl	8000f28 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d902      	bls.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	74fb      	strb	r3, [r7, #19]
        break;
 8004c9e:	e005      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ca0:	4b22      	ldr	r3, [pc, #136]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1ef      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004cac:	7cfb      	ldrb	r3, [r7, #19]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d113      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004cb2:	4b1e      	ldr	r3, [pc, #120]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cc2:	491a      	ldr	r1, [pc, #104]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3320      	adds	r3, #32
 8004cce:	2102      	movs	r1, #2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 f921 	bl	8004f18 <RCCEx_PLLSAI2_Config>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004cda:	7cfb      	ldrb	r3, [r7, #19]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004ce0:	7cfb      	ldrb	r3, [r7, #19]
 8004ce2:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d017      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004cf0:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d00:	490a      	ldr	r1, [pc, #40]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d12:	d105      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d20:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40021000 	.word	0x40021000

08004d30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d3e:	4b72      	ldr	r3, [pc, #456]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00e      	beq.n	8004d68 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d4a:	4b6f      	ldr	r3, [pc, #444]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f003 0203 	and.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d103      	bne.n	8004d62 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
       ||
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d142      	bne.n	8004de8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	73fb      	strb	r3, [r7, #15]
 8004d66:	e03f      	b.n	8004de8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d018      	beq.n	8004da2 <RCCEx_PLLSAI1_Config+0x72>
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d825      	bhi.n	8004dc0 <RCCEx_PLLSAI1_Config+0x90>
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d002      	beq.n	8004d7e <RCCEx_PLLSAI1_Config+0x4e>
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d009      	beq.n	8004d90 <RCCEx_PLLSAI1_Config+0x60>
 8004d7c:	e020      	b.n	8004dc0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d7e:	4b62      	ldr	r3, [pc, #392]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d11d      	bne.n	8004dc6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d8e:	e01a      	b.n	8004dc6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d90:	4b5d      	ldr	r3, [pc, #372]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d116      	bne.n	8004dca <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004da0:	e013      	b.n	8004dca <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004da2:	4b59      	ldr	r3, [pc, #356]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10f      	bne.n	8004dce <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dae:	4b56      	ldr	r3, [pc, #344]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d109      	bne.n	8004dce <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dbe:	e006      	b.n	8004dce <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc4:	e004      	b.n	8004dd0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004dc6:	bf00      	nop
 8004dc8:	e002      	b.n	8004dd0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004dca:	bf00      	nop
 8004dcc:	e000      	b.n	8004dd0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004dce:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d108      	bne.n	8004de8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004dd6:	4b4c      	ldr	r3, [pc, #304]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f023 0203 	bic.w	r2, r3, #3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4949      	ldr	r1, [pc, #292]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f040 8086 	bne.w	8004efc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004df0:	4b45      	ldr	r3, [pc, #276]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a44      	ldr	r2, [pc, #272]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004df6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dfc:	f7fc f894 	bl	8000f28 <HAL_GetTick>
 8004e00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e02:	e009      	b.n	8004e18 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e04:	f7fc f890 	bl	8000f28 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d902      	bls.n	8004e18 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	73fb      	strb	r3, [r7, #15]
        break;
 8004e16:	e005      	b.n	8004e24 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e18:	4b3b      	ldr	r3, [pc, #236]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1ef      	bne.n	8004e04 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d168      	bne.n	8004efc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d113      	bne.n	8004e58 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e30:	4b35      	ldr	r3, [pc, #212]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	4b35      	ldr	r3, [pc, #212]	; (8004f0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6892      	ldr	r2, [r2, #8]
 8004e3c:	0211      	lsls	r1, r2, #8
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	68d2      	ldr	r2, [r2, #12]
 8004e42:	06d2      	lsls	r2, r2, #27
 8004e44:	4311      	orrs	r1, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6852      	ldr	r2, [r2, #4]
 8004e4a:	3a01      	subs	r2, #1
 8004e4c:	0112      	lsls	r2, r2, #4
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	492d      	ldr	r1, [pc, #180]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	610b      	str	r3, [r1, #16]
 8004e56:	e02d      	b.n	8004eb4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d115      	bne.n	8004e8a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e5e:	4b2a      	ldr	r3, [pc, #168]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	4b2b      	ldr	r3, [pc, #172]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6892      	ldr	r2, [r2, #8]
 8004e6a:	0211      	lsls	r1, r2, #8
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6912      	ldr	r2, [r2, #16]
 8004e70:	0852      	lsrs	r2, r2, #1
 8004e72:	3a01      	subs	r2, #1
 8004e74:	0552      	lsls	r2, r2, #21
 8004e76:	4311      	orrs	r1, r2
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6852      	ldr	r2, [r2, #4]
 8004e7c:	3a01      	subs	r2, #1
 8004e7e:	0112      	lsls	r2, r2, #4
 8004e80:	430a      	orrs	r2, r1
 8004e82:	4921      	ldr	r1, [pc, #132]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	610b      	str	r3, [r1, #16]
 8004e88:	e014      	b.n	8004eb4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e8a:	4b1f      	ldr	r3, [pc, #124]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	4b21      	ldr	r3, [pc, #132]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6892      	ldr	r2, [r2, #8]
 8004e96:	0211      	lsls	r1, r2, #8
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6952      	ldr	r2, [r2, #20]
 8004e9c:	0852      	lsrs	r2, r2, #1
 8004e9e:	3a01      	subs	r2, #1
 8004ea0:	0652      	lsls	r2, r2, #25
 8004ea2:	4311      	orrs	r1, r2
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6852      	ldr	r2, [r2, #4]
 8004ea8:	3a01      	subs	r2, #1
 8004eaa:	0112      	lsls	r2, r2, #4
 8004eac:	430a      	orrs	r2, r1
 8004eae:	4916      	ldr	r1, [pc, #88]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004eb4:	4b14      	ldr	r3, [pc, #80]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a13      	ldr	r2, [pc, #76]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ebe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7fc f832 	bl	8000f28 <HAL_GetTick>
 8004ec4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ec6:	e009      	b.n	8004edc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ec8:	f7fc f82e 	bl	8000f28 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d902      	bls.n	8004edc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	73fb      	strb	r3, [r7, #15]
          break;
 8004eda:	e005      	b.n	8004ee8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004edc:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0ef      	beq.n	8004ec8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004eee:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	4904      	ldr	r1, [pc, #16]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	07ff800f 	.word	0x07ff800f
 8004f10:	ff9f800f 	.word	0xff9f800f
 8004f14:	f9ff800f 	.word	0xf9ff800f

08004f18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f26:	4b72      	ldr	r3, [pc, #456]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00e      	beq.n	8004f50 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f32:	4b6f      	ldr	r3, [pc, #444]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0203 	and.w	r2, r3, #3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d103      	bne.n	8004f4a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
       ||
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d142      	bne.n	8004fd0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	73fb      	strb	r3, [r7, #15]
 8004f4e:	e03f      	b.n	8004fd0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d018      	beq.n	8004f8a <RCCEx_PLLSAI2_Config+0x72>
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d825      	bhi.n	8004fa8 <RCCEx_PLLSAI2_Config+0x90>
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d002      	beq.n	8004f66 <RCCEx_PLLSAI2_Config+0x4e>
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d009      	beq.n	8004f78 <RCCEx_PLLSAI2_Config+0x60>
 8004f64:	e020      	b.n	8004fa8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f66:	4b62      	ldr	r3, [pc, #392]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d11d      	bne.n	8004fae <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f76:	e01a      	b.n	8004fae <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f78:	4b5d      	ldr	r3, [pc, #372]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d116      	bne.n	8004fb2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f88:	e013      	b.n	8004fb2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f8a:	4b59      	ldr	r3, [pc, #356]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10f      	bne.n	8004fb6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f96:	4b56      	ldr	r3, [pc, #344]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fa6:	e006      	b.n	8004fb6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
      break;
 8004fac:	e004      	b.n	8004fb8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e002      	b.n	8004fb8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004fb2:	bf00      	nop
 8004fb4:	e000      	b.n	8004fb8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004fb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d108      	bne.n	8004fd0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004fbe:	4b4c      	ldr	r3, [pc, #304]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f023 0203 	bic.w	r2, r3, #3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4949      	ldr	r1, [pc, #292]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f040 8086 	bne.w	80050e4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004fd8:	4b45      	ldr	r3, [pc, #276]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a44      	ldr	r2, [pc, #272]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe4:	f7fb ffa0 	bl	8000f28 <HAL_GetTick>
 8004fe8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fea:	e009      	b.n	8005000 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fec:	f7fb ff9c 	bl	8000f28 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d902      	bls.n	8005000 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	73fb      	strb	r3, [r7, #15]
        break;
 8004ffe:	e005      	b.n	800500c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005000:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1ef      	bne.n	8004fec <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d168      	bne.n	80050e4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d113      	bne.n	8005040 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005018:	4b35      	ldr	r3, [pc, #212]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800501a:	695a      	ldr	r2, [r3, #20]
 800501c:	4b35      	ldr	r3, [pc, #212]	; (80050f4 <RCCEx_PLLSAI2_Config+0x1dc>)
 800501e:	4013      	ands	r3, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6892      	ldr	r2, [r2, #8]
 8005024:	0211      	lsls	r1, r2, #8
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68d2      	ldr	r2, [r2, #12]
 800502a:	06d2      	lsls	r2, r2, #27
 800502c:	4311      	orrs	r1, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6852      	ldr	r2, [r2, #4]
 8005032:	3a01      	subs	r2, #1
 8005034:	0112      	lsls	r2, r2, #4
 8005036:	430a      	orrs	r2, r1
 8005038:	492d      	ldr	r1, [pc, #180]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800503a:	4313      	orrs	r3, r2
 800503c:	614b      	str	r3, [r1, #20]
 800503e:	e02d      	b.n	800509c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d115      	bne.n	8005072 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005046:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	4b2b      	ldr	r3, [pc, #172]	; (80050f8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800504c:	4013      	ands	r3, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6892      	ldr	r2, [r2, #8]
 8005052:	0211      	lsls	r1, r2, #8
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6912      	ldr	r2, [r2, #16]
 8005058:	0852      	lsrs	r2, r2, #1
 800505a:	3a01      	subs	r2, #1
 800505c:	0552      	lsls	r2, r2, #21
 800505e:	4311      	orrs	r1, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6852      	ldr	r2, [r2, #4]
 8005064:	3a01      	subs	r2, #1
 8005066:	0112      	lsls	r2, r2, #4
 8005068:	430a      	orrs	r2, r1
 800506a:	4921      	ldr	r1, [pc, #132]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800506c:	4313      	orrs	r3, r2
 800506e:	614b      	str	r3, [r1, #20]
 8005070:	e014      	b.n	800509c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005072:	4b1f      	ldr	r3, [pc, #124]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005074:	695a      	ldr	r2, [r3, #20]
 8005076:	4b21      	ldr	r3, [pc, #132]	; (80050fc <RCCEx_PLLSAI2_Config+0x1e4>)
 8005078:	4013      	ands	r3, r2
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6892      	ldr	r2, [r2, #8]
 800507e:	0211      	lsls	r1, r2, #8
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6952      	ldr	r2, [r2, #20]
 8005084:	0852      	lsrs	r2, r2, #1
 8005086:	3a01      	subs	r2, #1
 8005088:	0652      	lsls	r2, r2, #25
 800508a:	4311      	orrs	r1, r2
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6852      	ldr	r2, [r2, #4]
 8005090:	3a01      	subs	r2, #1
 8005092:	0112      	lsls	r2, r2, #4
 8005094:	430a      	orrs	r2, r1
 8005096:	4916      	ldr	r1, [pc, #88]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005098:	4313      	orrs	r3, r2
 800509a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800509c:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a8:	f7fb ff3e 	bl	8000f28 <HAL_GetTick>
 80050ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050ae:	e009      	b.n	80050c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050b0:	f7fb ff3a 	bl	8000f28 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d902      	bls.n	80050c4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	73fb      	strb	r3, [r7, #15]
          break;
 80050c2:	e005      	b.n	80050d0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050c4:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ef      	beq.n	80050b0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050d8:	695a      	ldr	r2, [r3, #20]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	4904      	ldr	r1, [pc, #16]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000
 80050f4:	07ff800f 	.word	0x07ff800f
 80050f8:	ff9f800f 	.word	0xff9f800f
 80050fc:	f9ff800f 	.word	0xf9ff800f

08005100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e049      	b.n	80051a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f841 	bl	80051ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f000 f9f8 	bl	8005534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
	...

080051c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d001      	beq.n	80051dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e04f      	b.n	800527c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a23      	ldr	r2, [pc, #140]	; (8005288 <HAL_TIM_Base_Start_IT+0xc4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01d      	beq.n	800523a <HAL_TIM_Base_Start_IT+0x76>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005206:	d018      	beq.n	800523a <HAL_TIM_Base_Start_IT+0x76>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1f      	ldr	r2, [pc, #124]	; (800528c <HAL_TIM_Base_Start_IT+0xc8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_TIM_Base_Start_IT+0x76>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <HAL_TIM_Base_Start_IT+0xcc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00e      	beq.n	800523a <HAL_TIM_Base_Start_IT+0x76>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1c      	ldr	r2, [pc, #112]	; (8005294 <HAL_TIM_Base_Start_IT+0xd0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_TIM_Base_Start_IT+0x76>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <HAL_TIM_Base_Start_IT+0xd4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_TIM_Base_Start_IT+0x76>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a19      	ldr	r2, [pc, #100]	; (800529c <HAL_TIM_Base_Start_IT+0xd8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d115      	bne.n	8005266 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005242:	4013      	ands	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b06      	cmp	r3, #6
 800524a:	d015      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0xb4>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005252:	d011      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0201 	orr.w	r2, r2, #1
 8005262:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005264:	e008      	b.n	8005278 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0201 	orr.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	e000      	b.n	800527a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005278:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40000400 	.word	0x40000400
 8005290:	40000800 	.word	0x40000800
 8005294:	40000c00 	.word	0x40000c00
 8005298:	40013400 	.word	0x40013400
 800529c:	40014000 	.word	0x40014000
 80052a0:	00010007 	.word	0x00010007

080052a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d122      	bne.n	8005300 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d11b      	bne.n	8005300 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0202 	mvn.w	r2, #2
 80052d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f905 	bl	80054f6 <HAL_TIM_IC_CaptureCallback>
 80052ec:	e005      	b.n	80052fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f8f7 	bl	80054e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f908 	bl	800550a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b04      	cmp	r3, #4
 800530c:	d122      	bne.n	8005354 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b04      	cmp	r3, #4
 800531a:	d11b      	bne.n	8005354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0204 	mvn.w	r2, #4
 8005324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f8db 	bl	80054f6 <HAL_TIM_IC_CaptureCallback>
 8005340:	e005      	b.n	800534e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f8cd 	bl	80054e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f8de 	bl	800550a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	2b08      	cmp	r3, #8
 8005360:	d122      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b08      	cmp	r3, #8
 800536e:	d11b      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0208 	mvn.w	r2, #8
 8005378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2204      	movs	r2, #4
 800537e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f8b1 	bl	80054f6 <HAL_TIM_IC_CaptureCallback>
 8005394:	e005      	b.n	80053a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f8a3 	bl	80054e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f8b4 	bl	800550a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2b10      	cmp	r3, #16
 80053b4:	d122      	bne.n	80053fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d11b      	bne.n	80053fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0210 	mvn.w	r2, #16
 80053cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2208      	movs	r2, #8
 80053d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f887 	bl	80054f6 <HAL_TIM_IC_CaptureCallback>
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f879 	bl	80054e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f88a 	bl	800550a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b01      	cmp	r3, #1
 8005408:	d10e      	bne.n	8005428 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b01      	cmp	r3, #1
 8005416:	d107      	bne.n	8005428 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0201 	mvn.w	r2, #1
 8005420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7fb f952 	bl	80006cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005432:	2b80      	cmp	r3, #128	; 0x80
 8005434:	d10e      	bne.n	8005454 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005440:	2b80      	cmp	r3, #128	; 0x80
 8005442:	d107      	bne.n	8005454 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800544c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f914 	bl	800567c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005462:	d10e      	bne.n	8005482 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546e:	2b80      	cmp	r3, #128	; 0x80
 8005470:	d107      	bne.n	8005482 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800547a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f907 	bl	8005690 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b40      	cmp	r3, #64	; 0x40
 800548e:	d10e      	bne.n	80054ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549a:	2b40      	cmp	r3, #64	; 0x40
 800549c:	d107      	bne.n	80054ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f838 	bl	800551e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d10e      	bne.n	80054da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d107      	bne.n	80054da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f06f 0220 	mvn.w	r2, #32
 80054d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f8c7 	bl	8005668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
	...

08005534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a40      	ldr	r2, [pc, #256]	; (8005648 <TIM_Base_SetConfig+0x114>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d013      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005552:	d00f      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a3d      	ldr	r2, [pc, #244]	; (800564c <TIM_Base_SetConfig+0x118>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00b      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a3c      	ldr	r2, [pc, #240]	; (8005650 <TIM_Base_SetConfig+0x11c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a3b      	ldr	r2, [pc, #236]	; (8005654 <TIM_Base_SetConfig+0x120>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a3a      	ldr	r2, [pc, #232]	; (8005658 <TIM_Base_SetConfig+0x124>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d108      	bne.n	8005586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2f      	ldr	r2, [pc, #188]	; (8005648 <TIM_Base_SetConfig+0x114>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d01f      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005594:	d01b      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a2c      	ldr	r2, [pc, #176]	; (800564c <TIM_Base_SetConfig+0x118>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d017      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a2b      	ldr	r2, [pc, #172]	; (8005650 <TIM_Base_SetConfig+0x11c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a2a      	ldr	r2, [pc, #168]	; (8005654 <TIM_Base_SetConfig+0x120>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00f      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a29      	ldr	r2, [pc, #164]	; (8005658 <TIM_Base_SetConfig+0x124>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00b      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a28      	ldr	r2, [pc, #160]	; (800565c <TIM_Base_SetConfig+0x128>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d007      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a27      	ldr	r2, [pc, #156]	; (8005660 <TIM_Base_SetConfig+0x12c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a26      	ldr	r2, [pc, #152]	; (8005664 <TIM_Base_SetConfig+0x130>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d108      	bne.n	80055e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a10      	ldr	r2, [pc, #64]	; (8005648 <TIM_Base_SetConfig+0x114>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00f      	beq.n	800562c <TIM_Base_SetConfig+0xf8>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a12      	ldr	r2, [pc, #72]	; (8005658 <TIM_Base_SetConfig+0x124>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00b      	beq.n	800562c <TIM_Base_SetConfig+0xf8>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a11      	ldr	r2, [pc, #68]	; (800565c <TIM_Base_SetConfig+0x128>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d007      	beq.n	800562c <TIM_Base_SetConfig+0xf8>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a10      	ldr	r2, [pc, #64]	; (8005660 <TIM_Base_SetConfig+0x12c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_Base_SetConfig+0xf8>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a0f      	ldr	r2, [pc, #60]	; (8005664 <TIM_Base_SetConfig+0x130>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d103      	bne.n	8005634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	615a      	str	r2, [r3, #20]
}
 800563a:	bf00      	nop
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40000400 	.word	0x40000400
 8005650:	40000800 	.word	0x40000800
 8005654:	40000c00 	.word	0x40000c00
 8005658:	40013400 	.word	0x40013400
 800565c:	40014000 	.word	0x40014000
 8005660:	40014400 	.word	0x40014400
 8005664:	40014800 	.word	0x40014800

08005668 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <__libc_init_array>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	4d0d      	ldr	r5, [pc, #52]	; (80056dc <__libc_init_array+0x38>)
 80056a8:	4c0d      	ldr	r4, [pc, #52]	; (80056e0 <__libc_init_array+0x3c>)
 80056aa:	1b64      	subs	r4, r4, r5
 80056ac:	10a4      	asrs	r4, r4, #2
 80056ae:	2600      	movs	r6, #0
 80056b0:	42a6      	cmp	r6, r4
 80056b2:	d109      	bne.n	80056c8 <__libc_init_array+0x24>
 80056b4:	4d0b      	ldr	r5, [pc, #44]	; (80056e4 <__libc_init_array+0x40>)
 80056b6:	4c0c      	ldr	r4, [pc, #48]	; (80056e8 <__libc_init_array+0x44>)
 80056b8:	f000 f820 	bl	80056fc <_init>
 80056bc:	1b64      	subs	r4, r4, r5
 80056be:	10a4      	asrs	r4, r4, #2
 80056c0:	2600      	movs	r6, #0
 80056c2:	42a6      	cmp	r6, r4
 80056c4:	d105      	bne.n	80056d2 <__libc_init_array+0x2e>
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056cc:	4798      	blx	r3
 80056ce:	3601      	adds	r6, #1
 80056d0:	e7ee      	b.n	80056b0 <__libc_init_array+0xc>
 80056d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d6:	4798      	blx	r3
 80056d8:	3601      	adds	r6, #1
 80056da:	e7f2      	b.n	80056c2 <__libc_init_array+0x1e>
 80056dc:	0800578c 	.word	0x0800578c
 80056e0:	0800578c 	.word	0x0800578c
 80056e4:	0800578c 	.word	0x0800578c
 80056e8:	08005790 	.word	0x08005790

080056ec <memset>:
 80056ec:	4402      	add	r2, r0
 80056ee:	4603      	mov	r3, r0
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d100      	bne.n	80056f6 <memset+0xa>
 80056f4:	4770      	bx	lr
 80056f6:	f803 1b01 	strb.w	r1, [r3], #1
 80056fa:	e7f9      	b.n	80056f0 <memset+0x4>

080056fc <_init>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	bf00      	nop
 8005700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005702:	bc08      	pop	{r3}
 8005704:	469e      	mov	lr, r3
 8005706:	4770      	bx	lr

08005708 <_fini>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	bf00      	nop
 800570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570e:	bc08      	pop	{r3}
 8005710:	469e      	mov	lr, r3
 8005712:	4770      	bx	lr
